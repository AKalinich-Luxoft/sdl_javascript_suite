!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).SDL=t()}(this,function(){"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var AppConfig=function(){function e(){_classCallCheck(this,e),this._transportConfig=null,this._appId=null,this._appName=null,this._iconName=null,this._iconFile=null,this._shortAppName=null,this._ttsName=null,this._vrSynonyms=null,this._isMediaApp=null,this._languageDesired=null,this._hmiDisplayLanguageDesired=null,this._appTypes=null,this._dayColorScheme=null,this._nightColorScheme=null,this._minimumRPCVersion=null,this._minimumProtocolVersion=null}return _createClass(e,[{key:"setTransportConfig",value:function(e){return this._transportConfig=e,this}},{key:"getTransportConfig",value:function(){return this._transportConfig}},{key:"setAppId",value:function(e){return this._appId=e,this}},{key:"getAppId",value:function(){return this._appId}},{key:"setAppName",value:function(e){return this._appName=e,this}},{key:"getAppName",value:function(){return this._appName}},{key:"setAppIcon",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:"icon.png",r=1<arguments.length?t:void 0;return this._iconName=n,this._iconFile=r,this}},{key:"getAppIconName",value:function(){return this._iconName}},{key:"getAppIconFileData",value:function(){return this._iconFile}},{key:"setShortAppName",value:function(e){return this._shortAppName=e,this}},{key:"getShortAppName",value:function(){return this._shortAppName}},{key:"setTtsName",value:function(e){return this._ttsName=e,this}},{key:"getTtsName",value:function(){return this._ttsName}},{key:"setVrSynonyms",value:function(e){return this._vrSynonyms=e,this}},{key:"getVrSynonyms",value:function(){return this._vrSynonyms}},{key:"setIsMediaApp",value:function(e){return this._isMediaApp=e,this}},{key:"isMediaApp",value:function(){return this._isMediaApp}},{key:"setLanguageDesired",value:function(e){return this._languageDesired=e,this}},{key:"getLanguageDesired",value:function(){return this._languageDesired}},{key:"setHmiDisplayLanguageDesired",value:function(e){return this._hmiDisplayLanguageDesired=e,this}},{key:"getHmiDisplayLanguageDesired",value:function(){return this._hmiDisplayLanguageDesired}},{key:"setAppTypes",value:function(e){return this._appTypes=e,this}},{key:"getAppTypes",value:function(){return this._appTypes}},{key:"setDayColorScheme",value:function(e){return this._dayColorScheme=e,this}},{key:"getDayColorScheme",value:function(){return this._dayColorScheme}},{key:"setNightColorScheme",value:function(e){return this._nightColorScheme=e,this}},{key:"getNightColorScheme",value:function(){return this._nightColorScheme}},{key:"setMinimumRPCVersion",value:function(e){return this._minimumRPCVersion=e,this}},{key:"getMinimumRPCVersion",value:function(){return this._minimumRPCVersion}},{key:"setMinimumProtocolVersion",value:function(e){return this._minimumProtocolVersion=e,this}},{key:"getMinimumProtocolVersion",value:function(){return this._minimumProtocolVersion}}]),e}(),LifecycleListener=function(){function e(){_classCallCheck(this,e),this._onProxyConnected=null,this._onProxyClosed=null,this._onServiceStarted=null,this._onServiceEnded=null,this._onError=null}return _createClass(e,[{key:"setOnProxyConnected",value:function(e){this._onProxyConnected=e}},{key:"setOnProxyClosed",value:function(e){this._onProxyClosed=e}},{key:"setOnServiceStarted",value:function(e){this._onServiceStarted=e}},{key:"setOnServiceEnded",value:function(e){this._onServiceEnded=e}},{key:"setOnError",value:function(e){this._onError=e}},{key:"onProxyConnected",value:function(e){"function"==typeof this._onProxyConnected&&this._onProxyConnected(e)}},{key:"onProxyClosed",value:function(e,t,n){"function"==typeof this._onProxyClosed&&this._onProxyClosed(e,t,n)}},{key:"onServiceStarted",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onServiceStarted(e,t,n)}},{key:"onServiceEnded",value:function(e){"function"==typeof this._onServiceEnded&&this._onServiceEnded(e)}},{key:"onError",value:function(e,t){"function"==typeof this._onError&&this._onError(e,t)}}]),e}(),Enum=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"keyForValue",value:function(){throw"method must be overridden"}},{key:"valueForKey",value:function(){throw"method must be overridden"}}],[{key:"_keyForValue",value:function(e,t){for(var n in t)if(t[n]===e)return n;return null}},{key:"_valueForKey",value:function(e,t){return t[e]||null}}]),e}(),RpcStruct=function(){function l(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,l),this._isFormatRequested=!1,this._rpcSpecVersion=null,this._parameters=e||{}}return _createClass(l,[{key:"getParameters",value:function(){return this._parameters}},{key:"getParameter",value:function(e){return this._parameters[e]}},{key:"setParameter",value:function(e,t){return null===t?delete this._parameters[e]:this._parameters[e]=t,this}},{key:"getObject",value:function(e,t){return this.formatObject(e,this.getParameter(t))}},{key:"formatObject",value:function(e,t){if(null==t)return null;if(t.constructor===e)return t;if(t.constructor===String)return t;if(t.constructor===Object)return e.prototype instanceof l?new e(t):null;if(t.constructor===Array&&0<t.length){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;n.push(this.formatObject(e,u))}}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}return null}},{key:"validateType",value:function(e,t,n){if(2<arguments.length&&void 0!==n&&n){if(!Array.isArray(t))throw new Error("".concat(t.name," must be an array containing items of type ").concat(e.name));var r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.validateType(e,u,!1)}}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}}else if(e.prototype instanceof Enum&&null===e.keyForValue(t)||e.prototype instanceof l&&null!==t&&t.constructor!==e)throw"".concat(t.name," must be of type ").concat(e.name)}}]),l}(),FunctionID=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"RegisterAppInterface",get:function(){return t._MAP.RegisterAppInterface}},{key:"UnregisterAppInterface",get:function(){return t._MAP.UnregisterAppInterface}},{key:"SetGlobalProperties",get:function(){return t._MAP.SetGlobalProperties}},{key:"ResetGlobalProperties",get:function(){return t._MAP.ResetGlobalProperties}},{key:"AddCommand",get:function(){return t._MAP.AddCommand}},{key:"DeleteCommand",get:function(){return t._MAP.DeleteCommand}},{key:"AddSubMenu",get:function(){return t._MAP.AddSubMenu}},{key:"DeleteSubMenu",get:function(){return t._MAP.DeleteSubMenu}},{key:"CreateInteractionChoiceSet",get:function(){return t._MAP.CreateInteractionChoiceSet}},{key:"PerformInteraction",get:function(){return t._MAP.PerformInteraction}},{key:"DeleteInteractionChoiceSet",get:function(){return t._MAP.DeleteInteractionChoiceSet}},{key:"Alert",get:function(){return t._MAP.Alert}},{key:"Show",get:function(){return t._MAP.Show}},{key:"Speak",get:function(){return t._MAP.Speak}},{key:"SetMediaClockTimer",get:function(){return t._MAP.SetMediaClockTimer}},{key:"PerformAudioPassThru",get:function(){return t._MAP.PerformAudioPassThru}},{key:"EndAudioPassThru",get:function(){return t._MAP.EndAudioPassThru}},{key:"SubscribeButton",get:function(){return t._MAP.SubscribeButton}},{key:"UnsubscribeButton",get:function(){return t._MAP.UnsubscribeButton}},{key:"SubscribeVehicleData",get:function(){return t._MAP.SubscribeVehicleData}},{key:"UnsubscribeVehicleData",get:function(){return t._MAP.UnsubscribeVehicleData}},{key:"GetVehicleData",get:function(){return t._MAP.GetVehicleData}},{key:"ReadDID",get:function(){return t._MAP.ReadDID}},{key:"GetDTCs",get:function(){return t._MAP.GetDTCs}},{key:"ScrollableMessage",get:function(){return t._MAP.ScrollableMessage}},{key:"Slider",get:function(){return t._MAP.Slider}},{key:"ShowConstantTBT",get:function(){return t._MAP.ShowConstantTBT}},{key:"AlertManeuver",get:function(){return t._MAP.AlertManeuver}},{key:"UpdateTurnList",get:function(){return t._MAP.UpdateTurnList}},{key:"ChangeRegistration",get:function(){return t._MAP.ChangeRegistration}},{key:"GenericResponse",get:function(){return t._MAP.GenericResponse}},{key:"PutFile",get:function(){return t._MAP.PutFile}},{key:"DeleteFile",get:function(){return t._MAP.DeleteFile}},{key:"ListFiles",get:function(){return t._MAP.ListFiles}},{key:"SetAppIcon",get:function(){return t._MAP.SetAppIcon}},{key:"SetDisplayLayout",get:function(){return t._MAP.SetDisplayLayout}},{key:"DiagnosticMessage",get:function(){return t._MAP.DiagnosticMessage}},{key:"SystemRequest",get:function(){return t._MAP.SystemRequest}},{key:"SendLocation",get:function(){return t._MAP.SendLocation}},{key:"DialNumber",get:function(){return t._MAP.DialNumber}},{key:"ButtonPress",get:function(){return t._MAP.ButtonPress}},{key:"GetInteriorVehicleData",get:function(){return t._MAP.GetInteriorVehicleData}},{key:"SetInteriorVehicleData",get:function(){return t._MAP.SetInteriorVehicleData}},{key:"GetWayPoints",get:function(){return t._MAP.GetWayPoints}},{key:"SubscribeWayPoints",get:function(){return t._MAP.SubscribeWayPoints}},{key:"UnsubscribeWayPoints",get:function(){return t._MAP.UnsubscribeWayPoints}},{key:"GetSystemCapability",get:function(){return t._MAP.GetSystemCapability}},{key:"SendHapticData",get:function(){return t._MAP.SendHapticData}},{key:"SetCloudAppProperties",get:function(){return t._MAP.SetCloudAppProperties}},{key:"GetCloudAppProperties",get:function(){return t._MAP.GetCloudAppProperties}},{key:"PublishAppService",get:function(){return t._MAP.PublishAppService}},{key:"GetAppServiceData",get:function(){return t._MAP.GetAppServiceData}},{key:"GetFile",get:function(){return t._MAP.GetFile}},{key:"PerformAppServiceInteraction",get:function(){return t._MAP.PerformAppServiceInteraction}},{key:"UnpublishAppService",get:function(){return t._MAP.UnpublishAppService}},{key:"CancelInteraction",get:function(){return t._MAP.CancelInteraction}},{key:"CloseApplication",get:function(){return t._MAP.CloseApplication}},{key:"ShowAppMenu",get:function(){return t._MAP.ShowAppMenu}},{key:"CreateWindow",get:function(){return t._MAP.CreateWindow}},{key:"DeleteWindow",get:function(){return t._MAP.DeleteWindow}},{key:"GetInteriorVehicleDataConsent",get:function(){return t._MAP.GetInteriorVehicleDataConsent}},{key:"ReleaseInteriorVehicleDataModule",get:function(){return t._MAP.ReleaseInteriorVehicleDataModule}},{key:"OnHMIStatus",get:function(){return t._MAP.OnHMIStatus}},{key:"OnAppInterfaceUnregistered",get:function(){return t._MAP.OnAppInterfaceUnregistered}},{key:"OnButtonEvent",get:function(){return t._MAP.OnButtonEvent}},{key:"OnButtonPress",get:function(){return t._MAP.OnButtonPress}},{key:"OnVehicleData",get:function(){return t._MAP.OnVehicleData}},{key:"OnCommand",get:function(){return t._MAP.OnCommand}},{key:"OnTBTClientState",get:function(){return t._MAP.OnTBTClientState}},{key:"OnDriverDistraction",get:function(){return t._MAP.OnDriverDistraction}},{key:"OnPermissionsChange",get:function(){return t._MAP.OnPermissionsChange}},{key:"OnAudioPassThru",get:function(){return t._MAP.OnAudioPassThru}},{key:"OnLanguageChange",get:function(){return t._MAP.OnLanguageChange}},{key:"OnKeyboardInput",get:function(){return t._MAP.OnKeyboardInput}},{key:"OnTouchEvent",get:function(){return t._MAP.OnTouchEvent}},{key:"OnSystemRequest",get:function(){return t._MAP.OnSystemRequest}},{key:"OnHashChange",get:function(){return t._MAP.OnHashChange}},{key:"OnInteriorVehicleData",get:function(){return t._MAP.OnInteriorVehicleData}},{key:"OnWayPointChange",get:function(){return t._MAP.OnWayPointChange}},{key:"OnRCStatus",get:function(){return t._MAP.OnRCStatus}},{key:"OnAppServiceData",get:function(){return t._MAP.OnAppServiceData}},{key:"OnSystemCapabilityUpdated",get:function(){return t._MAP.OnSystemCapabilityUpdated}}]),t}();FunctionID._MAP=Object.freeze({RegisterAppInterface:1,UnregisterAppInterface:2,SetGlobalProperties:3,ResetGlobalProperties:4,AddCommand:5,DeleteCommand:6,AddSubMenu:7,DeleteSubMenu:8,CreateInteractionChoiceSet:9,PerformInteraction:10,DeleteInteractionChoiceSet:11,Alert:12,Show:13,Speak:14,SetMediaClockTimer:15,PerformAudioPassThru:16,EndAudioPassThru:17,SubscribeButton:18,UnsubscribeButton:19,SubscribeVehicleData:20,UnsubscribeVehicleData:21,GetVehicleData:22,ReadDID:23,GetDTCs:24,ScrollableMessage:25,Slider:26,ShowConstantTBT:27,AlertManeuver:28,UpdateTurnList:29,ChangeRegistration:30,GenericResponse:31,PutFile:32,DeleteFile:33,ListFiles:34,SetAppIcon:35,SetDisplayLayout:36,DiagnosticMessage:37,SystemRequest:38,SendLocation:39,DialNumber:40,ButtonPress:41,GetInteriorVehicleData:43,SetInteriorVehicleData:44,GetWayPoints:45,SubscribeWayPoints:46,UnsubscribeWayPoints:47,GetSystemCapability:48,SendHapticData:49,SetCloudAppProperties:50,GetCloudAppProperties:51,PublishAppService:52,GetAppServiceData:53,GetFile:54,PerformAppServiceInteraction:55,UnpublishAppService:56,CancelInteraction:57,CloseApplication:58,ShowAppMenu:59,CreateWindow:60,DeleteWindow:61,GetInteriorVehicleDataConsent:62,ReleaseInteriorVehicleDataModule:63,OnHMIStatus:32768,OnAppInterfaceUnregistered:32769,OnButtonEvent:32770,OnButtonPress:32771,OnVehicleData:32772,OnCommand:32773,OnTBTClientState:32774,OnDriverDistraction:32775,OnPermissionsChange:32776,OnAudioPassThru:32777,OnLanguageChange:32778,OnKeyboardInput:32779,OnTouchEvent:32780,OnSystemRequest:32781,OnHashChange:32782,OnInteriorVehicleData:32783,OnWayPointChange:32784,OnRCStatus:32785,OnAppServiceData:32786,OnSystemCapabilityUpdated:32787});var RpcMessage=function(){function n(){var e,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return _classCallCheck(this,n),(e=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,t.parameters)))._isEncrypted=!1,e._rpcType=t.rpcType,e._functionName=t.functionName,e._correlationID=t.correlationID,e.setBulkData(t.bulkData),e}return _inherits(n,RpcStruct),_createClass(n,[{key:"getRPCType",value:function(){return this._rpcType}},{key:"setRPCType",value:function(e){return this._rpcType=e,this}},{key:"getFunctionName",value:function(){return this._functionName}},{key:"setFunctionName",value:function(e){return this._functionName="string"!=typeof e?FunctionID.keyForValue(e):e,this}},{key:"getCorrelationId",value:function(){return this._correlationID}},{key:"setCorrelationId",value:function(e){return this._correlationID=e,this}},{key:"getBulkData",value:function(){return this._bulkData}},{key:"setBulkData",value:function(e){var t=0<arguments.length&&void 0!==e?e:null;return this._bulkData=null!==t?t.slice(0):null,this}},{key:"getIsEncrypted",value:function(){return this._isEncrypted}},{key:"setIsEncrypted",value:function(e){return this._isEncrypted=e,this}}]),n}(),RpcType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"NOTIFICATION",get:function(){return t._MAP.NOTIFICATION}},{key:"RESPONSE",get:function(){return t._MAP.RESPONSE}},{key:"REQUEST",get:function(){return t._MAP.REQUEST}}]),t}();RpcType._MAP=Object.freeze({NOTIFICATION:2,RESPONSE:1,REQUEST:0});var RpcRequest=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.REQUEST),t._promise=null,t}return _inherits(n,RpcMessage),_createClass(n,[{key:"getOnRPCResponsePromise",value:function(){return this._promise}},{key:"setOnRPCResponsePromise",value:function(e){return this.validateType(Promise,e),this._promise=e,this}}]),n}(),SdlMsgVersion=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMajorVersion",value:function(e){return this.setParameter(t.KEY_MAJOR_VERSION,e),this}},{key:"getMajorVersion",value:function(){return this.getParameter(t.KEY_MAJOR_VERSION)}},{key:"setMinorVersion",value:function(e){return this.setParameter(t.KEY_MINOR_VERSION,e),this}},{key:"getMinorVersion",value:function(){return this.getParameter(t.KEY_MINOR_VERSION)}},{key:"setPatchVersion",value:function(e){return this.setParameter(t.KEY_PATCH_VERSION,e),this}},{key:"getPatchVersion",value:function(){return this.getParameter(t.KEY_PATCH_VERSION)}}]),t}();SdlMsgVersion.KEY_MAJOR_VERSION="majorVersion",SdlMsgVersion.KEY_MINOR_VERSION="minorVersion",SdlMsgVersion.KEY_PATCH_VERSION="patchVersion";var SpeechCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SC_TEXT",get:function(){return t._MAP.SC_TEXT}},{key:"SAPI_PHONEMES",get:function(){return t._MAP.SAPI_PHONEMES}},{key:"LHPLUS_PHONEMES",get:function(){return t._MAP.LHPLUS_PHONEMES}},{key:"PRE_RECORDED",get:function(){return t._MAP.PRE_RECORDED}},{key:"SILENCE",get:function(){return t._MAP.SILENCE}},{key:"FILE",get:function(){return t._MAP.FILE}}]),t}();SpeechCapabilities._MAP=Object.freeze({SC_TEXT:"TEXT",SAPI_PHONEMES:"SAPI_PHONEMES",LHPLUS_PHONEMES:"LHPLUS_PHONEMES",PRE_RECORDED:"PRE_RECORDED",SILENCE:"SILENCE",FILE:"FILE"});var TTSChunk=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setText",value:function(e){return this.setParameter(t.KEY_TEXT,e),this}},{key:"getText",value:function(){return this.getParameter(t.KEY_TEXT)}},{key:"setType",value:function(e){return this.validateType(SpeechCapabilities,e),this.setParameter(t.KEY_TYPE,e),this}},{key:"getType",value:function(){return this.getObject(SpeechCapabilities,t.KEY_TYPE)}}]),t}();TTSChunk.KEY_TEXT="text",TTSChunk.KEY_TYPE="type";var DeviceInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setHardware",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_HARDWARE,e),this}},{key:"getHardware",value:function(){return this.getParameter(t.KEY_HARDWARE)}},{key:"setFirmwareRev",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_FIRMWARE_REV,e),this}},{key:"getFirmwareRev",value:function(){return this.getParameter(t.KEY_FIRMWARE_REV)}},{key:"setOs",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_OS,e),this}},{key:"getOs",value:function(){return this.getParameter(t.KEY_OS)}},{key:"setOsVersion",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_OS_VERSION,e),this}},{key:"getOsVersion",value:function(){return this.getParameter(t.KEY_OS_VERSION)}},{key:"setCarrier",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_CARRIER,e),this}},{key:"getCarrier",value:function(){return this.getParameter(t.KEY_CARRIER)}},{key:"setMaxNumberRFCOMMPorts",value:function(e){return this.validateType(Number,e),this.setParameter(t.KEY_MAX_NUMBER_RFCOMM_PORTS,e),this}},{key:"getMaxNumberRFCOMMPorts",value:function(){return this.getParameter(t.KEY_MAX_NUMBER_RFCOMM_PORTS)}}]),t}();DeviceInfo.KEY_HARDWARE="hardware",DeviceInfo.KEY_FIRMWARE_REV="firmwareRev",DeviceInfo.KEY_OS="os",DeviceInfo.KEY_OS_VERSION="osVersion",DeviceInfo.KEY_CARRIER="carrier",DeviceInfo.KEY_MAX_NUMBER_RFCOMM_PORTS="maxNumberRFCOMMPorts";var AppInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setAppDisplayName",value:function(e){return this.setParameter(t.KEY_APP_DISPLAY_NAME,e),this}},{key:"getAppDisplayName",value:function(){return this.getParameter(t.KEY_APP_DISPLAY_NAME)}},{key:"setAppBundleID",value:function(e){return this.setParameter(t.KEY_APP_BUNDLE_ID,e),this}},{key:"getAppBundleID",value:function(){return this.getParameter(t.KEY_APP_BUNDLE_ID)}},{key:"setAppVersion",value:function(e){return this.setParameter(t.KEY_APP_VERSION,e),this}},{key:"getAppVersion",value:function(){return this.getParameter(t.KEY_APP_VERSION)}},{key:"setAppIcon",value:function(e){return this.setParameter(t.KEY_APP_ICON,e),this}},{key:"getAppIcon",value:function(){return this.getParameter(t.KEY_APP_ICON)}}]),t}();AppInfo.KEY_APP_DISPLAY_NAME="appDisplayName",AppInfo.KEY_APP_BUNDLE_ID="appBundleID",AppInfo.KEY_APP_VERSION="appVersion",AppInfo.KEY_APP_ICON="appIcon";var RGBColor=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setRedValue",value:function(e){return this.setParameter(t.KEY_RED,e),this}},{key:"getRedValue",value:function(){return this.getParameter(t.KEY_RED)}},{key:"setGreenValue",value:function(e){return this.setParameter(t.KEY_GREEN,e),this}},{key:"getGreenValue",value:function(){return this.getParameter(t.KEY_GREEN)}},{key:"setBlueValue",value:function(e){return this.setParameter(t.KEY_BLUE,e),this}},{key:"getBlueValue",value:function(){return this.getParameter(t.KEY_BLUE)}}]),t}();RGBColor.KEY_RED="red",RGBColor.KEY_GREEN="green",RGBColor.KEY_BLUE="blue";var TemplateColorScheme=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPrimaryColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_PRIMARY_COLOR,e),this}},{key:"getPrimaryColor",value:function(){return this.getObject(RGBColor,t.KEY_PRIMARY_COLOR)}},{key:"setSecondaryColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_SECONDARY_COLOR,e),this}},{key:"getSecondaryColor",value:function(){return this.getObject(RGBColor,t.KEY_SECONDARY_COLOR)}},{key:"setBackgroundColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_BACKGROUND_COLOR,e),this}},{key:"getBackgroundColor",value:function(){return this.getObject(RGBColor,t.KEY_BACKGROUND_COLOR)}}]),t}();TemplateColorScheme.KEY_PRIMARY_COLOR="primaryColor",TemplateColorScheme.KEY_SECONDARY_COLOR="secondaryColor",TemplateColorScheme.KEY_BACKGROUND_COLOR="backgroundColor";var Language=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"EN_SA",get:function(){return t._MAP.EN_SA}},{key:"HE_IL",get:function(){return t._MAP.HE_IL}},{key:"RO_RO",get:function(){return t._MAP.RO_RO}},{key:"UK_UA",get:function(){return t._MAP.UK_UA}},{key:"ID_ID",get:function(){return t._MAP.ID_ID}},{key:"VI_VN",get:function(){return t._MAP.VI_VN}},{key:"MS_MY",get:function(){return t._MAP.MS_MY}},{key:"HI_IN",get:function(){return t._MAP.HI_IN}},{key:"NL_BE",get:function(){return t._MAP.NL_BE}},{key:"EL_GR",get:function(){return t._MAP.EL_GR}},{key:"HU_HU",get:function(){return t._MAP.HU_HU}},{key:"FI_FI",get:function(){return t._MAP.FI_FI}},{key:"SK_SK",get:function(){return t._MAP.SK_SK}},{key:"EN_US",get:function(){return t._MAP.EN_US}},{key:"ES_MX",get:function(){return t._MAP.ES_MX}},{key:"FR_CA",get:function(){return t._MAP.FR_CA}},{key:"DE_DE",get:function(){return t._MAP.DE_DE}},{key:"ES_ES",get:function(){return t._MAP.ES_ES}},{key:"EN_GB",get:function(){return t._MAP.EN_GB}},{key:"RU_RU",get:function(){return t._MAP.RU_RU}},{key:"TR_TR",get:function(){return t._MAP.TR_TR}},{key:"PL_PL",get:function(){return t._MAP.PL_PL}},{key:"FR_FR",get:function(){return t._MAP.FR_FR}},{key:"IT_IT",get:function(){return t._MAP.IT_IT}},{key:"SV_SE",get:function(){return t._MAP.SV_SE}},{key:"PT_PT",get:function(){return t._MAP.PT_PT}},{key:"NL_NL",get:function(){return t._MAP.NL_NL}},{key:"EN_AU",get:function(){return t._MAP.EN_AU}},{key:"ZH_CN",get:function(){return t._MAP.ZH_CN}},{key:"ZH_TW",get:function(){return t._MAP.ZH_TW}},{key:"JA_JP",get:function(){return t._MAP.JA_JP}},{key:"AR_SA",get:function(){return t._MAP.AR_SA}},{key:"KO_KR",get:function(){return t._MAP.KO_KR}},{key:"PT_BR",get:function(){return t._MAP.PT_BR}},{key:"CS_CZ",get:function(){return t._MAP.CS_CZ}},{key:"DA_DK",get:function(){return t._MAP.DA_DK}},{key:"NO_NO",get:function(){return t._MAP.NO_NO}},{key:"EN_IN",get:function(){return t._MAP.EN_IN}},{key:"TH_TH",get:function(){return t._MAP.TH_TH}}]),t}();Language._MAP=Object.freeze({EN_SA:"EN-SA",HE_IL:"HE-IL",RO_RO:"RO-RO",UK_UA:"UK-UA",ID_ID:"ID-ID",VI_VN:"VI-VN",MS_MY:"MS-MY",HI_IN:"HI-IN",NL_BE:"NL-BE",EL_GR:"EL-GR",HU_HU:"HU-HU",FI_FI:"FI-FI",SK_SK:"SK-SK",EN_US:"EN-US",ES_MX:"ES-MX",FR_CA:"FR-CA",DE_DE:"DE-DE",ES_ES:"ES-ES",EN_GB:"EN-GB",RU_RU:"RU-RU",TR_TR:"TR-TR",PL_PL:"PL-PL",FR_FR:"FR-FR",IT_IT:"IT-IT",SV_SE:"SV-SE",PT_PT:"PT-PT",NL_NL:"NL-NL",EN_AU:"EN-AU",ZH_CN:"ZH-CN",ZH_TW:"ZH-TW",JA_JP:"JA-JP",AR_SA:"AR-SA",KO_KR:"KO-KR",PT_BR:"PT-BR",CS_CZ:"CS-CZ",DA_DK:"DA-DK",NO_NO:"NO-NO",EN_IN:"EN-IN",TH_TH:"TH-TH"});var AppHMIType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"DEFAULT",get:function(){return t._MAP.DEFAULT}},{key:"COMMUNICATION",get:function(){return t._MAP.COMMUNICATION}},{key:"MEDIA",get:function(){return t._MAP.MEDIA}},{key:"MESSAGING",get:function(){return t._MAP.MESSAGING}},{key:"NAVIGATION",get:function(){return t._MAP.NAVIGATION}},{key:"INFORMATION",get:function(){return t._MAP.INFORMATION}},{key:"SOCIAL",get:function(){return t._MAP.SOCIAL}},{key:"BACKGROUND_PROCESS",get:function(){return t._MAP.BACKGROUND_PROCESS}},{key:"TESTING",get:function(){return t._MAP.TESTING}},{key:"SYSTEM",get:function(){return t._MAP.SYSTEM}},{key:"PROJECTION",get:function(){return t._MAP.PROJECTION}},{key:"REMOTE_CONTROL",get:function(){return t._MAP.REMOTE_CONTROL}}]),t}();AppHMIType._MAP=Object.freeze({DEFAULT:"DEFAULT",COMMUNICATION:"COMMUNICATION",MEDIA:"MEDIA",MESSAGING:"MESSAGING",NAVIGATION:"NAVIGATION",INFORMATION:"INFORMATION",SOCIAL:"SOCIAL",BACKGROUND_PROCESS:"BACKGROUND_PROCESS",TESTING:"TESTING",SYSTEM:"SYSTEM",PROJECTION:"PROJECTION",REMOTE_CONTROL:"REMOTE_CONTROL"});var RegisterAppInterface=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.RegisterAppInterface),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setSdlMsgVersion",value:function(e){return this.validateType(SdlMsgVersion,e),this.setParameter(n.KEY_SDL_MSG_VERSION,e),this}},{key:"getSdlMsgVersion",value:function(){return this.getObject(SdlMsgVersion,n.KEY_SDL_MSG_VERSION)}},{key:"setAppName",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_APP_NAME,e),this}},{key:"getAppName",value:function(){return this.getParameter(n.KEY_APP_NAME)}},{key:"setTtsName",value:function(e){return this.setParameter(n.KEY_TTS_NAME,e),this}},{key:"getTtsName",value:function(){return this.getObject(TTSChunk,n.KEY_TTS_NAME)}},{key:"setNgnMediaScreenAppName",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_NGN_MEDIA_SCREEN_APP_NAME,e),this}},{key:"getNgnMediaScreenAppName",value:function(){return this.getParameter(n.KEY_NGN_MEDIA_SCREEN_APP_NAME)}},{key:"setVrSynonyms",value:function(e){return this.setParameter(n.KEY_VR_SYNONYMS,e),this}},{key:"getVrSynonyms",value:function(){return this.getParameter(n.KEY_VR_SYNONYMS)}},{key:"setIsMediaApplication",value:function(e){return this.setParameter(n.KEY_IS_MEDIA_APPLICATION,e),this}},{key:"getIsMediaApplication",value:function(){return this.getParameter(n.KEY_IS_MEDIA_APPLICATION)}},{key:"setLanguageDesired",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_LANGUAGE_DESIRED,e),this}},{key:"getLanguageDesired",value:function(){return this.getObject(Language,n.KEY_LANGUAGE_DESIRED)}},{key:"setHmiDisplayLanguageDesired",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE_DESIRED,e),this}},{key:"getHmiDisplayLanguageDesired",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE_DESIRED)}},{key:"setAppHmiType",value:function(e){return this.setParameter(n.KEY_APP_HMI_TYPE,e),this}},{key:"getAppHmiType",value:function(){return this.getObject(AppHMIType,n.KEY_APP_HMI_TYPE)}},{key:"setHashID",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_HASH_ID,e),this}},{key:"getHashID",value:function(){return this.getParameter(n.KEY_HASH_ID)}},{key:"setDeviceInfo",value:function(e){return this.validateType(DeviceInfo,e),this.setParameter(n.KEY_DEVICE_INFO,e),this}},{key:"getDeviceInfo",value:function(){return this.getObject(DeviceInfo,n.KEY_DEVICE_INFO)}},{key:"_setAppId",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_APP_ID,e),this}},{key:"getAppId",value:function(){return this.getParameter(n.KEY_APP_ID)}},{key:"setFullAppId",value:function(e){var t;(this.validateType(String,e),null!==e)?(e=e.toLowerCase(),this.setParameter(n.KEY_FULL_APP_ID,e),t=e.length<=n.APP_ID_MAX_LENGTH?e:e.replace("-","").substring(0,n.APP_ID_MAX_LENGTH),this._setAppId(t)):this.setParameter(n.KEY_FULL_APP_ID,null);return this}},{key:"getFullAppId",value:function(){return this.getParameter(n.KEY_FULL_APP_ID)}},{key:"setAppInfo",value:function(e){return this.validateType(AppInfo,e),this.setParameter(n.KEY_APP_INFO,e),this}},{key:"getAppInfo",value:function(){return this.getObject(AppInfo,n.KEY_APP_INFO)}},{key:"setDayColorScheme",value:function(e){return this.validateType(TemplateColorScheme,e),this.setParameter(n.KEY_DAY_COLOR_SCHEME,e),this}},{key:"getDayColorScheme",value:function(){return this.getObject(TemplateColorScheme,n.KEY_DAY_COLOR_SCHEME)}},{key:"setNightColorScheme",value:function(e){return this.validateType(TemplateColorScheme,e),this.setParameter(n.KEY_NIGHT_COLOR_SCHEME,e),this}},{key:"getNightColorScheme",value:function(){return this.getObject(TemplateColorScheme,n.KEY_NIGHT_COLOR_SCHEME)}}]),n}();RegisterAppInterface.KEY_SYNC_MSG_VERSION="syncMsgVersion",RegisterAppInterface.KEY_SDL_MSG_VERSION="syncMsgVersion",RegisterAppInterface.KEY_APP_NAME="appName",RegisterAppInterface.KEY_TTS_NAME="ttsName",RegisterAppInterface.KEY_NGN_MEDIA_SCREEN_APP_NAME="ngnMediaScreenAppName",RegisterAppInterface.KEY_VR_SYNONYMS="vrSynonyms",RegisterAppInterface.KEY_IS_MEDIA_APPLICATION="isMediaApplication",RegisterAppInterface.KEY_LANGUAGE_DESIRED="languageDesired",RegisterAppInterface.KEY_HMI_DISPLAY_LANGUAGE_DESIRED="hmiDisplayLanguageDesired",RegisterAppInterface.KEY_APP_HMI_TYPE="appHMIType",RegisterAppInterface.KEY_HASH_ID="hashID",RegisterAppInterface.KEY_DEVICE_INFO="deviceInfo",RegisterAppInterface.KEY_APP_ID="appID",RegisterAppInterface.KEY_FULL_APP_ID="fullAppID",RegisterAppInterface.KEY_APP_INFO="appInfo",RegisterAppInterface.KEY_DAY_COLOR_SCHEME="dayColorScheme",RegisterAppInterface.KEY_NIGHT_COLOR_SCHEME="nightColorScheme",RegisterAppInterface.APP_ID_MAX_LENGTH=10;var Result=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SUCCESS",get:function(){return t._MAP.SUCCESS}},{key:"UNSUPPORTED_REQUEST",get:function(){return t._MAP.UNSUPPORTED_REQUEST}},{key:"UNSUPPORTED_RESOURCE",get:function(){return t._MAP.UNSUPPORTED_REQUEST}},{key:"DISALLOWED",get:function(){return t._MAP.DISALLOWED}},{key:"REJECTED",get:function(){return t._MAP.REJECTED}},{key:"ABORTED",get:function(){return t._MAP.ABORTED}},{key:"IGNORED",get:function(){return t._MAP.IGNORED}},{key:"RETRY",get:function(){return t._MAP.RETRY}},{key:"IN_USE",get:function(){return t._MAP.IN_USE}},{key:"VEHICLE_DATA_NOT_AVAILABLE",get:function(){return t._MAP.VEHICLE_DATA_NOT_AVAILABLE}},{key:"TIMED_OUT",get:function(){return t._MAP.TIMED_OUT}},{key:"INVALID_DATA",get:function(){return t._MAP.INVALID_DATA}},{key:"CHAR_LIMIT_EXCEEDED",get:function(){return t._MAP.CHAR_LIMIT_EXCEEDED}},{key:"INVALID_ID",get:function(){return t._MAP.INVALID_ID}},{key:"DUPLICATE_NAME",get:function(){return t._MAP.DUPLICATE_NAME}},{key:"APPLICATION_NOT_REGISTERED",get:function(){return t._MAP.APPLICATION_NOT_REGISTERED}},{key:"WRONG_LANGUAGE",get:function(){return t._MAP.WRONG_LANGUAGE}},{key:"OUT_OF_MEMORY",get:function(){return t._MAP.OUT_OF_MEMORY}},{key:"TOO_MANY_PENDING_REQUESTS",get:function(){return t._MAP.TOO_MANY_PENDING_REQUESTS}},{key:"TOO_MANY_APPLICATIONS",get:function(){return t._MAP.TOO_MANY_APPLICATIONS}},{key:"APPLICATION_REGISTERED_ALREADY",get:function(){return t._MAP.APPLICATION_REGISTERED_ALREADY}},{key:"WARNINGS",get:function(){return t._MAP.WARNINGS}},{key:"GENERIC_ERROR",get:function(){return t._MAP.GENERIC_ERROR}},{key:"USER_DISALLOWED",get:function(){return t._MAP.USER_DISALLOWED}},{key:"TRUNCATED_DATA",get:function(){return t._MAP.TRUNCATED_DATA}},{key:"UNSUPPORTED_VERSION",get:function(){return t._MAP.UNSUPPORTED_VERSION}},{key:"VEHICLE_DATA_NOT_ALLOWED",get:function(){return t._MAP.VEHICLE_DATA_NOT_ALLOWED}},{key:"FILE_NOT_FOUND",get:function(){return t._MAP.FILE_NOT_FOUND}},{key:"CANCEL_ROUTE",get:function(){return t._MAP.CANCEL_ROUTE}},{key:"SAVED",get:function(){return t._MAP.SAVED}},{key:"INVALID_CERT",get:function(){return t._MAP.INVALID_CERT}},{key:"EXPIRED_CERT",get:function(){return t._MAP.EXPIRED_CERT}},{key:"RESUME_FAILED",get:function(){return t._MAP.RESUME_FAILED}},{key:"DATA_NOT_AVAILABLE",get:function(){return t._MAP.DATA_NOT_AVAILABLE}},{key:"READ_ONLY",get:function(){return t._MAP.READ_ONLY}},{key:"CORRUPTED_DATA",get:function(){return t._MAP.CORRUPTED_DATA}}]),t}();Result._MAP=Object.freeze({SUCCESS:"SUCCESS",UNSUPPORTED_REQUEST:"UNSUPPORTED_REQUEST",UNSUPPORTED_RESOURCE:"UNSUPPORTED_RESOURCE",DISALLOWED:"DISALLOWED",REJECTED:"REJECTED",ABORTED:"ABORTED",IGNORED:"IGNORED",RETRY:"RETRY",IN_USE:"IN_USE",VEHICLE_DATA_NOT_AVAILABLE:"VEHICLE_DATA_NOT_AVAILABLE",TIMED_OUT:"TIMED_OUT",INVALID_DATA:"INVALID_DATA",CHAR_LIMIT_EXCEEDED:"CHAR_LIMIT_EXCEEDED",INVALID_ID:"INVALID_ID",DUPLICATE_NAME:"DUPLICATE_NAME",APPLICATION_NOT_REGISTERED:"APPLICATION_NOT_REGISTERED",WRONG_LANGUAGE:"WRONG_LANGUAGE",OUT_OF_MEMORY:"OUT_OF_MEMORY",TOO_MANY_PENDING_REQUESTS:"TOO_MANY_PENDING_REQUESTS",TOO_MANY_APPLICATIONS:"TOO_MANY_APPLICATIONS",APPLICATION_REGISTERED_ALREADY:"APPLICATION_REGISTERED_ALREADY",WARNINGS:"WARNINGS",GENERIC_ERROR:"GENERIC_ERROR",USER_DISALLOWED:"USER_DISALLOWED",TRUNCATED_DATA:"TRUNCATED_DATA",UNSUPPORTED_VERSION:"UNSUPPORTED_VERSION",VEHICLE_DATA_NOT_ALLOWED:"VEHICLE_DATA_NOT_ALLOWED",FILE_NOT_FOUND:"FILE_NOT_FOUND",CANCEL_ROUTE:"CANCEL_ROUTE",SAVED:"SAVED",INVALID_CERT:"INVALID_CERT",EXPIRED_CERT:"EXPIRED_CERT",RESUME_FAILED:"RESUME_FAILED",DATA_NOT_AVAILABLE:"DATA_NOT_AVAILABLE",READ_ONLY:"READ_ONLY",CORRUPTED_DATA:"CORRUPTED_DATA"});var RpcResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.RESPONSE),t}return _inherits(n,RpcMessage),_createClass(n,[{key:"getSuccess",value:function(){return this.getParameter(KEY_SUCCESS)}},{key:"setSuccess",value:function(e){return this.setParameter(KEY_SUCCESS,e),this}},{key:"getInfo",value:function(){return this.getParameter(KEY_INFO)}},{key:"setInfo",value:function(e){return this.setParameter(KEY_INFO,e),this}},{key:"getResultCode",value:function(){return this.getObject(Result,KEY_RESULT_CODE)}},{key:"setResultCode",value:function(e){return this.validateType(Result,e),this.setParameter(KEY_RESULT_CODE,e),this}}]),n}();RpcResponse.KEY_SUCCESS="success",RpcResponse.KEY_INFO="info",RpcResponse.KEY_RESULT_CODE="resultCode";var RpcListener=function(){function e(){_classCallCheck(this,e),this._onRpcMessage=null}return _createClass(e,[{key:"setOnRpcMessage",value:function(e){return this._onRpcMessage=e,this}},{key:"onRpcMessage",value:function(e){"function"==typeof this._onRpcMessage&&this._onRpcMessage(e)}}]),e}(),SdlSessionListener=function(){function e(){_classCallCheck(this,e),this._onProtocolSessionStarted=null,this._onProtocolSessionEnded=null,this._onProtocolSessionEndedNACKed=null,this._onRpcMessageReceived=null,this._onTransportConnected=null}return _createClass(e,[{key:"setOnProtocolSessionStarted",value:function(e){this._onProtocolSessionStarted=e}},{key:"setOnProtocolSessionEnded",value:function(e){this._onProtocolSessionEnded=e}},{key:"setOnProtocolSessionEndedNACKed",value:function(e){this._onProtocolSessionEndedNACKed=e}},{key:"setOnRpcMessageReceived",value:function(e){this._onRpcMessageReceived=e}},{key:"setOnTransportConnected",value:function(e){this._onTransportConnected=e}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){"function"==typeof this._onProtocolSessionStarted&&this._onProtocolSessionStarted(e,t,n,r,i,o)}},{key:"onProtocolSessionEnded",value:function(e,t,n){"function"==typeof this._onProtocolSessionEnded&&this._onProtocolSessionEnded(e,t,n)}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onProtocolSessionEndedNACKed(e,t,n)}},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}}]),e}(),SdlProtocolListener=function(){function e(){_classCallCheck(this,e),this._onRpcMessageReceived=null,this._onProtocolSessionStarted=null,this._onProtocolSessionEnded=null,this._onProtocolSessionEndedNACKed=null,this._getSessionId=null,this._onTransportConnected=null}return _createClass(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}},{key:"setOnRpcMessageReceived",value:function(e){return this._onRpcMessageReceived=e,this}},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}},{key:"setOnProtocolSessionStarted",value:function(e){return this._onProtocolSessionStarted=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){"function"==typeof this._onProtocolSessionStarted&&this._onProtocolSessionStarted(e,t,n,r,i,o)}},{key:"setOnProtocolSessionEnded",value:function(e){return this._onProtocolSessionEnded=e,this}},{key:"onProtocolSessionEnded",value:function(e,t,n){"function"==typeof this._onProtocolSessionEnded&&this._onProtocolSessionEnded(e,t,n)}},{key:"setOnProtocolSessionEndedNACKed",value:function(e){return this._onProtocolSessionEndedNACKed=e,this}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onProtocolSessionEndedNACKed(e,t,n)}},{key:"setGetSessionId",value:function(e){return this._getSessionId=e,this}},{key:"getSessionId",value:function(){if("function"==typeof this._getSessionId)return this._getSessionId()}},{key:"setGetDesiredVideoParams",value:function(e){return this._getDesiredVideoParams=e,this}},{key:"getDesiredVideoParams",value:function(){if("function"==typeof this._getDesiredVideoParams)return this._getDesiredVideoParams()}},{key:"setSetAcceptedVideoParams",value:function(e){return this._setAcceptedVideoParams=e,this}},{key:"setAcceptedVideoParams",value:function(e){return"function"==typeof this._setAcceptedVideoParams&&this._setAcceptedVideoParams(e),this}}]),e}(),FrameType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CONTROL",get:function(){return t._MAP.CONTROL}},{key:"FIRST",get:function(){return t._MAP.FIRST}},{key:"CONSECUTIVE",get:function(){return t._MAP.CONSECUTIVE}},{key:"SINGLE",get:function(){return t._MAP.SINGLE}}]),t}();function unwrapExports(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}FrameType._MAP=Object.freeze({CONTROL:0,FIRST:2,CONSECUTIVE:3,SINGLE:1});var bson_common=createCommonjsModule(function(module,exports){function Hk(e){if(Gk[e])return Gk[e].exports;var t=Gk[e]={i:e,l:!1,exports:{}};return Fk[e].call(t.exports,t,t.exports,Hk),t.l=!0,t.exports}var Fk,Gk;exports.bson=(Fk=[function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":_typeof(window))&&(n=window)}e.exports=n},function(e,U,K){(function(e){var r=K(3),o=K(4),s=K(5);function n(){return _.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(n()<t)throw new RangeError("Invalid typed array length");return _.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=_.prototype:(null===e&&(e=new _(t)),e.length=t),e}function _(e,t,n){if(!(_.TYPED_ARRAY_SUPPORT||this instanceof _))return new _(e,t,n);if("number"!=typeof e)return i(this,e,t,n);if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}function i(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);_.TYPED_ARRAY_SUPPORT?(e=t).__proto__=_.prototype:e=c(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!_.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(_.isBuffer(t)){var n=0|f(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):c(e,t);if("Buffer"===t.type&&s(t.data))return c(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(u(t),e=a(e,t<0?0:0|f(t)),!_.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function c(e,t){var n=t.length<0?0:0|f(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=n())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n().toString(16)+" bytes");return 0|e}function h(e,t){if(_.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return w(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(e).length;default:if(r)return w(e).length;t=(""+t).toLowerCase(),r=!0}}function E(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function p(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=_.from(t,r)),_.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,_.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a/=s=2,u/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(a<n+u&&(n=a-u),o=n;0<=o;o--){for(var _=!0,f=0;f<u;f++)if(l(e,o+f)!==l(t,f)){_=!1;break}if(_)return o}return-1}function g(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?i<(r=Number(r))&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");o/2<r&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function A(e,t,n,r){return Y(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return Y(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function d(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function T(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,u,l=e[i],c=null,_=239<l?4:223<l?3:191<l?2:1;if(i+_<=n)switch(_){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&127<(u=(31&l)<<6|63&o)&&(c=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&2047<(u=(15&l)<<12|(63&o)<<6|63&s)&&(u<55296||57343<u)&&(c=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&65535<(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)&&u<1114112&&(c=u)}null===c?(c=65533,_=1):65535<c&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=_}return function(e){var t=e.length;if(t<=P)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=P));return n}(r)}U.Buffer=_,U.SlowBuffer=function(e){+e!=e&&(e=0);return _.alloc(+e)},U.INSPECT_MAX_BYTES=50,_.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),U.kMaxLength=n(),_.poolSize=8192,_._augment=function(e){return e.__proto__=_.prototype,e},_.from=function(e,t,n){return i(null,e,t,n)},_.TYPED_ARRAY_SUPPORT&&(_.prototype.__proto__=Uint8Array.prototype,_.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&_[Symbol.species]===_&&Object.defineProperty(_,Symbol.species,{value:null,configurable:!0})),_.alloc=function(e,t,n){return function(e,t,n,r){return u(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},_.allocUnsafe=function(e){return l(null,e)},_.allocUnsafeSlow=function(e){return l(null,e)},_.isBuffer=function(e){return!(null==e||!e._isBuffer)},_.compare=function(e,t){if(!_.isBuffer(e)||!_.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},_.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},_.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return _.alloc(0);var n;if(void 0===t)for(n=t=0;n<e.length;++n)t+=e[n].length;var r=_.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!_.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},_.byteLength=h,_.prototype._isBuffer=!0,_.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)E(this,t,t+1);return this},_.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)E(this,t,t+3),E(this,t+1,t+2);return this},_.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)E(this,t,t+7),E(this,t+1,t+6),E(this,t+2,t+5),E(this,t+3,t+4);return this},_.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?T(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return m(this,t,n);case"utf8":case"utf-8":return T(this,t,n);case"ascii":return v(this,t,n);case"latin1":case"binary":return I(this,t,n);case"base64":return d(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},_.prototype.equals=function(e){if(!_.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===_.compare(this,e)},_.prototype.inspect=function(){var e="",t=U.INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},_.prototype.compare=function(e,t,n,r,i){if(!_.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(i<=r&&n<=t)return 0;if(i<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(r,i),l=e.slice(t,n),c=0;c<a;++c)if(u[c]!==l[c]){o=u[c],s=l[c];break}return o<s?-1:s<o?1:0},_.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},_.prototype.indexOf=function(e,t,n){return p(this,e,t,n,!0)},_.prototype.lastIndexOf=function(e,t,n){return p(this,e,t,n,!1)},_.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||i<n)&&(n=i),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var o,s,a,u,l,c,_=!1;;)switch(r){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return l=t,c=n,Y(w(e,(u=this).length-l),u,l,c);case"ascii":return A(this,e,t,n);case"latin1":case"binary":return A(this,e,t,n);case"base64":return o=this,s=t,a=n,Y(F(e),o,s,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(_)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),_=!0}},_.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function v(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function I(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function m(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var i="",o=t;o<n;++o)i+=L(e[o]);return i}function O(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function C(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,n,r,i,o){if(!_.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(i<t||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function N(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function b(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function k(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,i){return i||k(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||k(e,0,n,8),o.write(e,t,n,r,52,8),n+8}_.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e),_.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=_.prototype;else{var i=t-e;n=new _(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},_.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},_.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e+--t],i=1;0<t&&(i*=256);)r+=this[e+--t]*i;return r},_.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},_.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},_.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},_.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},_.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},_.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return(i*=128)<=r&&(r-=Math.pow(2,8*t)),r},_.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=t,i=1,o=this[e+--r];0<r&&(i*=256);)o+=this[e+--r]*i;return(i*=128)<=o&&(o-=Math.pow(2,8*t)),o},_.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},_.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},_.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},_.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},_.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},_.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!0,23,4)},_.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!1,23,4)},_.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!0,52,8)},_.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!1,52,8)},_.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},_.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;0<=--i&&(o*=256);)this[t+i]=e/o&255;return t+n},_.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,255,0),_.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},_.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},_.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},_.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),_.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):b(this,e,t,!0),t+4},_.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):b(this,e,t,!1),t+4},_.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);R(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},_.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);R(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;0<=--o&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},_.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,127,-128),_.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},_.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},_.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},_.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):b(this,e,t,!0),t+4},_.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):b(this,e,t,!1),t+4},_.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},_.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},_.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},_.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},_.prototype.copy=function(e,t,n,r){if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;0<=i;--i)e[i+t]=this[i+n];else if(o<1e3||!_.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},_.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!_.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(o=t;o<n;++o)this[o]=e;else{var s=_.isBuffer(e)?e:w(new _(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var t=/[^+\/0-9A-Za-z-_]/g;function B(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function w(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if(55295<(n=e.charCodeAt(s))&&n<57344){if(!i){if(56319<n){-1<(t-=3)&&o.push(239,191,189);continue}if(s+1===r){-1<(t-=3)&&o.push(239,191,189);continue}i=n;continue}if(n<56320){-1<(t-=3)&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&-1<(t-=3)&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function F(e){return r.toByteArray(B(e))}function Y(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(U,K(0))},function(module,exports,__webpack_require__){(function(global,Buffer){var Fu;Fu=function(exports,_long,buffer){_long=_long&&_long.hasOwnProperty("default")?_long.default:_long,buffer=buffer&&buffer.hasOwnProperty("default")?buffer.default:buffer;var commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}function getCjsExportFromNamespace(e){return e&&e.default||e}var map=createCommonjsModule(function(e){if(void 0!==commonjsGlobal.Map)e.exports=commonjsGlobal.Map,e.exports.Map=commonjsGlobal.Map;else{var t=function(e){this._keys=[],this._values={};for(var t=0;t<e.length;t++)if(null!=e[t]){var n=e[t],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};t.prototype.clear=function(){this._keys=[],this._values={}},t.prototype.delete=function(e){var t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)},t.prototype.entries=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?[e,t._values[e].v]:void 0,done:void 0===e}}}},t.prototype.forEach=function(e,t){t=t||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];e.call(t,this._values[r].v,r,t)}},t.prototype.get=function(e){return this._values[e]?this._values[e].v:void 0},t.prototype.has=function(e){return null!=this._values[e]},t.prototype.keys=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?e:void 0,done:void 0===e}}}},t.prototype.set=function(e,t){return this._values[e]?this._values[e].v=t:(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1}),this},t.prototype.values=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?t._values[e].v:void 0,done:void 0===e}}}},Object.defineProperty(t.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),e.exports=t}}),map_1=map.Map;_long.prototype.toExtendedJSON=function(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}},_long.fromExtendedJSON=function(e,t){var n=_long.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n},Object.defineProperty(_long.prototype,"_bsontype",{value:"Long"});var long_1=_long;function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Double=function(){function n(e){_classCallCheck(this,n),this.value=e}return _createClass(n,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,t){return t&&t.relaxed?parseFloat(e.$numberDouble):new n(parseFloat(e.$numberDouble))}}]),n}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof$1(e){return(_typeof$1="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof$1(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Timestamp=function(){function r(e,t){var n;return _classCallCheck$1(this,r),n=long_1.isLong(e)?_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e.low,e.high)):_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t)),_possibleConstructorReturn(n)}return _inherits(r,long_1),_createClass$1(r,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(e){return new r(long_1.fromInt(e))}},{key:"fromNumber",value:function(e){return new r(long_1.fromNumber(e))}},{key:"fromBits",value:function(e,t){return new r(e,t)}},{key:"fromString",value:function(e,t){return new r(long_1.fromString(e,t))}},{key:"fromExtendedJSON",value:function(e){return new r(e.$timestamp.i,e.$timestamp.t)}}]),r}();Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,empty={},empty$1=Object.freeze({default:empty}),require$$0=getCjsExportFromNamespace(empty$1);function normalizedFunctionString(e){return e.toString().replace("function(","function (")}function insecureRandomBytes(e){for(var t=new Uint8Array(e),n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(e){return window.crypto.getRandomValues(new Uint8Array(e))};else{try{randomBytes=require$$0.randomBytes}catch(e){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};global.setTimeout,global.clearTimeout;var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()},inherits;inherits="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;function n(){}n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e};var inherits$1=inherits;function _typeof$1$1(e){return(_typeof$1$1="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var formatRegExp=/%[sdj%]/g;function format(e){if(!isString(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(inspect(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(i<=n)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global.process))return function(){return deprecate(e,t).apply(this,arguments)};var n=!1;return function(){return n||(console.error(t),n=!0),e.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(t){if(isUndefined(debugEnviron)&&(debugEnviron=""),t=t.toUpperCase(),!debugs[t])if(new RegExp("\\b"+t+"\\b","i").test(debugEnviron)){debugs[t]=function(){var e=format.apply(null,arguments);console.error("%s %d: %s",t,0,e)}}else debugs[t]=function(){};return debugs[t]}function inspect(e,t){var n={seen:[],stylize:stylizeNoColor};return 3<=arguments.length&&(n.depth=arguments[2]),4<=arguments.length&&(n.colors=arguments[3]),isBoolean(t)?n.showHidden=t:t&&_extend(n,t),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,e,n.depth)}function stylizeWithColor(e,t){var n=inspect.styles[t];return n?"["+inspect.colors[n][0]+"m"+e+"["+inspect.colors[n][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var n={};return e.forEach(function(e,t){n[e]=!0}),n}function formatValue(t,n,r){if(t.customInspect&&n&&isFunction(n.inspect)&&n.inspect!==inspect&&(!n.constructor||n.constructor.prototype!==n)){var e=n.inspect(r,t);return isString(e)||(e=formatValue(t,e,r)),e}var i=formatPrimitive(t,n);if(i)return i;var o=Object.keys(n),s=arrayToHash(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(n)),isError(n)&&(0<=o.indexOf("message")||0<=o.indexOf("description")))return formatError(n);if(0===o.length){if(isFunction(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(isRegExp(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(isDate(n))return t.stylize(Date.prototype.toString.call(n),"date");if(isError(n))return formatError(n)}var u,l="",c=!1,_=["{","}"];isArray(n)&&(c=!0,_=["[","]"]),isFunction(n)&&(l=" [Function"+(n.name?": "+n.name:"")+"]");return isRegExp(n)&&(l=" "+RegExp.prototype.toString.call(n)),isDate(n)&&(l=" "+Date.prototype.toUTCString.call(n)),isError(n)&&(l=" "+formatError(n)),0!==o.length||c&&0!=n.length?r<0?isRegExp(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),u=c?formatArray(t,n,r,s,o):o.map(function(e){return formatProperty(t,n,r,s,e,c)}),t.seen.pop(),reduceToSingleString(u,l,_)):_[0]+l+_[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(t,n,r,i,e){for(var o=[],s=0,a=n.length;s<a;++s)hasOwnProperty(n,String(s))?o.push(formatProperty(t,n,r,i,String(s),!0)):o.push("");return e.forEach(function(e){e.match(/^\d+$/)||o.push(formatProperty(t,n,r,i,e,!0))}),o}function formatProperty(e,t,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(u.value)<0?-1<(a=isNull(n)?formatValue(e,u.value,null):formatValue(e,u.value,n-1)).indexOf("\n")&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return a;s=(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),e.stylize(s,"string"))}return s+": "+a}function reduceToSingleString(e,t,n){return 60<e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"===_typeof$1$1(e)}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"===_typeof$1$1(e)&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof$1$1(e)||void 0===e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var e=new Date,t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],t].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(e,t){if(!t||!isObject(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog},util$1=Object.freeze({format:format,deprecate:deprecate,debuglog:debuglog,inspect:inspect,isArray:isArray,isBoolean:isBoolean,isNull:isNull,isNullOrUndefined:isNullOrUndefined,isNumber:isNumber,isString:isString,isSymbol:isSymbol,isUndefined:isUndefined,isRegExp:isRegExp,isObject:isObject,isDate:isDate,isError:isError,isFunction:isFunction,isPrimitive:isPrimitive,isBuffer:isBuffer,log:log,inherits:inherits$1,_extend:_extend,default:util}),util$2=getCjsExportFromNamespace(util$1);function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),e}var Buffer$1=buffer.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util$2.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(e){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(e){return e.toString("hex")}function makeObjectIdError(e,t){var n=e[t];return new TypeError('ObjectId string "'.concat(e,'" contains invalid character "').concat(n,'" with character code (').concat(e.charCodeAt(t),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function i(e){if(_classCallCheck$2(this,i),e instanceof i)return e;if(null==e||"number"==typeof e)return this.id=i.generate(e),void(i.cacheHexString&&(this.__id=this.toString("hex")));var t=i.isValid(e);if(!t&&null!=e)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(t&&"string"==typeof e&&24===e.length&&hasBufferType)return new i(Buffer$1.from(e,"hex"));if(t&&"string"==typeof e&&24===e.length)return i.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&e.toHexString)return i.createFromHexString(e.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,i.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(i,[{key:"toHexString",value:function(){if(i.cacheHexString&&this.__id)return this.__id;var e="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return e=convertToHex(this.id),i.cacheHexString&&(this.__id=e),e;for(var t=0;t<this.id.length;t++){var n=hexTable[this.id.charCodeAt(t)];if("string"!=typeof n)throw makeObjectIdError(this.id,t);e+=n}return i.cacheHexString&&(this.__id=e),e}},{key:"toString",value:function(e){return this.id&&this.id.copy?this.id.toString("string"==typeof e?e:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(e){return e instanceof i?this.toString()===e.toString():"string"==typeof e&&i.isValid(e)&&12===e.length&&this.id instanceof _Buffer?e===this.id.toString("binary"):"string"==typeof e&&i.isValid(e)&&24===e.length?e.toLowerCase()===this.toHexString():"string"==typeof e&&i.isValid(e)&&12===e.length?e===this.id:!(null==e||!(e instanceof i||e.toHexString))&&e.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return i.index=(i.index+1)%16777215}},{key:"generate",value:function(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));var t=i.getInc(),n=Buffer$1.alloc(12);return n[3]=255&e,n[2]=e>>8&255,n[1]=e>>16&255,n[0]=e>>24&255,n[4]=PROCESS_UNIQUE[0],n[5]=PROCESS_UNIQUE[1],n[6]=PROCESS_UNIQUE[2],n[7]=PROCESS_UNIQUE[3],n[8]=PROCESS_UNIQUE[4],n[11]=255&t,n[10]=t>>8&255,n[9]=t>>16&255,n}},{key:"createPk",value:function(){return new i}},{key:"createFromTime",value:function(e){var t=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return t[3]=255&e,t[2]=e>>8&255,t[1]=e>>16&255,t[0]=e>>24&255,new i(t)}},{key:"createFromHexString",value:function(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new i(Buffer$1.from(e,"hex"));for(var t=new _Buffer(12),n=0,r=0;r<24;)t[n++]=decodeLookup[e.charCodeAt(r++)]<<4|decodeLookup[e.charCodeAt(r++)];return new i(t)}},{key:"isValid",value:function(e){return null!=e&&("number"==typeof e||("string"==typeof e?12===e.length||24===e.length&&checkForHexRegExp.test(e):e instanceof i||(e instanceof _Buffer&&12===e.length||!!e.toHexString&&(12===e.id.length||24===e.id.length&&checkForHexRegExp.test(e.id)))))}},{key:"fromExtendedJSON",value:function(e){return new i(e.$oid)}}]),i}();ObjectId.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1(function(e){return ObjectId.generate(e)},"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(e){this.id[3]=255&e,this.id[2]=e>>8&255,this.id[1]=e>>16&255,this.id[0]=e>>24&255}}),ObjectId.prototype[util$2.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),e}function alphabetize(e){return e.split("").sort().join("")}var BSONRegExp=function(){function r(e,t){_classCallCheck$3(this,r),this.pattern=e||"",this.options=t?alphabetize(t):"";for(var n=0;n<this.options.length;n++)if("i"!==this.options[n]&&"m"!==this.options[n]&&"x"!==this.options[n]&&"l"!==this.options[n]&&"s"!==this.options[n]&&"u"!==this.options[n])throw new Error("The regular expression option [".concat(this.options[n],"] is not supported"))}return _createClass$3(r,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(e){return new r(e.$regularExpression.pattern,e.$regularExpression.options.split("").sort().join(""))}}]),r}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$4(e,t,n){return t&&_defineProperties$4(e.prototype,t),n&&_defineProperties$4(e,n),e}var BSONSymbol=function(){function t(e){_classCallCheck$4(this,t),this.value=e}return _createClass$4(t,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$symbol)}}]),t}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$5(e,t,n){return t&&_defineProperties$5(e.prototype,t),n&&_defineProperties$5(e,n),e}var Int32=function(){function n(e){_classCallCheck$5(this,n),this.value=e}return _createClass$5(n,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,t){return t&&t.relaxed?parseInt(e.$numberInt,10):new n(e.$numberInt)}}]),n}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$6(e,t,n){return t&&_defineProperties$6(e.prototype,t),n&&_defineProperties$6(e,n),e}var Code=function(){function n(e,t){_classCallCheck$6(this,n),this.code=e,this.scope=t}return _createClass$6(n,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(e){return new n(e.$code,e.$scope)}}]),n}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(e){return!isNaN(parseInt(e,10))}function divideu128(e){var t=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function multiply64x2(e,t){if(!e&&!t)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=e.shiftRightUnsigned(32),r=new long_1(e.getLowBits(),0),i=t.shiftRightUnsigned(32),o=new long_1(t.getLowBits(),0),s=n.multiply(i),a=n.multiply(o),u=r.multiply(i),l=r.multiply(o);return s=s.add(a.shiftRightUnsigned(32)),a=new long_1(a.getLowBits(),0).add(u).add(l.shiftRightUnsigned(32)),{high:s=s.add(a.shiftRightUnsigned(32)),low:l=a.shiftLeft(32).add(new long_1(l.getLowBits(),0))}}function lessThan(e,t){var n=e.high>>>0,r=t.high>>>0;return n<r||n==r&&e.low>>>0<t.low>>>0}function invalidErr(e,t){throw new TypeError('"'.concat(e,'" is not a valid Decimal128 string - ').concat(t))}function Decimal128(e){this.bytes=e}Decimal128.fromString=function(e){var t,n=!1,r=!1,i=!1,o=0,s=0,a=0,u=0,l=0,c=[0],_=0,f=0,h=0,E=0,p=0,y=0,g=[0,0],A=[0,0],S=0;if(7e3<=e.length)throw new TypeError(e+" not a valid Decimal128 string");var d=e.match(PARSE_STRING_REGEXP),T=e.match(PARSE_INF_REGEXP),P=e.match(PARSE_NAN_REGEXP);if(!d&&!T&&!P||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(d){var v=d[2],I=d[4],m=d[5],O=d[6];I&&void 0===O&&invalidErr(e,"missing exponent power"),I&&void 0===v&&invalidErr(e,"missing exponent base"),void 0===I&&(m||O)&&invalidErr(e,"missing e before exponent")}if("+"!==e[S]&&"-"!==e[S]||(n="-"===e[S++]),!isDigit(e[S])&&"."!==e[S]){if("i"===e[S]||"I"===e[S])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===e[S])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(e[S])||"."===e[S];)"."!==e[S]?(_<34&&("0"===e[S]&&!i||(i||(l=s),i=!0,c[f++]=parseInt(e[S],10),_+=1)),i&&(a+=1),r&&(u+=1),s+=1):(r&&invalidErr(e,"contains multiple periods"),r=!0),S+=1;if(r&&!s)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[S]||"E"===e[S]){var C=e.substr(++S).match(EXPONENT_REGEX);if(!C||!C[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));p=parseInt(C[0],10),S+=C[0].length}if(e[S])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(h=0,_){if(E=_-1,1!==(o=a))for(;"0"===e[l+o-1];)o-=1}else _=a=1,o=c[E=h=0]=0;for(p<=u&&16384<u-p?p=EXPONENT_MIN:p-=u;EXPONENT_MAX<p;){if(MAX_DIGITS<(E+=1)-h){if(c.join("").match(/^0+$/)){p=EXPONENT_MAX;break}invalidErr(e,"overflow")}p-=1}for(;p<EXPONENT_MIN||_<a;){if(0===E&&o<_){p=EXPONENT_MIN,o=0;break}if(_<a?a-=1:E-=1,p<EXPONENT_MAX)p+=1;else{if(c.join("").match(/^0+$/)){p=EXPONENT_MAX;break}invalidErr(e,"overflow")}}if(E-h+1<o){var R=s;r&&(l+=1,R+=1),n&&(l+=1,R+=1);var N=parseInt(e[l+E+1],10),b=0;if(5<=N&&(b=1,5===N))for(b=c[E]%2==1,y=l+E+2;y<R;y++)if(parseInt(e[y],10)){b=1;break}if(b)for(var k=E;0<=k;k--)if(9<++c[k]&&(c[k]=0)===k){if(!(p<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));p+=1,c[k]=1}}if(g=long_1.fromNumber(0),A=long_1.fromNumber(0),0===o)g=long_1.fromNumber(0),A=long_1.fromNumber(0);else if(E-h<17){var M=h;for(A=long_1.fromNumber(c[M++]),g=new long_1(0,0);M<=E;M++)A=(A=A.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[M]))}else{var D=h;for(g=long_1.fromNumber(c[D++]);D<=E-17;D++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[D]));for(A=long_1.fromNumber(c[D++]);D<=E;D++)A=(A=A.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[D]))}var B=multiply64x2(g,long_1.fromString("100000000000000000"));B.low=B.low.add(A),lessThan(B.low,A)&&(B.high=B.high.add(long_1.fromNumber(1))),t=p+EXPONENT_BIAS;var L={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};B.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(L.high=L.high.or(long_1.fromNumber(3).shiftLeft(61)),L.high=L.high.or(long_1.fromNumber(t).and(long_1.fromNumber(16383).shiftLeft(47))),L.high=L.high.or(B.high.and(long_1.fromNumber(0x7fffffffffff)))):(L.high=L.high.or(long_1.fromNumber(16383&t).shiftLeft(49)),L.high=L.high.or(B.high.and(long_1.fromNumber(562949953421311)))),L.low=B.low,n&&(L.high=L.high.or(long_1.fromString("9223372036854775808")));var w=Buffer$2.alloc(16);return S=0,w[S++]=255&L.low.low,w[S++]=L.low.low>>8&255,w[S++]=L.low.low>>16&255,w[S++]=L.low.low>>24&255,w[S++]=255&L.low.high,w[S++]=L.low.high>>8&255,w[S++]=L.low.high>>16&255,w[S++]=L.low.high>>24&255,w[S++]=255&L.high.low,w[S++]=L.high.low>>8&255,w[S++]=L.high.low>>16&255,w[S++]=L.high.low>>24&255,w[S++]=255&L.high.high,w[S++]=L.high.high>>8&255,w[S++]=L.high.high>>16&255,w[S++]=L.high.high>>24&255,new Decimal128(w)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var e,t,n,r,i,o,s=0,a=new Array(36),u=0;u<a.length;u++)a[u]=0;var l,c,_,f,h,E=0,p=!1,y={parts:new Array(4)},g=[];E=0;var A=this.bytes;if(r=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,n=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,t=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,e=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,E=0,{low:new long_1(r,n),high:new long_1(t,e)}.high.lessThan(long_1.ZERO)&&g.push("-"),(i=e>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return g.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=e>>15&EXPONENT_MASK,_=8+(e>>14&1)}else _=e>>14&7,o=e>>17&EXPONENT_MASK;if(l=o-EXPONENT_BIAS,y.parts[0]=(16383&e)+((15&_)<<14),y.parts[1]=t,y.parts[2]=n,y.parts[3]=r,0===y.parts[0]&&0===y.parts[1]&&0===y.parts[2]&&0===y.parts[3])p=!0;else for(h=3;0<=h;h--){var S=0,d=divideu128(y);if(y=d.quotient,S=d.rem.low)for(f=8;0<=f;f--)a[9*h+f]=S%10,S=Math.floor(S/10)}if(p)s=1,a[E]=0;else for(s=36;!a[E];)s-=1,E+=1;if(34<=(c=s-1+l)||c<=-7||0<l){if(34<s)return g.push(0),0<l?g.push("E+"+l):l<0&&g.push("E"+l),g.join("");g.push(a[E++]),(s-=1)&&g.push(".");for(var T=0;T<s;T++)g.push(a[E++]);g.push("E"),0<c?g.push("+"+c):g.push(c)}else if(0<=l)for(var P=0;P<s;P++)g.push(a[E++]);else{var v=s+l;if(0<v)for(var I=0;I<v;I++)g.push(a[E++]);else g.push("0");for(g.push(".");v++<0;)g.push("0");for(var m=0;m<s-Math.max(v-1,0);m++)g.push(a[E++])}return g.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(e){return Decimal128.fromString(e.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$7(e,t,n){return t&&_defineProperties$7(e.prototype,t),n&&_defineProperties$7(e,n),e}var MinKey=function(){function e(){_classCallCheck$7(this,e)}return _createClass$7(e,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$8(e,t,n){return t&&_defineProperties$8(e.prototype,t),n&&_defineProperties$8(e,n),e}var MaxKey=function(){function e(){_classCallCheck$8(this,e)}return _createClass$8(e,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$9(e,t,n){return t&&_defineProperties$9(e.prototype,t),n&&_defineProperties$9(e,n),e}var DBRef=function(){function o(e,t,n,r){_classCallCheck$9(this,o);var i=e.split(".");2===i.length&&(n=i.shift(),e=i.shift()),this.collection=e,this.oid=t,this.db=n,this.fields=r||{}}return _createClass$9(o,[{key:"toJSON",value:function(){var e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}},{key:"toExtendedJSON",value:function(){var e={$ref:this.collection,$id:this.oid};return this.db&&(e.$db=this.db),e=Object.assign(e,this.fields)}}],[{key:"fromExtendedJSON",value:function(e){var t=Object.assign({},e);return["$ref","$id","$db"].forEach(function(e){return delete t[e]}),new o(e.$ref,e.$id,e.$db,t)}}]),o}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(e){this.collection=e},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$a(e,t,n){return t&&_defineProperties$a(e.prototype,t),n&&_defineProperties$a(e,n),e}var Buffer$3=buffer.Buffer,Binary=function(){function o(e,t){if(_classCallCheck$a(this,o),!(null==e||"string"==typeof e||Buffer$3.isBuffer(e)||e instanceof Uint8Array||Array.isArray(e)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==t?BSON_BINARY_SUBTYPE_DEFAULT:t,this.position=0,null==e||e instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(o.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(o.BUFFER_SIZE)):this.buffer=new Array(o.BUFFER_SIZE);else{if("string"==typeof e)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(e);else{if("undefined"==typeof Uint8Array&&!Array.isArray(e))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(e)}else this.buffer=e;this.position=e.length}}return _createClass$a(o,[{key:"put",value:function(e){if(null!=e.length&&"number"!=typeof e&&1!==e.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof e&&e<0||255<e)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var t=null;if(t="string"==typeof e?e.charCodeAt(0):null!=e.length?e[0]:e,this.buffer.length>this.position)this.buffer[this.position++]=t;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var n=Buffer$3.alloc(o.BUFFER_SIZE+this.buffer.length);this.buffer.copy(n,0,0,this.buffer.length),this.buffer=n,this.buffer[this.position++]=t}else{var r=null;r=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(o.BUFFER_SIZE+this.buffer.length)):new Array(o.BUFFER_SIZE+this.buffer.length);for(var i=0;i<this.buffer.length;i++)r[i]=this.buffer[i];this.buffer=r,this.buffer[this.position++]=t}}},{key:"write",value:function(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+e.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+e.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(e)&&Buffer$3.isBuffer(this.buffer))e.copy(this.buffer,t,0,e.length),this.position=t+e.length>this.position?t+e.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof e&&Buffer$3.isBuffer(this.buffer))this.buffer.write(e,t,"binary"),this.position=t+e.length>this.position?t+e.length:this.position;else if(isUint8Array(e)||Array.isArray(e)&&"string"!=typeof e){for(var i=0;i<e.length;i++)this.buffer[t++]=e[i];this.position=t>this.position?t:this.position}else if("string"==typeof e){for(var o=0;o<e.length;o++)this.buffer[t++]=e.charCodeAt(o);this.position=t>this.position?t:this.position}}},{key:"read",value:function(e,t){if(t=t&&0<t?t:this.position,this.buffer.slice)return this.buffer.slice(e,e+t);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t)):new Array(t),r=0;r<t;r++)n[r]=this.buffer[e++];return n}},{key:"value",value:function(e){if((e=null!=e&&e)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(e){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var t=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)t[n]=this.buffer[n];return t}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(e){return null!=this.buffer?this.buffer.slice(0,this.position).toString(e):""}},{key:"toExtendedJSON",value:function(){var e=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),t=Number(this.sub_type).toString(16);return{$binary:{base64:e,subType:1===t.length?"0"+t:t}}}}],[{key:"fromExtendedJSON",value:function(e){var t=e.$binary.subType?parseInt(e.$binary.subType,16):0;return new o(Buffer$3.from(e.$binary.base64,"base64"),t)}}]),o}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)}function writeStringToArray(e){for(var t="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e.length)):new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function convertArraytoUtf8BinaryString(e,t,n){for(var r="",i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(e){return(_typeof$2="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(e,t,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(BSON_INT32_MIN<=n&&n<=BSON_INT32_MAX)return new int_32(n);if(BSON_INT64_MIN<=n&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter(function(e){return e.startsWith("$")&&null!=n[e]}),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var a=n.$date,u=new Date;return"string"==typeof a?u.setTime(Date.parse(a)):long_1.isLong(a)?u.setTime(a.toNumber()):"number"==typeof a&&r.relaxed&&u.setTime(a),u}if(null!=n.$code){var l=Object.assign({},n);return n.$scope&&(l.$scope=deserializeValue(e,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var c=n.$ref?n:n.$dbPointer;if(c instanceof db_ref)return c;var _=Object.keys(c).filter(function(e){return e.startsWith("$")}),f=!0;if(_.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(f=!1)}),f)return db_ref.fromExtendedJSON(c)}return n}function parse(e,n){var r=this;return"boolean"==typeof(n=Object.assign({},{relaxed:!0},n)).relaxed&&(n.strict=!n.relaxed),"boolean"==typeof n.strict&&(n.relaxed=!n.strict),JSON.parse(e,function(e,t){return deserializeValue(r,e,t,n)})}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(e,t,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==t||"object"!==_typeof$2(t)||Array.isArray(t)||(r=t,t=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(e)?serializeArray(e,r):serializeDocument(e,r);return JSON.stringify(i,t,n)}function serialize(e,t){return t=t||{},JSON.parse(stringify(e,t))}function deserialize(e,t){return t=t||{},parse(JSON.stringify(e),t)}function serializeArray(e,t){return e.map(function(e){return serializeValue(e,t)})}function getISOString(e){var t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function serializeValue(e,t){if(Array.isArray(e))return serializeArray(e,t);if(void 0===e)return null;if(e instanceof Date){var n=e.getTime(),r=-1<n&&n<2534023188e5;return t.relaxed&&r?{$date:getISOString(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){var i=BSON_INT64_MIN<=e&&e<=BSON_INT64_MAX;if(BSON_INT32_MIN<=e&&e<=BSON_INT32_MAX)return{$numberInt:e.toString()};if(i)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){var o=e.flags;return void 0===o&&(o=e.toString().match(/[gimuy]*$/)[0]),new regexp(e.source,o).toExtendedJSON()}return null!=e&&"object"===_typeof$2(e)?serializeDocument(e,t):e}var BSON_TYPE_MAPPINGS={Binary:function(e){return new binary(e.value(),e.subtype)},Code:function(e){return new code(e.code,e.scope)},DBRef:function(e){return new db_ref(e.collection||e.namespace,e.oid,e.db,e.fields)},Decimal128:function(e){return new decimal128(e.bytes)},Double:function(e){return new double_1(e.value)},Int32:function(e){return new int_32(e.value)},Long:function(e){return long_1.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(e){return new objectid(e)},ObjectId:function(e){return new objectid(e)},BSONRegExp:function(e){return new regexp(e.pattern,e.options)},Symbol:function(e){return new symbol(e.value)},Timestamp:function(e){return timestamp.fromBits(e.low,e.high)}};function serializeDocument(e,t){if(null==e||"object"!==_typeof$2(e))throw new Error("not an object instance");var n=e._bsontype;if(void 0===n){var r={};for(var i in e)r[i]=serializeValue(e[i],t);return r}if("string"!=typeof n)throw new Error("_bsontype must be a string, but was: "+_typeof$2(n));var o=e;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,t)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,t),o.db,o.fields)),o.toExtendedJSON(t)}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(e,t,n){for(var r=0,i=t;i<n;i+=1){var o=e[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(e,t,n){var r=(t=null==t?{}:t)&&t.index?t.index:0,i=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(t.allowObjectSmallerThanBufferSize&&e.length<i)throw new Error("buffer length ".concat(e.length," must be >= bson size ").concat(i));if(!t.allowObjectSmallerThanBufferSize&&e.length!==i)throw new Error("buffer length ".concat(e.length," must === bson size ").concat(i));if(i+r>e.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(e),")"));if(0!==e[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(e,r,t,n)}function deserializeObject(e,t,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var a=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,l=null!=n.raw&&n.raw,c="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,_=null!=n.promoteBuffers&&n.promoteBuffers,f=null==n.promoteLongs||n.promoteLongs,h=null==n.promoteValues||n.promoteValues,E=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var p=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(p<5||p>e.length)throw new Error("corrupt bson message");for(var y=r?[]:{},g=0;;){var A=e[t++];if(0===A)break;for(var S=t;0!==e[S]&&S<e.length;)S++;if(S>=Buffer$4.byteLength(e))throw new Error("Bad BSON Document: illegal CString");var d=r?g++:e.toString("utf8",t,S);if(t=S+1,A===constants.BSON_DATA_STRING){var T=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(T<=0||T>e.length-t||0!==e[t+T-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+T-1))throw new Error("Invalid UTF-8 string in BSON document");var P=e.toString("utf8",t,t+T-1);y[d]=P,t+=T}else if(A===constants.BSON_DATA_OID){var v=Buffer$4.alloc(12);e.copy(v,0,t,t+12),y[d]=new objectid(v),t+=12}else if(A===constants.BSON_DATA_INT&&!1===h)y[d]=new int_32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(A===constants.BSON_DATA_INT)y[d]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(A===constants.BSON_DATA_NUMBER&&!1===h)y[d]=new double_1(e.readDoubleLE(t)),t+=8;else if(A===constants.BSON_DATA_NUMBER)y[d]=e.readDoubleLE(t),t+=8;else if(A===constants.BSON_DATA_DATE){var I=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,m=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;y[d]=new Date(new long_1(I,m).toNumber())}else if(A===constants.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");y[d]=1===e[t++]}else if(A===constants.BSON_DATA_OBJECT){var O=t,C=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(C<=0||C>e.length-t)throw new Error("bad embedded document length in bson");y[d]=l?e.slice(t,t+C):deserializeObject(e,O,n,!1),t+=C}else if(A===constants.BSON_DATA_ARRAY){var R=t,N=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,b=n,k=t+N;if(u&&u[d]){for(var M in b={},n)b[M]=n[M];b.raw=!0}if(y[d]=deserializeObject(e,R,b,!0),0!==e[(t+=N)-1])throw new Error("invalid array terminator byte");if(t!==k)throw new Error("corrupted array bson")}else if(A===constants.BSON_DATA_UNDEFINED)y[d]=void 0;else if(A===constants.BSON_DATA_NULL)y[d]=null;else if(A===constants.BSON_DATA_LONG){var D=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,B=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,L=new long_1(D,B);y[d]=f&&!0===h&&L.lessThanOrEqual(JS_INT_MAX_LONG)&&L.greaterThanOrEqual(JS_INT_MIN_LONG)?L.toNumber():L}else if(A===constants.BSON_DATA_DECIMAL128){var w=Buffer$4.alloc(16);e.copy(w,0,t,t+16),t+=16;var F=new decimal128(w);y[d]=F.toObject?F.toObject():F}else if(A===constants.BSON_DATA_BINARY){var Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,U=Y,K=e[t++];if(Y<0)throw new Error("Negative binary type element size found");if(Y>Buffer$4.byteLength(e))throw new Error("Binary type size larger than document size");if(null!=e.slice){if(K===binary.SUBTYPE_BYTE_ARRAY){if((Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U-4<Y)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(Y<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}y[d]=_&&h?e.slice(t,t+Y):new binary(e.slice(t,t+Y),K)}else{var V="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(Y)):new Array(Y);if(K===binary.SUBTYPE_BYTE_ARRAY){if((Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U-4<Y)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(Y<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(S=0;S<Y;S++)V[S]=e[t+S];y[d]=_&&h?V:new binary(V,K)}t+=Y}else if(A===constants.BSON_DATA_REGEXP&&!1===c){for(S=t;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var H=e.toString("utf8",t,S);for(S=t=S+1;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var x=e.toString("utf8",t,S);t=S+1;var G=new Array(x.length);for(S=0;S<x.length;S++)switch(x[S]){case"m":G[S]="m";break;case"s":G[S]="g";break;case"i":G[S]="i"}y[d]=new RegExp(H,G.join(""))}else if(A===constants.BSON_DATA_REGEXP&&!0===c){for(S=t;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var j=e.toString("utf8",t,S);for(S=t=S+1;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var $=e.toString("utf8",t,S);t=S+1,y[d]=new regexp(j,$)}else if(A===constants.BSON_DATA_SYMBOL){var z=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(z<=0||z>e.length-t||0!==e[t+z-1])throw new Error("bad string length in bson");y[d]=e.toString("utf8",t,t+z-1),t+=z}else if(A===constants.BSON_DATA_TIMESTAMP){var W=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,X=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;y[d]=new timestamp(W,X)}else if(A===constants.BSON_DATA_MIN_KEY)y[d]=new min_key;else if(A===constants.BSON_DATA_MAX_KEY)y[d]=new max_key;else if(A===constants.BSON_DATA_CODE){var J=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(J<=0||J>e.length-t||0!==e[t+J-1])throw new Error("bad string length in bson");var Z=e.toString("utf8",t,t+J-1);if(i)if(o){var q=s?a(Z):Z;y[d]=isolateEvalWithHash(functionCache,q,Z,y)}else y[d]=isolateEval(Z);else y[d]=new code(Z);t+=J}else if(A===constants.BSON_DATA_CODE_W_SCOPE){var Q=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var ee=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ee<=0||ee>e.length-t||0!==e[t+ee-1])throw new Error("bad string length in bson");var te=e.toString("utf8",t,t+ee-1),ne=t+=ee,re=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,ie=deserializeObject(e,ne,n,!1);if(t+=re,Q<8+re+ee)throw new Error("code_w_scope total size is to short, truncating scope");if(8+re+ee<Q)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var oe=s?a(te):te;y[d]=isolateEvalWithHash(functionCache,oe,te,y)}else y[d]=isolateEval(te);y[d].scope=ie}else y[d]=new code(te,ie)}else{if(A!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+A.toString(16)+' for fieldname "'+d+'", are you using the latest BSON parser?');var se=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(se<=0||se>e.length-t||0!==e[t+se-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+se-1))throw new Error("Invalid UTF-8 string in BSON document");var ae=e.toString("utf8",t,t+se-1);t+=se;var ue=Buffer$4.alloc(12);e.copy(ue,0,t,t+12);var le=new objectid(ue);t+=12,y[d]=new db_ref(ae,le)}}if(p!=t-E){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var ce=Object.keys(y).filter(function(e){return e.startsWith("$")}),_e=!0;if(ce.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(_e=!1)}),!_e)return y;if(null==y.$id||null==y.$ref)return y;var fe=Object.assign({},y);return delete fe.$ref,delete fe.$id,delete fe.$db,new db_ref(y.$ref,y.$id,y.$db||null,fe)}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(e,t,n,r,i){var o,s,a="big"===n,u=8*i-r-1,l=(1<<u)-1,c=l>>1,_=-7,f=a?0:i-1,h=a?1:-1,E=e[t+f];for(f+=h,o=E&(1<<-_)-1,E>>=-_,_+=u;0<_;o=256*o+e[t+f],f+=h,_-=8);for(s=o&(1<<-_)-1,o>>=-_,_+=r;0<_;s=256*s+e[t+f],f+=h,_-=8);if(0===o)o=1-c;else{if(o===l)return s?NaN:1/0*(E?-1:1);s+=Math.pow(2,r),o-=c}return(E?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(e,t,n,r,i,o){var s,a,u,l="big"===r,c=8*o-i-1,_=(1<<c)-1,f=_>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,E=l?o-1:0,p=l?-1:1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=_):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+f?h/u:h*Math.pow(2,1-f))*u&&(s++,u/=2),_<=s+f?(a=0,s=_):1<=s+f?(a=(t*u-1)*Math.pow(2,i),s+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,i),s=0)),isNaN(t)&&(a=0);8<=i;)e[n+E]=255&a,E+=p,a/=256,i-=8;for(s=s<<i|a,isNaN(t)&&(s+=8),c+=i;0<c;)e[n+E]=255&s,E+=p,s/=256,c-=8;e[n+E-p]|=128*y}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(e){return(_typeof$3="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var Buffer$5=buffer.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(e){return"object"===_typeof$3(e)&&"[object Date]"===Object.prototype.toString.call(e)},isRegExp$1=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function serializeString(e,t,n,r,i){e[r++]=constants.BSON_DATA_STRING;var o=i?e.write(t,r,"ascii"):e.write(t,r,"utf8");e[(r=r+o+1)-1]=0;var s=e.write(n,r+4,"utf8");return e[r+3]=s+1>>24&255,e[r+2]=s+1>>16&255,e[r+1]=s+1>>8&255,e[r]=s+1&255,r=r+4+s,e[r++]=0,r}function serializeNumber(e,t,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8}else{e[r++]=constants.BSON_DATA_LONG,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),a=o.getHighBits();e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255}else e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8;return r}function serializeNull(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NULL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeBoolean(e,t,n,r,i){return e[r++]=constants.BSON_DATA_BOOLEAN,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function serializeDate(e,t,n,r,i){e[r++]=constants.BSON_DATA_DATE,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),a=o.getHighBits();return e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function serializeRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=e.write(n.source,r,"utf8"),e[r++]=0,n.ignoreCase&&(e[r++]=105),n.global&&(e[r++]=115),n.multiline&&(e[r++]=109),e[r++]=0,r}function serializeBSONRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=e.write(n.pattern,r,"utf8"),e[r++]=0,r+=e.write(n.options.split("").sort().join(""),r,"utf8"),e[r++]=0,r}function serializeMinMax(e,t,n,r,i){return null===n?e[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=constants.BSON_DATA_MIN_KEY:e[r++]=constants.BSON_DATA_MAX_KEY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeObjectId(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_OID,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function serializeBuffer(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.length;return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(e,r,0,o),r+=o}function serializeObject(e,t,n,r,i,o,s,a,u,l){for(var c=0;c<l.length;c++)if(l[c]===n)throw new Error("cyclic dependency detected");l.push(n),e[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var _=serializeInto(e,n,i,r,o+1,s,a,l);return l.pop(),_}function serializeDecimal128(e,t,n,r,i){return e[r++]=constants.BSON_DATA_DECIMAL128,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function serializeLong(e,t,n,r,i){e[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function serializeInt32(e,t,n,r,i){return e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function serializeDouble(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n.value,r,"little",52,8),r+=8}function serializeFunction(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_CODE,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a=normalizedFunctionString$1(n),u=e.write(a,r+4,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function serializeCode(e,t,n,r,i,o,s,a,u){if(n.scope&&"object"===_typeof$3(n.scope)){e[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var l=r,c="string"==typeof n.code?n.code:n.code.toString();r+=4;var _=e.write(c,r+4,"utf8")+1;e[r]=255&_,e[r+1]=_>>8&255,e[r+2]=_>>16&255,e[r+3]=_>>24&255,e[r+4+_-1]=0,r=r+_+4;var f=serializeInto(e,n.scope,i,r,o+1,s,a);r=f-1;var h=f-l;e[l++]=255&h,e[l++]=h>>8&255,e[l++]=h>>16&255,e[l++]=h>>24&255,e[r++]=0}else{e[r++]=constants.BSON_DATA_CODE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var E=n.code.toString(),p=e.write(E,r+4,"utf8")+1;e[r]=255&p,e[r+1]=p>>8&255,e[r+2]=p>>16&255,e[r+3]=p>>24&255,r=r+4+p-1,e[r++]=0}return r}function serializeBinary(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255),o.copy(e,r,0,n.position),r+=n.position}function serializeSymbol(e,t,n,r,i){e[r++]=constants.BSON_DATA_SYMBOL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=e.write(n.value,r+4,"utf8")+1;return e[r]=255&o,e[r+1]=o>>8&255,e[r+2]=o>>16&255,e[r+3]=o>>24&255,r=r+4+o-1,e[r++]=0,r}function serializeDBRef(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_OBJECT,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a,u=r,l={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(l.$db=n.db);var c=(a=serializeInto(e,l=Object.assign(l,n.fields),!1,r,i+1,o))-u;return e[u++]=255&c,e[u++]=c>>8&255,e[u++]=c>>16&255,e[u++]=c>>24&255,a}function serializeInto(e,t,n,r,i,o,s,a){r=r||0,(a=a||[]).push(t);var u=r+4;if(Array.isArray(t))for(var l=0;l<t.length;l++){var c=""+l,_=t[l];if(_&&_.toBSON){if("function"!=typeof _.toBSON)throw new TypeError("toBSON is not a function");_=_.toBSON()}var f=_typeof$3(_);if("string"===f)u=serializeString(e,c,_,u,!0);else if("number"===f)u=serializeNumber(e,c,_,u,!0);else if("boolean"===f)u=serializeBoolean(e,c,_,u,!0);else if(_ instanceof Date||isDate$1(_))u=serializeDate(e,c,_,u,!0);else if(void 0===_)u=serializeNull(e,c,_,u,!0);else if(null===_)u=serializeNull(e,c,_,u,!0);else if("ObjectId"===_._bsontype||"ObjectID"===_._bsontype)u=serializeObjectId(e,c,_,u,!0);else if(Buffer$5.isBuffer(_))u=serializeBuffer(e,c,_,u,!0);else if(_ instanceof RegExp||isRegExp$1(_))u=serializeRegExp(e,c,_,u,!0);else if("object"===f&&null==_._bsontype)u=serializeObject(e,c,_,u,n,i,o,s,!0,a);else if("object"===f&&"Decimal128"===_._bsontype)u=serializeDecimal128(e,c,_,u,!0);else if("Long"===_._bsontype||"Timestamp"===_._bsontype)u=serializeLong(e,c,_,u,!0);else if("Double"===_._bsontype)u=serializeDouble(e,c,_,u,!0);else if("function"==typeof _&&o)u=serializeFunction(e,c,_,u,n,i,o);else if("Code"===_._bsontype)u=serializeCode(e,c,_,u,n,i,o,s,!0);else if("Binary"===_._bsontype)u=serializeBinary(e,c,_,u,!0);else if("Symbol"===_._bsontype)u=serializeSymbol(e,c,_,u,!0);else if("DBRef"===_._bsontype)u=serializeDBRef(e,c,_,u,i,o,!0);else if("BSONRegExp"===_._bsontype)u=serializeBSONRegExp(e,c,_,u,!0);else if("Int32"===_._bsontype)u=serializeInt32(e,c,_,u,!0);else if("MinKey"===_._bsontype||"MaxKey"===_._bsontype)u=serializeMinMax(e,c,_,u,!0);else if(void 0!==_._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+_._bsontype)}else if(t instanceof map)for(var h=t.entries(),E=!1;!E;){var p=h.next();if(!(E=p.done)){var y=p.value[0],g=p.value[1],A=_typeof$3(g);if("string"==typeof y&&!ignoreKeys.has(y)){if(null!=y.match(regexp$1))throw Error("key "+y+" must not contain null bytes");if(n){if("$"===y[0])throw Error("key "+y+" must not start with '$'");if(~y.indexOf("."))throw Error("key "+y+" must not contain '.'")}}if("string"===A)u=serializeString(e,y,g,u);else if("number"===A)u=serializeNumber(e,y,g,u);else if("boolean"===A)u=serializeBoolean(e,y,g,u);else if(g instanceof Date||isDate$1(g))u=serializeDate(e,y,g,u);else if(null===g||void 0===g&&!1===s)u=serializeNull(e,y,g,u);else if("ObjectId"===g._bsontype||"ObjectID"===g._bsontype)u=serializeObjectId(e,y,g,u);else if(Buffer$5.isBuffer(g))u=serializeBuffer(e,y,g,u);else if(g instanceof RegExp||isRegExp$1(g))u=serializeRegExp(e,y,g,u);else if("object"===A&&null==g._bsontype)u=serializeObject(e,y,g,u,n,i,o,s,!1,a);else if("object"===A&&"Decimal128"===g._bsontype)u=serializeDecimal128(e,y,g,u);else if("Long"===g._bsontype||"Timestamp"===g._bsontype)u=serializeLong(e,y,g,u);else if("Double"===g._bsontype)u=serializeDouble(e,y,g,u);else if("Code"===g._bsontype)u=serializeCode(e,y,g,u,n,i,o,s);else if("function"==typeof g&&o)u=serializeFunction(e,y,g,u,n,i,o);else if("Binary"===g._bsontype)u=serializeBinary(e,y,g,u);else if("Symbol"===g._bsontype)u=serializeSymbol(e,y,g,u);else if("DBRef"===g._bsontype)u=serializeDBRef(e,y,g,u,i,o);else if("BSONRegExp"===g._bsontype)u=serializeBSONRegExp(e,y,g,u);else if("Int32"===g._bsontype)u=serializeInt32(e,y,g,u);else if("MinKey"===g._bsontype||"MaxKey"===g._bsontype)u=serializeMinMax(e,y,g,u);else if(void 0!==g._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+g._bsontype)}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!==_typeof$3(t))throw new TypeError("toBSON function did not return an object")}for(var S in t){var d=t[S];if(d&&d.toBSON){if("function"!=typeof d.toBSON)throw new TypeError("toBSON is not a function");d=d.toBSON()}var T=_typeof$3(d);if("string"==typeof S&&!ignoreKeys.has(S)){if(null!=S.match(regexp$1))throw Error("key "+S+" must not contain null bytes");if(n){if("$"===S[0])throw Error("key "+S+" must not start with '$'");if(~S.indexOf("."))throw Error("key "+S+" must not contain '.'")}}if("string"===T)u=serializeString(e,S,d,u);else if("number"===T)u=serializeNumber(e,S,d,u);else if("boolean"===T)u=serializeBoolean(e,S,d,u);else if(d instanceof Date||isDate$1(d))u=serializeDate(e,S,d,u);else if(void 0===d)!1===s&&(u=serializeNull(e,S,d,u));else if(null===d)u=serializeNull(e,S,d,u);else if("ObjectId"===d._bsontype||"ObjectID"===d._bsontype)u=serializeObjectId(e,S,d,u);else if(Buffer$5.isBuffer(d))u=serializeBuffer(e,S,d,u);else if(d instanceof RegExp||isRegExp$1(d))u=serializeRegExp(e,S,d,u);else if("object"===T&&null==d._bsontype)u=serializeObject(e,S,d,u,n,i,o,s,!1,a);else if("object"===T&&"Decimal128"===d._bsontype)u=serializeDecimal128(e,S,d,u);else if("Long"===d._bsontype||"Timestamp"===d._bsontype)u=serializeLong(e,S,d,u);else if("Double"===d._bsontype)u=serializeDouble(e,S,d,u);else if("Code"===d._bsontype)u=serializeCode(e,S,d,u,n,i,o,s);else if("function"==typeof d&&o)u=serializeFunction(e,S,d,u,n,i,o);else if("Binary"===d._bsontype)u=serializeBinary(e,S,d,u);else if("Symbol"===d._bsontype)u=serializeSymbol(e,S,d,u);else if("DBRef"===d._bsontype)u=serializeDBRef(e,S,d,u,i,o);else if("BSONRegExp"===d._bsontype)u=serializeBSONRegExp(e,S,d,u);else if("Int32"===d._bsontype)u=serializeInt32(e,S,d,u);else if("MinKey"===d._bsontype||"MaxKey"===d._bsontype)u=serializeMinMax(e,S,d,u);else if(void 0!==d._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+d._bsontype)}}a.pop(),e[u++]=0;var P=u-r;return e[r++]=255&P,e[r++]=P>>8&255,e[r++]=P>>16&255,e[r++]=P>>24&255,u}var serializer=serializeInto;function _typeof$4(e){return(_typeof$4="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var Buffer$6=buffer.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(e){return"object"===_typeof$4(e)&&"[object Date]"===Object.prototype.toString.call(e)}function calculateObjectSize(e,t,n){var r=5;if(Array.isArray(e))for(var i=0;i<e.length;i++)r+=calculateElement(i.toString(),e[i],t,!0,n);else for(var o in e.toBSON&&(e=e.toBSON()),e)r+=calculateElement(o,e[o],t,!1,n);return r}function calculateElement(e,t,n,r,i){switch(t&&t.toBSON&&(t=t.toBSON()),_typeof$4(t)){case"string":return 1+Buffer$6.byteLength(e,"utf8")+1+4+Buffer$6.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=constants.JS_INT_MIN&&t<=constants.JS_INT_MAX&&t>=constants.BSON_INT32_MIN&&t<=constants.BSON_INT32_MAX?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+5:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||isDate$2(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+6+t.length;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&0<Object.keys(t.scope).length?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1+calculateObjectSize(t.scope,n,i):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+Buffer$6.byteLength(t.value,"utf8")+4+1+1;if("DBRef"!==t._bsontype)return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.pattern,"utf8")+1+Buffer$6.byteLength(t.options,"utf8")+1:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+calculateObjectSize(t,n,i)+1;var o=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(o.$db=t.db),(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+calculateObjectSize(o,n,i);case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(n&&null!=t.scope&&0<Object.keys(t.scope).length)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1+calculateObjectSize(t.scope,n,i);if(n)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer.Buffer,ensure_buffer=function(e){if(e instanceof Buffer$7)return e;if(e instanceof Uint8Array)return Buffer$7.from(e.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(e){buffer$1.length<e&&(buffer$1=Buffer$8.alloc(e))}function serialize$1(e,t){var n="boolean"==typeof(t=t||{}).checkKeys&&t.checkKeys,r="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,i="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,o="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,e,n,0,0,r,i,[]),a=Buffer$8.alloc(s);return buffer$1.copy(a,0,0,a.length),a}function serializeWithBufferAndIndex(e,t,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,a=serializer(buffer$1,e,r,0,0,i,o);return buffer$1.copy(t,s,0,a),s+a-1}function deserialize$2(e,t){return e=ensure_buffer(e),deserializer(e,t)}function calculateObjectSize$1(e,t){var n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return calculate_size(e,n,r)}function deserializeStream(e,t,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),e=ensure_buffer(e);for(var s=t,a=0;a<n;a++){var u=e[s]|e[s+1]<<8|e[s+2]<<16|e[s+3]<<24;o.index=s,r[i+a]=deserializer(e,o),s+=u}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;exports.default=bson,exports.BSON_INT32_MAX=bson_1,exports.BSON_INT32_MIN=bson_2,exports.BSON_INT64_MAX=bson_3,exports.BSON_INT64_MIN=bson_4,exports.JS_INT_MAX=bson_5,exports.JS_INT_MIN=bson_6,exports.BSON_DATA_NUMBER=bson_7,exports.BSON_DATA_STRING=bson_8,exports.BSON_DATA_OBJECT=bson_9,exports.BSON_DATA_ARRAY=bson_10,exports.BSON_DATA_BINARY=bson_11,exports.BSON_DATA_UNDEFINED=bson_12,exports.BSON_DATA_OID=bson_13,exports.BSON_DATA_BOOLEAN=bson_14,exports.BSON_DATA_DATE=bson_15,exports.BSON_DATA_NULL=bson_16,exports.BSON_DATA_REGEXP=bson_17,exports.BSON_DATA_DBPOINTER=bson_18,exports.BSON_DATA_CODE=bson_19,exports.BSON_DATA_SYMBOL=bson_20,exports.BSON_DATA_CODE_W_SCOPE=bson_21,exports.BSON_DATA_INT=bson_22,exports.BSON_DATA_TIMESTAMP=bson_23,exports.BSON_DATA_LONG=bson_24,exports.BSON_DATA_DECIMAL128=bson_25,exports.BSON_DATA_MIN_KEY=bson_26,exports.BSON_DATA_MAX_KEY=bson_27,exports.BSON_BINARY_SUBTYPE_DEFAULT=bson_28,exports.BSON_BINARY_SUBTYPE_FUNCTION=bson_29,exports.BSON_BINARY_SUBTYPE_BYTE_ARRAY=bson_30,exports.BSON_BINARY_SUBTYPE_UUID=bson_31,exports.BSON_BINARY_SUBTYPE_MD5=bson_32,exports.BSON_BINARY_SUBTYPE_USER_DEFINED=bson_33,exports.Code=bson_34,exports.BSONSymbol=bson_35,exports.DBRef=bson_36,exports.Binary=bson_37,exports.ObjectId=bson_38,exports.Long=bson_39,exports.Timestamp=bson_40,exports.Double=bson_41,exports.Int32=bson_42,exports.MinKey=bson_43,exports.MaxKey=bson_44,exports.BSONRegExp=bson_45,exports.Decimal128=bson_46,exports.serialize=bson_47,exports.serializeWithBufferAndIndex=bson_48,exports.deserialize=bson_49,exports.calculateObjectSize=bson_50,exports.deserializeStream=bson_51,exports.setInternalBufferSize=bson_52,exports.ObjectID=bson_53,exports.EJSON=bson_54,Object.defineProperty(exports,"__esModule",{value:!0})},Fu(exports,__webpack_require__(6),__webpack_require__(1))}).call(exports,__webpack_require__(0),__webpack_require__(1).Buffer)},function(e,t,n){t.byteLength=function(e){var t=_(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=_(e),i=r[0],o=r[1],s=new c(function(e,t,n){return 3*(t+n)/4-n}(0,i,o)),a=0,u=0<o?i-4:i;for(n=0;n<u;n+=4)t=l[e.charCodeAt(n)]<<18|l[e.charCodeAt(n+1)]<<12|l[e.charCodeAt(n+2)]<<6|l[e.charCodeAt(n+3)],s[a++]=t>>16&255,s[a++]=t>>8&255,s[a++]=255&t;2===o&&(t=l[e.charCodeAt(n)]<<2|l[e.charCodeAt(n+1)]>>4,s[a++]=255&t);1===o&&(t=l[e.charCodeAt(n)]<<10|l[e.charCodeAt(n+1)]<<4|l[e.charCodeAt(n+2)]>>2,s[a++]=t>>8&255,s[a++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],o=0,s=n-r;o<s;o+=16383)i.push(u(e,o,s<o+16383?s:o+16383));1==r?(t=e[n-1],i.push(a[t>>2]+a[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],i.push(a[t>>10]+a[t>>4&63]+a[t<<2&63]+"="));return i.join("")};for(var a=[],l=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,o=r.length;i<o;++i)a[i]=r[i],l[r.charCodeAt(i)]=i;function _(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,i,o=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(a[(i=r)>>18&63]+a[i>>12&63]+a[i>>6&63]+a[63&i]);return o.join("")}l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,_=n?i-1:0,f=n?-1:1,h=e[t+_];for(_+=f,o=h&(1<<-c)-1,h>>=-c,c+=a;0<c;o=256*o+e[t+_],_+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;0<c;s=256*s+e[t+_],_+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,_=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,E=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+_?f/u:f*Math.pow(2,1-_))*u&&(s++,u/=2),c<=s+_?(a=0,s=c):1<=s+_?(a=(t*u-1)*Math.pow(2,i),s+=_):(a=t*Math.pow(2,_-1)*Math.pow(2,i),s=0));8<=i;e[n+h]=255&a,h+=E,a/=256,i-=8);for(s=s<<i|a,l+=i;0<l;e[n+h]=255&s,h+=E,s/=256,l-=8);e[n+h-E]|=128*p}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=r;var h=null;try{h=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function E(e){return!0===(e&&e.__isLong__)}Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=E;var o={},s={};function n(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=y(e,(0|e)<0?-1:0,!0),i&&(s[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=y(e,e<0?-1:0,!1),i&&(o[e]=n),n)}function p(e,t){if(isNaN(e))return t?l:S;if(t){if(e<0)return l;if(a<=e)return v}else{if(e<=-u)return I;if(u<=e+1)return P}return e<0?p(-e,t).neg():y(e%i|0,e/i|0,t)}function y(e,t,n){return new r(e,t,n)}r.fromInt=n,r.fromNumber=p,r.fromBits=y;var c=Math.pow;function _(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return S;if(t="number"==typeof t?(n=t,!1):!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if(0<(r=e.indexOf("-")))throw Error("interior hyphen");if(0===r)return _(e.substring(1),t,n).neg();for(var i=p(c(n,8)),o=S,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),u=parseInt(e.substring(s,s+a),n);if(a<8){var l=p(c(n,a));o=o.mul(l).add(p(u))}else o=(o=o.mul(i)).add(p(u))}return o.unsigned=t,o}function g(e,t){return"number"==typeof e?p(e,t):"string"==typeof e?_(e,t):y(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=_,r.fromValue=g;var i=4294967296,a=i*i,u=a/2,A=n(1<<24),S=n(0);r.ZERO=S;var l=n(0,!0);r.UZERO=l;var f=n(1);r.ONE=f;var d=n(1,!0);r.UONE=d;var T=n(-1);r.NEG_ONE=T;var P=y(-1,2147483647,!1);r.MAX_VALUE=P;var v=y(-1,-1,!0);r.MAX_UNSIGNED_VALUE=v;var I=y(0,-2147483648,!1);r.MIN_VALUE=I;var m=r.prototype;m.toInt=function(){return this.unsigned?this.low>>>0:this.low},m.toNumber=function(){return this.unsigned?(this.high>>>0)*i+(this.low>>>0):this.high*i+(this.low>>>0)},m.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=p(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=p(c(e,6),this.unsigned),o=this,s="";;){var a=o.div(i),u=(o.sub(a.mul(i)).toInt()>>>0).toString(e);if((o=a).isZero())return u+s;for(;u.length<6;)u="0"+u;s=""+u+s}},m.getHighBits=function(){return this.high},m.getHighBitsUnsigned=function(){return this.high>>>0},m.getLowBits=function(){return this.low},m.getLowBitsUnsigned=function(){return this.low>>>0},m.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;0<t&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},m.isZero=function(){return 0===this.high&&0===this.low},m.eqz=m.isZero,m.isNegative=function(){return!this.unsigned&&this.high<0},m.isPositive=function(){return this.unsigned||0<=this.high},m.isOdd=function(){return 1==(1&this.low)},m.isEven=function(){return 0==(1&this.low)},m.equals=function(e){return E(e)||(e=g(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},m.eq=m.equals,m.notEquals=function(e){return!this.eq(e)},m.neq=m.notEquals,m.ne=m.notEquals,m.lessThan=function(e){return this.comp(e)<0},m.lt=m.lessThan,m.lessThanOrEqual=function(e){return this.comp(e)<=0},m.lte=m.lessThanOrEqual,m.le=m.lessThanOrEqual,m.greaterThan=function(e){return 0<this.comp(e)},m.gt=m.greaterThan,m.greaterThanOrEqual=function(e){return 0<=this.comp(e)},m.gte=m.greaterThanOrEqual,m.ge=m.greaterThanOrEqual,m.compare=function(e){if(E(e)||(e=g(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},m.comp=m.compare,m.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(f)},m.neg=m.negate,m.add=function(e){E(e)||(e=g(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=65535&this.low,o=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=0,l=0,c=0,_=0;return c+=(_+=i+(65535&e.low))>>>16,l+=(c+=r+a)>>>16,u+=(l+=n+s)>>>16,u+=t+o,y((c&=65535)<<16|(_&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},m.subtract=function(e){return E(e)||(e=g(e)),this.add(e.neg())},m.sub=m.subtract,m.multiply=function(e){if(this.isZero())return S;if(E(e)||(e=g(e)),h)return y(h.mul(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned);if(e.isZero())return S;if(this.eq(I))return e.isOdd()?I:S;if(e.eq(I))return this.isOdd()?I:S;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(A)&&e.lt(A))return p(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=65535&this.low,o=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=65535&e.low,l=0,c=0,_=0,f=0;return _+=(f+=i*u)>>>16,c+=(_+=r*u)>>>16,_&=65535,c+=(_+=i*a)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*a)>>>16,c&=65535,l+=(c+=i*s)>>>16,l+=t*u+n*a+r*s+i*o,y((_&=65535)<<16|(f&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},m.mul=m.multiply,m.divide=function(e){if(E(e)||(e=g(e)),e.isZero())throw Error("division by zero");var t,n,r;if(h)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?y((this.unsigned?h.div_u:h.div_s)(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?l:S;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return l;if(e.gt(this.shru(1)))return d;r=l}else{if(this.eq(I))return e.eq(f)||e.eq(T)?I:e.eq(I)?f:(t=this.shr(1).div(e).shl(1)).eq(S)?e.isNegative()?f:T:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));else if(e.eq(I))return this.unsigned?l:S;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=S}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(t)/Math.LN2),o=i<=48?1:c(2,i-48),s=p(t),a=s.mul(e);a.isNegative()||a.gt(n);)a=(s=p(t-=o,this.unsigned)).mul(e);s.isZero()&&(s=f),r=r.add(s),n=n.sub(a)}return r},m.div=m.divide,m.modulo=function(e){return E(e)||(e=g(e)),h?y((this.unsigned?h.rem_u:h.rem_s)(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},m.mod=m.modulo,m.rem=m.modulo,m.not=function(){return y(~this.low,~this.high,this.unsigned)},m.and=function(e){return E(e)||(e=g(e)),y(this.low&e.low,this.high&e.high,this.unsigned)},m.or=function(e){return E(e)||(e=g(e)),y(this.low|e.low,this.high|e.high,this.unsigned)},m.xor=function(e){return E(e)||(e=g(e)),y(this.low^e.low,this.high^e.high,this.unsigned)},m.shiftLeft=function(e){return E(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?y(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):y(0,this.low<<e-32,this.unsigned)},m.shl=m.shiftLeft,m.shiftRight=function(e){return E(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?y(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):y(this.high>>e-32,0<=this.high?0:-1,this.unsigned)},m.shr=m.shiftRight,m.shiftRightUnsigned=function(e){if(E(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?y(this.low>>>e|t<<32-e,t>>>e,this.unsigned):y(32===e?t:t>>>e-32,0,this.unsigned)},m.shru=m.shiftRightUnsigned,m.shr_u=m.shiftRightUnsigned,m.toSigned=function(){return this.unsigned?y(this.low,this.high,!1):this},m.toUnsigned=function(){return this.unsigned?this:y(this.low,this.high,!0)},m.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},m.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},m.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}}],Gk={},Hk.m=Fk,Hk.c=Gk,Hk.d=function(e,t,n){Hk.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},Hk.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return Hk.d(t,"a",t),t},Hk.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},Hk.p="",Hk(Hk.s=2))}),BSON=unwrapExports(bson_common),bson=BSON.bson,Bson=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"serialize",value:function(e){return bson.serialize(e)}},{key:"deserialize",value:function(e){return bson.deserialize(e)}}]),e}(),SdlPacket=function(){function _(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1,t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-1,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:-1,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:-1,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:0,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:null,l=9<arguments.length&&void 0!==arguments[9]?arguments[9]:0,c=10<arguments.length&&void 0!==arguments[10]?arguments[10]:0;return _classCallCheck(this,_),this._version=e,this._encryption=t,this._frameType=n,this._serviceType=r,this._frameInfo=i,this._sessionID=o,this._dataSize=s,this._messageID=a,this._payload=u,this._offset=l,this._bytesToWrite=c,this._bsonPayload=void 0,null!==u&&(this._payload=new Uint8Array(u.slice(l,c+l))),this}return _createClass(_,[{key:"getVersion",value:function(){return this._version}},{key:"getEncryption",value:function(){return this._encryption}},{key:"getServiceType",value:function(){return this._serviceType}},{key:"getFrameInfo",value:function(){return this._frameInfo}},{key:"getSessionID",value:function(){return this._sessionID}},{key:"getMessageID",value:function(){return this._messageID}},{key:"getDataSize",value:function(){return this._dataSize}},{key:"setPayload",value:function(e){return this._payload=e,this}},{key:"getPayload",value:function(){return this._payload}},{key:"getFrameType",value:function(){return null!==FrameType.keyForValue(this._frameType)?this._frameType:FrameType.SINGLE}},{key:"toString",value:function(){var e="***** Sdl Packet *****";return e+="\nVersion: ".concat(this._version),e+="\nEncryption: ".concat(this._encryption),e+="\nFrameType: ".concat(this._frameType),e+="\nServiceType: ".concat(this._serviceType),e+="\nFrameInfo: ".concat(this._frameInfo),e+="\nSessionID: ".concat(this._sessionID),e+="\nDataSize: ".concat(this._dataSize),1<this._version&&(e+="\nMessageID: ".concat(this._messageID)),e+="\n***** Sdl Packet End *****"}},{key:"toPacket",value:function(){return this._bsonPayload&&(this._payload=Bson.serialize(this._bsonPayload),this._dataSize=this._payload.length),_.constructPacket(this._version,this._encryption,this._frameType,this._serviceType,this._frameInfo,this._sessionID,this._dataSize,this._messageID,this._payload)}},{key:"putTag",value:function(e,t){this._bsonPayload||(this._bsonPayload={}),this._bsonPayload[e]=t}},{key:"getTag",value:function(e){return this._bsonPayload?this._bsonPayload[e]:this._payload&&0!==this._payload.length?(this._bsonPayload=Bson.deserialize(this._payload),this._bsonPayload[e]):null}}],[{key:"getEncryptionBit",value:function(e){return e?_.ENCRYPTION_MASK:0}},{key:"constructPacket",value:function(e,t,n,r,i,o,s,a,u){var l=null,c=0;return(l=1<e?new Uint8Array(_.HEADER_SIZE+s):new Uint8Array(_.HEADER_SIZE_V1+s))[c++]=(e<<4)+_.getEncryptionBit(t)+n,l[c++]=r,l[c++]=i,l[c++]=o,l[c++]=(4278190080&s)>>24,l[c++]=(16711680&s)>>16,l[c++]=(65280&s)>>8,l[c++]=255&s,1<e&&(l[c++]=(4278190080&a)>>24,l[c++]=(16711680&a)>>16,l[c++]=(65280&a)>>8,l[c++]=255&a),null!==u&&0<u.length&&l.set(u,c),l}}]),_}();SdlPacket.EXTRA_PARCEL_DATA_LENGTH=24,SdlPacket.HEADER_SIZE=12,SdlPacket.HEADER_SIZE_V1=8,SdlPacket.ENCRYPTION_MASK=8,SdlPacket.SERVICE_TYPE_CONTROL=0,SdlPacket.SERVICE_TYPE_RPC=7,SdlPacket.SERVICE_TYPE_PCM=10,SdlPacket.SERVICE_TYPE_VIDEO=11,SdlPacket.SERVICE_TYPE_BULK_DATA=15,SdlPacket.FRAME_INFO_HEART_BEAT=0,SdlPacket.FRAME_INFO_START_SERVICE=1,SdlPacket.FRAME_INFO_START_SERVICE_ACK=2,SdlPacket.FRAME_INFO_START_SERVICE_NAK=3,SdlPacket.FRAME_INFO_END_SERVICE=4,SdlPacket.FRAME_INFO_END_SERVICE_ACK=5,SdlPacket.FRAME_INFO_END_SERVICE_NAK=6,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT=7,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK=8,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK=9,SdlPacket.FRAME_INFO_TRANSPORT_EVENT_UPDATE=253,SdlPacket.FRAME_INFO_SERVICE_DATA_ACK=254,SdlPacket.FRAME_INFO_HEART_BEAT_ACK=255,SdlPacket.FRAME_INFO_FINAL_CONNESCUTIVE_FRAME=0,SdlPacket.FRAME_INFO_RESERVED=0;var global$1="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,inited=!1;function init(){inited=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,n=e.length;t<n;++t)lookup[t]=e[t],revLookup[e.charCodeAt(t)]=t;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63}function toByteArray(e){var t,n,r,i,o;inited||init();var s=e.length;if(0<s%4)throw new Error("Invalid string. Length must be a multiple of 4");i="="===e[s-2]?2:"="===e[s-1]?1:0,o=new Arr(3*s/4-i),n=0<i?s-4:s;var a=0;for(t=0;t<n;t+=4,3)r=revLookup[e.charCodeAt(t)]<<18|revLookup[e.charCodeAt(t+1)]<<12|revLookup[e.charCodeAt(t+2)]<<6|revLookup[e.charCodeAt(t+3)],o[a++]=r>>16&255,o[a++]=r>>8&255,o[a++]=255&r;return 2==i?(r=revLookup[e.charCodeAt(t)]<<2|revLookup[e.charCodeAt(t+1)]>>4,o[a++]=255&r):1==i&&(r=revLookup[e.charCodeAt(t)]<<10|revLookup[e.charCodeAt(t+1)]<<4|revLookup[e.charCodeAt(t+2)]>>2,o[a++]=r>>8&255,o[a++]=255&r),o}function tripletToBase64(e){return lookup[e>>18&63]+lookup[e>>12&63]+lookup[e>>6&63]+lookup[63&e]}function encodeChunk(e,t,n){for(var r,i=[],o=t;o<n;o+=3)r=(e[o]<<16)+(e[o+1]<<8)+e[o+2],i.push(tripletToBase64(r));return i.join("")}function fromByteArray(e){var t;inited||init();for(var n=e.length,r=n%3,i="",o=[],s=0,a=n-r;s<a;s+=16383)o.push(encodeChunk(e,s,a<s+16383?a:s+16383));return 1==r?(t=e[n-1],i+=lookup[t>>2],i+=lookup[t<<4&63],i+="=="):2==r&&(t=(e[n-2]<<8)+e[n-1],i+=lookup[t>>10],i+=lookup[t>>4&63],i+=lookup[t<<2&63],i+="="),o.push(i),o.join("")}function read(e,t,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,_=n?i-1:0,f=n?-1:1,h=e[t+_];for(_+=f,o=h&(1<<-c)-1,h>>=-c,c+=a;0<c;o=256*o+e[t+_],_+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;0<c;s=256*s+e[t+_],_+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)}function write(e,t,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,_=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,E=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+_?f/u:f*Math.pow(2,1-_))*u&&(s++,u/=2),c<=s+_?(a=0,s=c):1<=s+_?(a=(t*u-1)*Math.pow(2,i),s+=_):(a=t*Math.pow(2,_-1)*Math.pow(2,i),s=0));8<=i;e[n+h]=255&a,h+=E,a/=256,i-=8);for(s=s<<i|a,l+=i;0<l;e[n+h]=255&s,h+=E,s/=256,l-=8);e[n+h-E]|=128*p}var toString={}.toString,isArray=Array.isArray||function(e){return"[object Array]"==toString.call(e)},INSPECT_MAX_BYTES=50;function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(e,t){if(kMaxLength()<t)throw new RangeError("Invalid typed array length");return Buffer.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Buffer.prototype:(null===e&&(e=new Buffer(t)),e.length=t),e}function Buffer(e,t,n){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(e,t,n);if("number"!=typeof e)return from(this,e,t,n);if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(this,e)}function from(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?fromArrayBuffer(e,t,n,r):"string"==typeof t?fromString(e,t,n):fromObject(e,t)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,n,r){return assertSize(t),t<=0?createBuffer(e,t):void 0!==n?"string"==typeof r?createBuffer(e,t).fill(n,r):createBuffer(e,t).fill(n):createBuffer(e,t)}function allocUnsafe(e,t){if(assertSize(t),e=createBuffer(e,t<0?0:0|checked(t)),!Buffer.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function fromString(e,t,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(t,n),i=(e=createBuffer(e,r)).write(t,n);return i!==r&&(e=e.slice(0,i)),e}function fromArrayLike(e,t){var n=t.length<0?0:0|checked(t.length);e=createBuffer(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function fromArrayBuffer(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r),Buffer.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Buffer.prototype:e=fromArrayLike(e,t),e}function fromObject(e,t){if(internalIsBuffer(t)){var n=0|checked(t.length);return 0===(e=createBuffer(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||isnan(t.length)?createBuffer(e,0):fromArrayLike(e,t);if("Buffer"===t.type&&isArray(t.data))return fromArrayLike(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|e}function internalIsBuffer(e){return!(null==e||!e._isBuffer)}function byteLength(e,t){if(internalIsBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return base64ToBytes(e).length;default:if(r)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),r=!0}}function slowToString(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return hexSlice(this,t,n);case"utf8":case"utf-8":return utf8Slice(this,t,n);case"ascii":return asciiSlice(this,t,n);case"latin1":case"binary":return latin1Slice(this,t,n);case"base64":return base64Slice(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function swap(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function bidirectionalIndexOf(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=Buffer.from(t,r)),internalIsBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,n,r,i);if("number"==typeof t)return t&=255,Buffer.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):arrayIndexOf(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,n,r,i){var o,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a/=s=2,u/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(a<n+u&&(n=a-u),o=n;0<=o;o--){for(var _=!0,f=0;f<u;f++)if(l(e,o+f)!==l(t,f)){_=!1;break}if(_)return o}return-1}function hexWrite(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?i<(r=Number(r))&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");o/2<r&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function utf8Write(e,t,n,r){return blitBuffer(utf8ToBytes(t,e.length-n),e,n,r)}function asciiWrite(e,t,n,r){return blitBuffer(asciiToBytes(t),e,n,r)}function latin1Write(e,t,n,r){return asciiWrite(e,t,n,r)}function base64Write(e,t,n,r){return blitBuffer(base64ToBytes(t),e,n,r)}function ucs2Write(e,t,n,r){return blitBuffer(utf16leToBytes(t,e.length-n),e,n,r)}function base64Slice(e,t,n){return 0===t&&n===e.length?fromByteArray(e):fromByteArray(e.slice(t,n))}function utf8Slice(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,u,l=e[i],c=null,_=239<l?4:223<l?3:191<l?2:1;if(i+_<=n)switch(_){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&127<(u=(31&l)<<6|63&o)&&(c=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&2047<(u=(15&l)<<12|(63&o)<<6|63&s)&&(u<55296||57343<u)&&(c=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&65535<(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)&&u<1114112&&(c=u)}null===c?(c=65533,_=1):65535<c&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=_}return decodeCodePointsArray(r)}Buffer.TYPED_ARRAY_SUPPORT=void 0===global$1.TYPED_ARRAY_SUPPORT||global$1.TYPED_ARRAY_SUPPORT,Buffer.poolSize=8192,Buffer._augment=function(e){return e.__proto__=Buffer.prototype,e},Buffer.from=function(e,t,n){return from(null,e,t,n)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array),Buffer.alloc=function(e,t,n){return alloc(null,e,t,n)},Buffer.allocUnsafe=function(e){return allocUnsafe(null,e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(null,e)},Buffer.isBuffer=isBuffer,Buffer.compare=function(e,t){if(!internalIsBuffer(e)||!internalIsBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var n;if(void 0===t)for(n=t=0;n<e.length;++n)t+=e[n].length;var r=Buffer.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!internalIsBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(e){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,n,r,i){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(i<=r&&n<=t)return 0;if(i<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(r,i),l=e.slice(t,n),c=0;c<a;++c)if(u[c]!==l[c]){o=u[c],s=l[c];break}return o<s?-1:s<o?1:0},Buffer.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Buffer.prototype.indexOf=function(e,t,n){return bidirectionalIndexOf(this,e,t,n,!0)},Buffer.prototype.lastIndexOf=function(e,t,n){return bidirectionalIndexOf(this,e,t,n,!1)},Buffer.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||i<n)&&(n=i),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var o=!1;;)switch(r){case"hex":return hexWrite(this,e,t,n);case"utf8":case"utf-8":return utf8Write(this,e,t,n);case"ascii":return asciiWrite(this,e,t,n);case"latin1":case"binary":return latin1Write(this,e,t,n);case"base64":return base64Write(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=MAX_ARGUMENTS_LENGTH));return n}function asciiSlice(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function latin1Slice(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function hexSlice(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var i="",o=t;o<n;++o)i+=toHex(e[o]);return i}function utf16leSlice(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function checkOffset(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,n,r,i,o){if(!internalIsBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(i<t||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function objectWriteUInt16(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function objectWriteUInt32(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function checkIEEE754(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function writeFloat(e,t,n,r,i){return i||checkIEEE754(e,t,n,4),write(e,t,n,r,23,4),n+4}function writeDouble(e,t,n,r,i){return i||checkIEEE754(e,t,n,8),write(e,t,n,r,52,8),n+8}Buffer.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e),Buffer.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=Buffer.prototype;else{var i=t-e;n=new Buffer(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},Buffer.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},Buffer.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e+--t],i=1;0<t&&(i*=256);)r+=this[e+--t]*i;return r},Buffer.prototype.readUInt8=function(e,t){return t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return(i*=128)<=r&&(r-=Math.pow(2,8*t)),r},Buffer.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=t,i=1,o=this[e+--r];0<r&&(i*=256);)o+=this[e+--r]*i;return(i*=128)<=o&&(o-=Math.pow(2,8*t)),o},Buffer.prototype.readInt8=function(e,t){return t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer.prototype.readInt16LE=function(e,t){t||checkOffset(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt16BE=function(e,t){t||checkOffset(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt32LE=function(e,t){return t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},Buffer.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;0<=--i&&(o*=256);)this[t+i]=e/o&255;return t+n},Buffer.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);checkInt(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},Buffer.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);checkInt(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;0<=--o&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},Buffer.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeFloatLE=function(e,t,n){return writeFloat(this,e,t,!0,n)},Buffer.prototype.writeFloatBE=function(e,t,n){return writeFloat(this,e,t,!1,n)},Buffer.prototype.writeDoubleLE=function(e,t,n){return writeDouble(this,e,t,!0,n)},Buffer.prototype.writeDoubleBE=function(e,t,n){return writeDouble(this,e,t,!1,n)},Buffer.prototype.copy=function(e,t,n,r){if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;0<=i;--i)e[i+t]=this[i+n];else if(o<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},Buffer.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Buffer.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(o=t;o<n;++o)this[o]=e;else{var s=internalIsBuffer(e)?e:utf8ToBytes(new Buffer(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(e){if((e=stringtrim(e).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function stringtrim(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if(55295<(n=e.charCodeAt(s))&&n<57344){if(!i){if(56319<n){-1<(t-=3)&&o.push(239,191,189);continue}if(s+1===r){-1<(t-=3)&&o.push(239,191,189);continue}i=n;continue}if(n<56320){-1<(t-=3)&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&-1<(t-=3)&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function asciiToBytes(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function utf16leToBytes(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)r=(n=e.charCodeAt(s))>>8,i=n%256,o.push(i),o.push(r);return o}function base64ToBytes(e){return toByteArray(base64clean(e))}function blitBuffer(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function isnan(e){return e!=e}function isBuffer(e){return null!=e&&(!!e._isBuffer||isFastBuffer(e)||isSlowBuffer(e))}function isFastBuffer(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function isSlowBuffer(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&isFastBuffer(e.slice(0,0))}var TextEncoder=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"encode",value:function(e){for(var t=e.length,n=-1,r=[],i=0,o=0,s=0;s!==t;){if(i=e.charCodeAt(s),s+=1,55296<=i&&i<=56319){if(s===t){r[n+=1]=239,r[n+=1]=191,r[n+=1]=189;break}if(!(56320<=(o=e.charCodeAt(s))&&o<=57343)){r[n+=1]=239,r[n+=1]=191,r[n+=1]=189;continue}if(s+=1,65535<(i=1024*(i-55296)+o-56320+65536)){r[n+=1]=240|i>>>18,r[n+=1]=128|i>>>12&63,r[n+=1]=128|i>>>6&63,r[n+=1]=128|63&i;continue}}i<=127?r[n+=1]=0|i:(i<=2047?r[n+=1]=192|i>>>6:(r[n+=1]=224|i>>>12,r[n+=1]=128|i>>>6&63),r[n+=1]=128|63&i)}return r.length=n+1,r}}]),e}(),JsonRpcMarshaller=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"marshall",value:function(e){var t=null;try{var n=function e(t){var n=t.getParameters();for(var r in n)n[r]instanceof RpcStruct&&(n[r]=e(n[r]));return n}(e),r=JSON.stringify(n);t=this._encode(r)}catch(e){console.error("Failed to encode messages to JSON.",e)}return t}},{key:"unmarshall",value:function(e){var t=null;try{var n=this._decode(e);t=JSON.parse(n)}catch(e){console.error("Failed to parse JSON",e)}return t}},{key:"_encode",value:function(e){return new Uint8Array(TextEncoder.encode(e))}},{key:"_decode",value:function(e){return Buffer.from(e).toString()}}]),e}(),BinaryFrameHeader=function(){function l(e,t,n,r){_classCallCheck(this,l),this._rpcType=e,this._functionId=t,this._correlationId=n,this._jsonSize=r,this._bulkData=null,this._jsonData=null}return _createClass(l,[{key:"assembleHeaderBytes",value:function(){var e=[],t=this._functionId,n=this._correlationId;this._rpcType;e.push((251658240&t)>>24),e.push((16711680&t)>>16),e.push((65280&t)>>8),e.push(255&t),e.push((4278190080&n)>>24),e.push((16711680&n)>>16),e.push((65280&n)>>8),e.push(255&n);var r=this._jsonSize;return e.push((4278190080&r)>>24),e.push((16711680&r)>>16),e.push((65280&r)>>8),e.push(255&r),e}},{key:"setRpcType",value:function(e){return this._rpcType=e,this}},{key:"getRpcType",value:function(){return this._rpcType}},{key:"setFunctionId",value:function(e){return this._functionId=e,this}},{key:"getFunctionId",value:function(){return this._functionId}},{key:"setCorrelationId",value:function(e){return this._correlationId=e,this}},{key:"getCorrelationId",value:function(){return this._correlationId}},{key:"setJsonSize",value:function(e){return this._jsonSize=e,this}},{key:"getJsonSize",value:function(){return this._jsonSize}},{key:"getJsonData",value:function(){return this._jsonData}},{key:"setJsonData",value:function(e){return this._jsonData=e,this}},{key:"setBulkData",value:function(e){return this._bulkData=e,this}},{key:"getBulkData",value:function(){return this._bulkData}}],[{key:"fromBinaryHeader",value:function(e){var t=e[0]>>4,n=(15&e[0])<<24;n+=(255&e[1])<<16,n+=(255&e[2])<<8,n+=255&e[3];var r=(255&e[4])<<24;r+=(255&e[5])<<16,r+=(255&e[6])<<8,r+=255&e[7];var i=(255&e[8])<<24;i+=(255&e[9])<<16,i+=(255&e[10])<<8;var o=new l(t,n,r,i+=255&e[11]),s=l.HEADER_SIZE,a=l.HEADER_SIZE+i;if(o.setJsonData(e.slice(s,a)),e.length>a){var u=e.slice(a);o.setBulkData(u)}return o}}]),l}();BinaryFrameHeader.HEADER_SIZE=12;var MessageFrameDisassembler=function(){function u(e,t,n,r,i,o,s){if(_classCallCheck(this,u),this._rpcRequest=e,this._sessionId=t,this._messageId=n,this._isEncrypted=o,!r)throw"MTU must be specified.";if(this._mtu=r,!i)throw"Version must be specified.";this._version=i,this._packetCallback=s}return _createClass(u,[{key:"_buildRPCMainBuffer",value:function(){var e=this._rpcRequest.getBulkData(),t=this._rpcRequest.getCorrelationId(),n=this._rpcRequest.getRPCType(),r=this._rpcRequest.getFunctionName(),i=FunctionID.valueForKey(r);if(!i)throw new Error("Failed to find function ".concat(r));var o=JsonRpcMarshaller.marshall(this._rpcRequest),s=o.length,a=new BinaryFrameHeader(n,i,t);a.setJsonData(o),a.setJsonSize(s),a.setBulkData(e);var u=a.getBulkData(),l=0;u&&(l=u.length);var c=new Uint8Array(12+s+l);return c.set(a.assembleHeaderBytes(),0),c.set(o,12),u&&c.set(u,12+s),c}},{key:"doRequest",value:function(){var e=this._version,t=FrameType.SINGLE,n=SdlPacket.SERVICE_TYPE_RPC,r=this._sessionId,i=this._messageId,o=this._isEncrypted,s=this._buildRPCMainBuffer(),a=this._mtu,u=Math.ceil(s.length/a);if(u<=1){var l=this._constructPacket(e,n,0,r,i,t,s,o);this._packetCallback(l)}else{var c=new ArrayBuffer(8),_=new DataView(c);_.setUint32(0,s.length,!1),_.setUint32(4,u,!1);var f=new Uint8Array(c),h=this._constructPacket(e,n,0,r,i,FrameType.FIRST,f,o);this._packetCallback(h),this._buildConsecutiveFrames(e,n,r,i,s,a,o)}}},{key:"_constructPacket",value:function(e,t,n,r,i,o,s,a){var u=s.length;return new SdlPacket(e,a,o,t,n,r,u,i,s,0,u)}},{key:"_buildConsecutiveFrames",value:function(e,t,n,r,i,o,s){for(var a,u=0,l=0;0!==a;){a=l+o>=i.length?0:u%255+1;var c=this._constructPacket(e,t,a,n,r,FrameType.CONSECUTIVE,i.slice(l,l+o),s);this._packetCallback(c),u++,l+=o}}}],[{key:"buildRPC",value:function(e,t,n,r,i,o,s){var a=new u(e,t,n,r,i,o,s);return a.doRequest(),a}}]),u}(),TransportListener=function(){function e(){_classCallCheck(this,e),this._onTransportConnected=null,this._onTransportDisconnected=null,this._onError=null,this._onPacketReceived=null}return _createClass(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}},{key:"setOnTransportDisconnected",value:function(e){return this._onTransportDisconnected=e,this}},{key:"setOnError",value:function(e){return this._onError=e,this}},{key:"setOnPacketReceived",value:function(e){return this._onPacketReceived=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onTransportDisconnected",value:function(){"function"==typeof this._onTransportDisconnected&&this._onTransportDisconnected()}},{key:"onError",value:function(e){var t=0<arguments.length&&void 0!==e?e:null;"function"==typeof this._onError&&this._onError(t)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),Version=function(){function r(e,t,n){_classCallCheck(this,r),this.setMajor(e),this.setMinor(t),this.setPatch(n)}return _createClass(r,[{key:"setMajor",value:function(e){return this._major=parseInt(e)||0,this}},{key:"getMajor",value:function(){return this._major}},{key:"setMinor",value:function(e){return this._minor=parseInt(e)||0,this}},{key:"getMinor",value:function(){return this._minor}},{key:"setPatch",value:function(e){return this._patch=parseInt(e)||0,this}},{key:"getPatch",value:function(){return this._patch}},{key:"fromString",value:function(e){var t=e.split(".");if(3!=t.length)throw"Incorrect version string format";return this.setMajor(t[0]),this.setMinor(t[1]),this.setPatch(t[2]),this}},{key:"toString",value:function(){return"".concat(this.getMajor(),".").concat(this.getMinor(),".").concat(this.getPatch())}},{key:"isNewerThan",value:function(e){if(this.getMajor()>e.getMajor())return 1;if(this.getMajor()==e.getMajor()){if(this.getMinor()>e.getMinor())return 1;if(this.getMinor()==e.getMinor()){if(this.getPatch()>e.getPatch())return 1;if(this.getPatch()==e.getPatch())return 0}}return-1}}]),r}(),ServiceType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CONTROL",get:function(){return t._MAP.CONTROL}},{key:"RPC",get:function(){return t._MAP.RPC}},{key:"AUDIO",get:function(){return t._MAP.AUDIO}},{key:"VIDEO",get:function(){return t._MAP.VIDEO}},{key:"HYBRID",get:function(){return t._MAP.HYBRID}}]),t}();ServiceType._MAP=Object.freeze({CONTROL:0,RPC:7,AUDIO:10,VIDEO:11,HYBRID:15});var MessageFrameAssembler=function(){function t(e){if(_classCallCheck(this,t),"function"!=typeof e)throw"Callback not of expected type (function) for MessageFrameAssembler";this._callback=e,this._accumulator=[],this._totalConsecutiveFrames=0,this._consecutiveFramesHandledCount=0,this._consecutiveFramesDataLength=0}return _createClass(t,[{key:"handleFrame",value:function(e){var t=e.getFrameType();return t!==FrameType.FIRST&&t!==FrameType.CONSECUTIVE?this._callback(null,e):this._handleMultiFrameMessage(e)}},{key:"_handleFirstDataFrame",value:function(e){var t=e.getPayload();if(t instanceof Uint8Array!=!0||8!==t.length)throw"Error handling first frame. Payload is an invalid length should be length 8.";for(var n in t)if(n<0||255<n)throw"Invlaid payload. Must be an array of unit8 bytes.";var r=(15&t[0])<<24;r+=(255&t[1])<<16,r+=(255&t[2])<<8,r+=255&t[3];var i=(255&t[4])<<24;i+=(255&t[5])<<16,i+=(255&t[6])<<8,i+=255&t[7],this._totalConsecutiveFrames=i,this._consecutiveFramesDataLength=r}},{key:"_handleConsecutiveFrame",value:function(e){this._consecutiveFramesHandledCount++;var t=e.getFrameType(),n=e.getFrameInfo(),r=e.getPayload(),i=!0,o=!1,s=void 0;try{for(var a,u=r[Symbol.iterator]();!(i=(a=u.next()).done);i=!0){var l=a.value;this._accumulator.push(l)}}catch(e){o=!0,s=e}finally{try{i||null==u.return||u.return()}finally{if(o)throw s}}if(0===n){this._consecutiveFramesHandledCount!==this._totalConsecutiveFrames&&console.warn("Total frames expected ".concat(this._totalConsecutiveFrames," does not match total frames received ").concat(this._consecutiveFramesHandledCount)),this._consecutiveFramesDataLength!==this._accumulator.length&&console.warn("Total data expected ".concat(this._consecutiveFramesDataLength," does not match total data received ").concat(this._accumulator.length));var c=new SdlPacket(e.getVersion(),e.getEncryption(),t,e.getServiceType(),n,e.getSessionID(),this._accumulator.length,e.getMessageID(),this._accumulator,0,this._accumulator.length);this._callback(null,c)}}},{key:"_handleMultiFrameMessage",value:function(e){return e.getFrameType()===FrameType.FIRST?this._handleFirstDataFrame(e):this._handleConsecutiveFrame(e)}}]),t}(),ControlFrameTags=function e(){_classCallCheck(this,e)},StartServiceACKBase={MTU:"mtu"},NAKBase={REJECTED_PARAMS:"rejectedParams"},StartServiceProtocolVersion={PROTOCOL_VERSION:"protocolVersion"},StartServiceHashId={HASH_ID:"hashId"},StartServiceDimensions={HEIGHT:"height",WIDTH:"width"};ControlFrameTags.RPC=Object.freeze({StartService:StartServiceProtocolVersion,StartServiceACK:Object.assign({SECONDARY_TRANSPORTS:"secondaryTransports",AUDIO_SERVICE_TRANSPORTS:"audioServiceTransports",VIDEO_SERVICE_TRANSPORTS:"videoServiceTransports",AUTH_TOKEN:"authToken"},StartServiceACKBase,StartServiceProtocolVersion,StartServiceHashId),StartServiceNAK:NAKBase,EndService:StartServiceHashId,EndServiceACK:{},EndServiceNAK:NAKBase,TransportEventUpdate:{TCP_IP_ADDRESS:"tcpIpAddress",TCP_PORT:"tcpPort"},RegisterSecondaryTransport:{},RegisterSecondaryTransportACK:{},RegisterSecondaryTransportNAK:Object.assign({REASON:"reason"},NAKBase)}),ControlFrameTags.Audio=Object.freeze({StartService:{},StartServiceACK:StartServiceACKBase,StartServiceNAK:NAKBase,EndService:{},EndServiceACK:{},EndServiceNAK:NAKBase}),ControlFrameTags.Video=Object.freeze({StartService:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},StartServiceDimensions),StartServiceACK:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},StartServiceACKBase,StartServiceDimensions),StartServiceNAK:NAKBase,EndService:{},EndServiceACK:{},EndServiceNAK:NAKBase});var BitConverter=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"arrayBufferToInt32",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:0;return e?new DataView(e).getUint32(n):-1}},{key:"int32ToArrayBuffer",value:function(e){var t=new ArrayBuffer(4);return new DataView(t).setUint32(0,e,!1),t}}]),e}(),SdlPacketFactory=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"createHeartbeatACK",value:function(e,t,n){return new SdlPacket(n,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_HEART_BEAT_ACK,t,0,0,null)}},{key:"createEndSession",value:function(e,t,n,r,i){if(r<5){var o=new Uint8Array(BitConverter.int32ToArrayBuffer(i));return new SdlPacket(r,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_END_SERVICE,t,o.length,n,o,0,o.length)}var s=new SdlPacket(r,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_END_SERVICE,t,0,n,null);return s.putTag(ControlFrameTags.RPC.EndService.HASH_ID,i),s}}]),e}(),ImageType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"STATIC",get:function(){return t._MAP.STATIC}},{key:"DYNAMIC",get:function(){return t._MAP.DYNAMIC}}]),t}();ImageType._MAP=Object.freeze({STATIC:"STATIC",DYNAMIC:"DYNAMIC"});var Image=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setValue",value:function(e){return this.setParameter(t.KEY_VALUE,e),this}},{key:"getValue",value:function(){return this.getParameter(t.KEY_VALUE)}},{key:"setImageType",value:function(e){return this.validateType(ImageType,e),this.setParameter(t.KEY_IMAGE_TYPE,e),this}},{key:"getImageType",value:function(){return this.getObject(ImageType,t.KEY_IMAGE_TYPE)}},{key:"setIsTemplate",value:function(e){return this.setParameter(t.KEY_IS_TEMPLATE,e),this}},{key:"getIsTemplate",value:function(){return this.getParameter(t.KEY_IS_TEMPLATE)}}]),t}();Image.KEY_VALUE="value",Image.KEY_IMAGE_TYPE="imageType",Image.KEY_IS_TEMPLATE="isTemplate";var MenuParams=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setParentID",value:function(e){return this.setParameter(t.KEY_PARENT_ID,e),this}},{key:"getParentID",value:function(){return this.getParameter(t.KEY_PARENT_ID)}},{key:"setPosition",value:function(e){return this.setParameter(t.KEY_POSITION,e),this}},{key:"getPosition",value:function(){return this.getParameter(t.KEY_POSITION)}},{key:"setMenuName",value:function(e){return this.setParameter(t.KEY_MENU_NAME,e),this}},{key:"getMenuName",value:function(){return this.getParameter(t.KEY_MENU_NAME)}}]),t}();MenuParams.KEY_PARENT_ID="parentID",MenuParams.KEY_POSITION="position",MenuParams.KEY_MENU_NAME="menuName";var AddCommand=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.AddCommand),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setCmdID",value:function(e){return this.setParameter(n.KEY_CMD_ID,e),this}},{key:"getCmdID",value:function(){return this.getParameter(n.KEY_CMD_ID)}},{key:"setMenuParams",value:function(e){return this.validateType(MenuParams,e),this.setParameter(n.KEY_MENU_PARAMS,e),this}},{key:"getMenuParams",value:function(){return this.getObject(MenuParams,n.KEY_MENU_PARAMS)}},{key:"setVrCommands",value:function(e){return this.setParameter(n.KEY_VR_COMMANDS,e),this}},{key:"getVrCommands",value:function(){return this.getParameter(n.KEY_VR_COMMANDS)}},{key:"setCmdIcon",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_CMD_ICON,e),this}},{key:"getCmdIcon",value:function(){return this.getObject(Image,n.KEY_CMD_ICON)}}]),n}();AddCommand.KEY_CMD_ICON="cmdIcon",AddCommand.KEY_MENU_PARAMS="menuParams",AddCommand.KEY_CMD_ID="cmdID",AddCommand.KEY_VR_COMMANDS="vrCommands";var AddCommandResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.AddCommand),t}return _inherits(n,RpcResponse),n}(),RpcNotification=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.NOTIFICATION),t}return _inherits(n,RpcMessage),n}(),HMILevel=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"HMI_FULL",get:function(){return t._MAP.HMI_FULL}},{key:"HMI_LIMITED",get:function(){return t._MAP.HMI_LIMITED}},{key:"HMI_BACKGROUND",get:function(){return t._MAP.HMI_BACKGROUND}},{key:"HMI_NONE",get:function(){return t._MAP.HMI_NONE}}]),t}();HMILevel._MAP=Object.freeze({HMI_FULL:"FULL",HMI_LIMITED:"LIMITED",HMI_BACKGROUND:"BACKGROUND",HMI_NONE:"NONE"});var AudioStreamingState=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"AUDIBLE",get:function(){return t._MAP.AUDIBLE}},{key:"ATTENUATED",get:function(){return t._MAP.ATTENUATED}},{key:"NOT_AUDIBLE",get:function(){return t._MAP.NOT_AUDIBLE}}]),t}();AudioStreamingState._MAP=Object.freeze({AUDIBLE:"AUDIBLE",ATTENUATED:"ATTENUATED",NOT_AUDIBLE:"NOT_AUDIBLE"});var VideoStreamingState=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"STREAMABLE",get:function(){return t._MAP.STREAMABLE}},{key:"NOT_STREAMABLE",get:function(){return t._MAP.NOT_STREAMABLE}}]),t}();VideoStreamingState._MAP=Object.freeze({STREAMABLE:"STREAMABLE",NOT_STREAMABLE:"NOT_STREAMABLE"});var SystemContext=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SYSCTXT_MAIN",get:function(){return t._MAP.SYSCTXT_MAIN}},{key:"SYSCTXT_VRSESSION",get:function(){return t._MAP.SYSCTXT_VRSESSION}},{key:"SYSCTXT_MENU",get:function(){return t._MAP.SYSCTXT_MENU}},{key:"SYSCTXT_HMI_OBSCURED",get:function(){return t._MAP.SYSCTXT_HMI_OBSCURED}},{key:"SYSCTXT_ALERT",get:function(){return t._MAP.SYSCTXT_ALERT}}]),t}();SystemContext._MAP=Object.freeze({SYSCTXT_MAIN:"MAIN",SYSCTXT_VRSESSION:"VRSESSION",SYSCTXT_MENU:"MENU",SYSCTXT_HMI_OBSCURED:"HMI_OBSCURED",SYSCTXT_ALERT:"ALERT"});var OnHmiStatus=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.OnHMIStatus),t}return _inherits(n,RpcNotification),_createClass(n,[{key:"setHMILevel",value:function(e){return this.validateType(HMILevel,e),this.setParameter(n.KEY_HMI_LEVEL,e),this}},{key:"getHMILevel",value:function(){return this.getObject(HMILevel,n.KEY_HMI_LEVEL)}},{key:"setAudioStreamingState",value:function(e){return this.validateType(AudioStreamingState,e),this.setParameter(n.KEY_AUDIO_STREAMING_STATE,e),this}},{key:"getAudioStreamingState",value:function(){return this.getObject(AudioStreamingState,n.KEY_AUDIO_STREAMING_STATE)}},{key:"setSystemContext",value:function(e){return this.validateType(SystemContext,e),this.setParameter(n.KEY_SYSTEM_CONTEXT,e),this}},{key:"getSystemContext",value:function(){return this.getObject(SystemContext,n.KEY_SYSTEM_CONTEXT)}},{key:"setVideoStreamingState",value:function(e){return this.validateType(VideoStreamingState,e),this.setParameter(n.KEY_VIDEO_STREAMING_STATE,e),this}},{key:"getVideoStreamingState",value:function(){return this.getObject(VideoStreamingState,n.KEY_VIDEO_STREAMING_STATE)}},{key:"setWindowID",value:function(e){return this.setParameter(n.KEY_WINDOW_ID,e),this}},{key:"getWindowID",value:function(){return this.getParameter(n.KEY_WINDOW_ID)}}]),n}();OnHmiStatus.KEY_HMI_LEVEL="hmiLevel",OnHmiStatus.KEY_AUDIO_STREAMING_STATE="audioStreamingState",OnHmiStatus.KEY_SYSTEM_CONTEXT="systemContext",OnHmiStatus.KEY_VIDEO_STREAMING_STATE="videoStreamingState",OnHmiStatus.KEY_WINDOW_ID="windowID";var OnLanguageChange=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.OnLanguageChange),t}return _inherits(n,RpcNotification),_createClass(n,[{key:"setLanguage",value:function(){return this.validateType(Language,language),this.setParameter(n.KEY_LANGUAGE,language),this}},{key:"getLanguage",value:function(){return this.getObject(Language,n.KEY_LANGUAGE)}},{key:"setHMIDisplayLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE,e),this}},{key:"getHMIDisplayLanguage",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE)}}]),n}();OnLanguageChange.KEY_LANGUAGE="language",OnLanguageChange.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage";var FileType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"GRAPHIC_BMP",get:function(){return t._MAP.GRAPHIC_BMP}},{key:"GRAPHIC_JPEG",get:function(){return t._MAP.GRAPHIC_JPEG}},{key:"GRAPHIC_PNG",get:function(){return t._MAP.GRAPHIC_PNG}},{key:"AUDIO_WAVE",get:function(){return t._MAP.AUDIO_WAVE}},{key:"AUDIO_AAC",get:function(){return t._MAP.AUDIO_AAC}},{key:"BINARY",get:function(){return t._MAP.BINARY}},{key:"JSON",get:function(){return t._MAP.JSON}}]),t}();FileType._MAP=Object.freeze({GRAPHIC_BMP:"GRAPHIC_BMP",GRAPHIC_JPEG:"GRAPHIC_JPEG",GRAPHIC_PNG:"GRAPHIC_PNG",AUDIO_WAVE:"AUDIO_WAVE",AUDIO_MP3:"AUDIO_MP3",AUDIO_AAC:"AUDIO_AAC",BINARY:"BINARY",JSON:"JSON"});var PutFile=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.PutFile),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setFileData",value:function(e){return this.setBulkData(e),this}},{key:"getFileData",value:function(){return this.getBulkData()}},{key:"setFileName",value:function(e){return this.setParameter(n.KEY_FILE_NAME,e),this}},{key:"getFileName",value:function(){return this.getParameter(n.KEY_FILE_NAME)}},{key:"setFileType",value:function(e){return this.validateType(FileType,e),this.setParameter(n.KEY_FILE_TYPE,e),this}},{key:"getFileType",value:function(){return this.getObject(FileType,n.KEY_MENU_PARAMS)}},{key:"setPersistentFile",value:function(e){return this.setParameter(n.KEY_PERSISTENT_FILE,e),this}},{key:"getPersistentFile",value:function(){return this.getParameter(n.KEY_PERSISTENT_FILE)}},{key:"setSystemFile",value:function(e){return this.setParameter(n.KEY_SYSTEM_FILE,e),this}},{key:"getSystemFile",value:function(){return this.getParameter(n.KEY_SYSTEM_FILE)}},{key:"setOffset",value:function(e){return this.setParameter(n.KEY_OFFSET,e),this}},{key:"getOffset",value:function(){return this.getParameter(n.KEY_OFFSET)}},{key:"setLength",value:function(e){return this.setParameter(n.KEY_LENGTH,e),this}},{key:"getLength",value:function(){return this.getParameter(n.KEY_LENGTH)}},{key:"setCRC",value:function(e){return this.setParameter(n.KEY_CRC,e),this}},{key:"getCRC",value:function(){return this.getParameter(n.KEY_CRC)}}]),n}();PutFile.KEY_FILE_NAME="syncFileName",PutFile.KEY_FILE_TYPE="fileType",PutFile.KEY_PERSISTENT_FILE="persistentFile",PutFile.KEY_SYSTEM_FILE="systemFile",PutFile.KEY_OFFSET="offset",PutFile.KEY_LENGTH="length",PutFile.KEY_CRC="crc";var PutFileResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.PutFile),t}return _inherits(n,RpcResponse),_createClass(n,[{key:"setSpaceAvailable",value:function(e){return this.setParameter(n.KEY_SPACE_AVAILABLE,e),this}},{key:"getSpaceAvailable",value:function(){return this.getParameter(n.KEY_SPACE_AVAILABLE)}}]),n}();PutFileResponse.KEY_SPACE_AVAILABLE="spaceAvailable";var TextFieldName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"mainField1",get:function(){return t._MAP.mainField1}},{key:"mainField2",get:function(){return t._MAP.mainField2}},{key:"mainField3",get:function(){return t._MAP.mainField3}},{key:"mainField4",get:function(){return t._MAP.mainField4}},{key:"statusBar",get:function(){return t._MAP.statusBar}},{key:"mediaClock",get:function(){return t._MAP.mediaClock}},{key:"mediaTrack",get:function(){return t._MAP.mediaTrack}},{key:"templateTitle",get:function(){return t._MAP.templateTitle}},{key:"alertText1",get:function(){return t._MAP.alertText1}},{key:"alertText2",get:function(){return t._MAP.alertText2}},{key:"alertText3",get:function(){return t._MAP.alertText3}},{key:"scrollableMessageBody",get:function(){return t._MAP.scrollableMessageBody}},{key:"initialInteractionText",get:function(){return t._MAP.initialInteractionText}},{key:"navigationText1",get:function(){return t._MAP.navigationText1}},{key:"navigationText2",get:function(){return t._MAP.navigationText2}},{key:"ETA",get:function(){return t._MAP.ETA}},{key:"totalDistance",get:function(){return t._MAP.totalDistance}},{key:"audioPassThruDisplayText1",get:function(){return t._MAP.audioPassThruDisplayText1}},{key:"audioPassThruDisplayText2",get:function(){return t._MAP.audioPassThruDisplayText2}},{key:"sliderHeader",get:function(){return t._MAP.sliderHeader}},{key:"sliderFooter",get:function(){return t._MAP.sliderFooter}},{key:"menuName",get:function(){return t._MAP.menuName}},{key:"secondaryText",get:function(){return t._MAP.secondaryText}},{key:"tertiaryText",get:function(){return t._MAP.tertiaryText}},{key:"menuTitle",get:function(){return t._MAP.menuTitle}},{key:"locationName",get:function(){return t._MAP.locationName}},{key:"locationDescription",get:function(){return t._MAP.locationDescription}},{key:"addressLines",get:function(){return t._MAP.addressLines}},{key:"phoneNumber",get:function(){return t._MAP.phoneNumber}}]),t}();TextFieldName._MAP=Object.freeze(_defineProperty({mainField1:"mainField1",mainField2:"mainField2",mainField3:"mainField3",mainField4:"mainField4",statusBar:"statusBar",mediaClock:"mediaClock",mediaTrack:"mediaTrack",templateTitle:"templateTitle",alertText1:"alertText1",alertText2:"alertText2",alertText3:"alertText3",scrollableMessageBody:"scrollableMessageBody",initialInteractionText:"initialInteractionText",navigationText1:"navigationText1",navigationText2:"navigationText2",ETA:"ETA",totalDistance:"totalDistance",audioPassThruDisplayText1:"audioPassThruDisplayText1",audioPassThruDisplayText2:"audioPassThruDisplayText2",sliderHeader:"sliderHeader",sliderFooter:"sliderFooter",menuName:"menuName",secondaryText:"secondaryText",tertiaryText:"tertiaryText",menuTitle:"menuTitle",locationName:"locationName",locationDescription:"locationDescription",addressLines:"addressLines",phoneNumber:"phoneNumber"},"scrollableMessageBody","scrollableMessageBody"));var CharacterSet=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"TYPE2SET",get:function(){return t._MAP.TYPE2SET}},{key:"TYPE5SET",get:function(){return t._MAP.TYPE5SET}},{key:"CID1SET",get:function(){return t._MAP.CID1SET}},{key:"CID2SET",get:function(){return t._MAP.CID2SET}}]),t}();CharacterSet._MAP=Object.freeze({TYPE2SET:"TYPE2SET",TYPE5SET:"TYPE5SET",CID1SET:"CID1SET",CID2SET:"CID2SET"});var TextField=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setTextFieldName",value:function(e){return this.validateType(TextFieldName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getTextFieldName",value:function(){return this.getObject(TextFieldName,t.KEY_NAME)}},{key:"setCharacterSet",value:function(e){return this.validateType(CharacterSet,e),this.setParameter(t.KEY_CHARACTER_SET,e),this}},{key:"getCharacterSet",value:function(){return this.getObject(CharacterSet,t.KEY_CHARACTER_SET)}},{key:"setWidth",value:function(e){return this.setParameter(t.KEY_WIDTH,e),this}},{key:"getWidth",value:function(){return this.getParameter(t.KEY_WIDTH)}},{key:"setRows",value:function(e){return this.setParameter(t.KEY_ROWS,e),this}},{key:"getRows",value:function(){return this.getParameter(t.KEY_ROWS)}}]),t}();TextField.KEY_NAME="name",TextField.KEY_CHARACTER_SET="characterSet",TextField.KEY_WIDTH="width",TextField.KEY_ROWS="rows";var ImageResolution=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setResolutionWidth",value:function(e){return this.setParameter(t.KEY_RESOLUTION_WIDTH,e),this}},{key:"getResolutionWidth",value:function(){return this.getParameter(t.KEY_RESOLUTION_WIDTH)}},{key:"setResolutionHeight",value:function(e){return this.setParameter(t.KEY_RESOLUTION_HEIGHT,e),this}},{key:"getResolutionHeight",value:function(){return this.getParameter(t.KEY_RESOLUTION_HEIGHT)}}]),t}();ImageResolution.KEY_RESOLUTION_WIDTH="resolutionWidth",ImageResolution.KEY_RESOLUTION_HEIGHT="resolutionHeight";var ImageFieldName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"softButtonImage",get:function(){return t._MAP.softButtonImage}},{key:"choiceImage",get:function(){return t._MAP.choiceImage}},{key:"choiceSecondaryImage",get:function(){return t._MAP.choiceSecondaryImage}},{key:"vrHelpItem",get:function(){return t._MAP.vrHelpItem}},{key:"turnIcon",get:function(){return t._MAP.turnIcon}},{key:"menuIcon",get:function(){return t._MAP.menuIcon}},{key:"cmdIcon",get:function(){return t._MAP.cmdIcon}},{key:"appIcon",get:function(){return t._MAP.appIcon}},{key:"graphic",get:function(){return t._MAP.graphic}},{key:"secondaryGraphic",get:function(){return t._MAP.secondaryGraphic}},{key:"showConstantTBTIcon",get:function(){return t._MAP.showConstantTBTIcon}},{key:"showConstantTBTNextTurnIcon",get:function(){return t._MAP.showConstantTBTNextTurnIcon}},{key:"locationImage",get:function(){return t._MAP.locationImage}},{key:"alertIcon",get:function(){return t._MAP.alertIcon}}]),t}();ImageFieldName._MAP=Object.freeze({softButtonImage:"softButtonImage",choiceImage:"choiceImage",choiceSecondaryImage:"choiceSecondaryImage",vrHelpItem:"vrHelpItem",turnIcon:"turnIcon",menuIcon:"menuIcon",cmdIcon:"cmdIcon",appIcon:"appIcon",graphic:"graphic",secondaryGraphic:"secondaryGraphic",showConstantTBTIcon:"showConstantTBTIcon",showConstantTBTNextTurnIcon:"showConstantTBTNextTurnIcon",locationImage:"locationImage",alertIcon:"alertIcon"});var ImageField=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setImageFieldName",value:function(e){return this.validateType(ImageFieldName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getImageFieldName",value:function(){return this.getObject(ImageFieldName,t.KEY_NAME)}},{key:"setImageTypeSupported",value:function(e){return this.validateType(FileType,e,!0),this.setParameter(t.KEY_IMAGE_TYPE_SUPPORTED,e),this}},{key:"getImageTypeSupported",value:function(){return this.getObject(FileType,t.KEY_IMAGE_TYPE_SUPPORTED)}},{key:"setImageResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_IMAGE_RESOLUTION,e),this}},{key:"getImageResolution",value:function(){return this.getObject(ImageResolution,t.KEY_IMAGE_RESOLUTION)}}]),t}();ImageField.KEY_NAME="name",ImageField.KEY_IMAGE_TYPE_SUPPORTED="imageTypeSupported",ImageField.KEY_IMAGE_RESOLUTION="imageResolution";var TouchEventCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPressAvailable",value:function(e){return this.setParameter(t.KEY_PRESS_AVAILABLE,e),this}},{key:"getPressAvailable",value:function(){return this.getParameter(t.KEY_PRESS_AVAILABLE)}},{key:"setMultiTouchAvailable",value:function(e){return this.setParameter(t.KEY_MULTI_TOUCH_AVAILABLE,e),this}},{key:"getMultiTouchAvailable",value:function(){return this.getParameter(t.KEY_MULTI_TOUCH_AVAILABLE)}},{key:"setDoublePressAvailable",value:function(e){return this.setParameter(t.KEY_DOUBLE_PRESS_AVAILABLE,e),this}},{key:"getDoublePressAvailable",value:function(){return this.getParameter(t.KEY_DOUBLE_PRESS_AVAILABLE)}}]),t}();TouchEventCapabilities.KEY_PRESS_AVAILABLE="pressAvailable",TouchEventCapabilities.KEY_MULTI_TOUCH_AVAILABLE="multiTouchAvailable",TouchEventCapabilities.KEY_DOUBLE_PRESS_AVAILABLE="doublePressAvailable";var ScreenParams=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_RESOLUTION,e),this}},{key:"getResolution",value:function(){return this.getObject(ImageResolution,t.KEY_RESOLUTION)}},{key:"setTouchEventAvailable",value:function(e){return this.validateType(TouchEventCapabilities,e),this.setParameter(t.KEY_TOUCH_EVENT_AVAILABLE,e),this}},{key:"getTouchEventAvailable",value:function(){return this.getObject(TouchEventCapabilities,t.KEY_TOUCH_EVENT_AVAILABLE)}}]),t}();ScreenParams.KEY_RESOLUTION="resolution",ScreenParams.KEY_TOUCH_EVENT_AVAILABLE="touchEventAvailable";var DisplayType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CID",get:function(){return t._MAP.CID}},{key:"TYPE2",get:function(){return t._MAP.TYPE2}},{key:"TYPE5",get:function(){return t._MAP.TYPE5}},{key:"NGN",get:function(){return t._MAP.NGN}},{key:"GEN2_8_DMA",get:function(){return t._MAP.GEN2_8_DMA}},{key:"GEN2_6_DMA",get:function(){return t._MAP.GEN2_6_DMA}},{key:"MFD3",get:function(){return t._MAP.MFD3}},{key:"MFD4",get:function(){return t._MAP.MFD4}},{key:"MFD5",get:function(){return t._MAP.MFD5}},{key:"GEN3_8_INCH",get:function(){return t._MAP.GEN3_8_INCH}},{key:"SDL_GENERIC",get:function(){return t._MAP.SDL_GENERIC}}]),t}();DisplayType._MAP=Object.freeze({CID:"CID",TYPE2:"TYPE2",TYPE5:"TYPE5",NGN:"NGN",GEN2_8_DMA:"GEN2_8_DMA",GEN2_6_DMA:"GEN2_6_DMA",MFD3:"MFD3",MFD4:"MFD4",TESTING:"TESTING",MFD5:"MFD5",GEN3_8_INCH:"GEN3_8-INCH",SDL_GENERIC:"SDL_GENERIC"});var MediaClockFormat=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CLOCK1",get:function(){return t._MAP.CLOCK1}},{key:"CLOCK2",get:function(){return t._MAP.CLOCK2}},{key:"CLOCK3",get:function(){return t._MAP.CLOCK3}},{key:"CLOCKTEXT1",get:function(){return t._MAP.CLOCKTEXT1}},{key:"CLOCKTEXT2",get:function(){return t._MAP.CLOCKTEXT2}},{key:"CLOCKTEXT3",get:function(){return t._MAP.CLOCKTEXT3}},{key:"CLOCKTEXT4",get:function(){return t._MAP.CLOCKTEXT4}}]),t}();MediaClockFormat._MAP=Object.freeze({CLOCK1:"CLOCK1",CLOCK2:"CLOCK2",CLOCK3:"CLOCK3",CLOCKTEXT1:"CLOCKTEXT1",CLOCKTEXT2:"CLOCKTEXT2",CLOCKTEXT3:"CLOCKTEXT3",CLOCKTEXT4:"CLOCKTEXT4"});var DisplayCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setDisplayType",value:function(e){return this.validateType(DisplayType,e),this.setParameter(t.KEY_DISPLAY_TYPE,e),this}},{key:"getDisplayType",value:function(){return this.getObject(DisplayType,t.KEY_DISPLAY_TYPE)}},{key:"setDisplayName",value:function(e){return this.setParameter(t.KEY_DISPLAY_NAME,e),this}},{key:"getDisplayName",value:function(){return this.getParameter(t.KEY_DISPLAY_NAME)}},{key:"getDisplayType",value:function(){return this.getParameter(t.KEY_DISPLAY_NAME)}},{key:"setTextFields",value:function(e){return this.setParameter(t.KEY_TEXT_FIELDS,e),this}},{key:"getTextFields",value:function(){return this.getObject(TextField,t.KEY_TEXT_FIELDS)}},{key:"setImageFields",value:function(e){return this.setParameter(t.KEY_IMAGE_FIELDS,e),this}},{key:"getImageFields",value:function(){return this.getObject(ImageField,t.KEY_IMAGE_FIELDS)}},{key:"setMediaClockFormats",value:function(e){return this.setParameter(t.KEY_MEDIA_CLOCK_FORMATS,e),this}},{key:"getMediaClockFormats",value:function(){return this.getObject(MediaClockFormat,t.KEY_MEDIA_CLOCK_FORMATS)}},{key:"setGraphicsSupported",value:function(e){return this.setParameter(t.KEY_GRAPHICS_SUPPORTED,e),this}},{key:"getGraphicsSupported",value:function(){return this.getParameter(t.KEY_GRAPHICS_SUPPORTED)}},{key:"setTemplatesAvailable",value:function(e){return this.setParameter(t.KEY_TEMPLATES_AVAILABLE,e),this}},{key:"getTemplatesAvailable",value:function(){return this.getParameter(t.KEY_TEMPLATES_AVAILABLE)}},{key:"setScreenParams",value:function(e){return this.validateType(ScreenParams,e),this.setParameter(t.KEY_SCREEN_PARAMS,e),this}},{key:"getScreenParams",value:function(){return this.getObject(ScreenParams,t.KEY_SCREEN_PARAMS)}},{key:"setNumCustomPresetsAvailable",value:function(e){return this.setParameter(t.KEY_NUM_CUSTOM_PRESETS_AVAILABLE,e),this}},{key:"getNumCustomPresetsAvailable",value:function(){return this.getParameter(t.KEY_NUM_CUSTOM_PRESETS_AVAILABLE)}}]),t}();DisplayCapabilities.KEY_DISPLAY_TYPE="displayType",DisplayCapabilities.KEY_DISPLAY_NAME="displayName",DisplayCapabilities.KEY_TEXT_FIELDS="textFields",DisplayCapabilities.KEY_IMAGE_FIELDS="imageFields",DisplayCapabilities.KEY_MEDIA_CLOCK_FORMATS="mediaClockFormats",DisplayCapabilities.KEY_GRAPHICS_SUPPORTED="graphicSupported",DisplayCapabilities.KEY_TEMPLATES_AVAILABLE="templatesAvailable",DisplayCapabilities.KEY_SCREEN_PARAMS="screenParams",DisplayCapabilities.KEY_NUM_CUSTOM_PRESETS_AVAILABLE="numCustomPresetsAvailable";var Grid=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setColumn",value:function(e){return this.setParameter(t.KEY_COLUMN,e),this}},{key:"getColumn",value:function(){return this.getParameter(t.KEY_COLUMN)}},{key:"setRow",value:function(e){return this.setParameter(t.KEY_ROW,e),this}},{key:"getRow",value:function(){return this.getParameter(t.KEY_ROW)}},{key:"setLevel",value:function(e){return this.setParameter(t.KEY_LEVEL,e),this}},{key:"getLevel",value:function(){return this.getParameter(t.KEY_LEVEL)}},{key:"setColumnSpan",value:function(e){return this.setParameter(t.KEY_COLUMN_SPAN,e),this}},{key:"getColumnSpan",value:function(){return this.getParameter(t.KEY_COLUMN_SPAN)}},{key:"setRowSpan",value:function(e){return this.setParameter(t.KEY_ROW_SPAN,e),this}},{key:"getRowSpan",value:function(){return this.getParameter(t.KEY_ROW_SPAN)}},{key:"setLevelSpan",value:function(e){return this.setParameter(t.KEY_LEVEL_SPAN,e),this}},{key:"getLevelSpan",value:function(){return this.getParameter(t.KEY_LEVEL_SPAN)}}]),t}();Grid.KEY_COLUMN="col",Grid.KEY_ROW="row",Grid.KEY_LEVEL="level",Grid.KEY_COLUMN_SPAN="colspan",Grid.KEY_ROW_SPAN="rowspan",Grid.KEY_LEVEL_SPAN="levelspan";var ModuleInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setModuleId",value:function(e){return this.setParameter(t.KEY_MODULE_ID,e),this}},{key:"getModuleId",value:function(){return this.getParameter(t.KEY_MODULE_ID)}},{key:"setLocation",value:function(e){return this.validateType(Grid,e),this.setParameter(t.KEY_LOCATION,e),this}},{key:"getLocation",value:function(){return this.getObject(Grid,t.KEY_LOCATION)}},{key:"setServiceArea",value:function(e){return this.validateType(Grid,e),this.setParameter(t.KEY_SERVICE_AREA,e),this}},{key:"getServiceArea",value:function(){return this.getObject(Grid,t.KEY_SERVICE_AREA)}},{key:"setAllowMultipleAccess",value:function(e){return this.setParameter(t.KEY_ALLOW_MULTIPLE_ACCESS,e),this}},{key:"getAllowMultipleAccess",value:function(){return this.getParameter(t.KEY_ALLOW_MULTIPLE_ACCESS)}}]),t}();ModuleInfo.KEY_MODULE_ID="moduleId",ModuleInfo.KEY_LOCATION="location",ModuleInfo.KEY_SERVICE_AREA="serviceArea",ModuleInfo.KEY_ALLOW_MULTIPLE_ACCESS="allowMultipleAccess";var ButtonName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"OK",get:function(){return t._MAP.OK}},{key:"PLAY_PAUSE",get:function(){return t._MAP.PLAY_PAUSE}},{key:"SEEKLEFT",get:function(){return t._MAP.SEEKLEFT}},{key:"SEEKRIGHT",get:function(){return t._MAP.SEEKRIGHT}},{key:"TUNEUP",get:function(){return t._MAP.TUNEUP}},{key:"TUNEDOWN",get:function(){return t._MAP.TUNEDOWN}},{key:"PRESET_0",get:function(){return t._MAP.PRESET_0}},{key:"PRESET_1",get:function(){return t._MAP.PRESET_1}},{key:"PRESET_2",get:function(){return t._MAP.PRESET_2}},{key:"PRESET_3",get:function(){return t._MAP.PRESET_3}},{key:"PRESET_4",get:function(){return t._MAP.PRESET_4}},{key:"PRESET_5",get:function(){return t._MAP.PRESET_5}},{key:"PRESET_6",get:function(){return t._MAP.PRESET_6}},{key:"PRESET_7",get:function(){return t._MAP.PRESET_7}},{key:"PRESET_8",get:function(){return t._MAP.PRESET_8}},{key:"PRESET_9",get:function(){return t._MAP.PRESET_9}},{key:"CUSTOM_BUTTON",get:function(){return t._MAP.CUSTOM_BUTTON}},{key:"SEARCH",get:function(){return t._MAP.SEARCH}},{key:"AC_MAX",get:function(){return t._MAP.AC_MAX}},{key:"AC",get:function(){return t._MAP.AC}},{key:"RECIRCULATE",get:function(){return t._MAP.RECIRCULATE}},{key:"FAN_UP",get:function(){return t._MAP.FAN_UP}},{key:"FAN_DOWN",get:function(){return t._MAP.FAN_DOWN}},{key:"TEMP_UP",get:function(){return t._MAP.TEMP_UP}},{key:"TEMP_DOWN",get:function(){return t._MAP.TEMP_DOWN}},{key:"DEFROST_MAX",get:function(){return t._MAP.DEFROST_MAX}},{key:"DEFROST",get:function(){return t._MAP.DEFROST}},{key:"DEFROST_REAR",get:function(){return t._MAP.DEFROST_REAR}},{key:"UPPER_VENT",get:function(){return t._MAP.UPPER_VENT}},{key:"LOWER_VENT",get:function(){return t._MAP.LOWER_VENT}},{key:"VOLUME_UP",get:function(){return t._MAP.VOLUME_UP}},{key:"VOLUME_DOWN",get:function(){return t._MAP.VOLUME_DOWN}},{key:"EJECT",get:function(){return t._MAP.EJECT}},{key:"SOURCE",get:function(){return t._MAP.SOURCE}},{key:"SHUFFLE",get:function(){return t._MAP.SHUFFLE}},{key:"REPEAT",get:function(){return t._MAP.REPEAT}},{key:"NAV_CENTER_LOCATION",get:function(){return t._MAP.NAV_CENTER_LOCATION}},{key:"NAV_ZOOM_IN",get:function(){return t._MAP.NAV_ZOOM_IN}},{key:"NAV_ZOOM_OUT",get:function(){return t._MAP.NAV_ZOOM_OUT}},{key:"NAV_PAN_UP",get:function(){return t._MAP.NAV_PAN_UP}},{key:"NAV_PAN_UP_RIGHT",get:function(){return t._MAP.NAV_PAN_UP_RIGHT}},{key:"NAV_PAN_RIGHT",get:function(){return t._MAP.NAV_PAN_RIGHT}},{key:"NAV_PAN_DOWN_RIGHT",get:function(){return t._MAP.NAV_PAN_DOWN_RIGHT}},{key:"NAV_PAN_DOWN",get:function(){return t._MAP.NAV_PAN_DOWN}},{key:"NAV_PAN_DOWN_LEFT",get:function(){return t._MAP.NAV_PAN_DOWN_LEFT}},{key:"NAV_PAN_LEFT",get:function(){return t._MAP.NAV_PAN_LEFT}},{key:"NAV_PAN_UP_LEFT",get:function(){return t._MAP.NAV_PAN_UP_LEFT}},{key:"NAV_TILT_TOGGLE",get:function(){return t._MAP.NAV_TILT_TOGGLE}},{key:"NAV_ROTATE_CLOCKWISE",get:function(){return t._MAP.NAV_ROTATE_CLOCKWISE}},{key:"NAV_ROTATE_COUNTERCLOCKWISE",get:function(){return t._MAP.NAV_ROTATE_COUNTERCLOCKWISE}},{key:"NAV_HEADING_TOGGLE",get:function(){return t._MAP.NAV_HEADING_TOGGLE}}]),t}();ButtonName._MAP=Object.freeze({OK:"OK",PLAY_PAUSE:"PLAY_PAUSE",SEEKLEFT:"SEEKLEFT",SEEKRIGHT:"SEEKRIGHT",TUNEUP:"TUNEUP",TUNEDOWN:"TUNEDOWN",PRESET_0:"PRESET_0",PRESET_1:"PRESET_1",PRESET_2:"PRESET_2",PRESET_3:"PRESET_3",PRESET_4:"PRESET_4",PRESET_5:"PRESET_5",PRESET_6:"PRESET_6",PRESET_7:"PRESET_7",PRESET_8:"PRESET_8",PRESET_9:"PRESET_9",CUSTOM_BUTTON:"CUSTOM_BUTTON",SEARCH:"SEARCH",AC_MAX:"AC_MAX",AC:"AC",RECIRCULATE:"RECIRCULATE",FAN_UP:"FAN_UP",FAN_DOWN:"FAN_DOWN",TEMP_UP:"TEMP_UP",TEMP_DOWN:"TEMP_DOWN",DEFROST_MAX:"DEFROST_MAX",DEFROST:"DEFROST",DEFROST_REAR:"DEFROST_REAR",UPPER_VENT:"UPPER_VENT",LOWER_VENT:"LOWER_VENT",VOLUME_UP:"VOLUME_UP",VOLUME_DOWN:"VOLUME_DOWN",EJECT:"EJECT",SOURCE:"SOURCE",SHUFFLE:"SHUFFLE",REPEAT:"REPEAT",NAV_CENTER_LOCATION:"NAV_CENTER_LOCATION",NAV_ZOOM_IN:"NAV_ZOOM_IN",NAV_ZOOM_OUT:"NAV_ZOOM_OUT",NAV_PAN_UP:"NAV_PAN_UP",NAV_PAN_UP_RIGHT:"NAV_PAN_UP_RIGHT",NAV_PAN_RIGHT:"NAV_PAN_RIGHT",NAV_PAN_DOWN_RIGHT:"NAV_PAN_DOWN_RIGHT",NAV_PAN_DOWN:"NAV_PAN_DOWN",NAV_PAN_DOWN_LEFT:"NAV_PAN_DOWN_LEFT",NAV_PAN_LEFT:"NAV_PAN_LEFT",NAV_PAN_UP_LEFT:"NAV_PAN_UP_LEFT",NAV_TILT_TOGGLE:"NAV_TILT_TOGGLE",NAV_ROTATE_CLOCKWISE:"NAV_ROTATE_CLOCKWISE",NAV_ROTATE_COUNTERCLOCKWISE:"NAV_ROTATE_COUNTERCLOCKWISE",NAV_HEADING_TOGGLE:"NAV_HEADING_TOGGLE"});var ButtonCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setName",value:function(e){return this.validateType(ButtonName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getName",value:function(){return this.getObject(ButtonName,t.KEY_NAME)}},{key:"setModuleInfo",value:function(e){return this.validateType(ModuleInfo,e),this.setParameter(t.KEY_MODULE_INFO,e),this}},{key:"getModuleInfo",value:function(){return this.getObject(ModuleInfo,t.KEY_MODULE_INFO)}},{key:"setShortPressAvailable",value:function(e){return this.setParameter(t.KEY_SHORT_PRESS_AVAILABLE,e),this}},{key:"getShortPressAvailable",value:function(){return this.getParameter(t.KEY_SHORT_PRESS_AVAILABLE)}},{key:"setLongPressAvailable",value:function(e){return this.setParameter(t.KEY_LONG_PRESS_AVAILABLE,e),this}},{key:"getLongPressAvailable",value:function(){return this.getParameter(t.KEY_LONG_PRESS_AVAILABLE)}},{key:"setUpDownAvailable",value:function(e){return this.setParameter(t.KEY_UP_DOWN_AVAILABLE,e),this}},{key:"getUpDownAvailable",value:function(){return this.getParameter(t.KEY_UP_DOWN_AVAILABLE)}}]),t}();ButtonCapabilities.KEY_NAME="name",ButtonCapabilities.KEY_MODULE_INFO="moduleInfo",ButtonCapabilities.KEY_SHORT_PRESS_AVAILABLE="shortPressAvailable",ButtonCapabilities.KEY_LONG_PRESS_AVAILABLE="longPressAvailable",ButtonCapabilities.KEY_UP_DOWN_AVAILABLE="upDownAvailable";var SoftButtonCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setShortPressAvailable",value:function(e){return this.setParameter(t.KEY_SHORT_PRESS_AVAILABLE,e),this}},{key:"getShortPressAvailable",value:function(){return this.getParameter(t.KEY_SHORT_PRESS_AVAILABLE)}},{key:"setLongPressAvailable",value:function(e){return this.setParameter(t.KEY_LONG_PRESS_AVAILABLE,e),this}},{key:"getLongPressAvailable",value:function(){return this.getParameter(t.KEY_LONG_PRESS_AVAILABLE)}},{key:"setUpDownAvailable",value:function(e){return this.setParameter(t.KEY_UP_DOWN_AVAILABLE,e),this}},{key:"getUpDownAvailable",value:function(){return this.getParameter(t.KEY_UP_DOWN_AVAILABLE)}},{key:"setImageSupported",value:function(e){return this.setParameter(t.KEY_IMAGE_SUPPORTED,e),this}},{key:"getImageSupported",value:function(){return this.getParameter(t.KEY_IMAGE_SUPPORTED)}},{key:"setTextSupported",value:function(e){return this.setParameter(t.KEY_TEXT_SUPPORTED,e),this}},{key:"getTextSupported",value:function(){return this.getParameter(t.KEY_TEXT_SUPPORTED)}}]),t}();SoftButtonCapabilities.KEY_SHORT_PRESS_AVAILABLE="shortPressAvailable",SoftButtonCapabilities.KEY_LONG_PRESS_AVAILABLE="longPressAvailable",SoftButtonCapabilities.KEY_UP_DOWN_AVAILABLE="upDownAvailable",SoftButtonCapabilities.KEY_IMAGE_SUPPORTED="imageSupported",SoftButtonCapabilities.KEY_TEXT_SUPPORTED="textSupported";var PresetBankCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setOnScreenPresetsAvailable",value:function(e){return this.setParameter(t.KEY_ON_SCREEN_PRESETS_AVAILABLE,e),this}},{key:"getOnScreenPresetsAvailable",value:function(){return this.getParameter(t.KEY_ON_SCREEN_PRESETS_AVAILABLE)}}]),t}();PresetBankCapabilities.KEY_ON_SCREEN_PRESETS_AVAILABLE="onScreenPresetsAvailable";var VehicleType=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMake",value:function(e){return this.setParameter(t.KEY_MAKE,e),this}},{key:"getMake",value:function(){return this.getParameter(t.KEY_MAKE)}},{key:"setModel",value:function(e){return this.setParameter(t.KEY_MODEL,e),this}},{key:"getModel",value:function(){return this.getParameter(t.KEY_MODEL)}},{key:"setModelYear",value:function(e){return this.setParameter(t.KEY_MODEL_YEAR,e),this}},{key:"getModelYear",value:function(){return this.getParameter(t.KEY_MODEL_YEAR)}},{key:"setTrim",value:function(e){return this.setParameter(t.KEY_TRIM,e),this}},{key:"getTrim",value:function(){return this.getParameter(t.KEY_TRIM)}}]),t}();VehicleType.KEY_MAKE="make",VehicleType.KEY_MODEL="model",VehicleType.KEY_MODEL_YEAR="modelYear",VehicleType.KEY_TRIM="trim";var HmiZoneCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"FRONT",get:function(){return t._MAP.FRONT}},{key:"BACK",get:function(){return t._MAP.BACK}}]),t}();HmiZoneCapabilities._MAP=Object.freeze({FRONT:"FRONT",BACK:"BACK"});var PrerecordedSpeech=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"HELP_JINGLE",get:function(){return t._MAP.HELP_JINGLE}},{key:"INITIAL_JINGLE",get:function(){return t._MAP.INITIAL_JINGLE}},{key:"LISTEN_JINGLE",get:function(){return t._MAP.LISTEN_JINGLE}},{key:"POSITIVE_JINGLE",get:function(){return t._MAP.POSITIVE_JINGLE}},{key:"NEGATIVE_JINGLE",get:function(){return t._MAP.NEGATIVE_JINGLE}}]),t}();PrerecordedSpeech._MAP=Object.freeze({HELP_JINGLE:"HELP_JINGLE",INITIAL_JINGLE:"INITIAL_JINGLE",LISTEN_JINGLE:"LISTEN_JINGLE",POSITIVE_JINGLE:"POSITIVE_JINGLE",NEGATIVE_JINGLE:"NEGATIVE_JINGLE"});var SamplingRate=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SamplingRate_8KHZ",get:function(){return t._MAP.SamplingRate_8KHZ}},{key:"SamplingRate_16KHZ",get:function(){return t._MAP.SamplingRate_16KHZ}},{key:"SamplingRate_22KHZ",get:function(){return t._MAP.SamplingRate_22KHZ}},{key:"SamplingRate_44KHZ",get:function(){return t._MAP.SamplingRate_44KHZ}}]),t}();SamplingRate._MAP=Object.freeze({SamplingRate_8KHZ:"8KHZ",SamplingRate_16KHZ:"16KHZ",SamplingRate_22KHZ:"22KHZ",SamplingRate_44KHZ:"44KHZ"});var BitsPerSample=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"BitsPerSample_8_BIT",get:function(){return t._MAP.BitsPerSample_8_BIT}},{key:"BitsPerSample_16_BIT",get:function(){return t._MAP.BitsPerSample_16_BIT}}]),t}();BitsPerSample._MAP=Object.freeze({BitsPerSample_8_BIT:"8_BIT",BitsPerSample_16_BIT:"16_BIT"});var AudioType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"PCM",get:function(){return t._MAP.PCM}}]),t}();AudioType._MAP=Object.freeze({PCM:"PCM"});var AudioPassThruCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setSamplingRate",value:function(e){return this.validateType(SamplingRate,e),this.setParameter(t.KEY_SAMPLING_RATE,e),this}},{key:"getSamplingRate",value:function(){return this.getObject(SamplingRate,t.KEY_SAMPLING_RATE)}},{key:"setBitsPerSample",value:function(e){return this.validateType(BitsPerSample,e),this.setParameter(t.KEY_BITS_PER_SAMPLE,e),this}},{key:"getBitsPerSample",value:function(){return this.getObject(BitsPerSample,t.KEY_BITS_PER_SAMPLE)}},{key:"setAudioType",value:function(e){return this.validateType(AudioType,e),this.setParameter(t.KEY_AUDIO_TYPE,e),this}},{key:"getAudioType",value:function(){return this.getObject(AudioType,t.KEY_AUDIO_TYPE)}}]),t}();AudioPassThruCapabilities.KEY_SAMPLING_RATE="samplingRate",AudioPassThruCapabilities.KEY_BITS_PER_SAMPLE="bitsPerSample",AudioPassThruCapabilities.KEY_AUDIO_TYPE="audioType";var VrCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"VR_TEXT",get:function(){return t._MAP.VR_TEXT}}]),t}();VrCapabilities._MAP=Object.freeze({VR_TEXT:"TEXT"});var RegisterAppInterfaceResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.RegisterAppInterface),t}return _inherits(n,RpcResponse),_createClass(n,[{key:"setSdlMsgVersion",value:function(e){return this.validateType(SdlMsgVersion,e),this.setParameter(n.KEY_SDL_MSG_VERSION,e),this}},{key:"getSdlMsgVersion",value:function(){return this.getObject(SdlMsgVersion,n.KEY_SDL_MSG_VERSION)}},{key:"setLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_LANGUAGE,e),this}},{key:"getLanguage",value:function(){return this.getObject(Language,n.KEY_LANGUAGE)}},{key:"setHmiDisplayLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE,e),this}},{key:"getHmiDisplayLanguage",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE)}},{key:"setDisplayCapabilities",value:function(e){return this.validateType(DisplayCapabilities,e),this.setParameter(n.KEY_DISPLAY_CAPABILITIES,e),this}},{key:"getDisplayCapabilities",value:function(){return this.getObject(DisplayCapabilities,n.KEY_DISPLAY_CAPABILITIES)}},{key:"setButtonCapabilities",value:function(e){return this.setParameter(n.KEY_BUTTON_CAPABILITIES,e),this}},{key:"getButtonCapabilities",value:function(){return this.getObject(ButtonCapabilities,n.KEY_BUTTON_CAPABILITIES)}},{key:"setSoftButtonCapabilities",value:function(e){return this.setParameter(n.KEY_SOFT_BUTTON_CAPABILITIES,e),this}},{key:"getSoftButtonCapabilities",value:function(){return this.getObject(SoftButtonCapabilities,n.KEY_SOFT_BUTTON_CAPABILITIES)}},{key:"setPresetBankCapabilities",value:function(e){return this.validateType(PresetBankCapabilities,e),this.setParameter(n.KEY_PRESET_BANK_CAPABILITIES,e),this}},{key:"getPresetBankCapabilities",value:function(){return this.getObject(PresetBankCapabilities,n.KEY_PRESET_BANK_CAPABILITIES)}},{key:"setHmiZoneCapabilities",value:function(e){return this.setParameter(n.KEY_HMI_ZONE_CAPABILITIES,e),this}},{key:"getHmiZoneCapabilities",value:function(){return this.getObject(HmiZoneCapabilities,n.KEY_HMI_ZONE_CAPABILITIES)}},{key:"setSpeechCapabilities",value:function(e){return this.setParameter(n.KEY_SPEECH_CAPABILITIES,e),this}},{key:"getSpeechCapabilities",value:function(){return this.getObject(SpeechCapabilities,n.KEY_SPEECH_CAPABILITIES)}},{key:"setPrerecordedSpeech",value:function(e){return this.setParameter(n.KEY_PRERECORDED_SPEECH,e),this}},{key:"getPrerecordedSpeech",value:function(){return this.getObject(PrerecordedSpeech,n.KEY_PRERECORDED_SPEECH)}},{key:"setVrCapabilities",value:function(e){return this.setParameter(n.KEY_VR_CAPABILITIES,e),this}},{key:"getVrCapabilities",value:function(){return this.getObject(VrCapabilities,n.KEY_VR_CAPABILITIES)}},{key:"setAudioPassThruCapabilities",value:function(e){return this.setParameter(n.KEY_AUDIO_PASS_THRU_CAPABILITIES,e),this}},{key:"getAudioPassThruCapabilities",value:function(){return this.getObject(AudioPassThruCapabilities,n.KEY_AUDIO_PASS_THRU_CAPABILITIES)}},{key:"setPcmStreamCapabilities",value:function(e){return this.validateType(AudioPassThruCapabilities,e),this.setParameter(n.KEY_PCM_STREAM_CAPABILITIES,e),this}},{key:"getPcmStreamCapabilities",value:function(){return this.getObject(AudioPassThruCapabilities,n.KEY_PCM_STREAM_CAPABILITIES)}},{key:"setVehicleType",value:function(e){return this.validateType(VehicleType,e),this.setParameter(n.KEY_VEHICLE_TYPE,e),this}},{key:"getVehicleType",value:function(){return this.getObject(VehicleType,n.KEY_VEHICLE_TYPE)}},{key:"setSupportedDiagModes",value:function(e){return this.setParameter(n.KEY_SUPPORTED_DIAG_MODE,e),this}},{key:"getSupportedDiagModes",value:function(){return this.getParameter(n.KEY_SUPPORTED_DIAG_MODE)}},{key:"setHMICapabilities",value:function(e){return this.validateType(HMICapabilities,e),this.setParameter(n.KEY_HMI_CAPABILITIES,e),this}},{key:"getHMICapabilities",value:function(){return this.getObject(HMICapabilities,n.KEY_HMI_CAPABILITIES)}},{key:"setSdlVersion",value:function(e){return this.setParameter(n.KEY_SDL_VERSION,e),this}},{key:"getSdlVersion",value:function(){return this.getParameter(n.KEY_SDL_VERSION)}},{key:"setSystemSoftwareVersion",value:function(e){return this.setParameter(n.KEY_SYSTEM_SOFTWARE_VERSION,e),this}},{key:"getSystemSoftwareVersion",value:function(){return this.getParameter(n.KEY_SYSTEM_SOFTWARE_VERSION)}},{key:"setIconResumed",value:function(e){return this.setParameter(n.KEY_ICON_RESUMED,e),this}},{key:"getIconResumed",value:function(){return this.getParameter(n.KEY_ICON_RESUMED)}}]),n}();RegisterAppInterfaceResponse.KEY_SDL_MSG_VERSION="syncMsgVersion",RegisterAppInterfaceResponse.KEY_LANGUAGE="language",RegisterAppInterfaceResponse.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage",RegisterAppInterfaceResponse.KEY_DISPLAY_CAPABILITIES="displayCapabilities",RegisterAppInterfaceResponse.KEY_BUTTON_CAPABILITIES="buttonCapabilities",RegisterAppInterfaceResponse.KEY_SOFT_BUTTON_CAPABILITIES="softButtonCapabilities",RegisterAppInterfaceResponse.KEY_PRESET_BANK_CAPABILITIES="presetBankCapabilities",RegisterAppInterfaceResponse.KEY_HMI_ZONE_CAPABILITIES="hmiZoneCapabilities",RegisterAppInterfaceResponse.KEY_SPEECH_CAPABILITIES="speechCapabilities",RegisterAppInterfaceResponse.KEY_PRERECORDED_SPEECH="prerecordedSpeech",RegisterAppInterfaceResponse.KEY_VR_CAPABILITIES="vrCapabilities",RegisterAppInterfaceResponse.KEY_AUDIO_PASS_THRU_CAPABILITIES="audioPassThruCapabilities",RegisterAppInterfaceResponse.KEY_PCM_STREAM_CAPABILITIES="pcmStreamCapabilities",RegisterAppInterfaceResponse.KEY_VEHICLE_TYPE="vehicleType",RegisterAppInterfaceResponse.KEY_SUPPORTED_DIAG_MODE="supportedDiagModes",RegisterAppInterfaceResponse.KEY_HMI_CAPABILITIES="hmiCapabilities",RegisterAppInterfaceResponse.KEY_SDL_VERSION="sdlVersion",RegisterAppInterfaceResponse.KEY_SYSTEM_SOFTWARE_VERSION="systemSoftwareVersion",RegisterAppInterfaceResponse.KEY_ICON_RESUMED="iconResumed";var SetAppIcon=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.SetAppIcon),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setFileName",value:function(e){return this.setParameter(n.KEY_FILE_NAME,e),this}},{key:"getFileName",value:function(){return this.getParameter(n.KEY_FILE_NAME)}}]),n}();SetAppIcon.KEY_FILE_NAME="syncFileName";var SetAppIconResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.SetAppIcon),t}return _inherits(n,RpcResponse),n}(),SoftButtonType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SBT_TEXT",get:function(){return t._MAP.SBT_TEXT}},{key:"SBT_IMAGE",get:function(){return t._MAP.SBT_IMAGE}},{key:"SBT_BOTH",get:function(){return t._MAP.SBT_BOTH}}]),t}();SoftButtonType._MAP=Object.freeze({SBT_TEXT:"TEXT",SBT_IMAGE:"IMAGE",SBT_BOTH:"BOTH"});var SystemAction=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"DEFAULT_ACTION",get:function(){return t._MAP.DEFAULT_ACTION}},{key:"STEAL_FOCUS",get:function(){return t._MAP.STEAL_FOCUS}},{key:"KEEP_CONTEXT",get:function(){return t._MAP.KEEP_CONTEXT}}]),t}();SystemAction._MAP=Object.freeze({DEFAULT_ACTION:"DEFAULT_ACTION",STEAL_FOCUS:"STEAL_FOCUS",KEEP_CONTEXT:"KEEP_CONTEXT"});var SoftButton=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setType",value:function(e){return this.validateType(SoftButtonType,e),this.setParameter(t.KEY_TYPE,e),this}},{key:"getType",value:function(){return this.getObject(SoftButtonType,t.KEY_TYPE)}},{key:"setText",value:function(e){return this.setParameter(t.KEY_TEXT,e),this}},{key:"getText",value:function(){return this.getParameter(t.KEY_TEXT)}},{key:"setImage",value:function(e){return this.validateType(Image,e),this.setParameter(t.KEY_IMAGE,e),this}},{key:"getImage",value:function(){return this.getObject(Image,t.KEY_IMAGE)}},{key:"setIsHighlighted",value:function(e){return this.setParameter(t.KEY_IS_HIGHLIGHTED,e),this}},{key:"getIsHighlighted",value:function(){return this.getParameter(t.KEY_IS_HIGHLIGHTED)}},{key:"setSoftButtonID",value:function(e){return this.setParameter(t.KEY_SOFT_BUTTON_ID,e),this}},{key:"getSoftButtonID",value:function(){return this.getParameter(t.KEY_SOFT_BUTTON_ID)}},{key:"setSystemAction",value:function(e){return this.validateType(SystemAction,e),this.setParameter(t.KEY_SYSTEM_ACTION,e),this}},{key:"getSystemAction",value:function(){return this.getObject(SystemAction,t.KEY_SYSTEM_ACTION)}}]),t}();SoftButton.KEY_TYPE="type",SoftButton.KEY_TEXT="text",SoftButton.KEY_IMAGE="image",SoftButton.KEY_IS_HIGHLIGHTED="isHighlighted",SoftButton.KEY_SOFT_BUTTON_ID="softButtonID",SoftButton.KEY_SYSTEM_ACTION="systemAction";var MetadataType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"mediaTitle",get:function(){return t._MAP.mediaTitle}},{key:"mediaArtist",get:function(){return t._MAP.mediaArtist}},{key:"mediaAlbum",get:function(){return t._MAP.mediaAlbum}},{key:"mediaYear",get:function(){return t._MAP.mediaYear}},{key:"mediaGenre",get:function(){return t._MAP.mediaGenre}},{key:"mediaStation",get:function(){return t._MAP.mediaStation}},{key:"rating",get:function(){return t._MAP.rating}},{key:"currentTemperature",get:function(){return t._MAP.currentTemperature}},{key:"maximumTemperature",get:function(){return t._MAP.maximumTemperature}},{key:"minimumTemperature",get:function(){return t._MAP.minimumTemperature}},{key:"weatherTerm",get:function(){return t._MAP.weatherTerm}},{key:"humidity",get:function(){return t._MAP.humidity}}]),t}();MetadataType._MAP=Object.freeze({mediaTitle:"mediaTitle",mediaArtist:"mediaArtist",mediaAlbum:"mediaAlbum",mediaYear:"mediaYear",mediaGenre:"mediaGenre",mediaStation:"mediaStation",rating:"rating",currentTemperature:"currentTemperature",maximumTemperature:"maximumTemperature",minimumTemperature:"minimumTemperature",weatherTerm:"weatherTerm",humidity:"humidity"});var MetadataTags=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMainField1",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_1,e),this}},{key:"getMainField1",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_1)}},{key:"setMainField2",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_2,e),this}},{key:"getMainField2",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_2)}},{key:"setMainField3",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_3,e),this}},{key:"getMainField3",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_3)}},{key:"setMainField4",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_4,e),this}},{key:"getMainField4",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_4)}}]),t}();MetadataTags.KEY_MAIN_FIELD_1="mainField1",MetadataTags.KEY_MAIN_FIELD_2="mainField2",MetadataTags.KEY_MAIN_FIELD_3="mainField3",MetadataTags.KEY_MAIN_FIELD_4="mainField4";var TextAlignment=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"LEFT_ALIGNED",get:function(){return t._MAP.LEFT_ALIGNED}},{key:"RIGHT_ALIGNED",get:function(){return t._MAP.RIGHT_ALIGNED}},{key:"CENTERED",get:function(){return t._MAP.CENTERED}}]),t}();TextAlignment._MAP=Object.freeze({LEFT_ALIGNED:"LEFT_ALIGNED",RIGHT_ALIGNED:"RIGHT_ALIGNED",CENTERED:"CENTERED"});var Show=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.Show),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setMainField1",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_1,e),this}},{key:"getMainField1",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_1)}},{key:"setMainField2",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_2,e),this}},{key:"getMainField2",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_2)}},{key:"setMainField3",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_3,e),this}},{key:"getMainField3",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_3)}},{key:"setMainField4",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_4,e),this}},{key:"getMainField4",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_4)}},{key:"setAlignment",value:function(e){return this.validateType(TextAlignment,e),this.setParameter(n.KEY_ALIGNMENT,e),this}},{key:"getAlignment",value:function(){return this.getObject(TextAlignment,n.KEY_ALIGNMENT)}},{key:"setStatusBar",value:function(e){return this.setParameter(n.KEY_STATUS_BAR,e),this}},{key:"getStatusBar",value:function(){return this.getParameter(n.KEY_STATUS_BAR)}},{key:"setMediaClock",value:function(e){return this.setParameter(n.KEY_MEDIA_CLOCK,e),this}},{key:"getMediaClock",value:function(){return this.getParameter(n.KEY_MEDIA_CLOCK)}},{key:"setMediaTrack",value:function(e){return this.setParameter(n.KEY_MEDIA_TRACK,e),this}},{key:"getMediaTrack",value:function(){return this.getParameter(n.KEY_MEDIA_TRACK)}},{key:"setGraphic",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_GRAPHIC,e),this}},{key:"getGraphic",value:function(){return this.getObject(Image,n.KEY_GRAPHIC)}},{key:"setSecondaryGraphic",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_SECONDARY_GRAPHIC,e),this}},{key:"getSecondaryGraphic",value:function(){return this.getObject(Image,n.KEY_SECONDARY_GRAPHIC)}},{key:"setSoftButtons",value:function(e){return this.setParameter(n.KEY_SOFT_BUTTONS,e),this}},{key:"getSoftButtons",value:function(){return this.getObject(SoftButton,n.KEY_SOFT_BUTTONS)}},{key:"setCustomPresets",value:function(e){return this.setParameter(n.KEY_CUSTOM_PRESETS,e),this}},{key:"getCustomPresets",value:function(){return this.getParameter(n.KEY_CUSTOM_PRESETS)}},{key:"setMetadataTags",value:function(e){return this.validateType(MetadataTags,e),this.setParameter(n.KEY_METADATA_TAGS,e),this}},{key:"getMetadataTags",value:function(){return this.getObject(MetadataTags,n.KEY_METADATA_TAGS)}},{key:"setTemplateTitle",value:function(e){return this.setParameter(n.KEY_TEMPLATE_TITLE,e),this}},{key:"getTemplateTitle",value:function(){return this.getParameter(n.KEY_TEMPLATE_TITLE)}},{key:"setWindowID",value:function(e){return this.setParameter(n.KEY_WINDOW_ID,e),this}},{key:"getWindowID",value:function(){return this.getParameter(n.KEY_WINDOW_ID)}}]),n}();Show.KEY_MAIN_FIELD_1="mainField1",Show.KEY_MAIN_FIELD_2="mainField2",Show.KEY_MAIN_FIELD_3="mainField3",Show.KEY_MAIN_FIELD_4="mainField4",Show.KEY_ALIGNMENT="alignment",Show.KEY_STATUS_BAR="statusBar",Show.KEY_MEDIA_CLOCK="mediaClock",Show.KEY_MEDIA_TRACK="mediaTrack",Show.KEY_GRAPHIC="graphic",Show.KEY_SECONDARY_GRAPHIC="secondaryGraphic",Show.KEY_SOFT_BUTTONS="softButtons",Show.KEY_CUSTOM_PRESETS="customPresets",Show.KEY_METADATA_TAGS="metadataTags",Show.KEY_TEMPLATE_TITLE="templateTitle",Show.KEY_WINDOW_ID="windowID";var ShowResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.Show),t}return _inherits(n,RpcResponse),n}(),UnregisterAppInterface=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.UnregisterAppInterface),t}return _inherits(n,RpcRequest),n}(),RpcCreator=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"construct",value:function(e){var t,n=e.getPayload(),r=BinaryFrameHeader.fromBinaryHeader(n),i=r.getRpcType(),o=RpcType.keyForValue(i),s=r.getCorrelationId(),a=r.getFunctionId(),u=FunctionID.keyForValue(a),l=r.getBulkData(),c=r.getJsonData(),_={parameters:JsonRpcMarshaller.unmarshall(c)};switch(a){case FunctionID.AddCommand:i===RpcType.REQUEST?t=new AddCommand(_):i===RpcType.RESPONSE&&(t=new AddCommandResponse(_));break;case FunctionID.OnHMIStatus:i===RpcType.NOTIFICATION&&(t=new OnHmiStatus(_));break;case FunctionID.OnLanguageChange:i===RpcType.NOTIFICATION&&(t=new OnLanguageChange(_));break;case FunctionID.PutFile:i===RpcType.REQUEST?t=new PutFile(_):i===RpcType.RESPONSE&&(t=new PutFileResponse(_));break;case FunctionID.RegisterAppInterface:i===RpcType.REQUEST?t=new RegisterAppInterface(_):i===RpcType.RESPONSE&&(t=new RegisterAppInterfaceResponse(_));break;case FunctionID.SetAppIcon:i===RpcType.REQUEST?t=new SetAppIcon(_):i===RpcType.RESPONSE&&(t=new SetAppIconResponse(_));break;case FunctionID.Show:i===RpcType.REQUEST?t=new Show(_):i===RpcType.RESPONSE&&(t=new ShowResponse(_));break;case FunctionID.UnregisterAppInterface:i===RpcType.REQUEST&&(t=new UnregisterAppInterface(_));break;default:t=null}return null==t?(console.warn("RpcCreator couldn't construct an RPC for the ".concat(u," ").concat(o)),null):(i!==RpcType.REQUEST&&i!==RpcType.RESPONSE||t.setCorrelationId(s),l&&t.setBulkData(l),t)}}]),e}(),VideoStreamingProtocol=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"RAW",get:function(){return t._MAP.RAW}},{key:"RTP",get:function(){return t._MAP.RTP}},{key:"RTSP",get:function(){return t._MAP.RTSP}},{key:"RTMP",get:function(){return t._MAP.RTMP}},{key:"WEBM",get:function(){return t._MAP.WEBM}}]),t}();VideoStreamingProtocol._MAP=Object.freeze({RAW:"RAW",RTP:"RTP",RTSP:"RTSP",RTMP:"RTMP",WEBM:"WEBM"});var VideoStreamingCodec=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"H264",get:function(){return t._MAP.H264}},{key:"H265",get:function(){return t._MAP.H265}},{key:"Theora",get:function(){return t._MAP.Theora}},{key:"VP8",get:function(){return t._MAP.VP8}},{key:"VP9",get:function(){return t._MAP.VP9}}]),t}();VideoStreamingCodec._MAP=Object.freeze({H264:"H264",H265:"H265",Theora:"Theora",VP8:"VP8",VP9:"VP9"});var VideoStreamingFormat=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setProtocol",value:function(e){return this.validateType(VideoStreamingProtocol,e),this.setParameter(t.KEY_PROTOCOL,e),this}},{key:"getProtocol",value:function(){return this.getParameter(t.KEY_PROTOCOL)}},{key:"setCodec",value:function(e){return this.validateType(VideoStreamingCodec,e),this.setParameter(t.KEY_CODEC,e),this}},{key:"getCodec",value:function(){return this.getParameter(t.KEY_CODEC)}}]),t}();VideoStreamingFormat.KEY_PROTOCOL="protocol",VideoStreamingFormat.KEY_CODEC="codec";var SdlProtocolBase=function(){function n(e,t){_classCallCheck(this,n),this._baseTransportConfig=e,this._transportConfig=e,this._sdlProtocolListener=t,this._transportManager=null,this.reset(),this._createTransportListener()}return _createClass(n,[{key:"reset",value:function(){this._protocolVersion=new Version(1,0,0),this._transportConfig=this._baseTransportConfig,this._headerSize=n.V1_HEADER_SIZE,this._serviceStatus={},this._serviceStatus[ServiceType.CONTROL]=!0,this._mtus={},this._mtus[ServiceType.RPC]=n.V1_V2_MTU_SIZE-this._headerSize,this._hashID=0,this._messageFrameAssemblers={},this._messageID=1,this._sessionID=0}},{key:"setTransportManager",value:function(e){this._serviceStatus[ServiceType.RPC]||this.startService(ServiceType.RPC,0,!1),this._transportManager=e}},{key:"_createTransportListener",value:function(){var t=this;this._transportListener=new TransportListener,this._transportListener.setOnTransportConnected(function(){t._handleTransportConnected()}),this._transportListener.setOnTransportDisconnected(function(){}),this._transportListener.setOnPacketReceived(function(e){t._handlePacketReceived(e)}),this._transportListener.setOnError(function(){})}},{key:"_handleTransportConnected",value:function(){this._sdlProtocolListener.onTransportConnected()}},{key:"start",value:function(){if(!this._transportManager)throw"A transport manager must be defined, unable to start SDL Protocol";this._transportManager.start()}},{key:"startService",value:function(e,t,n){var r=this.constructor.MAX_PROTOCOL_VERSION,i=new SdlPacket(r.getMajor(),n,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_START_SERVICE,t,0,0,null);if(e===ServiceType.AUDIO)return this.sendPacket(i);if(e!==ServiceType.RPC){if(e!==ServiceType.VIDEO)throw"Service type not implemented";if(null!==this._sdlProtocolListener){var o=this._sdlProtocolListener.getDesiredVideoParams();if(null!==o){var s=o.getResolution(),a=o.getFormat();s&&(i.putTag(ControlFrameTags.Video.StartService.WIDTH,s.getResolutionWidth()),i.putTag(ControlFrameTags.Video.StartService.HEIGHT,s.getResolutionHeight())),a&&(i.putTag(ControlFrameTags.Video.StartService.VIDEO_CODEC,a.getCodec()),i.putTag(ControlFrameTags.Video.StartService.VIDEO_PROTOCOL,a.getProtocol()))}}return this.sendPacket(i)}i.putTag(ControlFrameTags.RPC.StartService.PROTOCOL_VERSION,r.toString()),this.sendPacket(i)}},{key:"getMtu",value:function(e){var t=this._mtus[e];return t||n.V1_V2_MTU_SIZE}},{key:"isConnected",value:function(){return this._transportManager&&this._transportManager.isConnected(null,null)}},{key:"getProtocolVersion",value:function(){return this._protocolVersion}},{key:"_setVersion",value:function(e){5<e?(this._protocolVersion=new Version("5.1.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):5===e?(this._protocolVersion=new Version("5.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):4===e?(this._protocolVersion=new Version("4.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):3===e?(this._protocolVersion=new Version("3.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):2===e?(this._protocolVersion=new Version("2.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V1_V2_MTU_SIZE-this.headerSize):1===e&&(this._protocolVersion=new Version("1.0.0"),this.headerSize=this.constructor.V1_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V1_V2_MTU_SIZE-this.headerSize)}},{key:"sendPacket",value:function(e){this._transportManager&&this._transportManager.sendPacket(e)}},{key:"_getSessionId",value:function(){return this._sdlProtocolListener.getSessionId()}},{key:"_getNextMessageID",value:function(){return this._messageID++}},{key:"sendRpc",value:function(e){var t=this,n=this._getSessionId(),r=this._getNextMessageID(),i=t._mtus[ServiceType.RPC],o=t._protocolVersion.getMajor(),s=e.getIsEncrypted();MessageFrameDisassembler.buildRPC(e,n,r,i,o,s,function(e){t.sendPacket(e)})}},{key:"_handlePacketReceived",value:function(e){return null!==this._protocolVersion&&1!==this._protocolVersion.getMajor()||this._setVersion(e.getVersion()),e.getFrameType()===FrameType.CONTROL?this._handleControlPacket(e):this._getMessageFrameAssembler(e).handleFrame(e)}},{key:"_handleOnMessageAssembled",value:function(e){var t=e.getServiceType();return t===ServiceType.RPC||t===ServiceType.HYBRID?this._handleRPCPacket(e):t===ServiceType.HYBRID?this._handleRPCPacket(e):void console.warn("Unhandled service type ",e)}},{key:"_getMessageFrameAssembler",value:function(e){var n=this,t=n._messageFrameAssemblers[e.getMessageID()];return t||(t=new MessageFrameAssembler(function(e,t){if(e)throw e;n._messageFrameAssemblers[t.getMessageID()]=null,n._handleOnMessageAssembled(t)}),n._messageFrameAssemblers[e.getMessageID()]=t),t}},{key:"_handleControlPacket",value:function(e){var t=e.getFrameInfo();return t===SdlPacket.FRAME_INFO_HEART_BEAT?this._handleProtocolHeartbeat(e):t===SdlPacket.FRAME_INFO_HEART_BEAT_ACK?this._handleProtocolHeartbeatACK(e):t===SdlPacket.FRAME_INFO_START_SERVICE_ACK?this._handleStartServiceACK(e):t===SdlPacket.FRAME_INFO_START_SERVICE_NAK?this._handleStartServiceNAK(e):t===SdlPacket.FRAME_INFO_END_SERVICE_ACK?this._handleEndServiceACK(e):t===SdlPacket.FRAME_INFO_END_SERVICE?this._handleEndService(e):t===SdlPacket.FRAME_INFO_END_SERVICE_NAK?this._handleEndServiceNAK(e):void console.warn("Unhandled control packet",{frameInfo:t})}},{key:"_handleProtocolHeartbeat",value:function(){var e=SdlPacketFactory.createHeartbeatACK(ServiceType.CONTROL,this._getSessionId(),this._protocolVersion.getMajor());this.sendPacket(e)}},{key:"_handleProtocolHeartbeatACK",value:function(e){console.log("Received HeartbeatACK - ".concat(e.toString()))}},{key:"_handleStartServiceACK",value:function(e){var t=e.getVersion(),n=e.getServiceType();if(5<=t){var r=null;n===ServiceType.RPC?r=ControlFrameTags.RPC.StartServiceACK.MTU:n===ServiceType.PCM?r=ControlFrameTags.Audio.StartServiceACK.MTU:n===ServiceType.NAV&&(r=ControlFrameTags.Video.StartServiceACK.MTU);var i=e.getTag(r);if(null!==i&&(this._mtus[n]=i),n===ServiceType.RPC){this._sessionID=e.getSessionID(),this._hashID=e.getTag(ControlFrameTags.RPC.StartServiceACK.HASH_ID);var o=e.getTag(ControlFrameTags.RPC.StartServiceACK.PROTOCOL_VERSION);this._protocolVersion=o?(new Version).fromString(o):new Version(5,0,0)}else if(n===ServiceType.VIDEO&&null!==this._sdlProtocolListener){var s=new ImageResolution,a=new VideoStreamingFormat;s.setResolutionHeight(Math.floor(e.getTag(ControlFrameTags.Video.StartServiceACK.HEIGHT))),s.setResolutionWidth(Math.floor(e.getTag(ControlFrameTags.Video.StartServiceACK.WIDTH))),a.setCodec(e.getTag(ControlFrameTags.Video.StartServiceACK.VIDEO_CODEC)),a.setProtocol(e.getTag(ControlFrameTags.Video.StartServiceACK.VIDEO_PROTOCOL));var u=this._sdlProtocolListener.getDesiredVideoParams();u.setResolution(s),u.setFormat(a),this._sdlProtocolListener.setAcceptedVideoParams(u)}}else if(1<this._protocolVersion.getMajor()){var l=e.getPayload();null!==l&&4===l.length&&(this._hashID=BitConverter.arrayBufferToInt32(l.buffer))}this._sdlProtocolListener.onProtocolSessionStarted(n,e.getSessionID(),this._protocolVersion.getMajor(),"",this._hashID,e.getEncryption())}},{key:"_handleStartServiceNAK",value:function(e){throw"Got StartSessionNACK for protocol sessionID ".concat(e.getSessionID())}},{key:"_handleEndServiceACK",value:function(e){return this._handleServiceEnded(e)}},{key:"_handleEndService",value:function(e){return this._handleServiceEnded(e)}},{key:"_handleServiceEnded",value:function(e){this._sdlProtocolListener.onProtocolSessionEnded(e.getServiceType(),e.getSessionID(),"")}},{key:"_handleEndServiceNAK",value:function(e){var t=e.getServiceType();if(5<=e.getVersion()){var n=null;t===ServiceType.AUDIO?n=ControlFrameTags.Audio.EndServiceNAK.REJECTED_PARAMS:t===ServiceType.VIDEO&&(n=ControlFrameTags.Video.EndServiceNAK.REJECTED_PARAMS);var r=e.getTag(n);Array.isArray(r)&&0<r.length&&console.error("Got EndSessionNAK with rejected params",r)}this._sdlProtocolListener.onProtocolSessionEndedNACKed(t,e.getSessionID(),"")}},{key:"_handleRPCPacket",value:function(e){var t=RpcCreator.construct(e);null!==t&&this._sdlProtocolListener.onRpcMessageReceived(t)}},{key:"endSession",value:function(){var e=this._getSessionId(),t=this._hashID,n=ServiceType.RPC,r=this._getNextMessageID(),i=this._protocolVersion.getMajor(),o=SdlPacketFactory.createEndSession(n,e,r,i,t);this.sendPacket(o)}},{key:"endService",value:function(e,t){if(e===ServiceType.RPC)return this.endSession();var n=this._hashID,r=this._getNextMessageID(),i=this._protocolVersion.getMajor(),o=SdlPacketFactory.createEndSession(e,t,r,i,n);this.sendPacket(o)}}]),n}();SdlProtocolBase.V1_HEADER_SIZE=8,SdlProtocolBase.V2_HEADER_SIZE=12,SdlProtocolBase.V1_V2_MTU_SIZE=1500,SdlProtocolBase.V3_V4_MTU_SIZE=131072,SdlProtocolBase.MAX_PROTOCOL_VERSION=new Version(5,2,0);var TransportType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"WEBSOCKET_CLIENT",get:function(){return t._MAP.WEBSOCKET_CLIENT}},{key:"WEBSOCKET_SERVER",get:function(){return t._MAP.WEBSOCKET_SERVER}},{key:"CUSTOM",get:function(){return t._MAP.CUSTOM}}]),t}();TransportType._MAP=Object.freeze({WEBSOCKET_CLIENT:"WEBSOCKET_CLIENT",WEBSOCKET_SERVER:"WEBSOCKET_SERVER",CUSTOM:"CUSTOM"});var SdlPsm=function(){function n(){_classCallCheck(this,n),this.reset()}return _createClass(n,[{key:"reset",value:function(){this._state=n.START_STATE,this._version=0,this._encryption=!1,this._frameType=FrameType.SINGLE,this._serviceType=0,this._controlFrameInfo=null,this._sessionID=null,this._dumpSize=null,this._dataLength=0,this._messageID=0,this._payload=null}},{key:"getState",value:function(){return this._state}},{key:"getFormedPacket",value:function(){return this._state===n.FINISHED_STATE?new SdlPacket(this._version,this._encryption,this._frameType,this._serviceType,this._controlFrameInfo,this._sessionID,this._dataLength,this._messageID,this._payload,0,this._dataLength):null}},{key:"handleByte",value:function(e){return this._state=this._transitionOnInput(e,this._state),this._state!==n.ERROR_STATE}},{key:"_transitionOnInput",value:function(e,t){if(t===n.START_STATE)return this._version=(e&n.VERSION_MASK)>>4,0===this._version?n.ERROR_STATE:(this._encryption=1==(e&n.ENCRYPTION_MASK)>>3,this._frameType=e&n.FRAME_TYPE_MASK,(this._version<1||5<this._version)&&this._frameType!==FrameType.CONTROL?n.ERROR_STATE:this._frameType<FrameType.CONTROL||this._frameType>FrameType.CONSECUTIVE?n.ERROR_STATE:n.SERVICE_TYPE_STATE);if(t===n.SERVICE_TYPE_STATE)return this._serviceType=255&e,n.CONTROL_FRAME_INFO_STATE;if(t===n.CONTROL_FRAME_INFO_STATE){switch(this._controlFrameInfo=255&e,this._frameType){case FrameType.CONTROL:break;case FrameType.SINGLE:case FrameType.FIRST:if(0!==this._controlFrameInfo)return n.ERROR_STATE;break;case FrameType.CONSECUTIVE:break;default:return n.ERROR_STATE}return n.SESSION_ID_STATE}if(t===n.SESSION_ID_STATE)return this._sessionID=255&e,n.DATA_SIZE_1_STATE;if(t===n.DATA_SIZE_1_STATE)return this._dataLength+=(255&e)<<24,n.DATA_SIZE_2_STATE;if(t===n.DATA_SIZE_2_STATE)return this._dataLength+=(255&e)<<16,n.DATA_SIZE_3_STATE;if(t===n.DATA_SIZE_3_STATE)return this._dataLength+=(255&e)<<8,n.DATA_SIZE_4_STATE;if(t!==n.DATA_SIZE_4_STATE)return t===n.MESSAGE_1_STATE?(this._messageID+=(255&e)<<24,n.MESSAGE_2_STATE):t===n.MESSAGE_2_STATE?(this._messageID+=(255&e)<<16,n.MESSAGE_3_STATE):t===n.MESSAGE_3_STATE?(this._messageID+=(255&e)<<8,n.MESSAGE_4_STATE):t===n.MESSAGE_4_STATE?(this._messageID+=255&e,0===this._dataLength?n.FINISHED_STATE:(this._dumpSize=this._dataLength,this._payload=new Uint8Array(this._dataLength),n.DATA_PUMP_STATE)):t===n.DATA_PUMP_STATE?(this._payload[this._dataLength-this._dumpSize]=e,this._dumpSize-=1,0<this._dumpSize?n.DATA_PUMP_STATE:0===this._dumpSize?n.FINISHED_STATE:n.ERROR_STATE):void 0;switch(this._dataLength+=255&e,this._frameType){case FrameType.SINGLE:case FrameType.CONSECUTIVE:break;case FrameType.CONTROL:if(1===this._version&&this._controlFrameInfo===SdlPacket.FRAME_INFO_START_SERVICE)return 0===this._dataLength?n.FINISHED_STATE:this._dataLength<=SdlProtocolBase.V1_V2_MTU_SIZE-SdlProtocolBase.V1_HEADER_SIZE?(this._payload=new Uint8Array(this._dataLength),this._dumpSize=this._dataLength,n.DATA_PUMP_STATE):n.ERROR_STATE;break;case FrameType.FIRST:if(this._dataLength!==n.FIRST_FRAME_DATA_SIZE)return n.ERROR_STATE;break;default:return n.ERROR_STATE}return 1===this._version?0===this._dataLength?n.FINISHED_STATE:this._dataLength<=SdlProtocolBase.V1_V2_MTU_SIZE-SdlProtocolBase.V1_HEADER_SIZE?(this._payload=new Uint8Array(this._dataLength),this._dumpSize=this._dataLength,n.DATA_PUMP_STATE):n.ERROR_STATE:n.MESSAGE_1_STATE}}]),n}();SdlPsm.START_STATE=0,SdlPsm.SERVICE_TYPE_STATE=2,SdlPsm.CONTROL_FRAME_INFO_STATE=3,SdlPsm.SESSION_ID_STATE=4,SdlPsm.DATA_SIZE_1_STATE=5,SdlPsm.DATA_SIZE_2_STATE=6,SdlPsm.DATA_SIZE_3_STATE=7,SdlPsm.DATA_SIZE_4_STATE=8,SdlPsm.MESSAGE_1_STATE=9,SdlPsm.MESSAGE_2_STATE=10,SdlPsm.MESSAGE_3_STATE=11,SdlPsm.MESSAGE_4_STATE=12,SdlPsm.DATA_PUMP_STATE=13,SdlPsm.FINISHED_STATE=255,SdlPsm.ERROR_STATE=-1,SdlPsm.FIRST_FRAME_DATA_SIZE=8,SdlPsm.VERSION_MASK=240,SdlPsm.ENCRYPTION_MASK=8,SdlPsm.FRAME_TYPE_MASK=7;var TransportBase=function(){function n(e,t){_classCallCheck(this,n),this._sdlPsm=new SdlPsm,this._transportConfig=e,this._transportCallback=t}return _createClass(n,[{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}},{key:"setTransportCallback",value:function(){throw"setTransportCallback method must be overridden"}}]),n}(),WebSocketClient=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t)))._queue=[],n._isRunning=!1,n._wsUrl="".concat(e.getHost(),":").concat(e.getPort()),n._ws=null,n}return _inherits(r,TransportBase),_createClass(r,[{key:"setTransportCallback",value:function(e){this._transportCallback=e}},{key:"start",value:function(){this._init()}},{key:"_init",value:function(){var t=this;this._ws=new WebSocket(this._wsUrl),this._ws.onopen=function(){t._transportCallback.onConnectionEstablished()},this._ws.onerror=function(e){console.error("Failed to connect",e),t._transportCallback.onError()},this._ws.onmessage=function(e){t._handleIncoming(e)},this._ws.onclose=function(){t._transportCallback.onConnectionTerminated()}}},{key:"stop",value:function(){this._ws.close()}},{key:"sendPacket",value:function(e){var t=e.toPacket();this._ws.send(t)}},{key:"_handleIncoming",value:function(e){this._queue.push(e.data),this._multiByteHandler()}},{key:"_multiByteHandler",value:function(){var u=this;if(!this._isRunning){for(this._isRunning=!0;0<this._queue.length;){var e=this._queue.shift();new Response(e).arrayBuffer().then(function(e){var t=new Uint8Array(e),n=!0,r=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value;u._handleByte(a)}}catch(e){r=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw i}}})}this._isRunning=!1}}},{key:"_handleByte",value:function(e){if(this._sdlPsm.handleByte(e)||(console.error("failed",this._sdlPsm),this._sdlPsm.reset()),this._sdlPsm.getState()===SdlPsm.FINISHED_STATE){var t=this._sdlPsm.getFormedPacket();this._sdlPsm.reset(),this._transportCallback.onPacketReceived(t)}}}]),r}(),TransportCallback=function(){function e(){_classCallCheck(this,e),this._onConnectionEstablished=null,this._onError=null,this._onConnectionTerminated=null,this._onPacketReceived=null}return _createClass(e,[{key:"setOnConnectionEstablished",value:function(e){this._onConnectionEstablished=e}},{key:"setOnError",value:function(e){this._onError=e}},{key:"setOnConnectionTerminated",value:function(e){this._onConnectionTerminated=e}},{key:"setOnPacketReceived",value:function(e){this._onPacketReceived=e}},{key:"onConnectionEstablished",value:function(){"function"==typeof this._onConnectionEstablished&&this._onConnectionEstablished()}},{key:"onError",value:function(){"function"==typeof this._onError&&this._onError()}},{key:"onConnectionTerminated",value:function(e){"function"==typeof this._onConnectionTerminated&&this._onConnectionTerminated(e)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),TransportManagerBase=function(){function r(e,t){var n=this;_classCallCheck(this,r),this._transportConfig=e,this._transportListener=t,this._transport=null,this._isConnected=!1,this._transportCallback=new TransportCallback,this._transportCallback.setOnConnectionEstablished(function(){n._isConnected=!0,t.onTransportConnected()}),this._transportCallback.setOnConnectionTerminated(function(){n._isConnected=!1}),this._transportCallback.setOnPacketReceived(this.onPacketReceived.bind(this)),this._transportConfig.getTransportType()===TransportType.WEBSOCKET_CLIENT?this._transport=new WebSocketClient(this._transportConfig,this._transportCallback):this._transportConfig.getTransportType()===TransportType.CUSTOM&&(this._transport=this._transportConfig.getTransport(),this._transport.setTransportCallback(this._transportCallback))}return _createClass(r,[{key:"onTransportConnected",value:function(){this._transportListener.onTransportConnected()}},{key:"onTransportDisconnected",value:function(){this._transportListener.onTransportDisconnected()}},{key:"onError",value:function(){this._transportListener.onError()}},{key:"onPacketReceived",value:function(e){this._transportListener.onPacketReceived(e)}},{key:"start",value:function(){null!==this._transport&&"function"==typeof this._transport.start&&this._transport.start()}},{key:"stop",value:function(){null!==this._transport&&"function"==typeof this._transport.stop&&this._transport.stop()}},{key:"sendPacket",value:function(e){null!==this._transport&&"function"==typeof this._transport.sendPacket&&this._transport.sendPacket(e)}},{key:"isConnected",value:function(){return this._isConnected}}]),r}(),TransportManager=function(){function n(e,t){return _classCallCheck(this,n),_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e,t))}return _inherits(n,TransportManagerBase),n}(),SdlProtocol=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t))).setTransportManager(new TransportManager(n._transportConfig,n._transportListener)),n}return _inherits(r,SdlProtocolBase),r}(),ServiceListenerMap=function(){function e(){_classCallCheck(this,e),this._listeners={},this._listeners[ServiceType.CONTROL]=[],this._listeners[ServiceType.RPC]=[],this._listeners[ServiceType.AUDIO]=[],this._listeners[ServiceType.VIDEO]=[],this._listeners[ServiceType.HYBRID]=[]}return _createClass(e,[{key:"addListener",value:function(e,t){e&&this._listeners[e].push(t)}},{key:"removeListener",value:function(e,t){if(e){var n=this._listeners[e],r=!1;return this._listeners[e]=n.filter(function(e){return r=!0,e!==t}),r}}},{key:"sendEventServiceStarted",value:function(e,t,n){var r=this._listeners[t];for(var i in r)r[i].onServiceStarted(e,t,n)}},{key:"sendEventServiceEnded",value:function(e,t){var n=this._listeners[t];for(var r in n)n[r].onServiceEnded(e,t)}},{key:"sendEventServiceError",value:function(e,t,n){var r=this._listeners[t];for(var i in r)r[i].onServiceError(e,t,n)}}]),e}(),DEFAULT_PROTOCOL=VideoStreamingProtocol.RAW,DEFAULT_CODEC=VideoStreamingCodec.H264,DEFAULT_WIDTH=1024,DEFAULT_HEIGHT=576,DEFAULT_DENSITY=240,DEFAULT_FRAMERATE=30,DEFAULT_BITRATE=512e3,DEFAULT_INTERVAL=5,DEFAULT_SCALE=1,VideoStreamingParameters=function(){function s(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:null;_classCallCheck(this,s),this._displayDensity=e||DEFAULT_DENSITY,this._frameRate=t||DEFAULT_FRAMERATE,this._bitrate=n||DEFAULT_BITRATE,this._interval=r||DEFAULT_INTERVAL,i instanceof ImageResolution||((i=new ImageResolution).setResolutionWidth(DEFAULT_WIDTH),i.setResolutionHeight(DEFAULT_HEIGHT)),this._resolution=i,o instanceof VideoStreamingFormat||((o=new VideoStreamingFormat).setProtocol(DEFAULT_PROTOCOL),o.setCodec(DEFAULT_CODEC)),this._format=o}return _createClass(s,[{key:"update",value:function(e){null!==e.getMaxBitrate()&&(this._bitrate=1e3*e.getMaxBitrate());var t=DEFAULT_SCALE;null!==e.getScale()&&(t=e.getScale());var n=e.getPreferredResolution();null!==n&&(null!==n.getResolutionHeight()&&0<n.getResolutionHeight()&&this._resolution.setResolutionHeight(Math.floor(n.getResolutionHeight()/t)),null!==n.getResolutionWidth()&&0<n.getResolutionWidth()&&this._resolution.setResolutionWidth(Math.floor(n.getResolutionWidth()/t)));var r=e.getSupportedFormats();null!==r&&0<r.length&&(this._format=r[0])}},{key:"setDisplayDensity",value:function(e){return this._displayDensity=e,this}},{key:"getDisplayDensity",value:function(){return this._displayDensity}},{key:"setFrameRate",value:function(e){this._frameRate=e}},{key:"getFrameRate",value:function(){return this._frameRate}},{key:"setBitrate",value:function(e){return this._bitrate=e,this}},{key:"getBitrate",value:function(){return this._bitrate}},{key:"setInterval",value:function(e){return this._interval=e,this}},{key:"getInterval",value:function(){return this._interval}},{key:"setFormat",value:function(e){return this._format=e,this}},{key:"getFormat",value:function(){return this._format}},{key:"setResolution",value:function(e){return this._resolution=e,this}},{key:"getResolution",value:function(){return this._resolution}}]),s}(),SdlSession=function(){function n(e,t){_classCallCheck(this,n),this._baseTransportConfig=e,this._sessionId=null,this._sessionHashId=null,this._sdlSessionListener=t,this._baseTransportConfig=e,this._serviceListeners=new ServiceListenerMap,this._sdlProtocolListener=this._setupSdlProtocolListener(),this._sdlProtocol=new SdlProtocol(e,this._sdlProtocolListener)}return _createClass(n,[{key:"_setupSdlProtocolListener",value:function(){var e=new SdlProtocolListener;return e.setGetSessionId(this.getSessionId.bind(this)),e.setOnProtocolSessionStarted(this.onProtocolSessionStarted.bind(this)),e.setOnProtocolSessionEnded(this.onProtocolSessionEnded.bind(this)),e.setOnProtocolSessionEndedNACKed(this.onProtocolSessionEndedNACKed.bind(this)),e.setOnRpcMessageReceived(this.onRpcMessageReceived.bind(this)),e.setOnTransportConnected(this.onTransportConnected.bind(this)),e.setGetDesiredVideoParams(this.getDesiredVideoParams.bind(this)),e.setSetAcceptedVideoParams(this.setAcceptedVideoParams.bind(this)),e}},{key:"start",value:function(){this._sdlProtocol.start()}},{key:"getSessionId",value:function(){return this._sessionId}},{key:"onTransportConnected",value:function(){this._sdlSessionListener.onTransportConnected()}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){this._sessionId=t,e===ServiceType.RPC&&(this._sessionHashId=i),this._sdlSessionListener.onProtocolSessionStarted(e,t,n,r,i,o),this._serviceListeners.sendEventServiceStarted(this,e,o)}},{key:"onProtocolSessionEnded",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEnded(e,t,n),this._serviceListeners.sendEventServiceEnded(this,e)}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEndedNACKed(e,t,n),this._serviceListeners.sendEventServiceError(this,e,"End ".concat(e.toString()," Service NACK'ed"))}},{key:"onRpcMessageReceived",value:function(e){this._sdlSessionListener.onRpcMessageReceived(e)}},{key:"endSession",value:function(){this._sdlProtocol.endSession()}},{key:"sendRpc",value:function(e){this._sdlProtocol.sendRpc(e)}},{key:"sendPacket",value:function(e){this._sdlProtocol.sendPacket(e)}},{key:"getMtu",value:function(e){this._sdlProtocol.getMtu(e)}},{key:"close",value:function(){this._sdlProtocol.endSession(this._sessionId,this._sessionHashId)}},{key:"startService",value:function(e,t,n){this._sdlProtocol.startService(e,t,n)}},{key:"endService",value:function(e,t){this._sdlProtocol.endService(e,t)}},{key:"getCurrentTransportType",value:function(){return this._baseTransportConfig.getTransportType()}},{key:"getIsConnected",value:function(){return this._sdlProtocol.isConnected()}},{key:"getProtocolVersion",value:function(){return this._sdlProtocol.getProtocolVersion()}},{key:"getTransportConfig",value:function(){return this._baseTransportConfig}},{key:"getSessionHashId",value:function(){return this._sessionHashId}},{key:"addServiceListener",value:function(e,t){this._serviceListeners.addListener(e,t)}},{key:"removeServiceListener",value:function(e,t){return this._serviceListeners.removeListener(e,t)}},{key:"getServiceListeners",value:function(){return this._serviceListeners}},{key:"setDesiredVideoParams",value:function(e){return this._desiredVideoParams=e,this}},{key:"getDesiredVideoParams",value:function(){return this._desiredVideoParams instanceof VideoStreamingParameters||(this._desiredVideoParams=new VideoStreamingParameters),this._desiredVideoParams}},{key:"setAcceptedVideoParams",value:function(e){return this._desiredVideoParams=e,this}}]),n}(),ArrayTools=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"arrayRemove",value:function(e,t){return e.filter(function(e){return e!==t})}}]),e}(),LifecycleManager=function(){function n(e,t){if(_classCallCheck(this,n),null===e||null===t||void 0===e||void 0===t)throw"Params must not be null";this._appConfig=e,this._lifecycleListener=t,this._sdlSession=new SdlSession(this._appConfig.getTransportConfig(),this._createSessionListener()),this._rpcSpecVersion=new Version(1,0,0),this._currentHMIStatus=null,this._firstTimeFull=!0,this._responseListeners=new Map,this._maxCorrelationId=0,this._rpcListeners=new Map}return _createClass(n,[{key:"_createSessionListener",value:function(){var s=this,e=new SdlSessionListener;return e.setOnProtocolSessionStarted(function(e,t,n,r,i,o){e===ServiceType.RPC&&null!==s._appConfig&&void 0!==s._appConfig&&s.sendRpcMessage(s._createRegisterAppInterface())}),e.setOnProtocolSessionEnded(function(e,t,n){}),e.setOnProtocolSessionEndedNACKed(function(e,t,n){}),e.setOnRpcMessageReceived(function(e){s._handleRpc(e)}),e.setOnTransportConnected(function(){s._sdlSession.startService(ServiceType.RPC,0,!1)}),e}},{key:"_handleRpc",value:function(n){if(null!=n&&null!==n.getFunctionName()&&void 0!==n.getFunctionName()){var e=FunctionID.valueForKey(n.getFunctionName()),t=this._rpcListeners.get(e);null!=t&&t.forEach(function(e,t){e.onRpcMessage(n)}),n instanceof RpcResponse&&this._responseListeners.has(n.getCorrelationId())&&this._responseListeners.get(n.getCorrelationId()).resolve()}}},{key:"start",value:function(){return this._setupInternalRpcListeners(),this._sdlSession.start(),this}},{key:"stop",value:function(){this._sdlSession.close()}},{key:"addRpcListener",value:function(e,t){var n=this._rpcListeners.get(e);null==n&&(this._rpcListeners.set(e,[]),n=this._rpcListeners.get(e)),n.push(t)}},{key:"removeRpcListener",value:function(e,t){if(null!=t){var n=this._rpcListeners.get(e);null!=n&&this._rpcListeners.set(e,ArrayTools.arrayRemove(n,t))}}},{key:"sendRpcMessage",value:function(e){null!=e&&this._sdlSession.getIsConnected()&&(e instanceof RpcRequest&&(e.getFunctionName!==FunctionID.RegisterAppInterface&&e.setCorrelationId(++this._maxCorrelationId),null!==e.getOnRPCResponsePromise()&&void 0!==e.getOnRPCResponsePromise()&&this._responseListeners.set(e.getCorrelationId(),e.getOnRPCResponsePromise())),this._sdlSession.sendRpc(e))}},{key:"getRegisterAppInterfaceResponse",value:function(){return this._registerAppInterfaceResponse}},{key:"_createRegisterAppInterface",value:function(){var e=new RegisterAppInterface;return e.setSdlMsgVersion((new SdlMsgVersion).setMajorVersion(n.MAX_RPC_VERSION.getMajor()).setMinorVersion(n.MAX_RPC_VERSION.getMinor()).setPatchVersion(n.MAX_RPC_VERSION.getPatch())).setAppName(this._appConfig.getAppName()).setFullAppId(this._appConfig.getAppId()).setNgnMediaScreenAppName(this._appConfig.getShortAppName()).setAppHmiType(this._appConfig.getAppTypes()).setLanguageDesired(this._appConfig.getLanguageDesired()).setHmiDisplayLanguageDesired(this._appConfig.getHmiDisplayLanguageDesired()).setIsMediaApplication(this._appConfig.isMediaApp()).setDayColorScheme(this._appConfig.getDayColorScheme()).setNightColorScheme(this._appConfig.getNightColorScheme()).setCorrelationId(n.REGISTER_APP_INTERFACE_CORRELATION_ID),e}},{key:"_setupInternalRpcListeners",value:function(){var n=this;this._rpcListener=(new RpcListener).setOnRpcMessage(function(e){switch(FunctionID.valueForKey(e.getFunctionName())){case FunctionID.RegisterAppInterface:n._processRaiResponse(e);break;case FunctionID.OnHMIStatus:var t=null!==e.getHMILevel()&&void 0!==e.getHMILevel()&&null===n._currentHMIStatus;n._currentHMIStatus=e.getHMILevel(),null!==n._lifecycleListener&&void 0!==n._lifecycleListener&&t&&n._lifecycleListener.onProxyConnected(n)}}),this.addRpcListener(FunctionID.RegisterAppInterface,this._rpcListener),this.addRpcListener(FunctionID.OnHMIStatus,this._rpcListener)}},{key:"_processRaiResponse",value:function(e){var t=(this._registerAppInterfaceResponse=e).getSdlMsgVersion();this._rpcSpecVersion=null!=t?new Version(t.getMajorVersion(),t.getMajorVersion(),t.getPatchVersion()):n.MAX_RPC_VERSION}}]),n}();LifecycleManager.MAX_RPC_VERSION=new Version(6,0,0),LifecycleManager.REGISTER_APP_INTERFACE_CORRELATION_ID=65529,LifecycleManager.UNREGISTER_APP_INTERFACE_CORRELATION_ID=65530;var HMICapabilities$1=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setNavigation",value:function(e){return this.setParameter(t.KEY_NAVIGATION,e),this}},{key:"getNavigation",value:function(){return this.getParameter(t.KEY_NAVIGATION)}},{key:"setPhoneCall",value:function(e){return this.setParameter(t.KEY_PHONE_CALL,e),this}},{key:"getPhoneCall",value:function(){return this.getParameter(t.KEY_PHONE_CALL)}},{key:"setVideoStreaming",value:function(e){return this.setParameter(t.KEY_VIDEO_STREAMING,e),this}},{key:"getVideoStreaming",value:function(){return this.getParameter(t.KEY_VIDEO_STREAMING)}},{key:"setRemoteControl",value:function(e){return this.setParameter(t.KEY_REMOTE_CONTROL,e),this}},{key:"getRemoteControl",value:function(){return this.getParameter(t.KEY_REMOTE_CONTROL)}},{key:"setAppService",value:function(e){return this.setParameter(t.KEY_APP_SERVICES,e),this}},{key:"getAppService",value:function(){return this.getParameter(t.KEY_APP_SERVICES)}},{key:"setDisplays",value:function(e){return this.setParameter(t.KEY_DISPLAYS,e),this}},{key:"getDisplays",value:function(){return this.getParameter(t.KEY_DISPLAYS)}},{key:"setSeatLocation",value:function(e){return this.setParameter(t.KEY_SEAT_LOCATION,e),this}},{key:"getSeatLocation",value:function(){return this.getParameter(t.KEY_SEAT_LOCATION)}}]),t}();HMICapabilities$1.KEY_NAVIGATION="navigation",HMICapabilities$1.KEY_PHONE_CALL="phoneCall",HMICapabilities$1.KEY_VIDEO_STREAMING="videoStreaming",HMICapabilities$1.KEY_REMOTE_CONTROL="remoteControl",HMICapabilities$1.KEY_APP_SERVICES="appServices",HMICapabilities$1.KEY_DISPLAYS="displays",HMICapabilities$1.KEY_SEAT_LOCATION="seatLocation";var VideoStreamingCapability=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPreferredResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_PREFERRED_RESOLUTION,e),this}},{key:"getPreferredResolution",value:function(){return this.getObject(ImageResolution,t.KEY_PREFERRED_RESOLUTION)}},{key:"setMaxBitrate",value:function(e){return this.setParameter(t.KEY_MAX_BITRATE,e),this}},{key:"getMaxBitrate",value:function(){return this.getParameter(t.KEY_MAX_BITRATE)}},{key:"setSupportedFormats",value:function(e){this.validateType(VideoStreamingFormat,e,!0),this.setParameter(t.KEY_SUPPORTED_FORMATS,e)}},{key:"getSupportedFormats",value:function(){return this.getObject(VideoStreamingFormat,t.KEY_SUPPORTED_FORMATS)}},{key:"setHapticSpatialDataSupported",value:function(e){return this.setParameter(t.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED,e),this}},{key:"getHapticSpatialDataSupported",value:function(){return this.getParameter(t.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED)}},{key:"setDiagonalScreenSize",value:function(e){return this.setParameter(t.KEY_DIAGONAL_SCREEN_SIZE,e),this}},{key:"getDiagonalScreenSize",value:function(){return this.getParameter(t.KEY_DIAGONAL_SCREEN_SIZE)}},{key:"setPixelPerInch",value:function(e){return this.setParameter(t.KEY_PIXEL_PER_INCH,e),this}},{key:"getPixelPerInch",value:function(){return this.getParameter(t.KEY_PIXEL_PER_INCH)}},{key:"setScale",value:function(e){return this.setParameter(t.KEY_SCALE,e),this}},{key:"getScale",value:function(){return this.getParameter(t.KEY_SCALE)}}]),t}();VideoStreamingCapability.KEY_PREFERRED_RESOLUTION="preferredResolution",VideoStreamingCapability.KEY_MAX_BITRATE="maxBitrate",VideoStreamingCapability.KEY_SUPPORTED_FORMATS="supportedFormats",VideoStreamingCapability.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED="hapticSpatialDataSupported",VideoStreamingCapability.KEY_DIAGONAL_SCREEN_SIZE="diagonalScreenSize",VideoStreamingCapability.KEY_PIXEL_PER_INCH="pixelPerInch",VideoStreamingCapability.KEY_SCALE="scale";var SdlServiceListener=function(){function e(){_classCallCheck(this,e),this._onServiceStarted=null,this._onServiceEnded=null,this._onServiceError=null}return _createClass(e,[{key:"setOnServiceStarted",value:function(e){this._onServiceStarted=e}},{key:"setOnServiceEnded",value:function(e){this._onServiceEnded=e}},{key:"setOnServiceError",value:function(e){this._onServiceError=e}},{key:"onServiceStarted",value:function(e,t,n){"function"==typeof this._onServiceStarted&&this._onServiceStarted(e,t,n)}},{key:"onServiceEnded",value:function(e,t){"function"==typeof this._onServiceEnded&&this._onServiceEnded(e,t)}},{key:"onServiceError",value:function(e,t,n){"function"==typeof this._onServiceError&&this._onServiceError(e,t,n)}}]),e}(),CustomTransport=function(){function r(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return _classCallCheck(this,r),(t=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,n)))._queue=[],t._isRunning=!1,t}return _inherits(r,TransportBase),_createClass(r,[{key:"setTransportCallback",value:function(e){return this._transportCallback=e,this}},{key:"start",value:function(){null!==this._transportCallback&&this._transportCallback.onConnectionEstablished()}},{key:"stop",value:function(){null!==this._transportCallback&&this._transportCallback.onConnectionTerminated("Transport told to stop")}},{key:"onError",value:function(){null!==this._transportCallback&&this._transportCallback.onError()}},{key:"sendPacket",value:function(e){var t=e.toPacket();this.onSendPacket(t,0,t.length)}},{key:"onSendPacket",value:function(){throw"onSendPacket method must be overridden"}},{key:"onByteBufferReceived",value:function(e){this._queue.push(e),this._multiByteHandler()}},{key:"_multiByteHandler",value:function(){if(!this._isRunning){for(this._isRunning=!0;0<this._queue.length;){var e=this._queue.shift(),t=!0,n=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value;this._handleByte(s)}}catch(e){n=!0,r=e}finally{try{t||null==o.return||o.return()}finally{if(n)throw r}}}this._isRunning=!1}}},{key:"_handleByte",value:function(e){var t=this._sdlPsm;if(t.handleByte(e)||(console.error("failed",t),t.reset()),t.getState()===SdlPsm.FINISHED_STATE){var n=t.getFormedPacket();t.reset(),null!==this._transportCallback&&this._transportCallback.onPacketReceived(n)}}}]),r}(),TransportConfigBase=function(){function t(e){_classCallCheck(this,t),this._transportType=e}return _createClass(t,[{key:"getTransportType",value:function(){return this._transportType}}]),t}(),CustomTransportConfig=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,TransportType.CUSTOM)))._customTransport=e,t}return _inherits(n,TransportConfigBase),_createClass(n,[{key:"getTransportType",value:function(){return TransportType.CUSTOM}},{key:"getTransport",value:function(){return this._customTransport}}]),n}(),SslConfig=function(){function r(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;_classCallCheck(this,r),this._pemCertificate=e,this._privateKey=t,this._password=n}return _createClass(r,[{key:"getPemCertificate",value:function(){return this._pemCertificate}},{key:"getPrivateKey",value:function(){return this._privateKey}},{key:"getPassword",value:function(){return this._password}}]),r}(),WebSocketClientConfig=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,TransportType.WEBSOCKET_CLIENT)))._host=e,n._port=t,n}return _inherits(r,TransportConfigBase),_createClass(r,[{key:"getHost",value:function(){return this._host}},{key:"getPort",value:function(){return this._port}}]),r}(),TransportRecord=function(){function n(e,t){_classCallCheck(this,n),this._type=e,this._address=t}return _createClass(n,[{key:"getType",value:function(){return this._type}},{key:"getAddress",value:function(){return this._address}},{key:"equals",value:function(e){return e instanceof n&&null!==e.getType&&e.getType()===this.getType()&&e.getAddress()===this.getAddress()}},{key:"toString",value:function(){return"Transport Type: ".concat(this._type.name()," \n Address: ").concat(this._address)}}]),n}(),SDL={manager:{AppConfig:AppConfig,lifecycle:{LifecycleListener:LifecycleListener,LifecycleManager:LifecycleManager}},protocol:{BinaryFrameHeader:BinaryFrameHeader,MessageFrameAssembler:MessageFrameAssembler,MessageFrameDisassembler:MessageFrameDisassembler,SdlPacket:SdlPacket,SdlPacketFactory:SdlPacketFactory,SdlProtocol:SdlProtocol,SdlProtocolBase:SdlProtocolBase,SdlProtocolListener:SdlProtocolListener,enums:{ControlFrameTags:ControlFrameTags,FrameType:FrameType,ServiceType:ServiceType}},rpc:{RpcCreator:RpcCreator,RpcListener:RpcListener,RpcMessage:RpcMessage,RpcNotification:RpcNotification,RpcRequest:RpcRequest,RpcResponse:RpcResponse,RpcStruct:RpcStruct,enums:{AppHMIType:AppHMIType,AudioStreamingState:AudioStreamingState,AudioType:AudioType,BitsPerSample:BitsPerSample,ButtonName:ButtonName,CharacterSet:CharacterSet,DisplayType:DisplayType,FileType:FileType,FunctionID:FunctionID,HMILevel:HMILevel,HmiZoneCapabilities:HmiZoneCapabilities,ImageFieldName:ImageFieldName,ImageType:ImageType,Language:Language,MediaClockFormat:MediaClockFormat,MetadataType:MetadataType,PrerecordedSpeech:PrerecordedSpeech,Result:Result,RpcType:RpcType,SamplingRate:SamplingRate,SoftButtonType:SoftButtonType,SpeechCapabilities:SpeechCapabilities,SystemAction:SystemAction,SystemContext:SystemContext,TextAlignment:TextAlignment,TextFieldName:TextFieldName,VideoStreamingCodec:VideoStreamingCodec,VideoStreamingProtocol:VideoStreamingProtocol,VideoStreamingState:VideoStreamingState,VrCapabilities:VrCapabilities},messages:{AddCommand:AddCommand,AddCommandResponse:AddCommandResponse,OnHmiStatus:OnHmiStatus,OnLanguageChange:OnLanguageChange,PutFile:PutFile,PutFileResponse:PutFileResponse,RegisterAppInterface:RegisterAppInterface,RegisterAppInterfaceResponse:RegisterAppInterfaceResponse,SetAppIcon:SetAppIcon,SetAppIconResponse:SetAppIconResponse,Show:Show,ShowResponse:ShowResponse,UnregisterAppInterface:UnregisterAppInterface},structs:{AppInfo:AppInfo,AudioPassThruCapabilities:AudioPassThruCapabilities,ButtonCapabilities:ButtonCapabilities,DeviceInfo:DeviceInfo,DisplayCapabilities:DisplayCapabilities,Grid:Grid,HMICapabilities:HMICapabilities$1,Image:Image,ImageField:ImageField,ImageResolution:ImageResolution,MenuParams:MenuParams,MetadataTags:MetadataTags,ModuleInfo:ModuleInfo,PresetBankCapabilities:PresetBankCapabilities,RGBColor:RGBColor,ScreenParams:ScreenParams,SdlMsgVersion:SdlMsgVersion,SoftButton:SoftButton,SoftButtonCapabilities:SoftButtonCapabilities,TTSChunk:TTSChunk,TemplateColorScheme:TemplateColorScheme,TextField:TextField,TouchEventCapabilities:TouchEventCapabilities,VehicleType:VehicleType,VideoStreamingCapability:VideoStreamingCapability,VideoStreamingFormat:VideoStreamingFormat}},session:{SdlServiceListener:SdlServiceListener,SdlSession:SdlSession,SdlSessionListener:SdlSessionListener,ServiceListenerMap:ServiceListenerMap},streaming:{video:{VideoStreamingParameters:VideoStreamingParameters}},transport:{CustomTransport:CustomTransport,CustomTransportConfig:CustomTransportConfig,SdlPsm:SdlPsm,SslConfig:SslConfig,TransportBase:TransportBase,TransportCallback:TransportCallback,TransportConfigBase:TransportConfigBase,TransportListener:TransportListener,TransportManager:TransportManager,TransportManagerBase:TransportManagerBase,WebSocketClient:WebSocketClient,WebSocketClientConfig:WebSocketClientConfig,enums:{TransportType:TransportType},util:{TransportRecord:TransportRecord}},util:{ArrayTools:ArrayTools,BitConverter:BitConverter,Bson:Bson,Enum:Enum,JsonRpcMarshaller:JsonRpcMarshaller,TextEncoder:TextEncoder,Version:Version}};return SDL});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
