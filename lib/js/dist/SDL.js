(function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self,e.SDL=t())})(this,function(){'use strict';function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var n,r=0;r<t.length;r++)n=t[r],n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}function n(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function _(e,t){return _=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},_(e,t)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e,t){return t&&("object"==typeof t||"function"==typeof t)?t:s(e)}/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var i=/*#__PURE__*/function(){function t(){e(this,t)}return n(t,[{key:"arrayBufferToHex",/**
      * @param {ArrayBuffer} bytes - byte array that will be converted to hex
      * @param {Number} offset - int optional, representing the offset to begin conversion at
      * @param {Number} length - int optional, representing number of bytes in array to convert
      * @return {String} the String containing converted hex values or null if byte array is null
      */value:function(){}// TODO
/**
      * @param {String} hexString - the String containing converted hex values
      * @return {ArrayBuffer} byte array converted from input String or null if String is null
      */},{key:"hexToArrayBuffer",value:function(){}// TODO
/**
      * @param {ArrayBuffer} buffer - buffer that will be converted to int
       * @param {Number} offset - int optional, the offset shift
      * @return {Number} int converted from buffer or -1 if buffer is null
      */},{key:"arrayBufferToInt32",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;// TODO
if(!e)return-1;var n=new DataView(e);return n.getUint32(t)}/**
      * @param {Number} value - the integer to be converted
      * @return {ArrayBuffer} buffer converted from input value
      */},{key:"int32ToArrayBuffer",value:function(e){var t=new ArrayBuffer(4),n=new DataView(t);// Int32 has 4 bytes
return n.setUint32(0,e,!1),t}}]),t}(),A=/*#__PURE__*/function(){/**
    * @constructor
    * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
    * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
    * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
    * @param {Number} jsonSize - A number representing the size of a JSON object
    */function t(n,r,o,a){return e(this,t),this._rpcType=n,this._functionId=r,this._correlationId=o,this._jsonSize=a,this._jsonData=null,this._bulkData=null,this}/**
    * Takes in a byte array and transforms it to an instance of this class
    * @param {Uint8Array} binHeader
    * @return {BinaryFrameHeader} an instance of this class from parsing the supplied Uint8Array 
    */return n(t,[{key:"fromBinaryHeader",value:function(){}// TODO
/**
      * Uses the private members of this class to construct a byte array header
      * @return {Uint8Array} - A byte array
      */},{key:"assembleHeaderBytes",value:function(){}// TODO
/**
      * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"setRPCType",value:function(e){this._rpcType=e}/**
      * @return {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
       */},{key:"setFunctionId",value:function(e){this._functionId=e}/**
      * @return {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
      */},{key:"getFunctionId",value:function(){return this._functionId}/**
      * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
      */},{key:"setCorrelationId",value:function(e){this._correlationId=e}/**
      * @return {Number} correlationId - A number representing an ID to correlate a request and response pair
       */},{key:"getCorrelationId",value:function(){return this._correlationId}/**
      * @param {Number} size - A number representing the size of a JSON object
      */},{key:"setJSONSize",value:function(e){this._jsonSize=e}/**
      * @return {Number} - A number representing the size of a JSON object
      */},{key:"getJSONSize",value:function(){return _jsonSize}/**
      * @param {Number} data - A byte array representing JSON data
      */},{key:"setJSONData",value:function(){}// TODO
/**
      * @return {Uint8Array} - A byte array representing JSON data
      */},{key:"getJSONData",value:function(){return this._jsonData}/**
      * @param {Uint8Array} data - A byte array representing bulk data
      */},{key:"setBulkData",value:function(e){this._bulkData=e}/**
      * @return {Uint8Array} - A byte array representing bulk data
      */},{key:"getBulkData",value:function(){return this._bulkData}}]),t}(),S=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} headerSize
    * @param {Function} callback
    */function t(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:8,r=1<arguments.length?arguments[1]:void 0;if(e(this,t),null==r)throw"Callback can't be null for MessageFrameAssembler";this._accumulator=null,this._headersize=n,this._totalSize=0,this._callback=r}/**
    * @param {SdlPacket} sdlPacket
    */return n(t,[{key:"handleFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleMultiFrameMessageFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleFirstDataFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleRemainingFrame",value:function(){}}]),t}(),d=/*#__PURE__*/function(){/**
    * @constructor
    */function t(){e(this,t)}// intentionally empty
/**
    * Returns the key for a given value if the value is found within the key:value map
    * @param value - A primitive value to find in the map
    * @param map {Object} - An map of string properties to primitive values 
    * @return {null|String} - Returns null if not found
    */return n(t,[{key:"valueForString",/**
      * A method for subclasses to implement that does what keyForValueInternal does
      * @param value - A primitive value to find in the map of the subclass
      * @return {*} - Returns a value if found, or null if not found
      */value:function(){throw"method must be overridden"}}],[{key:"keyForValueInternal",value:function(e,t){for(var n in t)if(t[n]===e)return n;return null}/**
      * Returns the given value if the value is found within the key:value map
      * @param value - A primitive value to find in the map
      * @param map {Object} - An map of string properties to primitive values 
      * @return {*} - Returns a value if found, or null if not found
      */},{key:"valueForStringInternal",value:function(e,t){for(var n in t)if(t[n]===e)return t[n];return null}}]),t}(),l=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(){return e(this,o),E(this,a(o).call(this))}/**
    * @return {Number}
    */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in o.MAP)if(o.MAP[t]===e)return o.MAP[t];return null}},{key:"CONTROL",get:function(){return o.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"FIRST",get:function(){return o.MAP.FIRST}/**
      * @return {Number}
      */},{key:"CONSECUTIVE",get:function(){return o.MAP.CONSECUTIVE}/**
      * @return {Number}
      */},{key:"SINGLE",get:function(){return o.MAP.SINGLE}}]),o}(d);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */l.MAP=Object.freeze({CONTROL:0,FIRST:2,CONSECUTIVE:3,SINGLE:1});/**
   * @typedef {Object} SdlPacket
   * @property {number} EXTRA_PARCEL_DATA_LENGTH
   * @property {number} HEADER_SIZE
   * @property {number} HEADER_SIZE_V1
   * @property {number} ENCRYPTION_MASK
   * @property {number} SERVICE_TYPE_CONTROL
   * @property {number} SERVICE_TYPE_RPC
   * @property {number} SERVICE_TYPE_PCM
   * @property {number} SERVICE_TYPE_VIDEO
   * @property {number} SERVICE_TYPE_BULK_DATA
   * @property {number} FRAME_INFO_HEART_BEAT
   * @property {number} FRAME_INFO_START_SERVICE
   * @property {number} FRAME_INFO_START_SERVICE_ACK
   * @property {number} FRAME_INFO_START_SERVICE_NAK
   * @property {number} FRAME_INFO_END_SERVICE
   * @property {number} FRAME_INFO_END_SERVICE_ACK
   * @property {number} FRAME_INFO_END_SERVICE_NAK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK
   * @property {number} FRAME_INFO_TRANSPORT_EVENT_UPDATE
   * @property {number} FRAME_INFO_SERVICE_DATA_ACK
   * @property {number} FRAME_INFO_HEART_BEAT_ACK
   * @property {number} FRAME_INFO_FINAL_CONNESCUTIVE_FRAME
   * @property {number} FRAME_INFO_RESERVED

   * @property {function} getVersion
   * @property {function} getEncryption
   * @property {function} getServiceType
   * @property {function} getFrameInfo
   * @property {function} getSessionID
   * @property {function} getMessageID
   * @property {function} getDataSize
   * @property {function} setPayload
   * @property {function} getPayload
   * @property {function} getEncryptionBit
   * @property {function} getFrameType
   * @property {function} toUint8Array
   * @property {function} toString
   * @property {function} constructPacket
   * @property {function} putTag
   * @property {function} getTag
   */var T=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} version - Protocol version to use
    * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
    * @param {FrameType} frameType - A number representing the packet frame type
    * @param {ServiceType} serviceType - The service that this packet is associated with
    * @param {Number} frameInfo - Specific frame info related to this packet
    * @param {Number} sessionID - ID this packet is associated with
    * @param {Number} dataSize - Size of the payload that will be added
    * @param {Number} messageID - ID of this specific packet
    * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
    * @param {Number} offset
    * @param {Number} bytesToWrite
    */function t(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1,r=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-1,a=3<arguments.length&&void 0!==arguments[3]?arguments[3]:-1,_=4<arguments.length&&void 0!==arguments[4]?arguments[4]:-1,s=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,E=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,i=7<arguments.length&&void 0!==arguments[7]?arguments[7]:0,A=8<arguments.length&&void 0!==arguments[8]?arguments[8]:null,S=9<arguments.length&&void 0!==arguments[9]?arguments[9]:0,d=10<arguments.length&&void 0!==arguments[10]?arguments[10]:0;return e(this,t),this._version=n,this._encryption=r,this._frameType=o,this._serviceType=a,this._frameInfo=_,this._sessionID=s,this._dataSize=E,this._messageID=i,this._payload=A,this._offset=S,this._bytesToWrite=d,this._bsonPayload=void 0,null!==A&&(this._payload=new Uint8Array(d),this._payload=this._payload.slice(S,d)),this}/**
    * @return {Number} - Protocol version used by this packet
    */return n(t,[{key:"getVersion",value:function(){return this._version}/**
      * @return {Boolean} - Whether or not the payload in this packet is encrypted
      */},{key:"getEncryption",value:function(){return this._encryption}/**
      * @return {ServiceType} - The service that this packet is associated with
      */},{key:"getServiceType",value:function(){return this._serviceType}/**
      * @return {Number} - Specific frame info related to this packet
      */},{key:"getFrameInfo",value:function(){return this._frameInfo}/**
      * @return {Number} - ID this packet is associated with
      */},{key:"getSessionID",value:function(){return this._sessionID}/**
      * @return {Number} - ID of this specific packet
      */},{key:"getMessageID",value:function(){return this._messageID}/**
      * @return {Number} - Size of the payload that will be added
      */},{key:"getDataSize",value:function(){return this._dataSize}/**
      * @return {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"setPayload",value:function(e){this._payload=e}/**
      * @return {Uint8Array} - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"getPayload",value:function(){return this._payload}/**
      * @return {Number} - Returns a number representing a byte mask depending on the boolean value
      */},{key:"getEncryptionBit",value:function(){return this._encryption?t.ENCRYPTION_MASK:0}/**
      * @return {FrameType} - A number representing the packet frame type
      */},{key:"getFrameType",value:function(){return null===l.valueForString(this._frameType)?l.SINGLE:this._frameType}/**
      * @return {Uint8Array} - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"toUint8Array",value:function(){return constructPacket(this._version,this._encryption,this._frameType,this._serviceType,this._frameInfo,this._sessionID,this._dataSize,this._messageID,this._payload)}/**
      * @return {String} - String representation of the packet
      */},{key:"toString",value:function(){var e="***** Sdl Packet *****";return e+="\nVersion: ".concat(this._version),e+="\nEncryption: ".concat(this._encryption),e+="\nFrameType: ".concat(this._frameType),e+="\nServiceType: ".concat(this._serviceType),e+="\nFrameInfo: ".concat(this._frameInfo),e+="\nSessionID: ".concat(this._sessionID),e+="\nDataSize: ".concat(this._dataSize),1<this._version&&(e+="\nMessageID: ".concat(this._messageID)),e+="\n***** Sdl Packet End *****",e}/**
      * This method takes in the various components to the SDL packet structure and creates a new byte array that can be sent via the transport
       * @param {Number} version - Protocol version to use
       * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
       * @param {FrameType} frameType - A number representing the packet frame type
       * @param {ServiceType} serviceType - The service that this packet is associated with
       * @param {Number} controlFrameInfo - Specific frame info related to this packet
       * @param {Number} sessionID - ID this packet is associated with
       * @param {Number} dataSize - Size of the payload that will be added
       * @param {Number} messageID - ID of this specific packet
       * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      * @return {Uint8Array} - A byte[] representation of an SdlPacket built using the supplied params
      */},{key:"putTag",/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @param {Object} data - Object to add as a value to the BSON map
       */value:function(){}// TODO bson
/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @return {Object} data - Object as a value found from the the BSON map
       */},{key:"getTag",value:function(){// TODO bson
}}],[{key:"constructPacket",value:function(e,n,r,o,a,_,s,E,i){var A=null,S=0;return A=1===e?new Uint8Array(t.HEADER_SIZE_V1+s):new Uint8Array(t.HEADER_SIZE+s),A[S++]=e<<4+getEncryptionBit(n)+r,A[S++]=o,A[S++]=a,A[S++]=_,A[S++]=-1&s,A[S++]=255&s,A[S++]=255&s,A[S++]=255&s,1<e&&(A[S++]=-1&E,A[S++]=255&E,A[S++]=255&E,A[S++]=255&E),null!==i&&0<i.length&&A.set(i,S++),A}}]),t}();T.EXTRA_PARCEL_DATA_LENGTH=24,T.HEADER_SIZE=12,T.HEADER_SIZE_V1=8,T.ENCRYPTION_MASK=8,T.SERVICE_TYPE_CONTROL=0,T.SERVICE_TYPE_RPC=7,T.SERVICE_TYPE_PCM=10,T.SERVICE_TYPE_VIDEO=11,T.SERVICE_TYPE_BULK_DATA=15,T.FRAME_INFO_HEART_BEAT=0,T.FRAME_INFO_START_SERVICE=1,T.FRAME_INFO_START_SERVICE_ACK=2,T.FRAME_INFO_START_SERVICE_NAK=3,T.FRAME_INFO_END_SERVICE=4,T.FRAME_INFO_END_SERVICE_ACK=5,T.FRAME_INFO_END_SERVICE_NAK=6,T.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT=7,T.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK=8,T.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK=9,T.FRAME_INFO_TRANSPORT_EVENT_UPDATE=253,T.FRAME_INFO_SERVICE_DATA_ACK=254,T.FRAME_INFO_HEART_BEAT_ACK=255,T.FRAME_INFO_FINAL_CONNESCUTIVE_FRAME=0,T.FRAME_INFO_RESERVED=0;var c=/*#__PURE__*/function(){/**
    * @constructor
    */function t(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};e(this,t),this._isFormatRequested=!1,this._rpcSpecVersion=null,this._parameters=JSON.parse(JSON.stringify(n||{}))}/**
    * @return {Object}
    */return n(t,[{key:"getParameters",value:function(){return JSON.parse(JSON.stringify(this._parameters))}/**
      * @param {String} key
      * @return {*}
      */},{key:"getParameter",value:function(e){return this._parameters[e]}/**
      * @param {String} key
      * @param {*} value
      * @return {RpcStruct}
      */},{key:"setParameter",value:function(e,t){return null===t?delete this._parameters[e]:this._parameters[e]=t,this}/**
      * @param {Function} tClass
      * @param {String} key
      * @return {Object}
      */},{key:"getObject",value:function(e,t){return this.formatObject(e,this.getParameter(t))}/**
      * @param {Function} tClass
      * @param {Object} obj
      * @return {null|Object}
      */},{key:"formatObject",value:function(e,n){if(null===n)return null;if(n.constructor===e)// if tClass is String and obj is a String, this should execute
return n;if(n.constructor===String)return e instanceof d?e.valueForString(n):e instanceof String?n:null;if(n.constructor===Object)return e instanceof t?new e(n):null;if(n.constructor===Array&&0<n.length)// TODO: ensure completeness
{var r=[];for(item in n)r.push(this.formatObject(tclass,item));return r}return null}/**
      * @param {Function} tClass
      * @param {Object} obj
      */},{key:"validateType",value:function(e,t){if(e instanceof d&&null===e.valueForString(t)||null!==t&&t.constructor!==e)throw"".concat(t.name," must be of type ").concat(e.name)}}]),t}(),R=/*#__PURE__*/function(t){/*
    {
        "rpcType": "Request",
        "functionName": "RegisterAppInterface",
        "coorelationID": "320948",
        "isEncrypted": false,
        "parameters": {
            "appName": "Hello"
        },
        "bulkData": "...",
    }
    */ /**
    * @constructor
    */function o(){var t,n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return e(this,o),t=E(this,a(o).call(this,n.parameters)),t._isEncrypted=!1,t._rpcType=n.rpcType,t._functionName=n.functionName,t._correlationID=n.correlationID,t._bulkData=t.setBulkData(n.bulkData),t}/**
    * @return {RpcType}
    */return r(o,t),n(o,[{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {RpcType} type
      * @return {RpcMessage}
      */},{key:"setRPCType",value:function(e){return this._rpcType=e,this}/**
      * @return {String} type
      */},{key:"getFunctionName",value:function(){return this._functionName}/**
      * @param {String} name
      * @return {RpcMessage}
      */},{key:"setFunctionName",value:function(e){return this._functionName=e,this}/**
      * @return {Uint8Array} data
      */},{key:"getBulkData",value:function(){return this._bulkData}/**
      * @param {UInt8Array} data
      * @return {RpcMessage}
      */},{key:"setBulkData",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return this._bulkData=null===e?null:e.slice(0),this}/**
      * @return {Boolean}
      */},{key:"getIsEncrypted",value:function(){return this._isEncrypted}/**
      * @param {Boolean} bool
      * @return {RpcMessage}
      */},{key:"setIsEncrypted",value:function(e){return this._isEncrypted=e,this}}]),o}(c),v=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(){return e(this,o),E(this,a(o).call(this))}/**
    * @return {Number}
    */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in o.MAP)if(o.MAP[t]===e)return o.MAP[t];return null}},{key:"CONTROL",get:function(){return o.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"RPC",get:function(){return o.MAP.RPC}/**
      * @return {Number}
      */},{key:"AUDIO",get:function(){return o.MAP.AUDIO}/**
      * @return {Number}
      */},{key:"VIDEO",get:function(){return o.MAP.VIDEO}/**
      * @return {Number}
      */},{key:"HYBRID",get:function(){return o.MAP.HYBRID}}]),o}(d);/**
   * @typedef {Object} RpcMessage
   * @property {RpcType} rpcType
   */v.MAP=Object.freeze({CONTROL:0,RPC:7,AUDIO:10,VIDEO:11,HYBRID:15});/**
   * @typedef {Object} SdlProtocolListener
   * @property {function} setOnRpcMessageReceivedListener
   * @property {function} setOnControlServiceMessageReceivedListener
   * @property {function} setOnDecryptRequestListener
   * @property {function} onControlServiceMessageReceived
   * @property {function} onRpcMessageReceived
   * @property {function} onStartServiceACKReceived
   * @property {function} onStartServiceNAKReceived
   * @property {function} onEndServiceACKReceived
   * @property {function} onEndServiceNAKReceived
   * @property {function} onServiceEncryptionStarted
   */var u=/*#__PURE__*/function(){/**
     * @constructor 
     */function t(){e(this,t),this._onRpcMessageReceived=null,this._onControlServiceMessageReceived=null}/**
     * @param {function} listener 
     */return n(t,[{key:"setOnRpcMessageReceivedListener",value:function(e){this._onRpcMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnControlServiceMessageReceivedListener",value:function(e){this._onControlServiceMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnDecryptRequestListener",value:function(e){this._onDecryptRequestListener=e}//TODO add the setters for the added functions
/*
      * Listener methods to be called
      *
      */ /**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onControlServiceMessageReceived",value:function(e){"function"==typeof this._onControlServiceMessageReceived&&this._onControlServiceMessageReceived(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceACKReceived",value:function(e){"function"==typeof this._onStartServiceACKReceived&&this._onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceNAKReceived",value:function(e){"function"==typeof this._onStartServiceNAKReceived&&this._onStartServiceNAKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceACKReceived",value:function(e){"function"==typeof this._onEndServiceACKReceived&&this._onEndServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceNAKReceived",value:function(e){"function"==typeof this._onEndServiceNAKReceived&&this._onEndServiceNAKReceived(e)}/**
       * @param {ServiceType} serviceType 
       */},{key:"onServiceEncryptionStarted",value:function(e){"function"==typeof this.onServiceEncryptionStarted&&this.onServiceEncryptionStarted(e)}}]),t}(),y=/*#__PURE__*/function(){/**
     * @constructor
     */function t(){e(this,t),this._onTransportConnected=null,this._onTransportDisconnected=null,this._onError=null,this._onPacketReceived=null}/**
     * @param {Function} func
     * @return {TransportListener}
     */return n(t,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnTransportDisconnected",value:function(e){return this._onTransportDisconnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnError",value:function(e){return this._onError=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnPacketReceived",value:function(e){return this._onPacketReceived=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onTransportDisconnected",value:function(){"function"==typeof this._onTransportDisconnected&&this._onTransportDisconnected()}},{key:"onError",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;"function"==typeof this._onError&&this._onError(e)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),t}(),I=/*#__PURE__*/function(){/**
        * @constructor
        * @param {TransportType} transportType - enum
        */function t(n){e(this,t),this._transportType=n}/**
     * @return {TransportType}
     */return n(t,[{key:"getTransportType",value:function(){return this._transportType}}]),t}(),P=/*#__PURE__*/function(){/**
    * @constructor
    */function t(n,r,o){e(this,t),this.setMajor(n),this.setMinor(r),this.setPatch(o)}/**
    * @param {Number} major
    * @return {Version}
    */return n(t,[{key:"setMajor",value:function(e){return this._major=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMajor",value:function(){return this._major}/**
      * @param {Number} minor
      * @return {Version}
      */},{key:"setMinor",value:function(e){return this._minor=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMinor",value:function(){return this._minor}/**
      * @param {Number} patch
      * @return {Version}
      */},{key:"setPatch",value:function(e){return this._patch=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getPatch",value:function(){return this._patch}/**
      * @param {String} version - Parse this string to a Version object
      * @return {Version}
      */},{key:"fromString",value:function(e){var t=e.split(".");if(3!=t.length)throw"Incorrect version string format";return this.setMajor(t[0]),this.setMinor(t[1]),this.setPatch(t[2]),this}/**
      * @return {String}
      */},{key:"toString",value:function(){return"".concat(this.getMajor(),".").concat(this.getMinor(),".").concat(this.getPatch())}/**
      * Method to test if this instance of Version is newer than the supplied one.
      * @param version - the version to check against
      * @return {Number} - 1 if this instance is newer, -1 if supplied version is newer, and 0 if they are equal
      */},{key:"isNewerThan",value:function(e){if(this.getMajor()>e.getMajor())return 1;if(this.getMajor()==e.getMajor()){if(this.getMinor()>e.getMinor())return 1;if(this.getMinor()==e.getMinor()){if(this.getPatch()>e.getPatch())return 1;if(this.getPatch()==e.getPatch())return 0}}return-1}}]),t}(),g=/*#__PURE__*/function(){/**
     * 
     * @param { TransportConfigBase } baseTransportConfig
     * @param { SdlProtocolListener } sdlProtocolListener
     */function t(n,r){e(this,t),this._transportConfig=n,this._sdlProtocollistener=r,this.reset(),this._createTransportListener(),this._transportManager=null}/**
     * Listens for transport-related events and handles them here
     * @private
     */return n(t,[{key:"_createTransportListener",value:function(){this._transportListener=new y,this._transportListener.setOnTransportConnected(function(){//Transport connected
//Start RPC session
}),this._transportListener.setOnTransportDisconnected(function(){//Transport disconnected
//Shut everything down
}),this._transportListener.setOnPacketReceived(function(e){this._handlePacketReceived(e)}),this._transportListener.setOnError(function(){//Handle error?
})}/**
       * Starts up the SDL protocol class. It will kick off the transport manager and underlying transport.
       */},{key:"start",value:function(){if(null==this._transportManager)throw"transport manager was null, unable to start SDL Protocol";return this._transportManager.start(),this}/**
       * @param {ServiceType} serviceType 
       * @return {Number} max transport unit for the give service type
       */},{key:"getMtu",value:function(e){var n=this._mtus.get(e);return null==n?t.V1_V2_MTU_SIZE:n}/**
       * @return {Boolean} isConnected
       */},{key:"isConnected",value:function(){return null!=this._transportManager&&this._transportManager.isConnected(null,null)}/**
       * Sets internal class members to default values
       */},{key:"reset",value:function(){this._protocol_version=new P(1,0,0),this._headerSize=t.V1_HEADER_SIZE,this.serviceStatus=new Map,this.serviceStatus[v.CONTROL]=!0,this._mtus=new Map,this._mtus[v.RPC]=t.V1_V2_MTU_SIZE-this._headerSize,this._hashID=0,this._messageID=0,this._messageFrameAssemblers=new Map}/**
       * @return {Version} protocol_version
       */},{key:"getProtocolVersion",value:function(){return this._protocol_version}/**
       * This method will set the major protocol version that we should use. It will also set the default MTU based on version.
       * @param {Number} version - major version to use
       * @private
       */},{key:"_setVersion",value:function(e){5<e?(this.protocolVersion=new P("5.1.0"),headerSize=t.V2_HEADER_SIZE,mtus[v.RPC]=t.V3_V4_MTU_SIZE):5==e?(this.protocolVersion=new P("5.0.0"),headerSize=t.V2_HEADER_SIZE,mtus[v.RPC]=t.V3_V4_MTU_SIZE):4==e?(this.protocolVersion=new P("4.0.0"),headerSize=t.V2_HEADER_SIZE,mtus[v.RPC]=t.V3_V4_MTU_SIZE):3==e?(this.protocolVersion=new P("3.0.0"),headerSize=t.V2_HEADER_SIZE,mtus[v.RPC]=t.V3_V4_MTU_SIZE):2==e?(this.protocolVersion=new P("2.0.0"),headerSize=t.V2_HEADER_SIZE,mtus[v.RPC]=t.V1_V2_MTU_SIZE-headerSize):1==e&&(this.protocolVersion=new P("1.0.0"),headerSize=t.V1_HEADER_SIZE,mtus[v.RPC]=t.V1_V2_MTU_SIZE-headerSize)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(e){null!=this._transportManager&&this._transportManager.sendPacket(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(e){if(null!=e)//(version = 1, encryption = false, frameType = -1, serviceType = -1, frameInfo = -1, sessionID = 0, dataSize = 0, messageID = 0, payload = null, offset = 0, bytesToWrite = 0) {
var t=new Uint8Array(e.getParameters()),n=new T(this._protocol_version.getMajor(),!1);//TODO: sdlPacket.set
}},{key:"sendMessage",value:function(){}//TODO 
// This is the method that handles all the building of sdl packets that get sent 
// in the java suite lib. We want to avoid using protocol message here as an extra 
// class that doesn't make much sense. I believe we should probably alter SdlPacket
// to handle the situation protocol message used to
/**
       * Handle an SdlPacket depending on its FrameType
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handlePacketReceived",value:function(e){if((null==this._protocol_version||1==this._protocol_version.getMajor())&&this._setVersion(packet.version),e.getFrameType()==l.FIRST||e.getFrameType()==l.CONSECUTIVE)messageFrameAssembler=_getMessageFrameAssembler(e),messageFrameAssembler.handleFrame(e);else//Packet can be handled as is
switch(e.getFrameType()){case l.CONTROL:this._handleControlPacket(e);break;case l.SINGLE:switch(e.getServiceType()){case v.RPC:this._handleRPCPacket(e);}}}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_getMessageFrameAssembler",value:function(e){var t=this._messageFrameAssemblers[e.getMessageID()];return null==t&&(t=S(this._headerSize,new function(e){this._messageFrameAssemblers[e.getMessageID()]=null}),this._messageFrameAssemblers[e.getMessageID()]=t),t}/**
       * This method will handle control packets for all service types
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlPacket",value:function(e){var t=e.getServiceType(),n=e.getFrameInfo(),r=e.getPayload();n===e.FRAME_INFO_START_SERVICE_ACK?this._handleStartServiceACK(e):n===e.FRAME_INFO_START_SERVICE_NAK?this._handleStartServiceNAK(e):n===e.FRAME_INFO_END_SERVICE_ACK?this._handleEndServiceACK(e):n===e.FRAME_INFO_END_SERVICE_NAK?this._handleEndServiceACK(e):void 0}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceACK",value:function(e){//TODO
//Handle things internally first
switch(serviceType){}//Then call the listener (should be SdlSession)
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceACK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlServicePacket",value:function(e){null!=this._sdlProtocollistener&&this._sdlProtocollistener.onControlServiceMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleRPCPacket",value:function(e){var t=e.getPayload();// TODO possibly add error checking that ensures this is an RPC packet
if(1==this._protocol_version.getMajor());//There is no binary frame header
//TODO actually create the RPC message
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onRpcMessageReceived(null)}//Not sure if we need
/**
       * @param {*} sessionID 
       * @param {*} _hashID 
       */},{key:"endSession",value:function(){}}]),t}();g.V1_HEADER_SIZE=8,g.V2_HEADER_SIZE=12,g.V1_V2_MTU_SIZE=1500,g.V3_V4_MTU_SIZE=131072,g.MAX_PROTOCOL_VERSION=new P(5,2,0);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var k=function t(){e(this,t)},N={MTU:"mtu"},M={REJECTED_PARAMS:"rejectedParams"},D={/** The negotiated version of the protocol. Must be in the format "Major.Minor.Patch"*/PROTOCOL_VERSION:"protocolVersion"},C={/** Hash ID to identify this service and used when sending an EndService control frame*/HASH_ID:"hashId"},O={HEIGHT:"height",WIDTH:"width"};// hidden inner objects
k.RPC=Object.freeze({StartService:D,StartServiceACK:Object.assign({/** HU allowed transport for secondary connection */SECONDARY_TRANSPORTS:"secondaryTransports",/** HU allowed transports for audio and video services (1 == Primary, 2 == Secondary) */AUDIO_SERVICE_TRANSPORTS:"audioServiceTransports",VIDEO_SERVICE_TRANSPORTS:"videoServiceTransports",/** Auth token to be used for log in into services **/AUTH_TOKEN:"authToken"},N,D,C),StartServiceNAK:M,EndService:C,EndServiceACK:{},EndServiceNAK:M,TransportEventUpdate:{TCP_IP_ADDRESS:"tcpIpAddress",TCP_PORT:"tcpPort"},RegisterSecondaryTransport:{},RegisterSecondaryTransportACK:{},RegisterSecondaryTransportNAK:Object.assign({REASON:"reason"},M)}),k.Audio=Object.freeze({StartService:{},StartServiceACK:N,StartServiceNAK:M,EndService:{},EndServiceACK:{},EndServiceNAK:M}),k.Video=Object.freeze({StartService:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},O),StartServiceACK:Object.assign({},N,O)});/**
   * @typedef {Enum} RpcType
   * @property {Object} MAP
   */var p=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(){return e(this,o),E(this,a(o).call(this))}/**
     * @return {Number} 
     */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return o.valueForStringInternal(e,o.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return o.keyForValueInternal(e,o.MAP)}},{key:"NOTIFICATION",get:function(){return o.MAP.NOTIFICATION}/**
       * @return {Number} 
       */},{key:"RESPONSE",get:function(){return o.MAP.RESPONSE}/**
       * @return {Number} 
       */},{key:"REQUEST",get:function(){return o.MAP.REQUEST}}]),o}(d);p.MAP=Object.freeze({NOTIFICATION:2,RESPONSE:1,REQUEST:0});var L=/*#__PURE__*/function(t){/**
       * @constructor
       */function n(t){var r;return e(this,n),r=E(this,a(n).call(this,t)),r.setRPCType(p.NOTIFICATION),r}return r(n,t),n}(R),m=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){var n;return e(this,o),n=E(this,a(o).call(this,t)),n.setRPCType(p.REQUEST),n._promise=null,n}/**
    * @return {Number}
    */return r(o,t),n(o,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcMessage}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Promise}
      */},{key:"getOnRPCResponsePromise",value:function(){return this._promise}/**
      * @param {Promise} promise
      * @return {RpcMessage}
      */},{key:"setOnRPCResponsePromise",value:function(e){return this.validateType(Promise,e),this._promise=e,this}}]),o}(R),F=/*#__PURE__*/function(t){/**
     * @constructor
     */function o(){return e(this,o),E(this,a(o).call(this))}/**
     * @return {String} 
     */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return o.valueForStringInternal(e,o.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {String} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return o.keyForValueInternal(e,o.MAP)}},{key:"SUCCESS",get:function(){return o.MAP.SUCCESS}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_REQUEST",get:function(){return o.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_RESOURCE",get:function(){return o.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"DISALLOWED",get:function(){return o.MAP.DISALLOWED}/**
       * @return {String} 
       */},{key:"REJECTED",get:function(){return o.MAP.REJECTED}/**
       * @return {String} 
       */},{key:"ABORTED",get:function(){return o.MAP.ABORTED}/**
       * @return {String} 
       */},{key:"IGNORED",get:function(){return o.MAP.IGNORED}/**
       * @return {String} 
       */},{key:"RETRY",get:function(){return o.MAP.RETRY}/**
       * @return {String} 
       */},{key:"IN_USE",get:function(){return o.MAP.IN_USE}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_AVAILABLE",get:function(){return o.MAP.VEHICLE_DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"TIMED_OUT",get:function(){return o.MAP.TIMED_OUT}/**
       * @return {String} 
       */},{key:"INVALID_DATA",get:function(){return o.MAP.INVALID_DATA}/**
       * @return {String} 
       */},{key:"CHAR_LIMIT_EXCEEDED",get:function(){return o.MAP.CHAR_LIMIT_EXCEEDED}/**
       * @return {String} 
       */},{key:"INVALID_ID",get:function(){return o.MAP.INVALID_ID}/**
       * @return {String} 
       */},{key:"DUPLICATE_NAME",get:function(){return o.MAP.DUPLICATE_NAME}/**
       * @return {String} 
       */},{key:"APPLICATION_NOT_REGISTERED",get:function(){return o.MAP.APPLICATION_NOT_REGISTERED}/**
       * @return {String} 
       */},{key:"WRONG_LANGUAGE",get:function(){return o.MAP.WRONG_LANGUAGE}/**
       * @return {String} 
       */},{key:"OUT_OF_MEMORY",get:function(){return o.MAP.OUT_OF_MEMORY}/**
       * @return {String} 
       */},{key:"TOO_MANY_PENDING_REQUESTS",get:function(){return o.MAP.TOO_MANY_PENDING_REQUESTS}/**
       * @return {String} 
       */},{key:"TOO_MANY_APPLICATIONS",get:function(){return o.MAP.TOO_MANY_APPLICATIONS}/**
       * @return {String} 
       */},{key:"APPLICATION_REGISTERED_ALREADY",get:function(){return o.MAP.APPLICATION_REGISTERED_ALREADY}/**
       * @return {String} 
       */},{key:"WARNINGS",get:function(){return o.MAP.WARNINGS}/**
       * @return {String} 
       */},{key:"GENERIC_ERROR",get:function(){return o.MAP.GENERIC_ERROR}/**
       * @return {String} 
       */},{key:"USER_DISALLOWED",get:function(){return o.MAP.USER_DISALLOWED}/**
       * @return {String} 
       */},{key:"TRUNCATED_DATA",get:function(){return o.MAP.TRUNCATED_DATA}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_VERSION",get:function(){return o.MAP.UNSUPPORTED_VERSION}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_ALLOWED",get:function(){return o.MAP.VEHICLE_DATA_NOT_ALLOWED}/**
       * @return {String} 
       */},{key:"FILE_NOT_FOUND",get:function(){return o.MAP.FILE_NOT_FOUND}/**
       * @return {String} 
       */},{key:"CANCEL_ROUTE",get:function(){return o.MAP.CANCEL_ROUTE}/**
       * @return {String} 
       */},{key:"SAVED",get:function(){return o.MAP.SAVED}/**
       * @return {String} 
       */},{key:"INVALID_CERT",get:function(){return o.MAP.INVALID_CERT}/**
       * @return {String} 
       */},{key:"EXPIRED_CERT",get:function(){return o.MAP.EXPIRED_CERT}/**
       * @return {String} 
       */},{key:"RESUME_FAILED",get:function(){return o.MAP.RESUME_FAILED}/**
       * @return {String} 
       */},{key:"DATA_NOT_AVAILABLE",get:function(){return o.MAP.DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"READ_ONLY",get:function(){return o.MAP.READ_ONLY}/**
       * @return {String} 
       */},{key:"CORRUPTED_DATA",get:function(){return o.MAP.CORRUPTED_DATA}}]),o}(d);F.MAP=Object.freeze({SUCCESS:"SUCCESS",UNSUPPORTED_REQUEST:"UNSUPPORTED_REQUEST",UNSUPPORTED_RESOURCE:"UNSUPPORTED_RESOURCE",DISALLOWED:"DISALLOWED",REJECTED:"REJECTED",ABORTED:"ABORTED",IGNORED:"IGNORED",RETRY:"RETRY",IN_USE:"IN_USE",VEHICLE_DATA_NOT_AVAILABLE:"VEHICLE_DATA_NOT_AVAILABLE",TIMED_OUT:"TIMED_OUT",INVALID_DATA:"INVALID_DATA",CHAR_LIMIT_EXCEEDED:"CHAR_LIMIT_EXCEEDED",INVALID_ID:"INVALID_ID",DUPLICATE_NAME:"DUPLICATE_NAME",APPLICATION_NOT_REGISTERED:"APPLICATION_NOT_REGISTERED",WRONG_LANGUAGE:"WRONG_LANGUAGE",OUT_OF_MEMORY:"OUT_OF_MEMORY",TOO_MANY_PENDING_REQUESTS:"TOO_MANY_PENDING_REQUESTS",TOO_MANY_APPLICATIONS:"TOO_MANY_APPLICATIONS",APPLICATION_REGISTERED_ALREADY:"APPLICATION_REGISTERED_ALREADY",WARNINGS:"WARNINGS",GENERIC_ERROR:"GENERIC_ERROR",USER_DISALLOWED:"USER_DISALLOWED",TRUNCATED_DATA:"TRUNCATED_DATA",UNSUPPORTED_VERSION:"UNSUPPORTED_VERSION",VEHICLE_DATA_NOT_ALLOWED:"VEHICLE_DATA_NOT_ALLOWED",FILE_NOT_FOUND:"FILE_NOT_FOUND",CANCEL_ROUTE:"CANCEL_ROUTE",SAVED:"SAVED",INVALID_CERT:"INVALID_CERT",EXPIRED_CERT:"EXPIRED_CERT",RESUME_FAILED:"RESUME_FAILED",DATA_NOT_AVAILABLE:"DATA_NOT_AVAILABLE",READ_ONLY:"READ_ONLY",CORRUPTED_DATA:"CORRUPTED_DATA"});var f=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){var n;return e(this,o),n=E(this,a(o).call(this,t)),n.setRPCType(p.RESPONSE),n}/**
    * @return {Number}
    */return r(o,t),n(o,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcResponse}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Boolean}
      */},{key:"getSuccess",value:function(){return this.getParameter(KEY_SUCCESS)}/**
      * @return {RpcResponse}
      */},{key:"setSuccess",value:function(e){return this.setParameter(KEY_SUCCESS,e),this}/**
      * @return {String}
      */},{key:"getInfo",value:function(){return this.getParameter(KEY_INFO)}/**
      * @return {RpcResponse}
      */},{key:"setInfo",value:function(e){return this.setParameter(KEY_INFO,e),this}/**
      * @return {Result}
      */},{key:"getResultCode",value:function(){return this.getObject(F,KEY_RESULT_CODE)}/**
      * @return {RpcResponse}
      */},{key:"setResultCode",value:function(e){return this.validateType(F,e),this.setParameter(KEY_RESULT_CODE,e),this}}]),o}(R);f.KEY_SUCCESS="success",f.KEY_INFO="info",f.KEY_RESULT_CODE="resultCode";/**
   * @typedef {Enum} FunctionID
   * @property {Object} MAP
   */var U=/*#__PURE__*/function(t){/**
     * @constructor 
     */function o(){return e(this,o),E(this,a(o).call(this))}/**
    * @return {Number}
    */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return o.valueForStringInternal(e,o.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return o.keyForValueInternal(e,o.MAP)}},{key:"ADD_COMMAND",get:function(){return o.MAP.AddCommand}/**
      * @return {Number}
      */},{key:"ON_LANGUAGE_CHANGE",get:function(){return o.MAP.OnLanguageChange}}]),o}(d);U.MAP=Object.freeze({AddCommand:5,OnLanguageChange:32778//TODO this needs to be completely filled out still
});/**
   * @typedef {Enum} ImageType
   * @property {Object} MAP
   */var V=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(){return e(this,o),E(this,a(o).call(this))}/**
     * @return {String} 
     */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return o.valueForStringInternal(e,o.MAP)}},{key:"STATIC",get:function(){return o.MAP.STATIC}/**
       * @return {String} 
       */},{key:"DYNAMIC",get:function(){return o.MAP.DYNAMIC}}]),o}(d);V.MAP=Object.freeze({STATIC:"STATIC",DYNAMIC:"DYNAMIC"});/**
   * @typedef {Enum} Language
   * @property {Object} MAP
   */var K=/*#__PURE__*/function(t){/**
     * @constructor 
     */function o(){return e(this,o),E(this,a(o).call(this))}/**
     * @return {String} 
     */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in o.MAP)if(o.MAP[t]===e)return o.MAP[t];return null}},{key:"EN_SA",get:function(){return o.MAP.EN_SA}/**
       * @return {String} 
       */},{key:"HE_IL",get:function(){return o.MAP.HE_IL}/**
       * @return {String} 
       */},{key:"RO_RO",get:function(){return o.MAP.RO_RO}/**
       * @return {String} 
       */},{key:"UK_UA",get:function(){return o.MAP.UK_UA}/**
       * @return {String} 
       */},{key:"ID_ID",get:function(){return o.MAP.ID_ID}/**
       * @return {String} 
       */},{key:"VI_VN",get:function(){return o.MAP.VI_VN}/**
       * @return {String} 
       */},{key:"MS_MY",get:function(){return o.MAP.MS_MY}/**
       * @return {String} 
       */},{key:"HI_IN",get:function(){return o.MAP.HI_IN}/**
       * @return {String} 
       */},{key:"NL_BE",get:function(){return o.MAP.NL_BE}/**
       * @return {String} 
       */},{key:"EL_GR",get:function(){return o.MAP.EL_GR}/**
       * @return {String} 
       */},{key:"HU_HU",get:function(){return o.MAP.HU_HU}/**
       * @return {String} 
       */},{key:"FI_FI",get:function(){return o.MAP.FI_FI}/**
       * @return {String} 
       */},{key:"SK_SK",get:function(){return o.MAP.SK_SK}/**
       * @return {String} 
       */},{key:"EN_US",get:function(){return o.MAP.EN_US}/**
       * @return {String} 
       */},{key:"ES_MX",get:function(){return o.MAP.ES_MX}/**
       * @return {String} 
       */},{key:"FR_CA",get:function(){return o.MAP.FR_CA}/**
       * @return {String} 
       */},{key:"DE_DE",get:function(){return o.MAP.DE_DE}/**
       * @return {String} 
       */},{key:"ES_ES",get:function(){return o.MAP.ES_ES}/**
       * @return {String} 
       */},{key:"EN_GB",get:function(){return o.MAP.EN_GB}/**
       * @return {String} 
       */},{key:"RU_RU",get:function(){return o.MAP.RU_RU}/**
       * @return {String} 
       */},{key:"TR_TR",get:function(){return o.MAP.TR_TR}/**
       * @return {String} 
       */},{key:"PL_PL",get:function(){return o.MAP.PL_PL}/**
       * @return {String} 
       */},{key:"FR_FR",get:function(){return o.MAP.FR_FR}/**
       * @return {String} 
       */},{key:"IT_IT",get:function(){return o.MAP.IT_IT}/**
       * @return {String} 
       */},{key:"SV_SE",get:function(){return o.MAP.SV_SE}/**
       * @return {String} 
       */},{key:"PT_PT",get:function(){return o.MAP.PT_PT}/**
       * @return {String} 
       */},{key:"NL_NL",get:function(){return o.MAP.NL_NL}/**
       * @return {String} 
       */},{key:"EN_AU",get:function(){return o.MAP.EN_AU}/**
       * @return {String} 
       */},{key:"ZH_CN",get:function(){return o.MAP.ZH_CN}/**
       * @return {String} 
       */},{key:"ZH_TW",get:function(){return o.MAP.ZH_TW}/**
       * @return {String} 
       */},{key:"JA_JP",get:function(){return o.MAP.JA_JP}/**
       * @return {String} 
       */},{key:"AR_SA",get:function(){return o.MAP.AR_SA}/**
       * @return {String} 
       */},{key:"KO_KR",get:function(){return o.MAP.KO_KR}/**
       * @return {String} 
       */},{key:"PT_BR",get:function(){return o.MAP.PT_BR}/**
       * @return {String} 
       */},{key:"CS_CZ",get:function(){return o.MAP.CS_CZ}/**
       * @return {String} 
       */},{key:"DA_DK",get:function(){return o.MAP.DA_DK}/**
       * @return {String} 
       */},{key:"NO_NO",get:function(){return o.MAP.NO_NO}/**
       * @return {String} 
       */},{key:"EN_IN",get:function(){return o.MAP.EN_IN}/**
       * @return {String} 
       */},{key:"TH_TH",get:function(){return o.MAP.TH_TH}}]),o}(d);K.MAP=Object.freeze({EN_SA:"EN-SA",HE_IL:"HE-IL",RO_RO:"RO-RO",UK_UA:"UK-UA",ID_ID:"ID-ID",VI_VN:"VI-VN",MS_MY:"MS-MY",HI_IN:"HI-IN",NL_BE:"NL-BE",EL_GR:"EL-GR",HU_HU:"HU-HU",FI_FI:"FI-FI",SK_SK:"SK-SK",EN_US:"EN-US",ES_MX:"ES-MX",FR_CA:"FR-CA",DE_DE:"DE-DE",ES_ES:"ES-ES",EN_GB:"EN-GB",RU_RU:"RU-RU",TR_TR:"TR-TR",PL_PL:"PL-PL",FR_FR:"FR-FR",IT_IT:"IT-IT",SV_SE:"SV-SE",PT_PT:"PT-PT",NL_NL:"NL-NL",EN_AU:"EN-AU",ZH_CN:"ZH-CN",ZH_TW:"ZH-TW",JA_JP:"JA-JP",AR_SA:"AR-SA",KO_KR:"KO-KR",PT_BR:"PT-BR",CS_CZ:"CS-CZ",DA_DK:"DA-DK",NO_NO:"NO-NO",EN_IN:"EN-IN",TH_TH:"TH-TH"});var h=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){return e(this,o),E(this,a(o).call(this,t))}/**
    * @param {String} value
    * @return {Image}
    */return r(o,t),n(o,[{key:"setValue",value:function(e){return this.setParameter(o.KEY_VALUE,e),this}/**
      * @return {Number}
      */},{key:"getValue",value:function(){return this.getParameter(o.KEY_VALUE)}/**
      * @param {ImageType} type
      * @return {Image}
      */},{key:"setImageType",value:function(e){return this.validateType(V,e),this.setParameter(o.KEY_IMAGE_TYPE,e),this}/**
      * @return {ImageType}
      */},{key:"getImageType",value:function(){return this.getObject(o,o.KEY_IMAGE_TYPE)}/**
      * @param {Boolean} isTemplate
      * @return {Image}
      */},{key:"setIsTemplate",value:function(e){return this.setParameter(o.KEY_IS_TEMPLATE,e),this}/**
      * @return {Boolean}
      */},{key:"getIsTemplate",value:function(){return this.getParameter(o.KEY_IS_TEMPLATE)}}]),o}(c);h.KEY_VALUE="value",h.KEY_IMAGE_TYPE="imageType",h.KEY_IS_TEMPLATE="isTemplate";var Y=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){return e(this,o),E(this,a(o).call(this,t))}/**
    * @param {Number} id
    * @return {MenuParams}
    */return r(o,t),n(o,[{key:"setParentID",value:function(e){return this.setParameter(o.KEY_PARENT_ID,e),this}/**
      * @return {Number}
      */},{key:"getParentID",value:function(){return this.getParameter(o.KEY_PARENT_ID)}/**
      * @param {Number} position
      * @return {MenuParams}
      */},{key:"setPosition",value:function(e){return this.setParameter(o.KEY_POSITION,e),this}/**
      * @return {Number}
      */},{key:"getPosition",value:function(){return this.getParameter(o.KEY_POSITION)}/**
      * @param {String} menuName
      * @return {MenuParams}
      */},{key:"setMenuName",value:function(e){return this.setParameter(o.KEY_MENU_NAME,e),this}/**
      * @param {String}
      */},{key:"getMenuName",value:function(){return this.getParameter(o.KEY_MENU_NAME)}}]),o}(c);Y.KEY_PARENT_ID="parentID",Y.KEY_POSITION="position",Y.KEY_MENU_NAME="menuName";var b=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){var n;return e(this,o),n=E(this,a(o).call(this,t)),n.setFunctionName(U.ADD_COMMAND),n}/**
    * @param {Number} id
    * @return {AddCommand}
    */return r(o,t),n(o,[{key:"setCmdID",value:function(e){return this.setParameter(o.KEY_CMD_ID,e),this}/**
      * @return {Number}
      */},{key:"getCmdID",value:function(){return this.getParameter(o.KEY_CMD_ID)}/**
      * @param {MenuParams} menuParams
      * @return {AddCommand}
      */},{key:"setMenuParams",value:function(e){return this.validateType(Y,e),this.setParameter(o.KEY_MENU_PARAMS,e),this}/**
      * @return {Number}
      */},{key:"getMenuParams",value:function(){return this.getObject(Y,o.KEY_MENU_PARAMS)}/**
      * @param {Array<String>} vrCommands
      * @return {AddCommand}
      */},{key:"setVrCommands",value:function(e){return this.setParameter(o.KEY_VR_COMMANDS,e),this}/**
      * @return {Array<String>}
      */},{key:"getVrCommands",value:function(){return this.getParameter(o.KEY_VR_COMMANDS)}/**
      * @param {Image} icon
      * @return {AddCommand}
      */},{key:"setCmdIcon",value:function(e){return this.validateType(h,e),this.setParameter(o.KEY_CMD_ICON,e),this}/**
      * @return {Image}
      */},{key:"getCmdIcon",value:function(){return this.getObject(h,o.KEY_CMD_ICON)}}]),o}(m);b.KEY_CMD_ICON="cmdIcon",b.KEY_MENU_PARAMS="menuParams",b.KEY_CMD_ID="cmdID",b.KEY_VR_COMMANDS="vrCommands";var H=/*#__PURE__*/function(t){/**
       * @constructor
       */function n(t){var r;return e(this,n),r=E(this,a(n).call(this,t)),r.setFunctionName(U.ADD_COMMAND),r}return r(n,t),n}(f),G=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(t){var n;return e(this,o),n=E(this,a(o).call(this,t)),n.setFunctionName(U.ON_LANGUAGE_CHANGE),n}/**
    * @param {Language} langauge
    * @return {OnLanguageChange}
    */return r(o,t),n(o,[{key:"setLanguage",value:function(){return this.validateType(K,language),this.setParameter(o.KEY_LANGUAGE,language),this}/**
      * @return {Language}
      */},{key:"getLanguage",value:function(){return this.getObject(K,o.KEY_LANGUAGE)}/**
      * @param {Language} langauge
      * @return {OnLanguageChange}
      */},{key:"setHMIDisplayLanguage",value:function(e){return this.validateType(K,e),this.setParameter(o.KEY_HMI_DISPLAY_LANGUAGE,e),this}/**
      * @return {Language}
      */},{key:"getHMIDisplayLanguage",value:function(){return this.getObject(K,o.KEY_HMI_DISPLAY_LANGUAGE)}}]),o}(L);G.KEY_LANGUAGE="language",G.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage";/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */ /**
   * @typedef {Object} SdlServiceListener
   */var B=/*#__PURE__*/function(){/**
    * @constructor
    */function t(){e(this,t)}/**
     * @param {SdlSession} session 
     * @param {ServiceType} serviceType 
     * @param {Boolean} isEncrypted 
     */return n(t,[{key:"onServiceStarted",value:function(){throw"onServiceStarted method must be overridden"}/**
       * @param {SdlSession} session 
       * @param {ServiceType} serviceType 
       */},{key:"onServiceEnded",value:function(){throw"onServiceEnded method must be overridden"}/**
       * @param {SdlSession} session 
       * @param {ServiceType} serviceType 
       * @param {String} reason 
       */},{key:"onServiceError",value:function(){throw"onServiceError method must be overridden"}}]),t}(),Z=/*#__PURE__*/function(){/**
    * @constructor
    */function t(){e(this,t)}/**
     * @param {String} info 
     * @param {Boolean} availablePrimary 
     * @param {TransportConfigBase} transportConfig 
     */return n(t,[{key:"onTransportDisconnected",value:function(){throw"onTransportDisconnected method must be overridden"}/**
       * @param {String} info 
       * @param {Error} e 
       */},{key:"onTransportError",value:function(){throw"onTransportError method must be overridden"}/**
       * @param {ProtocolMessage} msg 
       */},{key:"onProtocolMessageReceived",value:function(){throw"onProtocolMessageReceived method must be overridden"}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Number} version - represents a byte 
       * @param {String} correlationID
       * @param {Array<String>} rejectedParams
       */},{key:"onProtocolSessionStartedNACKed",value:function(){throw"onProtocolSessionStartedNACKed method must be overridden"}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Number} version - represents a byte 
       * @param {String} correlationID
       * @param {Number} hashID
       * @param {Boolean} isEncrypted
       */},{key:"onProtocolSessionStarted",value:function(){throw"onProtocolSessionStarted method must be overridden"}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {String} correlationID
       */},{key:"onProtocolSessionEnded",value:function(){throw"onProtocolSessionEnded method must be overridden"}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {String} correlationID
       */},{key:"onProtocolSessionEndedNACKed",value:function(){throw"onProtocolSessionEndedNACKed method must be overridden"}/**
       * @param {String} info 
       * @param {Error} e 
       */},{key:"onProtocolError",value:function(){throw"onProtocolError method must be overridden"}/**
       * @param {ServiceType} serviceType 
       * @param {Number} dataSize
       * @param {Number} sessionID - represents a byte 
       */},{key:"onProtocolServiceDataACK",value:function(){throw"onProtocolServiceDataACK method must be overridden"}/**
       * @param {String} authToken
       * @param {Number} sessionID - represents a byte 
       */},{key:"onAuthTokenReceived",value:function(){throw"onAuthTokenReceived method must be overridden"}}]),t}(),W=/*#__PURE__*/function(){/**
    * @constructor
    */function t(){// initialize an array of listeners for each service type
for(var n in e(this,t),this._listeners={},v.MAP){var r=v.MAP[n];this._listeners[r]=[]}}/**
     * @param {ServiceType} serviceType 
     * @param {SdlServiceListener} serviceListener 
     */return n(t,[{key:"addListener",value:function(e,t){e&&this._listeners[e].push(t)}/**
       * @param {ServiceType} serviceType 
       * @param {SdlServiceListener} serviceListener 
       * @return {Boolean} - whether the service got removed 
       */},{key:"removeListener",value:function(e,t){if(e){var n=this._listeners[e],r=!1;return this._listeners[e]=n.filter(function(e){return r=!0,e!==t}),r}}/**
       * Sends this event to all listeners belonging to a specific service type
       * @param {SdlSession} session 
       * @param {ServiceType} serviceType 
       * @param {Boolean} isEncrypted 
       */},{key:"sendEventServiceStarted",value:function(e,t,n){var r=this._listeners[t];for(var o in r)r[o].onServiceStarted(e,t,n)}/**
       * Sends this event to all listeners belonging to a specific service type
       * @param {SdlSession} session 
       * @param {ServiceType} serviceType 
       */},{key:"sendEventServiceEnded",value:function(e,t){var n=this._listeners[t];for(var r in n)n[r].onServiceEnded(e,t)}/**
       * Sends this event to all listeners belonging to a specific service type
       * @param {SdlSession} session 
       * @param {ServiceType} serviceType 
       * @param {String} reason 
       */},{key:"sendEventServiceError",value:function(e,t,n){var r=this._listeners[t];for(var o in r)r[o].onServiceError(e,t,n)}}]),t}(),z=/*#__PURE__*/function(){/**
     * @param {TransportConfigBase} baseTransportConfig 
     * @param {SdlSessionListener} sdlSessionListener 
     */function t(n,r){e(this,t),this._sessionId,this._sessionHashId,this._sdlSessionListener=r,this._baseTransportConfig=n,this._serviceListeners=new W;var o=this._setupSdlProtocolNew();this._sdlProtocol=new g(n,o)}return n(t,[{key:"_setupSdlProtocolNew",value:function(){var e={getSessionId:this.getSessionId.bind(this),shutdown:this.shutdown.bind(this),onTransportDisconnected:this.onTransportDisconnected.bind(this),getSdlSecurity:this.getSdlSecurity.bind(this),getDesiredVideoParams:this.getDesiredVideoParams.bind(this),setAcceptedVideoParams:this.setAcceptedVideoParams.bind(this),stopStream:this.stopStream.bind(this),onAuthTokenReceived:this.onAuthTokenReceived.bind(this),onProtocolMessageBytesToSend:this.onProtocolMessageBytesToSend.bind(this),onProtocolMessageReceived:this.onProtocolMessageReceived.bind(this),onProtocolSessionStarted:this.onProtocolSessionStarted.bind(this),onProtocolSessionNACKed:this.onProtocolSessionNACKed.bind(this),onProtocolSessionEnded:this.onProtocolSessionEnded.bind(this),onProtocolSessionEndedNACKed:this.onProtocolSessionEndedNACKed.bind(this),onProtocolHeartbeat:this.onProtocolHeartbeat.bind(this),onProtocolHeartbeatACK:this.onProtocolHeartbeatACK.bind(this),onProtocolServiceDataACK:this.onProtocolServiceDataACK.bind(this),onResetOutgoingHeartbeat:this.onResetOutgoingHeartbeat.bind(this),onResetIncomingHeartbeat:this.onResetIncomingHeartbeat.bind(this),onProtocolError:this.onProtocolError.bind(this),onTransportError:this.onTransportError.bind(this),onProtocolSessionStartedNACKed:this.onProtocolSessionStartedNACKed.bind(this),onControlServiceMessageReceived:this.onControlServiceMessageReceived.bind(this),onRpcMessageReceived:this.onRpcMessageReceived.bind(this),onStartServiceACKReceived:this.onStartServiceACKReceived.bind(this),onStartServiceNAKReceived:this.onStartServiceNAKReceived.bind(this),onEndServiceACKReceived:this.onEndServiceACKReceived.bind(this),onEndServiceNAKReceived:this.onEndServiceNAKReceived.bind(this),onServiceEncryptionStarted:this.onServiceEncryptionStarted.bind(this)};// ISdlProtocol methods implemented
return e}/**
       * @return {SdlProtocolListener} 
       * @private
       */ /*
      _setupSdlProtocolListener () {
         const sdlProtocolListener = new SdlProtocolListener();
          // TODO create all the functions that will be set for this listener
          return sdlProtocolListener;
      }
      */},{key:"start",value:function(){this._sdlProtocol.start()}/** **********************************************************************************************************************************************************************
       *                                                       BEGIN:    ISdlProtocol implemented methods
       ************************************************************************************************************************************************************************/ /**
       * @return {Number}  - represents a byte 
       */},{key:"getSessionId",value:function(){return this._sessionId}/**
       * Informs the session listener that a disconnection happened
       * @param {String} info 
       */},{key:"shutdown",value:function(e){this._sdlSessionListener.onTransportDisconnected(e)}/**
       * Informs the session listener that a disconnection happened
       * @param {String} info 
       * @param {Boolean} altTransportAvailable 
       * @param {TransportConfigBase} transportConfig 
       */},{key:"onTransportDisconnected",value:function(e,t,n){this._sdlSessionListener.onTransportDisconnected(e,t,n)}/**
       * @return {SdlSecurityBase}
       */},{key:"getSdlSecurity",value:function(){}// not supported
/**
       * @return {VideoStreamingParameters} 
       */},{key:"getDesiredVideoParams",value:function(){}// not supported
/**
       * @param {VideoStreamingParameters} params 
       */},{key:"setAcceptedVideoParams",value:function(){}// not supported
/**
       * @param {ServiceType} serviceType 
       */},{key:"stopStream",value:function(){}// not supported
/**
       * @param {String} authToken
       * @param {Number} sessionID - represents a byte 
       */},{key:"onAuthTokenReceived",value:function(e,t){this._sdlSessionListener.onAuthTokenReceived(e,t)}/** **********************************************************************************************************************************************************************
       *                                                       END:    ISdlProtocol implemented methods
       ************************************************************************************************************************************************************************/ /** **********************************************************************************************************************************************************************
       *                                                       BEGIN:    IProtocolListener implemented methods
       ************************************************************************************************************************************************************************/ /**
       * Called to indicate that these bytes are to be sent as part of a message.
       * This call includes the part of the message.
       * @param {SdlPacket} packet
       */},{key:"onProtocolMessageBytesToSend",value:function(e){this._sdlProtocol.sendPacket(e)}/**
       * @param {ProtocolMessage} msg 
       */},{key:"onProtocolMessageReceived",value:function(e){this._sdlSessionListener.onProtocolMessageReceived(e)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Number} version - represents a byte 
       * @param {String} correlationID
       * @param {Number} hashID
       * @param {Boolean} isEncrypted
       */},{key:"onProtocolSessionStarted",value:function(e,t,n,r,o,a){this._sessionId=t,e===v.RPC&&(this._sessionHashId=o),this._sdlSessionListener.onProtocolSessionStarted(e,t,n,r,o,a),this._serviceListeners.sendEventServiceStarted(this,e,a)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Number} version - represents a byte 
       * @param {String} correlationID
       * @param {Array<String>} rejectedParams
       */},{key:"onProtocolSessionNACKed",value:function(e,t,n,r,o){this._sdlSessionListener.onProtocolSessionStartedNACKed(e,t,n,r,o),this._serviceListeners.sendEventServiceError(this,e,"Start ".concat(e.toString()," Service NACK'ed"))}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {String} correlationID
       */},{key:"onProtocolSessionEnded",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEnded(e,t,n),this._serviceListeners.sendEventServiceEnded(this,e)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {String} correlationID
       */},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEndedNACKed(e,t,n),this._serviceListeners.sendEventServiceError(this,e,"End ".concat(e.toString()," Service NACK'ed"))}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       */},{key:"onProtocolHeartbeat",value:function(){}// not supported
/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       */},{key:"onProtocolHeartbeatACK",value:function(){}// not supported
/**
       * @param {ServiceType} serviceType 
       * @param {Number} dataSize
       * @param {Number} sessionID - represents a byte 
       */},{key:"onProtocolServiceDataACK",value:function(e,t,n){this._sdlSessionListener.onProtocolServiceDataACK(e,t,n)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       */},{key:"onResetOutgoingHeartbeat",value:function(){}// not supported
/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       */},{key:"onResetIncomingHeartbeat",value:function(){}// not supported
/**
       * @param {String} info 
       * @param {Error} e 
       */},{key:"onProtocolError",value:function(t,n){this._sdlSessionListener.onProtocolError(t,n)}/** **********************************************************************************************************************************************************************
       *                                                       END:    IProtocolListener implemented methods
       ************************************************************************************************************************************************************************/ /** **********************************************************************************************************************************************************************
       *                                                       BEGIN:    SdlSessionListener implemented methods
       ************************************************************************************************************************************************************************/ /*
       ALREADY DEFINED:
      onTransportDisconnected
      onProtocolMessageReceived
      onProtocolSessionStarted
      onProtocolSessionEnded
      onProtocolSessionEndedNACKed
      onProtocolError
      onProtocolServiceDataACK
      onAuthTokenReceived
      */ /**
       * @param {String} info 
       * @param {Error} e 
       */},{key:"onTransportError",value:function(t,n){this._sdlSessionListener.onTransportError(t,n)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Number} version - represents a byte 
       * @param {String} correlationID
       * @param {Array<String>} rejectedParams
       */},{key:"onProtocolSessionStartedNACKed",value:function(e,t,n,r,o){this.onProtocolSessionNACKed(e,t,n,r,o)}/** **********************************************************************************************************************************************************************
       *                                                       END:    SdlSessionListener implemented methods
       ************************************************************************************************************************************************************************/ /** **********************************************************************************************************************************************************************
       *                                                       BEGIN:    SdlProtocolListener implemented methods
       ************************************************************************************************************************************************************************/ // TODO: figure out how to fill these methods
/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onControlServiceMessageReceived",value:function(){}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"onRpcMessageReceived",value:function(){}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceACKReceived",value:function(){}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceNAKReceived",value:function(){}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceACKReceived",value:function(){}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceNAKReceived",value:function(){}/**
       * @param {ServiceType} serviceType 
       */},{key:"onServiceEncryptionStarted",value:function(){}/** **********************************************************************************************************************************************************************
       *                                                       END:    SdlProtocolListener implemented methods
       ************************************************************************************************************************************************************************/},{key:"endSession",value:function(){this._sdlProtocol.endSession()}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(e){this._sdlProtocol.sendRpc(e)}/**
       * @param {ServiceType} serviceType 
       * @return {Number} max transport unit for the given service type
       */},{key:"getMtu",value:function(e){this._sdlProtocol.getMtu(e)}/**
       * Ends the current session
       */},{key:"close",value:function(){this._sdlProtocol.endSession(this._sessionId,this._sessionHashId)}/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       * @param {Boolean} isEncrypted
       */},{key:"startService",value:function(){}// TODO: not implemented yet
// _sdlProtocol.startService(serviceType, sessionID, isEncrypted);
/**
       * @param {ServiceType} serviceType 
       * @param {Number} sessionID - represents a byte 
       */},{key:"endService",value:function(){}// TODO: not implemented yet
// _sdlProtocol.endService(serviceType, sessionID);
/**
       * Starts up the SDL protocol class. It will kick off the transport manager and underlying transport.
       */},{key:"startSession",value:function(){this._sdlProtocol.start()}/**
       * To be determined if needed to send to the SdlProtocolBase's sendMessage method 
       * @param {ProtocolMessage} msg 
       */},{key:"sendMessage",value:function(){}// TODO: see comment above
/**
       * @return {TransportType}  
       */},{key:"getCurrentTransportType",value:function(){return this._baseTransportConfig.getTransportType()}/**
       * @return {Boolean} isConnected
       */},{key:"getIsConnected",value:function(){return this._sdlProtocol.isConnected()}/**
       * @return {Version}  
       */},{key:"getProtocolVersion",value:function(){return this._sdlProtocol.getProtocolVersion()}/**
       * @return {TransportConfigBase}  
       */},{key:"getTransportConfig",value:function(){return this._baseTransportConfig}/**
       * @return {Number}  
       */},{key:"getSessionHashId",value:function(){return this._sessionHashId}/**
       * @param {SdlSecurityBase} info 
       */},{key:"setSdlSecurity",value:function(){}// not supported
/**
       * @param {ProtocolMessage} msg 
       */},{key:"processControlService",value:function(){}// not supported
/**
       * @param {ServiceType} sType 
       * @return {Boolean}
       */},{key:"isServiceProtected",value:function(){}// not supported
/**
       * @param {ServiceType} serviceType 
       * @param {SdlServiceListener} sdlServiceListener 
       */},{key:"addServiceListener",value:function(e,t){this._serviceListeners.addListener(e,t)}/**
       * @param {ServiceType} serviceType 
       * @param {SdlServiceListener} sdlServiceListener 
       * @return {Boolean} - whether the removal was successful
       */},{key:"removeServiceListener",value:function(e,t){return this._serviceListeners.removeListener(e,t)}/**
       * @return {ServiceListenerMap}
       */},{key:"getServiceListeners",value:function(){return this._serviceListeners}/**
       * @param {VideoStreamingParameters} params 
       */},{key:"setDesiredVideoParams",value:function(){}// not supported
/**
       * @return {VideoStreamingParameters} 
       */},{key:"getAcceptedVideoParams",value:function(){// not supported
}}]),t}(),j=/*#__PURE__*/function(){//TODO check to see if it's better to use '==' or '==='
/**
        * @constructor
        */function t(){e(this,t),this.reset()}/**
     * Changes all internal members to default
     */return n(t,[{key:"reset",value:function(){this._state=t.START_STATE,this._version=0,this._encryption=!1,this._frameType=l.SINGLE,this._serviceType=0,this._controlFrameInfo=null,this._sessionID=null,this._dumpSize=null,this._dataLength=0,this._messageID=0,this._payload=null}/**
          * @return {Number} - State represented by a Number
          */},{key:"getState",value:function(){return this._state}/**
       * @return {SdlPacket} - Returns null if not complete
       */},{key:"getFormedPacket",value:function(){return this._state==t.FINISHED_STATE?new T(this._version,this._encryption,this._frameType,this._serviceType,this._controlFrameInfo,this._sessionID,this._dataLength,this._messageID,this._payload):null}/**
       * @param {Number} data - Represents a byte
       * @return {Boolean}
       */},{key:"handleByte",value:function(e){return this._state=this._transitionOnInput(e,this._state),this._state!=t.ERROR_STATE}/**
          * @param {Number} rawByte - Represents a byte
          * @param {Number} state
          * @return {Boolean}
          * @private
          */},{key:"_transitionOnInput",value:function(e,n){switch(n){case t.START_STATE:return(this._version=(e&t.VERSION_MASK)>>4,0==this._version)?t.ERROR_STATE:(this._encryption=1==(e&t.ENCRYPTION_MASK)>>3,this._frameType=e&t.FRAME_TYPE_MASK,(1>this._version||5<this._version)&&this._frameType!=T.FRAME_TYPE_CONTROL?t.ERROR_STATE:this._frameType<T.FRAME_TYPE_CONTROL||this._frameType>T.FRAME_TYPE_CONSECUTIVE?t.ERROR_STATE:t.SERVICE_TYPE_STATE);case t.SERVICE_TYPE_STATE:return this._serviceType=255&e,t.CONTROL_FRAME_INFO_STATE;case t.CONTROL_FRAME_INFO_STATE:switch(this._controlFrameInfo=255&e,this._frameType){case T.FRAME_TYPE_CONTROL:break;case T.FRAME_TYPE_SINGLE:case T.FRAME_TYPE_FIRST:if(0!=this._controlFrameInfo)return t.ERROR_STATE;break;case T.FRAME_TYPE_CONSECUTIVE://It might be a good idea to check packet sequence numbers here
break;default:return t.ERROR_STATE;}return t.SESSION_ID_STATE;case t.SESSION_ID_STATE:return this._sessionID=255&e,t.DATA_SIZE_1_STATE;case t.DATA_SIZE_1_STATE://Shift 3 bytes x 8 bits
return this._dataLength+=(255&e)<<24,t.DATA_SIZE_2_STATE;case t.DATA_SIZE_2_STATE://Sift 2 bytes x 8 bits
return this._dataLength+=(255&e)<<16,DATA_SIZE_3_STATE;case t.DATA_SIZE_3_STATE://Sift 1 byte x 8 bits
return this._dataLength+=(255&e)<<8,DATA_SIZE_4_STATE;case t.DATA_SIZE_4_STATE://We should have data length now for the pump state
switch(this._dataLength+=255&e,this._frameType){//If all is correct we should break out of this switch statement
case T.FRAME_TYPE_SINGLE:case T.FRAME_TYPE_CONSECUTIVE:break;case T.FRAME_TYPE_CONTROL://Ok, well here's some interesting bit of knowledge. Because the start session request is from the phone with no knowledge of version it sends out
//a v1 packet. THEREFORE there is no message id field. **** Now you know and knowing is half the battle ****
if(1==this._version&&this._controlFrameInfo==T.FRAME_INFO_START_SERVICE){if(0==this._dataLength)return t.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=g.V1_V2_MTU_SIZE-g.V1_HEADER_SIZE)this._payload=new byte[this._dataLength];else return t.ERROR_STATE;return this._dumpSize=this._dataLength,t.DATA_PUMP_STATE}break;case T.FRAME_TYPE_FIRST:if(dataLength==t.FIRST_FRAME_DATA_SIZE)break;default:return t.ERROR_STATE;}if(1==this._version){//Version 1 packets will not have message id's
if(0==this._dataLength)return t.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=g.V1_V2_MTU_SIZE-g.V1_HEADER_SIZE)this._payload=new Uint8Array(this._dataLength);else return t.ERROR_STATE;return this._dumpSize=this._dataLength,t.DATA_PUMP_STATE}return t.MESSAGE_1_STATE;case t.MESSAGE_1_STATE:// Shift 3 bytes x 8 bits
return this._messageID+=(255&e)<<24,t.MESSAGE_2_STATE;case t.MESSAGE_2_STATE:// Shift 2 bytes x 8 bits
return this._messageID+=(255&e)<<16,t.MESSAGE_3_STATE;case t.MESSAGE_3_STATE:// Shift 1 byte x 8 bits
return this._messageID+=(255&e)<<8,t.MESSAGE_4_STATE;case t.MESSAGE_4_STATE:if(this._messageID+=255&e,0==this._dataLength)return t.FINISHED_STATE;//We are done if we don't have any payload
try{this._payload=new Uint8Array(this._dataLength)}catch(e){//Possible Out of Memory error if data length is invalid
return t.ERROR_STATE}return dumpSize=dataLength,t.DATA_PUMP_STATE;case t.DATA_PUMP_STATE://Do we have any more bytes to read in?
return this._payload[this._dataLength-this._dumpSize]=e,this._dumpSize--,0<this._dumpSize?t.DATA_PUMP_STATE:0==this._dumpSize?t.FINISHED_STATE:t.ERROR_STATE;case t.FINISHED_STATE:default://Should not be handling any other bytes while in the finished state
return t.ERROR_STATE;}}}]),t}();/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */ /**
   * @typedef {Object} SdlSessionListener
   */j.START_STATE=0,j.SERVICE_TYPE_STATE=2,j.CONTROL_FRAME_INFO_STATE=3,j.SESSION_ID_STATE=4,j.DATA_SIZE_1_STATE=5,j.DATA_SIZE_2_STATE=6,j.DATA_SIZE_3_STATE=7,j.DATA_SIZE_4_STATE=8,j.MESSAGE_1_STATE=9,j.MESSAGE_2_STATE=10,j.MESSAGE_3_STATE=11,j.MESSAGE_4_STATE=12,j.DATA_PUMP_STATE=13,j.FINISHED_STATE=255,j.ERROR_STATE=-1,j.FIRST_FRAME_DATA_SIZE=8,j.VERSION_MASK=240,j.ENCRYPTION_MASK=8,j.FRAME_TYPE_MASK=7;//3 lowest bits
/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var J=/*#__PURE__*/function(){function t(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;e(this,t),this._pemCertificate=n,this._privateKey=r,this._password=o}/**
    * Returns the PEM Certificate
    * @return {string}
    */return n(t,[{key:"getPemCertificate",value:function(){return this._pemCertificate}/**
      * Returns the Private Key
      * @return {string}
      */},{key:"getPrivateKey",value:function(){return this._privateKey}/**
      * Returns the password
      * @return {string}
      */},{key:"getPassword",value:function(){return this._password}}]),t}(),X=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} transportConfig
     * @param {TransportListener} transportListener
     */function t(n,r){e(this,t),this._sdlPsm=new j,this._transportConfig=n,this._transportListener=r}return n(t,[{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}}]),t}(),w=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} baseTransportConfig
     * @param {TransportListener} transportListener
     */function t(n,r){e(this,t),this._transportConfig=n,this._transportListener=r}return n(t,[{key:"onTransportConnected",value:function(){this._transportListener.onTransportConnected()}/**
       * @param {Function} func
       */},{key:"onTransportDisconnected",value:function(){this._transportListener.onTransportDisconnected()}/**
       * @param {Function} func
       */},{key:"onError",value:function(){this._transportListener.onError()}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"onPacketReceived",value:function(e){this._transportListener.onPacketReceived(e)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}},{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {TransportType} transportType
       * @param {String} address
       */},{key:"isConnected",value:function(){throw"isConnected method must be overridden"}}]),t}(),Q=/*#__PURE__*/function(t){/**
    * @constructor
    */function o(){return e(this,o),E(this,a(o).call(this))}/**
    * @param {String}
    */return r(o,t),n(o,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return o.valueForStringInternal(e,o.MAP)}},{key:"WEBSOCKET_SERVER",get:function(){return o.MAP.WEBSOCKET_SERVER}/**
      * @param {String}
      */},{key:"WEBSOCKET_CLIENT",get:function(){return o.MAP.WEBSOCKET_CLIENT}}]),o}(d);Q.MAP=Object.freeze({WEBSOCKET_SERVER:"WEBSOCKET_SERVER",WEBSOCKET_CLIENT:"WEBSOCKET_CLIENT",CUSTOM:"CUSTOM"});/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var x=/*#__PURE__*/function(){function t(){e(this,t)}/*
    let testMap = {"rpcType":"Request", "functionName":"RAI"}
    undefined
    let stringed = JSON.stringify(testMap)
    undefined
    stringed
    "{"rpcType":"Request","functionName":"RAI"}"
    let array = new Uint8Array(stringed)
    undefined
    array
    Uint8Array []buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextEncoder(); // always utf-8
    undefined
    array = enc.encode(stringed)
    Uint8Array(42) [123, 34, 114, 112, 99, 84, 121, 112, 101, 34, 58, 34, 82, 101, 113, 117, 101, 115, 116, 34, 44, 34, 102, 117, 110, 99, 116, 105, 111, 110, 78, 97, 109, 101, 34, 58, 34, 82, 65, 73, 34, 125]0: 1231: 342: 1143: 1124: 995: 846: 1217: 1128: 1019: 3410: 5811: 3412: 8213: 10114: 11315: 11716: 10117: 11518: 11619: 3420: 4421: 3422: 10223: 11724: 11025: 9926: 11627: 10528: 11129: 11030: 7831: 9732: 10933: 10134: 3435: 5836: 3437: 8238: 6539: 7340: 3441: 125buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextDecoder("utf-8");
    undefined
    let step2 = enc.decode(array)
    undefined
    step2
    "{"rpcType":"Request","functionName":"RAI"}"
    let newJson = JSON.parse(step2)
    undefined
    newJson
    {rpcType: "Request", functionName: "RAI"}
       */ /**
     * 
     * @param {RpcMessage} rpcMessage 
     */return n(t,null,[{key:"marshall",value:function(e){try{var t=e.getParameters(),n=JSON.stringify(t),r=new TextEncoder;//TODO do we need to go through each param and do this?
return r.encode(n)}catch(e){//TODO print exception
}return null}}]),t}();/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */return{manager:{lifecycle:{LifecycleManager:function t(){e(this,t)}}},protocol:{BinaryFrameHeader:A,MessageFrameAssembler:S,SdlPacket:T,SdlProtocolBase:g,SdlProtocolListener:u,enums:{ControlFrameTags:k,FrameType:l,ServiceType:v}},rpc:{RpcMessage:R,RpcNotification:L,RpcRequest:m,RpcResponse:f,RpcStruct:c,enums:{FunctionID:U,ImageType:V,Language:K,Result:F,RpcType:p},messages:{AddCommand:b,AddCommandResponse:H,OnLanguageChange:G},structs:{Image:h,MenuParams:Y}},session:{SdlServiceListener:B,SdlSession:z,SdlSessionListener:Z,ServiceListenerMap:W},transport:{SdlPsm:j,SslConfig:J,TransportBase:X,TransportConfigBase:I,TransportListener:y,TransportManagerBase:w,enums:{TransportType:Q}},util:{BitConverter:i,Enum:d,JsonRpcMarshaller:x,Version:P}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
