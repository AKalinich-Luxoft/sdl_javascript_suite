!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).SDL=t()}(this,function(){"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _possibleConstructorReturn(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?_assertThisInitialized(e):t}var AppConfig=function(){function e(){_classCallCheck(this,e),this._transportConfig=null,this._appId=null,this._appName=null,this._iconName=null,this._iconFile=null,this._shortAppName=null,this._ttsName=null,this._vrSynonyms=null,this._isMediaApp=null,this._languageDesired=null,this._hmiDisplayLanguageDesired=null,this._appTypes=null,this._dayColorScheme=null,this._nightColorScheme=null,this._minimumRPCVersion=null,this._minimumProtocolVersion=null}return _createClass(e,[{key:"setTransportConfig",value:function(e){return this._transportConfig=e,this}},{key:"getTransportConfig",value:function(){return this._transportConfig}},{key:"setAppId",value:function(e){return this._appId=e,this}},{key:"getAppId",value:function(){return this._appId}},{key:"setAppName",value:function(e){return this._appName=e,this}},{key:"getAppName",value:function(){return this._appName}},{key:"setAppIcon",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:"icon.png",r=1<arguments.length?t:void 0;return this._iconName=n,this._iconFile=r,this}},{key:"getAppIconName",value:function(){return this._iconName}},{key:"getAppIconFileData",value:function(){return this._iconFile}},{key:"setShortAppName",value:function(e){return this._shortAppName=e,this}},{key:"getShortAppName",value:function(){return this._shortAppName}},{key:"setTtsName",value:function(e){return this._ttsName=e,this}},{key:"getTtsName",value:function(){return this._ttsName}},{key:"setVrSynonyms",value:function(e){return this._vrSynonyms=e,this}},{key:"getVrSynonyms",value:function(){return this._vrSynonyms}},{key:"setIsMediaApp",value:function(e){return this._isMediaApp=e,this}},{key:"isMediaApp",value:function(){return this._isMediaApp}},{key:"setLanguageDesired",value:function(e){return this._languageDesired=e,this}},{key:"getLanguageDesired",value:function(){return this._languageDesired}},{key:"setHmiDisplayLanguageDesired",value:function(e){return this._hmiDisplayLanguageDesired=e,this}},{key:"getHmiDisplayLanguageDesired",value:function(){return this._hmiDisplayLanguageDesired}},{key:"setAppTypes",value:function(e){return this._appTypes=e,this}},{key:"getAppTypes",value:function(){return this._appTypes}},{key:"setDayColorScheme",value:function(e){return this._dayColorScheme=e,this}},{key:"getDayColorScheme",value:function(){return this._dayColorScheme}},{key:"setNightColorScheme",value:function(e){return this._nightColorScheme=e,this}},{key:"getNightColorScheme",value:function(){return this._nightColorScheme}},{key:"setMinimumRPCVersion",value:function(e){return this._minimumRPCVersion=e,this}},{key:"getMinimumRPCVersion",value:function(){return this._minimumRPCVersion}},{key:"setMinimumProtocolVersion",value:function(e){return this._minimumProtocolVersion=e,this}},{key:"getMinimumProtocolVersion",value:function(){return this._minimumProtocolVersion}}]),e}(),LifecycleListener=function(){function e(){_classCallCheck(this,e),this._onProxyConnected=null,this._onProxyClosed=null,this._onServiceStarted=null,this._onServiceEnded=null,this._onError=null}return _createClass(e,[{key:"setOnProxyConnected",value:function(e){this._onProxyConnected=e}},{key:"setOnProxyClosed",value:function(e){this._onProxyClosed=e}},{key:"setOnServiceStarted",value:function(e){this._onServiceStarted=e}},{key:"setOnServiceEnded",value:function(e){this._onServiceEnded=e}},{key:"setOnError",value:function(e){this._onError=e}},{key:"onProxyConnected",value:function(e){"function"==typeof this._onProxyConnected&&this._onProxyConnected(e)}},{key:"onProxyClosed",value:function(e,t,n){"function"==typeof this._onProxyClosed&&this._onProxyClosed(e,t,n)}},{key:"onServiceStarted",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onServiceStarted(e,t,n)}},{key:"onServiceEnded",value:function(e){"function"==typeof this._onServiceEnded&&this._onServiceEnded(e)}},{key:"onError",value:function(e,t){"function"==typeof this._onError&&this._onError(e,t)}}]),e}(),Enum=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"keyForValue",value:function(){throw new Error("method must be overridden")}},{key:"valueForKey",value:function(){throw new Error("method must be overridden")}}],[{key:"_keyForValue",value:function(e,t){for(var n in t)if(t[n]===e)return n;return null}},{key:"_valueForKey",value:function(e,t){return t[e]||null}}]),e}(),RpcStruct=function(){function l(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,l),this._isFormatRequested=!1,this._rpcSpecVersion=null,this._parameters=e||{}}return _createClass(l,[{key:"getParameters",value:function(){return this._parameters}},{key:"getParameter",value:function(e){return this._parameters[e]}},{key:"setParameter",value:function(e,t){return null===t?delete this._parameters[e]:this._parameters[e]=t,this}},{key:"getObject",value:function(e,t){return this.formatObject(e,this.getParameter(t))}},{key:"formatObject",value:function(e,t){if(null==t)return null;if(t.constructor===e)return t;if(t.constructor===String)return t;if(t.constructor===Object)return e.prototype instanceof l?new e(t):null;if(t.constructor===Array&&0<t.length){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;n.push(this.formatObject(e,u))}}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}return null}},{key:"validateType",value:function(e,t,n){if(2<arguments.length&&void 0!==n&&n){if(!Array.isArray(t))throw new Error("".concat(t.name," must be an array containing items of type ").concat(e.name));var r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.validateType(e,u,!1)}}catch(e){i=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}}else if(e.prototype instanceof Enum&&null===e.keyForValue(t)||e.prototype instanceof l&&null!==t&&t.constructor!==e)throw new Error("".concat(t.name," must be of type ").concat(e.name))}}]),l}(),FunctionID=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"RegisterAppInterface",get:function(){return t._MAP.RegisterAppInterface}},{key:"UnregisterAppInterface",get:function(){return t._MAP.UnregisterAppInterface}},{key:"SetGlobalProperties",get:function(){return t._MAP.SetGlobalProperties}},{key:"ResetGlobalProperties",get:function(){return t._MAP.ResetGlobalProperties}},{key:"AddCommand",get:function(){return t._MAP.AddCommand}},{key:"DeleteCommand",get:function(){return t._MAP.DeleteCommand}},{key:"AddSubMenu",get:function(){return t._MAP.AddSubMenu}},{key:"DeleteSubMenu",get:function(){return t._MAP.DeleteSubMenu}},{key:"CreateInteractionChoiceSet",get:function(){return t._MAP.CreateInteractionChoiceSet}},{key:"PerformInteraction",get:function(){return t._MAP.PerformInteraction}},{key:"DeleteInteractionChoiceSet",get:function(){return t._MAP.DeleteInteractionChoiceSet}},{key:"Alert",get:function(){return t._MAP.Alert}},{key:"Show",get:function(){return t._MAP.Show}},{key:"Speak",get:function(){return t._MAP.Speak}},{key:"SetMediaClockTimer",get:function(){return t._MAP.SetMediaClockTimer}},{key:"PerformAudioPassThru",get:function(){return t._MAP.PerformAudioPassThru}},{key:"EndAudioPassThru",get:function(){return t._MAP.EndAudioPassThru}},{key:"SubscribeButton",get:function(){return t._MAP.SubscribeButton}},{key:"UnsubscribeButton",get:function(){return t._MAP.UnsubscribeButton}},{key:"SubscribeVehicleData",get:function(){return t._MAP.SubscribeVehicleData}},{key:"UnsubscribeVehicleData",get:function(){return t._MAP.UnsubscribeVehicleData}},{key:"GetVehicleData",get:function(){return t._MAP.GetVehicleData}},{key:"ReadDID",get:function(){return t._MAP.ReadDID}},{key:"GetDTCs",get:function(){return t._MAP.GetDTCs}},{key:"ScrollableMessage",get:function(){return t._MAP.ScrollableMessage}},{key:"Slider",get:function(){return t._MAP.Slider}},{key:"ShowConstantTBT",get:function(){return t._MAP.ShowConstantTBT}},{key:"AlertManeuver",get:function(){return t._MAP.AlertManeuver}},{key:"UpdateTurnList",get:function(){return t._MAP.UpdateTurnList}},{key:"ChangeRegistration",get:function(){return t._MAP.ChangeRegistration}},{key:"GenericResponse",get:function(){return t._MAP.GenericResponse}},{key:"PutFile",get:function(){return t._MAP.PutFile}},{key:"DeleteFile",get:function(){return t._MAP.DeleteFile}},{key:"ListFiles",get:function(){return t._MAP.ListFiles}},{key:"SetAppIcon",get:function(){return t._MAP.SetAppIcon}},{key:"SetDisplayLayout",get:function(){return t._MAP.SetDisplayLayout}},{key:"DiagnosticMessage",get:function(){return t._MAP.DiagnosticMessage}},{key:"SystemRequest",get:function(){return t._MAP.SystemRequest}},{key:"SendLocation",get:function(){return t._MAP.SendLocation}},{key:"DialNumber",get:function(){return t._MAP.DialNumber}},{key:"ButtonPress",get:function(){return t._MAP.ButtonPress}},{key:"GetInteriorVehicleData",get:function(){return t._MAP.GetInteriorVehicleData}},{key:"SetInteriorVehicleData",get:function(){return t._MAP.SetInteriorVehicleData}},{key:"GetWayPoints",get:function(){return t._MAP.GetWayPoints}},{key:"SubscribeWayPoints",get:function(){return t._MAP.SubscribeWayPoints}},{key:"UnsubscribeWayPoints",get:function(){return t._MAP.UnsubscribeWayPoints}},{key:"GetSystemCapability",get:function(){return t._MAP.GetSystemCapability}},{key:"SendHapticData",get:function(){return t._MAP.SendHapticData}},{key:"SetCloudAppProperties",get:function(){return t._MAP.SetCloudAppProperties}},{key:"GetCloudAppProperties",get:function(){return t._MAP.GetCloudAppProperties}},{key:"PublishAppService",get:function(){return t._MAP.PublishAppService}},{key:"GetAppServiceData",get:function(){return t._MAP.GetAppServiceData}},{key:"GetFile",get:function(){return t._MAP.GetFile}},{key:"PerformAppServiceInteraction",get:function(){return t._MAP.PerformAppServiceInteraction}},{key:"UnpublishAppService",get:function(){return t._MAP.UnpublishAppService}},{key:"CancelInteraction",get:function(){return t._MAP.CancelInteraction}},{key:"CloseApplication",get:function(){return t._MAP.CloseApplication}},{key:"ShowAppMenu",get:function(){return t._MAP.ShowAppMenu}},{key:"CreateWindow",get:function(){return t._MAP.CreateWindow}},{key:"DeleteWindow",get:function(){return t._MAP.DeleteWindow}},{key:"GetInteriorVehicleDataConsent",get:function(){return t._MAP.GetInteriorVehicleDataConsent}},{key:"ReleaseInteriorVehicleDataModule",get:function(){return t._MAP.ReleaseInteriorVehicleDataModule}},{key:"OnHMIStatus",get:function(){return t._MAP.OnHMIStatus}},{key:"OnAppInterfaceUnregistered",get:function(){return t._MAP.OnAppInterfaceUnregistered}},{key:"OnButtonEvent",get:function(){return t._MAP.OnButtonEvent}},{key:"OnButtonPress",get:function(){return t._MAP.OnButtonPress}},{key:"OnVehicleData",get:function(){return t._MAP.OnVehicleData}},{key:"OnCommand",get:function(){return t._MAP.OnCommand}},{key:"OnTBTClientState",get:function(){return t._MAP.OnTBTClientState}},{key:"OnDriverDistraction",get:function(){return t._MAP.OnDriverDistraction}},{key:"OnPermissionsChange",get:function(){return t._MAP.OnPermissionsChange}},{key:"OnAudioPassThru",get:function(){return t._MAP.OnAudioPassThru}},{key:"OnLanguageChange",get:function(){return t._MAP.OnLanguageChange}},{key:"OnKeyboardInput",get:function(){return t._MAP.OnKeyboardInput}},{key:"OnTouchEvent",get:function(){return t._MAP.OnTouchEvent}},{key:"OnSystemRequest",get:function(){return t._MAP.OnSystemRequest}},{key:"OnHashChange",get:function(){return t._MAP.OnHashChange}},{key:"OnInteriorVehicleData",get:function(){return t._MAP.OnInteriorVehicleData}},{key:"OnWayPointChange",get:function(){return t._MAP.OnWayPointChange}},{key:"OnRCStatus",get:function(){return t._MAP.OnRCStatus}},{key:"OnAppServiceData",get:function(){return t._MAP.OnAppServiceData}},{key:"OnSystemCapabilityUpdated",get:function(){return t._MAP.OnSystemCapabilityUpdated}}]),t}();FunctionID._MAP=Object.freeze({RegisterAppInterface:1,UnregisterAppInterface:2,SetGlobalProperties:3,ResetGlobalProperties:4,AddCommand:5,DeleteCommand:6,AddSubMenu:7,DeleteSubMenu:8,CreateInteractionChoiceSet:9,PerformInteraction:10,DeleteInteractionChoiceSet:11,Alert:12,Show:13,Speak:14,SetMediaClockTimer:15,PerformAudioPassThru:16,EndAudioPassThru:17,SubscribeButton:18,UnsubscribeButton:19,SubscribeVehicleData:20,UnsubscribeVehicleData:21,GetVehicleData:22,ReadDID:23,GetDTCs:24,ScrollableMessage:25,Slider:26,ShowConstantTBT:27,AlertManeuver:28,UpdateTurnList:29,ChangeRegistration:30,GenericResponse:31,PutFile:32,DeleteFile:33,ListFiles:34,SetAppIcon:35,SetDisplayLayout:36,DiagnosticMessage:37,SystemRequest:38,SendLocation:39,DialNumber:40,ButtonPress:41,GetInteriorVehicleData:43,SetInteriorVehicleData:44,GetWayPoints:45,SubscribeWayPoints:46,UnsubscribeWayPoints:47,GetSystemCapability:48,SendHapticData:49,SetCloudAppProperties:50,GetCloudAppProperties:51,PublishAppService:52,GetAppServiceData:53,GetFile:54,PerformAppServiceInteraction:55,UnpublishAppService:56,CancelInteraction:57,CloseApplication:58,ShowAppMenu:59,CreateWindow:60,DeleteWindow:61,GetInteriorVehicleDataConsent:62,ReleaseInteriorVehicleDataModule:63,OnHMIStatus:32768,OnAppInterfaceUnregistered:32769,OnButtonEvent:32770,OnButtonPress:32771,OnVehicleData:32772,OnCommand:32773,OnTBTClientState:32774,OnDriverDistraction:32775,OnPermissionsChange:32776,OnAudioPassThru:32777,OnLanguageChange:32778,OnKeyboardInput:32779,OnTouchEvent:32780,OnSystemRequest:32781,OnHashChange:32782,OnInteriorVehicleData:32783,OnWayPointChange:32784,OnRCStatus:32785,OnAppServiceData:32786,OnSystemCapabilityUpdated:32787});var RpcMessage=function(){function n(){var e,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return _classCallCheck(this,n),(e=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,t.parameters)))._isEncrypted=!1,e._rpcType=t.rpcType,e._functionName=t.functionName,e._correlationID=t.correlationID,e.setBulkData(t.bulkData),e}return _inherits(n,RpcStruct),_createClass(n,[{key:"getRPCType",value:function(){return this._rpcType}},{key:"setRPCType",value:function(e){return this._rpcType=e,this}},{key:"getFunctionName",value:function(){return this._functionName}},{key:"setFunctionName",value:function(e){return this._functionName="string"!=typeof e?FunctionID.keyForValue(e):e,this}},{key:"getCorrelationId",value:function(){return this._correlationID}},{key:"setCorrelationId",value:function(e){return this._correlationID=e,this}},{key:"getBulkData",value:function(){return this._bulkData}},{key:"setBulkData",value:function(e){var t=0<arguments.length&&void 0!==e?e:null;return this._bulkData=null!==t?t.slice(0):null,this}},{key:"getIsEncrypted",value:function(){return this._isEncrypted}},{key:"setIsEncrypted",value:function(e){return this._isEncrypted=e,this}}]),n}(),RpcType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"NOTIFICATION",get:function(){return t._MAP.NOTIFICATION}},{key:"RESPONSE",get:function(){return t._MAP.RESPONSE}},{key:"REQUEST",get:function(){return t._MAP.REQUEST}}]),t}();RpcType._MAP=Object.freeze({NOTIFICATION:2,RESPONSE:1,REQUEST:0});var RpcRequest=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.REQUEST),t._promise=null,t}return _inherits(n,RpcMessage),_createClass(n,[{key:"getOnRPCResponsePromise",value:function(){return this._promise}},{key:"setOnRPCResponsePromise",value:function(e){return this.validateType(Promise,e),this._promise=e,this}}]),n}(),SdlMsgVersion=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMajorVersion",value:function(e){return this.setParameter(t.KEY_MAJOR_VERSION,e),this}},{key:"getMajorVersion",value:function(){return this.getParameter(t.KEY_MAJOR_VERSION)}},{key:"setMinorVersion",value:function(e){return this.setParameter(t.KEY_MINOR_VERSION,e),this}},{key:"getMinorVersion",value:function(){return this.getParameter(t.KEY_MINOR_VERSION)}},{key:"setPatchVersion",value:function(e){return this.setParameter(t.KEY_PATCH_VERSION,e),this}},{key:"getPatchVersion",value:function(){return this.getParameter(t.KEY_PATCH_VERSION)}}]),t}();SdlMsgVersion.KEY_MAJOR_VERSION="majorVersion",SdlMsgVersion.KEY_MINOR_VERSION="minorVersion",SdlMsgVersion.KEY_PATCH_VERSION="patchVersion";var SpeechCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SC_TEXT",get:function(){return t._MAP.SC_TEXT}},{key:"SAPI_PHONEMES",get:function(){return t._MAP.SAPI_PHONEMES}},{key:"LHPLUS_PHONEMES",get:function(){return t._MAP.LHPLUS_PHONEMES}},{key:"PRE_RECORDED",get:function(){return t._MAP.PRE_RECORDED}},{key:"SILENCE",get:function(){return t._MAP.SILENCE}},{key:"FILE",get:function(){return t._MAP.FILE}}]),t}();SpeechCapabilities._MAP=Object.freeze({SC_TEXT:"TEXT",SAPI_PHONEMES:"SAPI_PHONEMES",LHPLUS_PHONEMES:"LHPLUS_PHONEMES",PRE_RECORDED:"PRE_RECORDED",SILENCE:"SILENCE",FILE:"FILE"});var TTSChunk=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setText",value:function(e){return this.setParameter(t.KEY_TEXT,e),this}},{key:"getText",value:function(){return this.getParameter(t.KEY_TEXT)}},{key:"setType",value:function(e){return this.validateType(SpeechCapabilities,e),this.setParameter(t.KEY_TYPE,e),this}},{key:"getType",value:function(){return this.getObject(SpeechCapabilities,t.KEY_TYPE)}}]),t}();TTSChunk.KEY_TEXT="text",TTSChunk.KEY_TYPE="type";var DeviceInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setHardware",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_HARDWARE,e),this}},{key:"getHardware",value:function(){return this.getParameter(t.KEY_HARDWARE)}},{key:"setFirmwareRev",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_FIRMWARE_REV,e),this}},{key:"getFirmwareRev",value:function(){return this.getParameter(t.KEY_FIRMWARE_REV)}},{key:"setOs",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_OS,e),this}},{key:"getOs",value:function(){return this.getParameter(t.KEY_OS)}},{key:"setOsVersion",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_OS_VERSION,e),this}},{key:"getOsVersion",value:function(){return this.getParameter(t.KEY_OS_VERSION)}},{key:"setCarrier",value:function(e){return this.validateType(String,e),this.setParameter(t.KEY_CARRIER,e),this}},{key:"getCarrier",value:function(){return this.getParameter(t.KEY_CARRIER)}},{key:"setMaxNumberRFCOMMPorts",value:function(e){return this.validateType(Number,e),this.setParameter(t.KEY_MAX_NUMBER_RFCOMM_PORTS,e),this}},{key:"getMaxNumberRFCOMMPorts",value:function(){return this.getParameter(t.KEY_MAX_NUMBER_RFCOMM_PORTS)}}]),t}();DeviceInfo.KEY_HARDWARE="hardware",DeviceInfo.KEY_FIRMWARE_REV="firmwareRev",DeviceInfo.KEY_OS="os",DeviceInfo.KEY_OS_VERSION="osVersion",DeviceInfo.KEY_CARRIER="carrier",DeviceInfo.KEY_MAX_NUMBER_RFCOMM_PORTS="maxNumberRFCOMMPorts";var AppInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setAppDisplayName",value:function(e){return this.setParameter(t.KEY_APP_DISPLAY_NAME,e),this}},{key:"getAppDisplayName",value:function(){return this.getParameter(t.KEY_APP_DISPLAY_NAME)}},{key:"setAppBundleID",value:function(e){return this.setParameter(t.KEY_APP_BUNDLE_ID,e),this}},{key:"getAppBundleID",value:function(){return this.getParameter(t.KEY_APP_BUNDLE_ID)}},{key:"setAppVersion",value:function(e){return this.setParameter(t.KEY_APP_VERSION,e),this}},{key:"getAppVersion",value:function(){return this.getParameter(t.KEY_APP_VERSION)}},{key:"setAppIcon",value:function(e){return this.setParameter(t.KEY_APP_ICON,e),this}},{key:"getAppIcon",value:function(){return this.getParameter(t.KEY_APP_ICON)}}]),t}();AppInfo.KEY_APP_DISPLAY_NAME="appDisplayName",AppInfo.KEY_APP_BUNDLE_ID="appBundleID",AppInfo.KEY_APP_VERSION="appVersion",AppInfo.KEY_APP_ICON="appIcon";var RGBColor=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setRedValue",value:function(e){return this.setParameter(t.KEY_RED,e),this}},{key:"getRedValue",value:function(){return this.getParameter(t.KEY_RED)}},{key:"setGreenValue",value:function(e){return this.setParameter(t.KEY_GREEN,e),this}},{key:"getGreenValue",value:function(){return this.getParameter(t.KEY_GREEN)}},{key:"setBlueValue",value:function(e){return this.setParameter(t.KEY_BLUE,e),this}},{key:"getBlueValue",value:function(){return this.getParameter(t.KEY_BLUE)}}]),t}();RGBColor.KEY_RED="red",RGBColor.KEY_GREEN="green",RGBColor.KEY_BLUE="blue";var TemplateColorScheme=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPrimaryColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_PRIMARY_COLOR,e),this}},{key:"getPrimaryColor",value:function(){return this.getObject(RGBColor,t.KEY_PRIMARY_COLOR)}},{key:"setSecondaryColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_SECONDARY_COLOR,e),this}},{key:"getSecondaryColor",value:function(){return this.getObject(RGBColor,t.KEY_SECONDARY_COLOR)}},{key:"setBackgroundColor",value:function(e){return this.validateType(RGBColor,e),this.setParameter(t.KEY_BACKGROUND_COLOR,e),this}},{key:"getBackgroundColor",value:function(){return this.getObject(RGBColor,t.KEY_BACKGROUND_COLOR)}}]),t}();TemplateColorScheme.KEY_PRIMARY_COLOR="primaryColor",TemplateColorScheme.KEY_SECONDARY_COLOR="secondaryColor",TemplateColorScheme.KEY_BACKGROUND_COLOR="backgroundColor";var Language=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"EN_SA",get:function(){return t._MAP.EN_SA}},{key:"HE_IL",get:function(){return t._MAP.HE_IL}},{key:"RO_RO",get:function(){return t._MAP.RO_RO}},{key:"UK_UA",get:function(){return t._MAP.UK_UA}},{key:"ID_ID",get:function(){return t._MAP.ID_ID}},{key:"VI_VN",get:function(){return t._MAP.VI_VN}},{key:"MS_MY",get:function(){return t._MAP.MS_MY}},{key:"HI_IN",get:function(){return t._MAP.HI_IN}},{key:"NL_BE",get:function(){return t._MAP.NL_BE}},{key:"EL_GR",get:function(){return t._MAP.EL_GR}},{key:"HU_HU",get:function(){return t._MAP.HU_HU}},{key:"FI_FI",get:function(){return t._MAP.FI_FI}},{key:"SK_SK",get:function(){return t._MAP.SK_SK}},{key:"EN_US",get:function(){return t._MAP.EN_US}},{key:"ES_MX",get:function(){return t._MAP.ES_MX}},{key:"FR_CA",get:function(){return t._MAP.FR_CA}},{key:"DE_DE",get:function(){return t._MAP.DE_DE}},{key:"ES_ES",get:function(){return t._MAP.ES_ES}},{key:"EN_GB",get:function(){return t._MAP.EN_GB}},{key:"RU_RU",get:function(){return t._MAP.RU_RU}},{key:"TR_TR",get:function(){return t._MAP.TR_TR}},{key:"PL_PL",get:function(){return t._MAP.PL_PL}},{key:"FR_FR",get:function(){return t._MAP.FR_FR}},{key:"IT_IT",get:function(){return t._MAP.IT_IT}},{key:"SV_SE",get:function(){return t._MAP.SV_SE}},{key:"PT_PT",get:function(){return t._MAP.PT_PT}},{key:"NL_NL",get:function(){return t._MAP.NL_NL}},{key:"EN_AU",get:function(){return t._MAP.EN_AU}},{key:"ZH_CN",get:function(){return t._MAP.ZH_CN}},{key:"ZH_TW",get:function(){return t._MAP.ZH_TW}},{key:"JA_JP",get:function(){return t._MAP.JA_JP}},{key:"AR_SA",get:function(){return t._MAP.AR_SA}},{key:"KO_KR",get:function(){return t._MAP.KO_KR}},{key:"PT_BR",get:function(){return t._MAP.PT_BR}},{key:"CS_CZ",get:function(){return t._MAP.CS_CZ}},{key:"DA_DK",get:function(){return t._MAP.DA_DK}},{key:"NO_NO",get:function(){return t._MAP.NO_NO}},{key:"EN_IN",get:function(){return t._MAP.EN_IN}},{key:"TH_TH",get:function(){return t._MAP.TH_TH}}]),t}();Language._MAP=Object.freeze({EN_SA:"EN-SA",HE_IL:"HE-IL",RO_RO:"RO-RO",UK_UA:"UK-UA",ID_ID:"ID-ID",VI_VN:"VI-VN",MS_MY:"MS-MY",HI_IN:"HI-IN",NL_BE:"NL-BE",EL_GR:"EL-GR",HU_HU:"HU-HU",FI_FI:"FI-FI",SK_SK:"SK-SK",EN_US:"EN-US",ES_MX:"ES-MX",FR_CA:"FR-CA",DE_DE:"DE-DE",ES_ES:"ES-ES",EN_GB:"EN-GB",RU_RU:"RU-RU",TR_TR:"TR-TR",PL_PL:"PL-PL",FR_FR:"FR-FR",IT_IT:"IT-IT",SV_SE:"SV-SE",PT_PT:"PT-PT",NL_NL:"NL-NL",EN_AU:"EN-AU",ZH_CN:"ZH-CN",ZH_TW:"ZH-TW",JA_JP:"JA-JP",AR_SA:"AR-SA",KO_KR:"KO-KR",PT_BR:"PT-BR",CS_CZ:"CS-CZ",DA_DK:"DA-DK",NO_NO:"NO-NO",EN_IN:"EN-IN",TH_TH:"TH-TH"});var AppHMIType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"DEFAULT",get:function(){return t._MAP.DEFAULT}},{key:"COMMUNICATION",get:function(){return t._MAP.COMMUNICATION}},{key:"MEDIA",get:function(){return t._MAP.MEDIA}},{key:"MESSAGING",get:function(){return t._MAP.MESSAGING}},{key:"NAVIGATION",get:function(){return t._MAP.NAVIGATION}},{key:"INFORMATION",get:function(){return t._MAP.INFORMATION}},{key:"SOCIAL",get:function(){return t._MAP.SOCIAL}},{key:"BACKGROUND_PROCESS",get:function(){return t._MAP.BACKGROUND_PROCESS}},{key:"TESTING",get:function(){return t._MAP.TESTING}},{key:"SYSTEM",get:function(){return t._MAP.SYSTEM}},{key:"PROJECTION",get:function(){return t._MAP.PROJECTION}},{key:"REMOTE_CONTROL",get:function(){return t._MAP.REMOTE_CONTROL}}]),t}();AppHMIType._MAP=Object.freeze({DEFAULT:"DEFAULT",COMMUNICATION:"COMMUNICATION",MEDIA:"MEDIA",MESSAGING:"MESSAGING",NAVIGATION:"NAVIGATION",INFORMATION:"INFORMATION",SOCIAL:"SOCIAL",BACKGROUND_PROCESS:"BACKGROUND_PROCESS",TESTING:"TESTING",SYSTEM:"SYSTEM",PROJECTION:"PROJECTION",REMOTE_CONTROL:"REMOTE_CONTROL"});var RegisterAppInterface=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.RegisterAppInterface),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setSdlMsgVersion",value:function(e){return this.validateType(SdlMsgVersion,e),this.setParameter(n.KEY_SDL_MSG_VERSION,e),this}},{key:"getSdlMsgVersion",value:function(){return this.getObject(SdlMsgVersion,n.KEY_SDL_MSG_VERSION)}},{key:"setAppName",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_APP_NAME,e),this}},{key:"getAppName",value:function(){return this.getParameter(n.KEY_APP_NAME)}},{key:"setTtsName",value:function(e){return this.setParameter(n.KEY_TTS_NAME,e),this}},{key:"getTtsName",value:function(){return this.getObject(TTSChunk,n.KEY_TTS_NAME)}},{key:"setNgnMediaScreenAppName",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_NGN_MEDIA_SCREEN_APP_NAME,e),this}},{key:"getNgnMediaScreenAppName",value:function(){return this.getParameter(n.KEY_NGN_MEDIA_SCREEN_APP_NAME)}},{key:"setVrSynonyms",value:function(e){return this.setParameter(n.KEY_VR_SYNONYMS,e),this}},{key:"getVrSynonyms",value:function(){return this.getParameter(n.KEY_VR_SYNONYMS)}},{key:"setIsMediaApplication",value:function(e){return this.setParameter(n.KEY_IS_MEDIA_APPLICATION,e),this}},{key:"getIsMediaApplication",value:function(){return this.getParameter(n.KEY_IS_MEDIA_APPLICATION)}},{key:"setLanguageDesired",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_LANGUAGE_DESIRED,e),this}},{key:"getLanguageDesired",value:function(){return this.getObject(Language,n.KEY_LANGUAGE_DESIRED)}},{key:"setHmiDisplayLanguageDesired",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE_DESIRED,e),this}},{key:"getHmiDisplayLanguageDesired",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE_DESIRED)}},{key:"setAppHmiType",value:function(e){return this.setParameter(n.KEY_APP_HMI_TYPE,e),this}},{key:"getAppHmiType",value:function(){return this.getObject(AppHMIType,n.KEY_APP_HMI_TYPE)}},{key:"setHashID",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_HASH_ID,e),this}},{key:"getHashID",value:function(){return this.getParameter(n.KEY_HASH_ID)}},{key:"setDeviceInfo",value:function(e){return this.validateType(DeviceInfo,e),this.setParameter(n.KEY_DEVICE_INFO,e),this}},{key:"getDeviceInfo",value:function(){return this.getObject(DeviceInfo,n.KEY_DEVICE_INFO)}},{key:"_setAppId",value:function(e){return this.validateType(String,e),this.setParameter(n.KEY_APP_ID,e),this}},{key:"getAppId",value:function(){return this.getParameter(n.KEY_APP_ID)}},{key:"setFullAppId",value:function(e){var t;(this.validateType(String,e),null!==e)?(e=e.toLowerCase(),this.setParameter(n.KEY_FULL_APP_ID,e),t=e.length<=n.APP_ID_MAX_LENGTH?e:e.replace("-","").substring(0,n.APP_ID_MAX_LENGTH),this._setAppId(t)):this.setParameter(n.KEY_FULL_APP_ID,null);return this}},{key:"getFullAppId",value:function(){return this.getParameter(n.KEY_FULL_APP_ID)}},{key:"setAppInfo",value:function(e){return this.validateType(AppInfo,e),this.setParameter(n.KEY_APP_INFO,e),this}},{key:"getAppInfo",value:function(){return this.getObject(AppInfo,n.KEY_APP_INFO)}},{key:"setDayColorScheme",value:function(e){return this.validateType(TemplateColorScheme,e),this.setParameter(n.KEY_DAY_COLOR_SCHEME,e),this}},{key:"getDayColorScheme",value:function(){return this.getObject(TemplateColorScheme,n.KEY_DAY_COLOR_SCHEME)}},{key:"setNightColorScheme",value:function(e){return this.validateType(TemplateColorScheme,e),this.setParameter(n.KEY_NIGHT_COLOR_SCHEME,e),this}},{key:"getNightColorScheme",value:function(){return this.getObject(TemplateColorScheme,n.KEY_NIGHT_COLOR_SCHEME)}}]),n}();RegisterAppInterface.KEY_SYNC_MSG_VERSION="syncMsgVersion",RegisterAppInterface.KEY_SDL_MSG_VERSION="syncMsgVersion",RegisterAppInterface.KEY_APP_NAME="appName",RegisterAppInterface.KEY_TTS_NAME="ttsName",RegisterAppInterface.KEY_NGN_MEDIA_SCREEN_APP_NAME="ngnMediaScreenAppName",RegisterAppInterface.KEY_VR_SYNONYMS="vrSynonyms",RegisterAppInterface.KEY_IS_MEDIA_APPLICATION="isMediaApplication",RegisterAppInterface.KEY_LANGUAGE_DESIRED="languageDesired",RegisterAppInterface.KEY_HMI_DISPLAY_LANGUAGE_DESIRED="hmiDisplayLanguageDesired",RegisterAppInterface.KEY_APP_HMI_TYPE="appHMIType",RegisterAppInterface.KEY_HASH_ID="hashID",RegisterAppInterface.KEY_DEVICE_INFO="deviceInfo",RegisterAppInterface.KEY_APP_ID="appID",RegisterAppInterface.KEY_FULL_APP_ID="fullAppID",RegisterAppInterface.KEY_APP_INFO="appInfo",RegisterAppInterface.KEY_DAY_COLOR_SCHEME="dayColorScheme",RegisterAppInterface.KEY_NIGHT_COLOR_SCHEME="nightColorScheme",RegisterAppInterface.APP_ID_MAX_LENGTH=10;var Result=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SUCCESS",get:function(){return t._MAP.SUCCESS}},{key:"UNSUPPORTED_REQUEST",get:function(){return t._MAP.UNSUPPORTED_REQUEST}},{key:"UNSUPPORTED_RESOURCE",get:function(){return t._MAP.UNSUPPORTED_REQUEST}},{key:"DISALLOWED",get:function(){return t._MAP.DISALLOWED}},{key:"REJECTED",get:function(){return t._MAP.REJECTED}},{key:"ABORTED",get:function(){return t._MAP.ABORTED}},{key:"IGNORED",get:function(){return t._MAP.IGNORED}},{key:"RETRY",get:function(){return t._MAP.RETRY}},{key:"IN_USE",get:function(){return t._MAP.IN_USE}},{key:"VEHICLE_DATA_NOT_AVAILABLE",get:function(){return t._MAP.VEHICLE_DATA_NOT_AVAILABLE}},{key:"TIMED_OUT",get:function(){return t._MAP.TIMED_OUT}},{key:"INVALID_DATA",get:function(){return t._MAP.INVALID_DATA}},{key:"CHAR_LIMIT_EXCEEDED",get:function(){return t._MAP.CHAR_LIMIT_EXCEEDED}},{key:"INVALID_ID",get:function(){return t._MAP.INVALID_ID}},{key:"DUPLICATE_NAME",get:function(){return t._MAP.DUPLICATE_NAME}},{key:"APPLICATION_NOT_REGISTERED",get:function(){return t._MAP.APPLICATION_NOT_REGISTERED}},{key:"WRONG_LANGUAGE",get:function(){return t._MAP.WRONG_LANGUAGE}},{key:"OUT_OF_MEMORY",get:function(){return t._MAP.OUT_OF_MEMORY}},{key:"TOO_MANY_PENDING_REQUESTS",get:function(){return t._MAP.TOO_MANY_PENDING_REQUESTS}},{key:"TOO_MANY_APPLICATIONS",get:function(){return t._MAP.TOO_MANY_APPLICATIONS}},{key:"APPLICATION_REGISTERED_ALREADY",get:function(){return t._MAP.APPLICATION_REGISTERED_ALREADY}},{key:"WARNINGS",get:function(){return t._MAP.WARNINGS}},{key:"GENERIC_ERROR",get:function(){return t._MAP.GENERIC_ERROR}},{key:"USER_DISALLOWED",get:function(){return t._MAP.USER_DISALLOWED}},{key:"TRUNCATED_DATA",get:function(){return t._MAP.TRUNCATED_DATA}},{key:"UNSUPPORTED_VERSION",get:function(){return t._MAP.UNSUPPORTED_VERSION}},{key:"VEHICLE_DATA_NOT_ALLOWED",get:function(){return t._MAP.VEHICLE_DATA_NOT_ALLOWED}},{key:"FILE_NOT_FOUND",get:function(){return t._MAP.FILE_NOT_FOUND}},{key:"CANCEL_ROUTE",get:function(){return t._MAP.CANCEL_ROUTE}},{key:"SAVED",get:function(){return t._MAP.SAVED}},{key:"INVALID_CERT",get:function(){return t._MAP.INVALID_CERT}},{key:"EXPIRED_CERT",get:function(){return t._MAP.EXPIRED_CERT}},{key:"RESUME_FAILED",get:function(){return t._MAP.RESUME_FAILED}},{key:"DATA_NOT_AVAILABLE",get:function(){return t._MAP.DATA_NOT_AVAILABLE}},{key:"READ_ONLY",get:function(){return t._MAP.READ_ONLY}},{key:"CORRUPTED_DATA",get:function(){return t._MAP.CORRUPTED_DATA}}]),t}();Result._MAP=Object.freeze({SUCCESS:"SUCCESS",UNSUPPORTED_REQUEST:"UNSUPPORTED_REQUEST",UNSUPPORTED_RESOURCE:"UNSUPPORTED_RESOURCE",DISALLOWED:"DISALLOWED",REJECTED:"REJECTED",ABORTED:"ABORTED",IGNORED:"IGNORED",RETRY:"RETRY",IN_USE:"IN_USE",VEHICLE_DATA_NOT_AVAILABLE:"VEHICLE_DATA_NOT_AVAILABLE",TIMED_OUT:"TIMED_OUT",INVALID_DATA:"INVALID_DATA",CHAR_LIMIT_EXCEEDED:"CHAR_LIMIT_EXCEEDED",INVALID_ID:"INVALID_ID",DUPLICATE_NAME:"DUPLICATE_NAME",APPLICATION_NOT_REGISTERED:"APPLICATION_NOT_REGISTERED",WRONG_LANGUAGE:"WRONG_LANGUAGE",OUT_OF_MEMORY:"OUT_OF_MEMORY",TOO_MANY_PENDING_REQUESTS:"TOO_MANY_PENDING_REQUESTS",TOO_MANY_APPLICATIONS:"TOO_MANY_APPLICATIONS",APPLICATION_REGISTERED_ALREADY:"APPLICATION_REGISTERED_ALREADY",WARNINGS:"WARNINGS",GENERIC_ERROR:"GENERIC_ERROR",USER_DISALLOWED:"USER_DISALLOWED",TRUNCATED_DATA:"TRUNCATED_DATA",UNSUPPORTED_VERSION:"UNSUPPORTED_VERSION",VEHICLE_DATA_NOT_ALLOWED:"VEHICLE_DATA_NOT_ALLOWED",FILE_NOT_FOUND:"FILE_NOT_FOUND",CANCEL_ROUTE:"CANCEL_ROUTE",SAVED:"SAVED",INVALID_CERT:"INVALID_CERT",EXPIRED_CERT:"EXPIRED_CERT",RESUME_FAILED:"RESUME_FAILED",DATA_NOT_AVAILABLE:"DATA_NOT_AVAILABLE",READ_ONLY:"READ_ONLY",CORRUPTED_DATA:"CORRUPTED_DATA"});var RpcResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.RESPONSE),t}return _inherits(n,RpcMessage),_createClass(n,[{key:"getSuccess",value:function(){return this.getParameter(n.KEY_SUCCESS)}},{key:"setSuccess",value:function(e){return this.setParameter(n.KEY_SUCCESS,e),this}},{key:"getInfo",value:function(){return this.getParameter(n.KEY_INFO)}},{key:"setInfo",value:function(e){return this.setParameter(n.KEY_INFO,e),this}},{key:"getResultCode",value:function(){return this.getObject(Result,n.KEY_RESULT_CODE)}},{key:"setResultCode",value:function(e){return this.validateType(Result,e),this.setParameter(n.KEY_RESULT_CODE,e),this}}]),n}();RpcResponse.KEY_SUCCESS="success",RpcResponse.KEY_INFO="info",RpcResponse.KEY_RESULT_CODE="resultCode";var RpcListener=function(){function e(){_classCallCheck(this,e),this._onRpcMessage=null}return _createClass(e,[{key:"setOnRpcMessage",value:function(e){return this._onRpcMessage=e,this}},{key:"onRpcMessage",value:function(e){"function"==typeof this._onRpcMessage&&this._onRpcMessage(e)}}]),e}(),SdlSessionListener=function(){function e(){_classCallCheck(this,e),this._onProtocolSessionStarted=null,this._onProtocolSessionEnded=null,this._onProtocolSessionEndedNACKed=null,this._onRpcMessageReceived=null,this._onTransportConnected=null}return _createClass(e,[{key:"setOnProtocolSessionStarted",value:function(e){this._onProtocolSessionStarted=e}},{key:"setOnProtocolSessionEnded",value:function(e){this._onProtocolSessionEnded=e}},{key:"setOnProtocolSessionEndedNACKed",value:function(e){this._onProtocolSessionEndedNACKed=e}},{key:"setOnRpcMessageReceived",value:function(e){this._onRpcMessageReceived=e}},{key:"setOnTransportConnected",value:function(e){this._onTransportConnected=e}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){"function"==typeof this._onProtocolSessionStarted&&this._onProtocolSessionStarted(e,t,n,r,i,o)}},{key:"onProtocolSessionEnded",value:function(e,t,n){"function"==typeof this._onProtocolSessionEnded&&this._onProtocolSessionEnded(e,t,n)}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onProtocolSessionEndedNACKed(e,t,n)}},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}}]),e}(),SdlProtocolListener=function(){function e(){_classCallCheck(this,e),this._onRpcMessageReceived=null,this._onProtocolSessionStarted=null,this._onProtocolSessionEnded=null,this._onProtocolSessionEndedNACKed=null,this._getSessionId=null,this._onTransportConnected=null}return _createClass(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}},{key:"setOnRpcMessageReceived",value:function(e){return this._onRpcMessageReceived=e,this}},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}},{key:"setOnProtocolSessionStarted",value:function(e){return this._onProtocolSessionStarted=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){"function"==typeof this._onProtocolSessionStarted&&this._onProtocolSessionStarted(e,t,n,r,i,o)}},{key:"setOnProtocolSessionEnded",value:function(e){return this._onProtocolSessionEnded=e,this}},{key:"onProtocolSessionEnded",value:function(e,t,n){"function"==typeof this._onProtocolSessionEnded&&this._onProtocolSessionEnded(e,t,n)}},{key:"setOnProtocolSessionEndedNACKed",value:function(e){return this._onProtocolSessionEndedNACKed=e,this}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){"function"==typeof this._onProtocolSessionEndedNACKed&&this._onProtocolSessionEndedNACKed(e,t,n)}},{key:"setGetSessionId",value:function(e){return this._getSessionId=e,this}},{key:"getSessionId",value:function(){if("function"==typeof this._getSessionId)return this._getSessionId()}},{key:"setGetDesiredVideoParams",value:function(e){return this._getDesiredVideoParams=e,this}},{key:"getDesiredVideoParams",value:function(){if("function"==typeof this._getDesiredVideoParams)return this._getDesiredVideoParams()}},{key:"setSetAcceptedVideoParams",value:function(e){return this._setAcceptedVideoParams=e,this}},{key:"setAcceptedVideoParams",value:function(e){return"function"==typeof this._setAcceptedVideoParams&&this._setAcceptedVideoParams(e),this}}]),e}(),FrameType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CONTROL",get:function(){return t._MAP.CONTROL}},{key:"FIRST",get:function(){return t._MAP.FIRST}},{key:"CONSECUTIVE",get:function(){return t._MAP.CONSECUTIVE}},{key:"SINGLE",get:function(){return t._MAP.SINGLE}}]),t}();function unwrapExports(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}FrameType._MAP=Object.freeze({CONTROL:0,FIRST:2,CONSECUTIVE:3,SINGLE:1});var bson_common=createCommonjsModule(function(module,exports){function Ek(e){if(Dk[e])return Dk[e].exports;var t=Dk[e]={i:e,l:!1,exports:{}};return Ck[e].call(t.exports,t,t.exports,Ek),t.l=!0,t.exports}var Ck,Dk;exports.bson=(Ck=[function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":_typeof(window))&&(n=window)}e.exports=n},function(e,U,K){(function(e){var r=K(3),o=K(4),s=K(5);function n(){return _.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(n()<t)throw new RangeError("Invalid typed array length");return _.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=_.prototype:(null===e&&(e=new _(t)),e.length=t),e}function _(e,t,n){if(!(_.TYPED_ARRAY_SUPPORT||this instanceof _))return new _(e,t,n);if("number"!=typeof e)return i(this,e,t,n);if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}function i(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);_.TYPED_ARRAY_SUPPORT?(e=t).__proto__=_.prototype:e=c(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!_.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(_.isBuffer(t)){var n=0|f(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):c(e,t);if("Buffer"===t.type&&s(t.data))return c(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(u(t),e=a(e,t<0?0:0|f(t)),!_.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function c(e,t){var n=t.length<0?0:0|f(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=n())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+n().toString(16)+" bytes");return 0|e}function h(e,t){if(_.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return w(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(e).length;default:if(r)return w(e).length;t=(""+t).toLowerCase(),r=!0}}function E(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function p(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=_.from(t,r)),_.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,_.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a/=s=2,u/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(a<n+u&&(n=a-u),o=n;0<=o;o--){for(var _=!0,f=0;f<u;f++)if(l(e,o+f)!==l(t,f)){_=!1;break}if(_)return o}return-1}function g(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?i<(r=Number(r))&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");o/2<r&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function A(e,t,n,r){return Y(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function S(e,t,n,r){return Y(function(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function d(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function T(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,u,l=e[i],c=null,_=239<l?4:223<l?3:191<l?2:1;if(i+_<=n)switch(_){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&127<(u=(31&l)<<6|63&o)&&(c=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&2047<(u=(15&l)<<12|(63&o)<<6|63&s)&&(u<55296||57343<u)&&(c=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&65535<(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)&&u<1114112&&(c=u)}null===c?(c=65533,_=1):65535<c&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=_}return function(e){var t=e.length;if(t<=P)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=P));return n}(r)}U.Buffer=_,U.SlowBuffer=function(e){+e!=e&&(e=0);return _.alloc(+e)},U.INSPECT_MAX_BYTES=50,_.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),U.kMaxLength=n(),_.poolSize=8192,_._augment=function(e){return e.__proto__=_.prototype,e},_.from=function(e,t,n){return i(null,e,t,n)},_.TYPED_ARRAY_SUPPORT&&(_.prototype.__proto__=Uint8Array.prototype,_.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&_[Symbol.species]===_&&Object.defineProperty(_,Symbol.species,{value:null,configurable:!0})),_.alloc=function(e,t,n){return function(e,t,n,r){return u(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},_.allocUnsafe=function(e){return l(null,e)},_.allocUnsafeSlow=function(e){return l(null,e)},_.isBuffer=function(e){return!(null==e||!e._isBuffer)},_.compare=function(e,t){if(!_.isBuffer(e)||!_.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},_.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},_.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return _.alloc(0);var n;if(void 0===t)for(n=t=0;n<e.length;++n)t+=e[n].length;var r=_.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!_.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},_.byteLength=h,_.prototype._isBuffer=!0,_.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)E(this,t,t+1);return this},_.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)E(this,t,t+3),E(this,t+1,t+2);return this},_.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)E(this,t,t+7),E(this,t+1,t+6),E(this,t+2,t+5),E(this,t+3,t+4);return this},_.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?T(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return m(this,t,n);case"utf8":case"utf-8":return T(this,t,n);case"ascii":return v(this,t,n);case"latin1":case"binary":return I(this,t,n);case"base64":return d(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},_.prototype.equals=function(e){if(!_.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===_.compare(this,e)},_.prototype.inspect=function(){var e="",t=U.INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},_.prototype.compare=function(e,t,n,r,i){if(!_.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(i<=r&&n<=t)return 0;if(i<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(r,i),l=e.slice(t,n),c=0;c<a;++c)if(u[c]!==l[c]){o=u[c],s=l[c];break}return o<s?-1:s<o?1:0},_.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},_.prototype.indexOf=function(e,t,n){return p(this,e,t,n,!0)},_.prototype.lastIndexOf=function(e,t,n){return p(this,e,t,n,!1)},_.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||i<n)&&(n=i),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var o,s,a,u,l,c,_=!1;;)switch(r){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return l=t,c=n,Y(w(e,(u=this).length-l),u,l,c);case"ascii":return A(this,e,t,n);case"latin1":case"binary":return A(this,e,t,n);case"base64":return o=this,s=t,a=n,Y(F(e),o,s,a);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(_)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),_=!0}},_.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var P=4096;function v(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function I(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function m(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var i="",o=t;o<n;++o)i+=L(e[o]);return i}function O(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function C(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,n,r,i,o){if(!_.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(i<t||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function N(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function b(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function k(e,t,n,r){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(e,t,n,r,i){return i||k(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||k(e,0,n,8),o.write(e,t,n,r,52,8),n+8}_.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e),_.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=_.prototype;else{var i=t-e;n=new _(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},_.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},_.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e+--t],i=1;0<t&&(i*=256);)r+=this[e+--t]*i;return r},_.prototype.readUInt8=function(e,t){return t||C(e,1,this.length),this[e]},_.prototype.readUInt16LE=function(e,t){return t||C(e,2,this.length),this[e]|this[e+1]<<8},_.prototype.readUInt16BE=function(e,t){return t||C(e,2,this.length),this[e]<<8|this[e+1]},_.prototype.readUInt32LE=function(e,t){return t||C(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},_.prototype.readUInt32BE=function(e,t){return t||C(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},_.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return(i*=128)<=r&&(r-=Math.pow(2,8*t)),r},_.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||C(e,t,this.length);for(var r=t,i=1,o=this[e+--r];0<r&&(i*=256);)o+=this[e+--r]*i;return(i*=128)<=o&&(o-=Math.pow(2,8*t)),o},_.prototype.readInt8=function(e,t){return t||C(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},_.prototype.readInt16LE=function(e,t){t||C(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},_.prototype.readInt16BE=function(e,t){t||C(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},_.prototype.readInt32LE=function(e,t){return t||C(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},_.prototype.readInt32BE=function(e,t){return t||C(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},_.prototype.readFloatLE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!0,23,4)},_.prototype.readFloatBE=function(e,t){return t||C(e,4,this.length),o.read(this,e,!1,23,4)},_.prototype.readDoubleLE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!0,52,8)},_.prototype.readDoubleBE=function(e,t){return t||C(e,8,this.length),o.read(this,e,!1,52,8)},_.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},_.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;0<=--i&&(o*=256);)this[t+i]=e/o&255;return t+n},_.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,255,0),_.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},_.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},_.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},_.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),_.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):b(this,e,t,!0),t+4},_.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):b(this,e,t,!1),t+4},_.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);R(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},_.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);R(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;0<=--o&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},_.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,127,-128),_.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},_.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):N(this,e,t,!0),t+2},_.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):N(this,e,t,!1),t+2},_.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),_.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):b(this,e,t,!0),t+4},_.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),_.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):b(this,e,t,!1),t+4},_.prototype.writeFloatLE=function(e,t,n){return M(this,e,t,!0,n)},_.prototype.writeFloatBE=function(e,t,n){return M(this,e,t,!1,n)},_.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},_.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},_.prototype.copy=function(e,t,n,r){if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;0<=i;--i)e[i+t]=this[i+n];else if(o<1e3||!_.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},_.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!_.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(o=t;o<n;++o)this[o]=e;else{var s=_.isBuffer(e)?e:w(new _(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var t=/[^+\/0-9A-Za-z-_]/g;function B(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(t,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function w(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if(55295<(n=e.charCodeAt(s))&&n<57344){if(!i){if(56319<n){-1<(t-=3)&&o.push(239,191,189);continue}if(s+1===r){-1<(t-=3)&&o.push(239,191,189);continue}i=n;continue}if(n<56320){-1<(t-=3)&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&-1<(t-=3)&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function F(e){return r.toByteArray(B(e))}function Y(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(U,K(0))},function(module,exports,__webpack_require__){(function(global,Buffer){var Cu;Cu=function(exports,_long,buffer){_long=_long&&_long.hasOwnProperty("default")?_long.default:_long,buffer=buffer&&buffer.hasOwnProperty("default")?buffer.default:buffer;var commonjsGlobal="undefined"!=typeof window?window:void 0!==global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}function getCjsExportFromNamespace(e){return e&&e.default||e}var map=createCommonjsModule(function(e){if(void 0!==commonjsGlobal.Map)e.exports=commonjsGlobal.Map,e.exports.Map=commonjsGlobal.Map;else{var t=function(e){this._keys=[],this._values={};for(var t=0;t<e.length;t++)if(null!=e[t]){var n=e[t],r=n[0],i=n[1];this._keys.push(r),this._values[r]={v:i,i:this._keys.length-1}}};t.prototype.clear=function(){this._keys=[],this._values={}},t.prototype.delete=function(e){var t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)},t.prototype.entries=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?[e,t._values[e].v]:void 0,done:void 0===e}}}},t.prototype.forEach=function(e,t){t=t||this;for(var n=0;n<this._keys.length;n++){var r=this._keys[n];e.call(t,this._values[r].v,r,t)}},t.prototype.get=function(e){return this._values[e]?this._values[e].v:void 0},t.prototype.has=function(e){return null!=this._values[e]},t.prototype.keys=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?e:void 0,done:void 0===e}}}},t.prototype.set=function(e,t){return this._values[e]?this._values[e].v=t:(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1}),this},t.prototype.values=function(){var t=this,n=0;return{next:function(){var e=t._keys[n++];return{value:void 0!==e?t._values[e].v:void 0,done:void 0===e}}}},Object.defineProperty(t.prototype,"size",{enumerable:!0,get:function(){return this._keys.length}}),e.exports=t}}),map_1=map.Map;_long.prototype.toExtendedJSON=function(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}},_long.fromExtendedJSON=function(e,t){var n=_long.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n},Object.defineProperty(_long.prototype,"_bsontype",{value:"Long"});var long_1=_long;function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Double=function(){function n(e){_classCallCheck(this,n),this.value=e}return _createClass(n,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed&&isFinite(this.value)?this.value:{$numberDouble:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,t){return t&&t.relaxed?parseFloat(e.$numberDouble):new n(parseFloat(e.$numberDouble))}}]),n}();Object.defineProperty(Double.prototype,"_bsontype",{value:"Double"});var double_1=Double;function _typeof$1(e){return(_typeof$1="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}function _classCallCheck$1(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$1(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$1(e,t,n){return t&&_defineProperties$1(e.prototype,t),n&&_defineProperties$1(e,n),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof$1(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Timestamp=function(){function r(e,t){var n;return _classCallCheck$1(this,r),n=long_1.isLong(e)?_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e.low,e.high)):_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t)),_possibleConstructorReturn(n)}return _inherits(r,long_1),_createClass$1(r,[{key:"toJSON",value:function(){return{$timestamp:this.toString()}}},{key:"toExtendedJSON",value:function(){return{$timestamp:{t:this.high,i:this.low}}}}],[{key:"fromInt",value:function(e){return new r(long_1.fromInt(e))}},{key:"fromNumber",value:function(e){return new r(long_1.fromNumber(e))}},{key:"fromBits",value:function(e,t){return new r(e,t)}},{key:"fromString",value:function(e,t){return new r(long_1.fromString(e,t))}},{key:"fromExtendedJSON",value:function(e){return new r(e.$timestamp.i,e.$timestamp.t)}}]),r}();Object.defineProperty(Timestamp.prototype,"_bsontype",{value:"Timestamp"});var timestamp=Timestamp,empty={},empty$1=Object.freeze({default:empty}),require$$0=getCjsExportFromNamespace(empty$1);function normalizedFunctionString(e){return e.toString().replace("function(","function (")}function insecureRandomBytes(e){for(var t=new Uint8Array(e),n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}var randomBytes=insecureRandomBytes;if("undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)randomBytes=function(e){return window.crypto.getRandomValues(new Uint8Array(e))};else{try{randomBytes=require$$0.randomBytes}catch(e){}null==randomBytes&&(randomBytes=insecureRandomBytes)}var utils={normalizedFunctionString:normalizedFunctionString,randomBytes:randomBytes};global.setTimeout,global.clearTimeout;var performance=global.performance||{},performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return(new Date).getTime()},inherits;inherits="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;function n(){}n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e};var inherits$1=inherits;function _typeof$1$1(e){return(_typeof$1$1="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var formatRegExp=/%[sdj%]/g;function format(e){if(!isString(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(inspect(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(i<=n)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}}),s=r[n];n<i;s=r[++n])isNull(s)||!isObject(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global.process))return function(){return deprecate(e,t).apply(this,arguments)};var n=!1;return function(){return n||(console.error(t),n=!0),e.apply(this,arguments)}}var debugs={},debugEnviron;function debuglog(t){if(isUndefined(debugEnviron)&&(debugEnviron=""),t=t.toUpperCase(),!debugs[t])if(new RegExp("\\b"+t+"\\b","i").test(debugEnviron)){debugs[t]=function(){var e=format.apply(null,arguments);console.error("%s %d: %s",t,0,e)}}else debugs[t]=function(){};return debugs[t]}function inspect(e,t){var n={seen:[],stylize:stylizeNoColor};return 3<=arguments.length&&(n.depth=arguments[2]),4<=arguments.length&&(n.colors=arguments[3]),isBoolean(t)?n.showHidden=t:t&&_extend(n,t),isUndefined(n.showHidden)&&(n.showHidden=!1),isUndefined(n.depth)&&(n.depth=2),isUndefined(n.colors)&&(n.colors=!1),isUndefined(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=stylizeWithColor),formatValue(n,e,n.depth)}function stylizeWithColor(e,t){var n=inspect.styles[t];return n?"["+inspect.colors[n][0]+"m"+e+"["+inspect.colors[n][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var n={};return e.forEach(function(e,t){n[e]=!0}),n}function formatValue(t,n,r){if(t.customInspect&&n&&isFunction(n.inspect)&&n.inspect!==inspect&&(!n.constructor||n.constructor.prototype!==n)){var e=n.inspect(r,t);return isString(e)||(e=formatValue(t,e,r)),e}var i=formatPrimitive(t,n);if(i)return i;var o=Object.keys(n),s=arrayToHash(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(n)),isError(n)&&(0<=o.indexOf("message")||0<=o.indexOf("description")))return formatError(n);if(0===o.length){if(isFunction(n)){var a=n.name?": "+n.name:"";return t.stylize("[Function"+a+"]","special")}if(isRegExp(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(isDate(n))return t.stylize(Date.prototype.toString.call(n),"date");if(isError(n))return formatError(n)}var u,l="",c=!1,_=["{","}"];isArray(n)&&(c=!0,_=["[","]"]),isFunction(n)&&(l=" [Function"+(n.name?": "+n.name:"")+"]");return isRegExp(n)&&(l=" "+RegExp.prototype.toString.call(n)),isDate(n)&&(l=" "+Date.prototype.toUTCString.call(n)),isError(n)&&(l=" "+formatError(n)),0!==o.length||c&&0!=n.length?r<0?isRegExp(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),u=c?formatArray(t,n,r,s,o):o.map(function(e){return formatProperty(t,n,r,s,e,c)}),t.seen.pop(),reduceToSingleString(u,l,_)):_[0]+l+_[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(t,n,r,i,e){for(var o=[],s=0,a=n.length;s<a;++s)hasOwnProperty(n,String(s))?o.push(formatProperty(t,n,r,i,String(s),!0)):o.push("");return e.forEach(function(e){e.match(/^\d+$/)||o.push(formatProperty(t,n,r,i,e,!0))}),o}function formatProperty(e,t,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),hasOwnProperty(r,i)||(s="["+i+"]"),a||(e.seen.indexOf(u.value)<0?-1<(a=isNull(n)?formatValue(e,u.value,null):formatValue(e,u.value,n-1)).indexOf("\n")&&(a=o?a.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+a.split("\n").map(function(e){return"   "+e}).join("\n")):a=e.stylize("[Circular]","special")),isUndefined(s)){if(o&&i.match(/^\d+$/))return a;s=(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),e.stylize(s,"string"))}return s+": "+a}function reduceToSingleString(e,t,n){return 60<e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)?n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1]:n[0]+t+" "+e.join(", ")+" "+n[1]}function isArray(e){return Array.isArray(e)}function isBoolean(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isSymbol(e){return"symbol"===_typeof$1$1(e)}function isUndefined(e){return void 0===e}function isRegExp(e){return isObject(e)&&"[object RegExp]"===objectToString(e)}function isObject(e){return"object"===_typeof$1$1(e)&&null!==e}function isDate(e){return isObject(e)&&"[object Date]"===objectToString(e)}function isError(e){return isObject(e)&&("[object Error]"===objectToString(e)||e instanceof Error)}function isFunction(e){return"function"==typeof e}function isPrimitive(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===_typeof$1$1(e)||void 0===e}function isBuffer(e){return Buffer.isBuffer(e)}function objectToString(e){return Object.prototype.toString.call(e)}function pad(e){return e<10?"0"+e.toString(10):e.toString(10)}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var months=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function timestamp$1(){var e=new Date,t=[pad(e.getHours()),pad(e.getMinutes()),pad(e.getSeconds())].join(":");return[e.getDate(),months[e.getMonth()],t].join(" ")}function log(){console.log("%s - %s",timestamp$1(),format.apply(null,arguments))}function _extend(e,t){if(!t||!isObject(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function hasOwnProperty(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var util={inherits:inherits$1,_extend:_extend,log:log,isBuffer:isBuffer,isPrimitive:isPrimitive,isFunction:isFunction,isError:isError,isDate:isDate,isObject:isObject,isRegExp:isRegExp,isUndefined:isUndefined,isSymbol:isSymbol,isString:isString,isNumber:isNumber,isNullOrUndefined:isNullOrUndefined,isNull:isNull,isBoolean:isBoolean,isArray:isArray,inspect:inspect,deprecate:deprecate,format:format,debuglog:debuglog},util$1=Object.freeze({format:format,deprecate:deprecate,debuglog:debuglog,inspect:inspect,isArray:isArray,isBoolean:isBoolean,isNull:isNull,isNullOrUndefined:isNullOrUndefined,isNumber:isNumber,isString:isString,isSymbol:isSymbol,isUndefined:isUndefined,isRegExp:isRegExp,isObject:isObject,isDate:isDate,isError:isError,isFunction:isFunction,isPrimitive:isPrimitive,isBuffer:isBuffer,log:log,inherits:inherits$1,_extend:_extend,default:util}),util$2=getCjsExportFromNamespace(util$1);function _classCallCheck$2(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$2(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$2(e,t,n){return t&&_defineProperties$2(e.prototype,t),n&&_defineProperties$2(e,n),e}var Buffer$1=buffer.Buffer,randomBytes$1=utils.randomBytes,deprecate$1=util$2.deprecate,PROCESS_UNIQUE=randomBytes$1(5),checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$"),hasBufferType=!1;try{Buffer$1&&Buffer$1.from&&(hasBufferType=!0)}catch(e){hasBufferType=!1}for(var hexTable=[],_i=0;_i<256;_i++)hexTable[_i]=(_i<=15?"0":"")+_i.toString(16);for(var decodeLookup=[],i=0;i<10;)decodeLookup[48+i]=i++;for(;i<16;)decodeLookup[55+i]=decodeLookup[87+i]=i++;var _Buffer=Buffer$1;function convertToHex(e){return e.toString("hex")}function makeObjectIdError(e,t){var n=e[t];return new TypeError('ObjectId string "'.concat(e,'" contains invalid character "').concat(n,'" with character code (').concat(e.charCodeAt(t),"). All character codes for a non-hex string must be less than 256."))}var ObjectId=function(){function i(e){if(_classCallCheck$2(this,i),e instanceof i)return e;if(null==e||"number"==typeof e)return this.id=i.generate(e),void(i.cacheHexString&&(this.__id=this.toString("hex")));var t=i.isValid(e);if(!t&&null!=e)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(t&&"string"==typeof e&&24===e.length&&hasBufferType)return new i(Buffer$1.from(e,"hex"));if(t&&"string"==typeof e&&24===e.length)return i.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&e.toHexString)return i.createFromHexString(e.toHexString());throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,i.cacheHexString&&(this.__id=this.toString("hex"))}return _createClass$2(i,[{key:"toHexString",value:function(){if(i.cacheHexString&&this.__id)return this.__id;var e="";if(!this.id||!this.id.length)throw new TypeError("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof _Buffer)return e=convertToHex(this.id),i.cacheHexString&&(this.__id=e),e;for(var t=0;t<this.id.length;t++){var n=hexTable[this.id.charCodeAt(t)];if("string"!=typeof n)throw makeObjectIdError(this.id,t);e+=n}return i.cacheHexString&&(this.__id=e),e}},{key:"toString",value:function(e){return this.id&&this.id.copy?this.id.toString("string"==typeof e?e:"hex"):this.toHexString()}},{key:"toJSON",value:function(){return this.toHexString()}},{key:"equals",value:function(e){return e instanceof i?this.toString()===e.toString():"string"==typeof e&&i.isValid(e)&&12===e.length&&this.id instanceof _Buffer?e===this.id.toString("binary"):"string"==typeof e&&i.isValid(e)&&24===e.length?e.toLowerCase()===this.toHexString():"string"==typeof e&&i.isValid(e)&&12===e.length?e===this.id:!(null==e||!(e instanceof i||e.toHexString))&&e.toHexString()===this.toHexString()}},{key:"getTimestamp",value:function(){var e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}},{key:"toExtendedJSON",value:function(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}}],[{key:"getInc",value:function(){return i.index=(i.index+1)%16777215}},{key:"generate",value:function(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));var t=i.getInc(),n=Buffer$1.alloc(12);return n[3]=255&e,n[2]=e>>8&255,n[1]=e>>16&255,n[0]=e>>24&255,n[4]=PROCESS_UNIQUE[0],n[5]=PROCESS_UNIQUE[1],n[6]=PROCESS_UNIQUE[2],n[7]=PROCESS_UNIQUE[3],n[8]=PROCESS_UNIQUE[4],n[11]=255&t,n[10]=t>>8&255,n[9]=t>>16&255,n}},{key:"createPk",value:function(){return new i}},{key:"createFromTime",value:function(e){var t=Buffer$1.from([0,0,0,0,0,0,0,0,0,0,0,0]);return t[3]=255&e,t[2]=e>>8&255,t[1]=e>>16&255,t[0]=e>>24&255,new i(t)}},{key:"createFromHexString",value:function(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(hasBufferType)return new i(Buffer$1.from(e,"hex"));for(var t=new _Buffer(12),n=0,r=0;r<24;)t[n++]=decodeLookup[e.charCodeAt(r++)]<<4|decodeLookup[e.charCodeAt(r++)];return new i(t)}},{key:"isValid",value:function(e){return null!=e&&("number"==typeof e||("string"==typeof e?12===e.length||24===e.length&&checkForHexRegExp.test(e):e instanceof i||(e instanceof _Buffer&&12===e.length||!!e.toHexString&&(12===e.id.length||24===e.id.length&&checkForHexRegExp.test(e.id)))))}},{key:"fromExtendedJSON",value:function(e){return new i(e.$oid)}}]),i}();ObjectId.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.get_inc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.getInc=deprecate$1(function(){return ObjectId.getInc()},"Please use the static `ObjectId.getInc()` instead"),ObjectId.prototype.generate=deprecate$1(function(e){return ObjectId.generate(e)},"Please use the static `ObjectId.generate(time)` instead"),Object.defineProperty(ObjectId.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(e){this.id[3]=255&e,this.id[2]=e>>8&255,this.id[1]=e>>16&255,this.id[0]=e>>24&255}}),ObjectId.prototype[util$2.inspect.custom||"inspect"]=ObjectId.prototype.toString,ObjectId.index=~~(16777215*Math.random()),Object.defineProperty(ObjectId.prototype,"_bsontype",{value:"ObjectID"});var objectid=ObjectId;function _classCallCheck$3(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$3(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$3(e,t,n){return t&&_defineProperties$3(e.prototype,t),n&&_defineProperties$3(e,n),e}function alphabetize(e){return e.split("").sort().join("")}var BSONRegExp=function(){function r(e,t){_classCallCheck$3(this,r),this.pattern=e||"",this.options=t?alphabetize(t):"";for(var n=0;n<this.options.length;n++)if("i"!==this.options[n]&&"m"!==this.options[n]&&"x"!==this.options[n]&&"l"!==this.options[n]&&"s"!==this.options[n]&&"u"!==this.options[n])throw new Error("The regular expression option [".concat(this.options[n],"] is not supported"))}return _createClass$3(r,[{key:"toExtendedJSON",value:function(){return{$regularExpression:{pattern:this.pattern,options:this.options}}}}],[{key:"fromExtendedJSON",value:function(e){return new r(e.$regularExpression.pattern,e.$regularExpression.options.split("").sort().join(""))}}]),r}();Object.defineProperty(BSONRegExp.prototype,"_bsontype",{value:"BSONRegExp"});var regexp=BSONRegExp;function _classCallCheck$4(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$4(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$4(e,t,n){return t&&_defineProperties$4(e.prototype,t),n&&_defineProperties$4(e,n),e}var BSONSymbol=function(){function t(e){_classCallCheck$4(this,t),this.value=e}return _createClass$4(t,[{key:"valueOf",value:function(){return this.value}},{key:"toString",value:function(){return this.value}},{key:"inspect",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(){return{$symbol:this.value}}}],[{key:"fromExtendedJSON",value:function(e){return new t(e.$symbol)}}]),t}();Object.defineProperty(BSONSymbol.prototype,"_bsontype",{value:"Symbol"});var symbol=BSONSymbol;function _classCallCheck$5(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$5(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$5(e,t,n){return t&&_defineProperties$5(e.prototype,t),n&&_defineProperties$5(e,n),e}var Int32=function(){function n(e){_classCallCheck$5(this,n),this.value=e}return _createClass$5(n,[{key:"valueOf",value:function(){return this.value}},{key:"toJSON",value:function(){return this.value}},{key:"toExtendedJSON",value:function(e){return e&&e.relaxed?this.value:{$numberInt:this.value.toString()}}}],[{key:"fromExtendedJSON",value:function(e,t){return t&&t.relaxed?parseInt(e.$numberInt,10):new n(e.$numberInt)}}]),n}();Object.defineProperty(Int32.prototype,"_bsontype",{value:"Int32"});var int_32=Int32;function _classCallCheck$6(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$6(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$6(e,t,n){return t&&_defineProperties$6(e.prototype,t),n&&_defineProperties$6(e,n),e}var Code=function(){function n(e,t){_classCallCheck$6(this,n),this.code=e,this.scope=t}return _createClass$6(n,[{key:"toJSON",value:function(){return{scope:this.scope,code:this.code}}},{key:"toExtendedJSON",value:function(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}}],[{key:"fromExtendedJSON",value:function(e){return new n(e.$code,e.$scope)}}]),n}();Object.defineProperty(Code.prototype,"_bsontype",{value:"Code"});var code=Code,Buffer$2=buffer.Buffer,PARSE_STRING_REGEXP=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,PARSE_INF_REGEXP=/^(\+|-)?(Infinity|inf)$/i,PARSE_NAN_REGEXP=/^(\+|-)?NaN$/i,EXPONENT_MAX=6111,EXPONENT_MIN=-6176,EXPONENT_BIAS=6176,MAX_DIGITS=34,NAN_BUFFER=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_NEGATIVE_BUFFER=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),INF_POSITIVE_BUFFER=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),EXPONENT_REGEX=/^([-+])?(\d+)?$/;function isDigit(e){return!isNaN(parseInt(e,10))}function divideu128(e){var t=long_1.fromNumber(1e9),n=long_1.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(var r=0;r<=3;r++)n=(n=n.shiftLeft(32)).add(new long_1(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function multiply64x2(e,t){if(!e&&!t)return{high:long_1.fromNumber(0),low:long_1.fromNumber(0)};var n=e.shiftRightUnsigned(32),r=new long_1(e.getLowBits(),0),i=t.shiftRightUnsigned(32),o=new long_1(t.getLowBits(),0),s=n.multiply(i),a=n.multiply(o),u=r.multiply(i),l=r.multiply(o);return s=s.add(a.shiftRightUnsigned(32)),a=new long_1(a.getLowBits(),0).add(u).add(l.shiftRightUnsigned(32)),{high:s=s.add(a.shiftRightUnsigned(32)),low:l=a.shiftLeft(32).add(new long_1(l.getLowBits(),0))}}function lessThan(e,t){var n=e.high>>>0,r=t.high>>>0;return n<r||n==r&&e.low>>>0<t.low>>>0}function invalidErr(e,t){throw new TypeError('"'.concat(e,'" is not a valid Decimal128 string - ').concat(t))}function Decimal128(e){this.bytes=e}Decimal128.fromString=function(e){var t,n=!1,r=!1,i=!1,o=0,s=0,a=0,u=0,l=0,c=[0],_=0,f=0,h=0,E=0,p=0,y=0,g=[0,0],A=[0,0],S=0;if(7e3<=e.length)throw new TypeError(e+" not a valid Decimal128 string");var d=e.match(PARSE_STRING_REGEXP),T=e.match(PARSE_INF_REGEXP),P=e.match(PARSE_NAN_REGEXP);if(!d&&!T&&!P||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(d){var v=d[2],I=d[4],m=d[5],O=d[6];I&&void 0===O&&invalidErr(e,"missing exponent power"),I&&void 0===v&&invalidErr(e,"missing exponent base"),void 0===I&&(m||O)&&invalidErr(e,"missing e before exponent")}if("+"!==e[S]&&"-"!==e[S]||(n="-"===e[S++]),!isDigit(e[S])&&"."!==e[S]){if("i"===e[S]||"I"===e[S])return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));if("N"===e[S])return new Decimal128(Buffer$2.from(NAN_BUFFER))}for(;isDigit(e[S])||"."===e[S];)"."!==e[S]?(_<34&&("0"===e[S]&&!i||(i||(l=s),i=!0,c[f++]=parseInt(e[S],10),_+=1)),i&&(a+=1),r&&(u+=1),s+=1):(r&&invalidErr(e,"contains multiple periods"),r=!0),S+=1;if(r&&!s)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[S]||"E"===e[S]){var C=e.substr(++S).match(EXPONENT_REGEX);if(!C||!C[2])return new Decimal128(Buffer$2.from(NAN_BUFFER));p=parseInt(C[0],10),S+=C[0].length}if(e[S])return new Decimal128(Buffer$2.from(NAN_BUFFER));if(h=0,_){if(E=_-1,1!==(o=a))for(;"0"===e[l+o-1];)o-=1}else _=a=1,o=c[E=h=0]=0;for(p<=u&&16384<u-p?p=EXPONENT_MIN:p-=u;EXPONENT_MAX<p;){if(MAX_DIGITS<(E+=1)-h){if(c.join("").match(/^0+$/)){p=EXPONENT_MAX;break}invalidErr(e,"overflow")}p-=1}for(;p<EXPONENT_MIN||_<a;){if(0===E&&o<_){p=EXPONENT_MIN,o=0;break}if(_<a?a-=1:E-=1,p<EXPONENT_MAX)p+=1;else{if(c.join("").match(/^0+$/)){p=EXPONENT_MAX;break}invalidErr(e,"overflow")}}if(E-h+1<o){var R=s;r&&(l+=1,R+=1),n&&(l+=1,R+=1);var N=parseInt(e[l+E+1],10),b=0;if(5<=N&&(b=1,5===N))for(b=c[E]%2==1,y=l+E+2;y<R;y++)if(parseInt(e[y],10)){b=1;break}if(b)for(var k=E;0<=k;k--)if(9<++c[k]&&(c[k]=0)===k){if(!(p<EXPONENT_MAX))return new Decimal128(Buffer$2.from(n?INF_NEGATIVE_BUFFER:INF_POSITIVE_BUFFER));p+=1,c[k]=1}}if(g=long_1.fromNumber(0),A=long_1.fromNumber(0),0===o)g=long_1.fromNumber(0),A=long_1.fromNumber(0);else if(E-h<17){var M=h;for(A=long_1.fromNumber(c[M++]),g=new long_1(0,0);M<=E;M++)A=(A=A.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[M]))}else{var D=h;for(g=long_1.fromNumber(c[D++]);D<=E-17;D++)g=(g=g.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[D]));for(A=long_1.fromNumber(c[D++]);D<=E;D++)A=(A=A.multiply(long_1.fromNumber(10))).add(long_1.fromNumber(c[D]))}var B=multiply64x2(g,long_1.fromString("100000000000000000"));B.low=B.low.add(A),lessThan(B.low,A)&&(B.high=B.high.add(long_1.fromNumber(1))),t=p+EXPONENT_BIAS;var L={low:long_1.fromNumber(0),high:long_1.fromNumber(0)};B.high.shiftRightUnsigned(49).and(long_1.fromNumber(1)).equals(long_1.fromNumber(1))?(L.high=L.high.or(long_1.fromNumber(3).shiftLeft(61)),L.high=L.high.or(long_1.fromNumber(t).and(long_1.fromNumber(16383).shiftLeft(47))),L.high=L.high.or(B.high.and(long_1.fromNumber(0x7fffffffffff)))):(L.high=L.high.or(long_1.fromNumber(16383&t).shiftLeft(49)),L.high=L.high.or(B.high.and(long_1.fromNumber(562949953421311)))),L.low=B.low,n&&(L.high=L.high.or(long_1.fromString("9223372036854775808")));var w=Buffer$2.alloc(16);return S=0,w[S++]=255&L.low.low,w[S++]=L.low.low>>8&255,w[S++]=L.low.low>>16&255,w[S++]=L.low.low>>24&255,w[S++]=255&L.low.high,w[S++]=L.low.high>>8&255,w[S++]=L.low.high>>16&255,w[S++]=L.low.high>>24&255,w[S++]=255&L.high.low,w[S++]=L.high.low>>8&255,w[S++]=L.high.low>>16&255,w[S++]=L.high.low>>24&255,w[S++]=255&L.high.high,w[S++]=L.high.high>>8&255,w[S++]=L.high.high>>16&255,w[S++]=L.high.high>>24&255,new Decimal128(w)};var COMBINATION_MASK=31,EXPONENT_MASK=16383,COMBINATION_INFINITY=30,COMBINATION_NAN=31;Decimal128.prototype.toString=function(){for(var e,t,n,r,i,o,s=0,a=new Array(36),u=0;u<a.length;u++)a[u]=0;var l,c,_,f,h,E=0,p=!1,y={parts:new Array(4)},g=[];E=0;var A=this.bytes;if(r=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,n=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,t=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,e=A[E++]|A[E++]<<8|A[E++]<<16|A[E++]<<24,E=0,{low:new long_1(r,n),high:new long_1(t,e)}.high.lessThan(long_1.ZERO)&&g.push("-"),(i=e>>26&COMBINATION_MASK)>>3==3){if(i===COMBINATION_INFINITY)return g.join("")+"Infinity";if(i===COMBINATION_NAN)return"NaN";o=e>>15&EXPONENT_MASK,_=8+(e>>14&1)}else _=e>>14&7,o=e>>17&EXPONENT_MASK;if(l=o-EXPONENT_BIAS,y.parts[0]=(16383&e)+((15&_)<<14),y.parts[1]=t,y.parts[2]=n,y.parts[3]=r,0===y.parts[0]&&0===y.parts[1]&&0===y.parts[2]&&0===y.parts[3])p=!0;else for(h=3;0<=h;h--){var S=0,d=divideu128(y);if(y=d.quotient,S=d.rem.low)for(f=8;0<=f;f--)a[9*h+f]=S%10,S=Math.floor(S/10)}if(p)s=1,a[E]=0;else for(s=36;!a[E];)s-=1,E+=1;if(34<=(c=s-1+l)||c<=-7||0<l){if(34<s)return g.push(0),0<l?g.push("E+"+l):l<0&&g.push("E"+l),g.join("");g.push(a[E++]),(s-=1)&&g.push(".");for(var T=0;T<s;T++)g.push(a[E++]);g.push("E"),0<c?g.push("+"+c):g.push(c)}else if(0<=l)for(var P=0;P<s;P++)g.push(a[E++]);else{var v=s+l;if(0<v)for(var I=0;I<v;I++)g.push(a[E++]);else g.push("0");for(g.push(".");v++<0;)g.push("0");for(var m=0;m<s-Math.max(v-1,0);m++)g.push(a[E++])}return g.join("")},Decimal128.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.prototype.toExtendedJSON=function(){return{$numberDecimal:this.toString()}},Decimal128.fromExtendedJSON=function(e){return Decimal128.fromString(e.$numberDecimal)},Object.defineProperty(Decimal128.prototype,"_bsontype",{value:"Decimal128"});var decimal128=Decimal128;function _classCallCheck$7(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$7(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$7(e,t,n){return t&&_defineProperties$7(e.prototype,t),n&&_defineProperties$7(e,n),e}var MinKey=function(){function e(){_classCallCheck$7(this,e)}return _createClass$7(e,[{key:"toExtendedJSON",value:function(){return{$minKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MinKey.prototype,"_bsontype",{value:"MinKey"});var min_key=MinKey;function _classCallCheck$8(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$8(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$8(e,t,n){return t&&_defineProperties$8(e.prototype,t),n&&_defineProperties$8(e,n),e}var MaxKey=function(){function e(){_classCallCheck$8(this,e)}return _createClass$8(e,[{key:"toExtendedJSON",value:function(){return{$maxKey:1}}}],[{key:"fromExtendedJSON",value:function(){return new e}}]),e}();Object.defineProperty(MaxKey.prototype,"_bsontype",{value:"MaxKey"});var max_key=MaxKey;function _classCallCheck$9(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$9(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$9(e,t,n){return t&&_defineProperties$9(e.prototype,t),n&&_defineProperties$9(e,n),e}var DBRef=function(){function o(e,t,n,r){_classCallCheck$9(this,o);var i=e.split(".");2===i.length&&(n=i.shift(),e=i.shift()),this.collection=e,this.oid=t,this.db=n,this.fields=r||{}}return _createClass$9(o,[{key:"toJSON",value:function(){var e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}},{key:"toExtendedJSON",value:function(){var e={$ref:this.collection,$id:this.oid};return this.db&&(e.$db=this.db),e=Object.assign(e,this.fields)}}],[{key:"fromExtendedJSON",value:function(e){var t=Object.assign({},e);return["$ref","$id","$db"].forEach(function(e){return delete t[e]}),new o(e.$ref,e.$id,e.$db,t)}}]),o}();Object.defineProperty(DBRef.prototype,"_bsontype",{value:"DBRef"}),Object.defineProperty(DBRef.prototype,"namespace",{get:function(){return this.collection},set:function(e){this.collection=e},configurable:!1});var db_ref=DBRef;function _classCallCheck$a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties$a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass$a(e,t,n){return t&&_defineProperties$a(e.prototype,t),n&&_defineProperties$a(e,n),e}var Buffer$3=buffer.Buffer,Binary=function(){function o(e,t){if(_classCallCheck$a(this,o),!(null==e||"string"==typeof e||Buffer$3.isBuffer(e)||e instanceof Uint8Array||Array.isArray(e)))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");if(this.sub_type=null==t?BSON_BINARY_SUBTYPE_DEFAULT:t,this.position=0,null==e||e instanceof Number)void 0!==Buffer$3?this.buffer=Buffer$3.alloc(o.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(o.BUFFER_SIZE)):this.buffer=new Array(o.BUFFER_SIZE);else{if("string"==typeof e)if(void 0!==Buffer$3)this.buffer=Buffer$3.from(e);else{if("undefined"==typeof Uint8Array&&!Array.isArray(e))throw new TypeError("only String, Buffer, Uint8Array or Array accepted");this.buffer=writeStringToArray(e)}else this.buffer=e;this.position=e.length}}return _createClass$a(o,[{key:"put",value:function(e){if(null!=e.length&&"number"!=typeof e&&1!==e.length)throw new TypeError("only accepts single character String, Uint8Array or Array");if("number"!=typeof e&&e<0||255<e)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");var t=null;if(t="string"==typeof e?e.charCodeAt(0):null!=e.length?e[0]:e,this.buffer.length>this.position)this.buffer[this.position++]=t;else if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)){var n=Buffer$3.alloc(o.BUFFER_SIZE+this.buffer.length);this.buffer.copy(n,0,0,this.buffer.length),this.buffer=n,this.buffer[this.position++]=t}else{var r=null;r=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(o.BUFFER_SIZE+this.buffer.length)):new Array(o.BUFFER_SIZE+this.buffer.length);for(var i=0;i<this.buffer.length;i++)r[i]=this.buffer[i];this.buffer=r,this.buffer[this.position++]=t}}},{key:"write",value:function(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){var n=null;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))n=Buffer$3.alloc(this.buffer.length+e.length),this.buffer.copy(n,0,0,this.buffer.length);else if(isUint8Array(this.buffer)){n=new Uint8Array(new ArrayBuffer(this.buffer.length+e.length));for(var r=0;r<this.position;r++)n[r]=this.buffer[r]}this.buffer=n}if(void 0!==Buffer$3&&Buffer$3.isBuffer(e)&&Buffer$3.isBuffer(this.buffer))e.copy(this.buffer,t,0,e.length),this.position=t+e.length>this.position?t+e.length:this.position;else if(void 0!==Buffer$3&&"string"==typeof e&&Buffer$3.isBuffer(this.buffer))this.buffer.write(e,t,"binary"),this.position=t+e.length>this.position?t+e.length:this.position;else if(isUint8Array(e)||Array.isArray(e)&&"string"!=typeof e){for(var i=0;i<e.length;i++)this.buffer[t++]=e[i];this.position=t>this.position?t:this.position}else if("string"==typeof e){for(var o=0;o<e.length;o++)this.buffer[t++]=e.charCodeAt(o);this.position=t>this.position?t:this.position}}},{key:"read",value:function(e,t){if(t=t&&0<t?t:this.position,this.buffer.slice)return this.buffer.slice(e,e+t);for(var n="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t)):new Array(t),r=0;r<t;r++)n[r]=this.buffer[e++];return n}},{key:"value",value:function(e){if((e=null!=e&&e)&&void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==Buffer$3&&Buffer$3.isBuffer(this.buffer))return e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(e){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var t=isUint8Array(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),n=0;n<this.position;n++)t[n]=this.buffer[n];return t}return convertArraytoUtf8BinaryString(this.buffer,0,this.position)}},{key:"length",value:function(){return this.position}},{key:"toJSON",value:function(){return null!=this.buffer?this.buffer.toString("base64"):""}},{key:"toString",value:function(e){return null!=this.buffer?this.buffer.slice(0,this.position).toString(e):""}},{key:"toExtendedJSON",value:function(){var e=Buffer$3.isBuffer(this.buffer)?this.buffer.toString("base64"):Buffer$3.from(this.buffer).toString("base64"),t=Number(this.sub_type).toString(16);return{$binary:{base64:e,subType:1===t.length?"0"+t:t}}}}],[{key:"fromExtendedJSON",value:function(e){var t=e.$binary.subType?parseInt(e.$binary.subType,16):0;return new o(Buffer$3.from(e.$binary.base64,"base64"),t)}}]),o}(),BSON_BINARY_SUBTYPE_DEFAULT=0;function isUint8Array(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)}function writeStringToArray(e){for(var t="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e.length)):new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function convertArraytoUtf8BinaryString(e,t,n){for(var r="",i=t;i<n;i++)r+=String.fromCharCode(e[i]);return r}Binary.BUFFER_SIZE=256,Binary.SUBTYPE_DEFAULT=0,Binary.SUBTYPE_FUNCTION=1,Binary.SUBTYPE_BYTE_ARRAY=2,Binary.SUBTYPE_UUID_OLD=3,Binary.SUBTYPE_UUID=4,Binary.SUBTYPE_MD5=5,Binary.SUBTYPE_USER_DEFINED=128,Object.defineProperty(Binary.prototype,"_bsontype",{value:"Binary"});var binary=Binary,constants={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,BSON_INT64_MAX:Math.pow(2,63)-1,BSON_INT64_MIN:-Math.pow(2,63),JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992,BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_DBPOINTER:12,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128};function _typeof$2(e){return(_typeof$2="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var keysToCodecs={$oid:objectid,$binary:binary,$symbol:symbol,$numberInt:int_32,$numberDecimal:decimal128,$numberDouble:double_1,$numberLong:long_1,$minKey:min_key,$maxKey:max_key,$regularExpression:regexp,$timestamp:timestamp};function deserializeValue(e,t,n,r){if("number"==typeof n){if(r.relaxed)return n;if(Math.floor(n)===n){if(BSON_INT32_MIN<=n&&n<=BSON_INT32_MAX)return new int_32(n);if(BSON_INT64_MIN<=n&&n<=BSON_INT64_MAX)return new long_1.fromNumber(n)}return new double_1(n)}if(null==n||"object"!==_typeof$2(n))return n;if(n.$undefined)return null;for(var i=Object.keys(n).filter(function(e){return e.startsWith("$")&&null!=n[e]}),o=0;o<i.length;o++){var s=keysToCodecs[i[o]];if(s)return s.fromExtendedJSON(n,r)}if(null!=n.$date){var a=n.$date,u=new Date;return"string"==typeof a?u.setTime(Date.parse(a)):long_1.isLong(a)?u.setTime(a.toNumber()):"number"==typeof a&&r.relaxed&&u.setTime(a),u}if(null!=n.$code){var l=Object.assign({},n);return n.$scope&&(l.$scope=deserializeValue(e,null,n.$scope)),code.fromExtendedJSON(n)}if(null!=n.$ref||null!=n.$dbPointer){var c=n.$ref?n:n.$dbPointer;if(c instanceof db_ref)return c;var _=Object.keys(c).filter(function(e){return e.startsWith("$")}),f=!0;if(_.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(f=!1)}),f)return db_ref.fromExtendedJSON(c)}return n}function parse(e,n){var r=this;return"boolean"==typeof(n=Object.assign({},{relaxed:!0},n)).relaxed&&(n.strict=!n.relaxed),"boolean"==typeof n.strict&&(n.relaxed=!n.strict),JSON.parse(e,function(e,t){return deserializeValue(r,e,t,n)})}var BSON_INT32_MAX=2147483647,BSON_INT32_MIN=-2147483648,BSON_INT64_MAX=0x8000000000000000,BSON_INT64_MIN=-0x8000000000000000;function stringify(e,t,n,r){null!=n&&"object"===_typeof$2(n)&&(r=n,n=0),null==t||"object"!==_typeof$2(t)||Array.isArray(t)||(r=t,t=null,n=0),r=Object.assign({},{relaxed:!0},r);var i=Array.isArray(e)?serializeArray(e,r):serializeDocument(e,r);return JSON.stringify(i,t,n)}function serialize(e,t){return t=t||{},JSON.parse(stringify(e,t))}function deserialize(e,t){return t=t||{},parse(JSON.stringify(e),t)}function serializeArray(e,t){return e.map(function(e){return serializeValue(e,t)})}function getISOString(e){var t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function serializeValue(e,t){if(Array.isArray(e))return serializeArray(e,t);if(void 0===e)return null;if(e instanceof Date){var n=e.getTime(),r=-1<n&&n<2534023188e5;return t.relaxed&&r?{$date:getISOString(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){var i=BSON_INT64_MIN<=e&&e<=BSON_INT64_MAX;if(BSON_INT32_MIN<=e&&e<=BSON_INT32_MAX)return{$numberInt:e.toString()};if(i)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){var o=e.flags;return void 0===o&&(o=e.toString().match(/[gimuy]*$/)[0]),new regexp(e.source,o).toExtendedJSON()}return null!=e&&"object"===_typeof$2(e)?serializeDocument(e,t):e}var BSON_TYPE_MAPPINGS={Binary:function(e){return new binary(e.value(),e.subtype)},Code:function(e){return new code(e.code,e.scope)},DBRef:function(e){return new db_ref(e.collection||e.namespace,e.oid,e.db,e.fields)},Decimal128:function(e){return new decimal128(e.bytes)},Double:function(e){return new double_1(e.value)},Int32:function(e){return new int_32(e.value)},Long:function(e){return long_1.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_)},MaxKey:function(){return new max_key},MinKey:function(){return new min_key},ObjectID:function(e){return new objectid(e)},ObjectId:function(e){return new objectid(e)},BSONRegExp:function(e){return new regexp(e.pattern,e.options)},Symbol:function(e){return new symbol(e.value)},Timestamp:function(e){return timestamp.fromBits(e.low,e.high)}};function serializeDocument(e,t){if(null==e||"object"!==_typeof$2(e))throw new Error("not an object instance");var n=e._bsontype;if(void 0===n){var r={};for(var i in e)r[i]=serializeValue(e[i],t);return r}if("string"!=typeof n)throw new Error("_bsontype must be a string, but was: "+_typeof$2(n));var o=e;if("function"!=typeof o.toExtendedJSON){var s=BSON_TYPE_MAPPINGS[n];if(!s)throw new TypeError("Unrecognized or invalid _bsontype: "+n);o=s(o)}return"Code"===n&&o.scope?o=new code(o.code,serializeValue(o.scope,t)):"DBRef"===n&&o.oid&&(o=new db_ref(o.collection,serializeValue(o.oid,t),o.db,o.fields)),o.toExtendedJSON(t)}var extended_json={parse:parse,deserialize:deserialize,serialize:serialize,stringify:stringify},FIRST_BIT=128,FIRST_TWO_BITS=192,FIRST_THREE_BITS=224,FIRST_FOUR_BITS=240,FIRST_FIVE_BITS=248,TWO_BIT_CHAR=192,THREE_BIT_CHAR=224,FOUR_BIT_CHAR=240,CONTINUING_CHAR=128;function validateUtf8(e,t,n){for(var r=0,i=t;i<n;i+=1){var o=e[i];if(r){if((o&FIRST_TWO_BITS)!==CONTINUING_CHAR)return!1;r-=1}else if(o&FIRST_BIT)if((o&FIRST_THREE_BITS)===TWO_BIT_CHAR)r=1;else if((o&FIRST_FOUR_BITS)===THREE_BIT_CHAR)r=2;else{if((o&FIRST_FIVE_BITS)!==FOUR_BIT_CHAR)return!1;r=3}}return!r}var validateUtf8_1=validateUtf8,validate_utf8={validateUtf8:validateUtf8_1},Buffer$4=buffer.Buffer,validateUtf8$1=validate_utf8.validateUtf8,JS_INT_MAX_LONG=long_1.fromNumber(constants.JS_INT_MAX),JS_INT_MIN_LONG=long_1.fromNumber(constants.JS_INT_MIN),functionCache={};function deserialize$1(e,t,n){var r=(t=null==t?{}:t)&&t.index?t.index:0,i=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(i<5)throw new Error("bson size must be >= 5, is ".concat(i));if(t.allowObjectSmallerThanBufferSize&&e.length<i)throw new Error("buffer length ".concat(e.length," must be >= bson size ").concat(i));if(!t.allowObjectSmallerThanBufferSize&&e.length!==i)throw new Error("buffer length ".concat(e.length," must === bson size ").concat(i));if(i+r>e.length)throw new Error("(bson size ".concat(i," + options.index ").concat(r," must be <= buffer length ").concat(Buffer$4.byteLength(e),")"));if(0!==e[r+i-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(e,r,t,n)}function deserializeObject(e,t,n,r){var i=null!=n.evalFunctions&&n.evalFunctions,o=null!=n.cacheFunctions&&n.cacheFunctions,s=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!s)var a=null;var u=null==n.fieldsAsRaw?null:n.fieldsAsRaw,l=null!=n.raw&&n.raw,c="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,_=null!=n.promoteBuffers&&n.promoteBuffers,f=null==n.promoteLongs||n.promoteLongs,h=null==n.promoteValues||n.promoteValues,E=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var p=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(p<5||p>e.length)throw new Error("corrupt bson message");for(var y=r?[]:{},g=0;;){var A=e[t++];if(0===A)break;for(var S=t;0!==e[S]&&S<e.length;)S++;if(S>=Buffer$4.byteLength(e))throw new Error("Bad BSON Document: illegal CString");var d=r?g++:e.toString("utf8",t,S);if(t=S+1,A===constants.BSON_DATA_STRING){var T=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(T<=0||T>e.length-t||0!==e[t+T-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+T-1))throw new Error("Invalid UTF-8 string in BSON document");var P=e.toString("utf8",t,t+T-1);y[d]=P,t+=T}else if(A===constants.BSON_DATA_OID){var v=Buffer$4.alloc(12);e.copy(v,0,t,t+12),y[d]=new objectid(v),t+=12}else if(A===constants.BSON_DATA_INT&&!1===h)y[d]=new int_32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(A===constants.BSON_DATA_INT)y[d]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(A===constants.BSON_DATA_NUMBER&&!1===h)y[d]=new double_1(e.readDoubleLE(t)),t+=8;else if(A===constants.BSON_DATA_NUMBER)y[d]=e.readDoubleLE(t),t+=8;else if(A===constants.BSON_DATA_DATE){var I=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,m=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;y[d]=new Date(new long_1(I,m).toNumber())}else if(A===constants.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");y[d]=1===e[t++]}else if(A===constants.BSON_DATA_OBJECT){var O=t,C=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(C<=0||C>e.length-t)throw new Error("bad embedded document length in bson");y[d]=l?e.slice(t,t+C):deserializeObject(e,O,n,!1),t+=C}else if(A===constants.BSON_DATA_ARRAY){var R=t,N=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,b=n,k=t+N;if(u&&u[d]){for(var M in b={},n)b[M]=n[M];b.raw=!0}if(y[d]=deserializeObject(e,R,b,!0),0!==e[(t+=N)-1])throw new Error("invalid array terminator byte");if(t!==k)throw new Error("corrupted array bson")}else if(A===constants.BSON_DATA_UNDEFINED)y[d]=void 0;else if(A===constants.BSON_DATA_NULL)y[d]=null;else if(A===constants.BSON_DATA_LONG){var D=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,B=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,L=new long_1(D,B);y[d]=f&&!0===h&&L.lessThanOrEqual(JS_INT_MAX_LONG)&&L.greaterThanOrEqual(JS_INT_MIN_LONG)?L.toNumber():L}else if(A===constants.BSON_DATA_DECIMAL128){var w=Buffer$4.alloc(16);e.copy(w,0,t,t+16),t+=16;var F=new decimal128(w);y[d]=F.toObject?F.toObject():F}else if(A===constants.BSON_DATA_BINARY){var Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,U=Y,K=e[t++];if(Y<0)throw new Error("Negative binary type element size found");if(Y>Buffer$4.byteLength(e))throw new Error("Binary type size larger than document size");if(null!=e.slice){if(K===binary.SUBTYPE_BYTE_ARRAY){if((Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U-4<Y)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(Y<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}y[d]=_&&h?e.slice(t,t+Y):new binary(e.slice(t,t+Y),K)}else{var V="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(Y)):new Array(Y);if(K===binary.SUBTYPE_BYTE_ARRAY){if((Y=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(U-4<Y)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(Y<U-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(S=0;S<Y;S++)V[S]=e[t+S];y[d]=_&&h?V:new binary(V,K)}t+=Y}else if(A===constants.BSON_DATA_REGEXP&&!1===c){for(S=t;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var H=e.toString("utf8",t,S);for(S=t=S+1;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var x=e.toString("utf8",t,S);t=S+1;var G=new Array(x.length);for(S=0;S<x.length;S++)switch(x[S]){case"m":G[S]="m";break;case"s":G[S]="g";break;case"i":G[S]="i"}y[d]=new RegExp(H,G.join(""))}else if(A===constants.BSON_DATA_REGEXP&&!0===c){for(S=t;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var j=e.toString("utf8",t,S);for(S=t=S+1;0!==e[S]&&S<e.length;)S++;if(S>=e.length)throw new Error("Bad BSON Document: illegal CString");var $=e.toString("utf8",t,S);t=S+1,y[d]=new regexp(j,$)}else if(A===constants.BSON_DATA_SYMBOL){var z=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(z<=0||z>e.length-t||0!==e[t+z-1])throw new Error("bad string length in bson");y[d]=e.toString("utf8",t,t+z-1),t+=z}else if(A===constants.BSON_DATA_TIMESTAMP){var W=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,X=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;y[d]=new timestamp(W,X)}else if(A===constants.BSON_DATA_MIN_KEY)y[d]=new min_key;else if(A===constants.BSON_DATA_MAX_KEY)y[d]=new max_key;else if(A===constants.BSON_DATA_CODE){var J=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(J<=0||J>e.length-t||0!==e[t+J-1])throw new Error("bad string length in bson");var Z=e.toString("utf8",t,t+J-1);if(i)if(o){var q=s?a(Z):Z;y[d]=isolateEvalWithHash(functionCache,q,Z,y)}else y[d]=isolateEval(Z);else y[d]=new code(Z);t+=J}else if(A===constants.BSON_DATA_CODE_W_SCOPE){var Q=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(Q<13)throw new Error("code_w_scope total size shorter minimum expected length");var ee=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(ee<=0||ee>e.length-t||0!==e[t+ee-1])throw new Error("bad string length in bson");var te=e.toString("utf8",t,t+ee-1),ne=t+=ee,re=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,ie=deserializeObject(e,ne,n,!1);if(t+=re,Q<8+re+ee)throw new Error("code_w_scope total size is to short, truncating scope");if(8+re+ee<Q)throw new Error("code_w_scope total size is to long, clips outer document");if(i){if(o){var oe=s?a(te):te;y[d]=isolateEvalWithHash(functionCache,oe,te,y)}else y[d]=isolateEval(te);y[d].scope=ie}else y[d]=new code(te,ie)}else{if(A!==constants.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+A.toString(16)+' for fieldname "'+d+'", are you using the latest BSON parser?');var se=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(se<=0||se>e.length-t||0!==e[t+se-1])throw new Error("bad string length in bson");if(!validateUtf8$1(e,t,t+se-1))throw new Error("Invalid UTF-8 string in BSON document");var ae=e.toString("utf8",t,t+se-1);t+=se;var ue=Buffer$4.alloc(12);e.copy(ue,0,t,t+12);var le=new objectid(ue);t+=12,y[d]=new db_ref(ae,le)}}if(p!=t-E){if(r)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}var ce=Object.keys(y).filter(function(e){return e.startsWith("$")}),_e=!0;if(ce.forEach(function(e){-1===["$ref","$id","$db"].indexOf(e)&&(_e=!1)}),!_e)return y;if(null==y.$id||null==y.$ref)return y;var fe=Object.assign({},y);return delete fe.$ref,delete fe.$id,delete fe.$db,new db_ref(y.$ref,y.$id,y.$db||null,fe)}function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)}function isolateEval(functionString){var value=null;return eval("value = "+functionString),value}var deserializer=deserialize$1;function readIEEE754(e,t,n,r,i){var o,s,a="big"===n,u=8*i-r-1,l=(1<<u)-1,c=l>>1,_=-7,f=a?0:i-1,h=a?1:-1,E=e[t+f];for(f+=h,o=E&(1<<-_)-1,E>>=-_,_+=u;0<_;o=256*o+e[t+f],f+=h,_-=8);for(s=o&(1<<-_)-1,o>>=-_,_+=r;0<_;s=256*s+e[t+f],f+=h,_-=8);if(0===o)o=1-c;else{if(o===l)return s?NaN:1/0*(E?-1:1);s+=Math.pow(2,r),o-=c}return(E?-1:1)*s*Math.pow(2,o-r)}function writeIEEE754(e,t,n,r,i,o){var s,a,u,l="big"===r,c=8*o-i-1,_=(1<<c)-1,f=_>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,E=l?o-1:0,p=l?-1:1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=_):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+f?h/u:h*Math.pow(2,1-f))*u&&(s++,u/=2),_<=s+f?(a=0,s=_):1<=s+f?(a=(t*u-1)*Math.pow(2,i),s+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,i),s=0)),isNaN(t)&&(a=0);8<=i;)e[n+E]=255&a,E+=p,a/=256,i-=8;for(s=s<<i|a,isNaN(t)&&(s+=8),c+=i;0<c;)e[n+E]=255&s,E+=p,s/=256,c-=8;e[n+E-p]|=128*y}var float_parser={readIEEE754:readIEEE754,writeIEEE754:writeIEEE754};function _typeof$3(e){return(_typeof$3="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var Buffer$5=buffer.Buffer,writeIEEE754$1=float_parser.writeIEEE754,normalizedFunctionString$1=utils.normalizedFunctionString,regexp$1=/\x00/,ignoreKeys=new Set(["$db","$ref","$id","$clusterTime"]),isDate$1=function(e){return"object"===_typeof$3(e)&&"[object Date]"===Object.prototype.toString.call(e)},isRegExp$1=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)};function serializeString(e,t,n,r,i){e[r++]=constants.BSON_DATA_STRING;var o=i?e.write(t,r,"ascii"):e.write(t,r,"utf8");e[(r=r+o+1)-1]=0;var s=e.write(n,r+4,"utf8");return e[r+3]=s+1>>24&255,e[r+2]=s+1>>16&255,e[r+1]=s+1>>8&255,e[r]=s+1&255,r=r+4+s,e[r++]=0,r}function serializeNumber(e,t,n,r,i){if(Math.floor(n)===n&&n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX)if(n>=constants.BSON_INT32_MIN&&n<=constants.BSON_INT32_MAX)e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255;else if(n>=constants.JS_INT_MIN&&n<=constants.JS_INT_MAX){e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8}else{e[r++]=constants.BSON_DATA_LONG,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n),s=o.getLowBits(),a=o.getHighBits();e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255}else e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n,r,"little",52,8),r+=8;return r}function serializeNull(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NULL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeBoolean(e,t,n,r,i){return e[r++]=constants.BSON_DATA_BOOLEAN,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function serializeDate(e,t,n,r,i){e[r++]=constants.BSON_DATA_DATE,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=long_1.fromNumber(n.getTime()),s=o.getLowBits(),a=o.getHighBits();return e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function serializeRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.source&&null!=n.source.match(regexp$1))throw Error("value "+n.source+" must not contain null bytes");return r+=e.write(n.source,r,"utf8"),e[r++]=0,n.ignoreCase&&(e[r++]=105),n.global&&(e[r++]=115),n.multiline&&(e[r++]=109),e[r++]=0,r}function serializeBSONRegExp(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_REGEXP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,null!=n.pattern.match(regexp$1))throw Error("pattern "+n.pattern+" must not contain null bytes");return r+=e.write(n.pattern,r,"utf8"),e[r++]=0,r+=e.write(n.options.split("").sort().join(""),r,"utf8"),e[r++]=0,r}function serializeMinMax(e,t,n,r,i){return null===n?e[r++]=constants.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=constants.BSON_DATA_MIN_KEY:e[r++]=constants.BSON_DATA_MAX_KEY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,r}function serializeObjectId(e,t,n,r,i){if(e[r++]=constants.BSON_DATA_OID,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function serializeBuffer(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.length;return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=constants.BSON_BINARY_SUBTYPE_DEFAULT,n.copy(e,r,0,o),r+=o}function serializeObject(e,t,n,r,i,o,s,a,u,l){for(var c=0;c<l.length;c++)if(l[c]===n)throw new Error("cyclic dependency detected");l.push(n),e[r++]=Array.isArray(n)?constants.BSON_DATA_ARRAY:constants.BSON_DATA_OBJECT,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var _=serializeInto(e,n,i,r,o+1,s,a,l);return l.pop(),_}function serializeDecimal128(e,t,n,r,i){return e[r++]=constants.BSON_DATA_DECIMAL128,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function serializeLong(e,t,n,r,i){e[r++]="Long"===n._bsontype?constants.BSON_DATA_LONG:constants.BSON_DATA_TIMESTAMP,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.getLowBits(),s=n.getHighBits();return e[r++]=255&o,e[r++]=o>>8&255,e[r++]=o>>16&255,e[r++]=o>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function serializeInt32(e,t,n,r,i){return e[r++]=constants.BSON_DATA_INT,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function serializeDouble(e,t,n,r,i){return e[r++]=constants.BSON_DATA_NUMBER,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0,writeIEEE754$1(e,n.value,r,"little",52,8),r+=8}function serializeFunction(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_CODE,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a=normalizedFunctionString$1(n),u=e.write(a,r+4,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function serializeCode(e,t,n,r,i,o,s,a,u){if(n.scope&&"object"===_typeof$3(n.scope)){e[r++]=constants.BSON_DATA_CODE_W_SCOPE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var l=r,c="string"==typeof n.code?n.code:n.code.toString();r+=4;var _=e.write(c,r+4,"utf8")+1;e[r]=255&_,e[r+1]=_>>8&255,e[r+2]=_>>16&255,e[r+3]=_>>24&255,e[r+4+_-1]=0,r=r+_+4;var f=serializeInto(e,n.scope,i,r,o+1,s,a);r=f-1;var h=f-l;e[l++]=255&h,e[l++]=h>>8&255,e[l++]=h>>16&255,e[l++]=h>>24&255,e[r++]=0}else{e[r++]=constants.BSON_DATA_CODE,r+=u?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var E=n.code.toString(),p=e.write(E,r+4,"utf8")+1;e[r]=255&p,e[r+1]=p>>8&255,e[r+2]=p>>16&255,e[r+3]=p>>24&255,r=r+4+p-1,e[r++]=0}return r}function serializeBinary(e,t,n,r,i){e[r++]=constants.BSON_DATA_BINARY,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=n.value(!0),s=n.position;return n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s+=4),e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=n.sub_type,n.sub_type===binary.SUBTYPE_BYTE_ARRAY&&(s-=4,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255),o.copy(e,r,0,n.position),r+=n.position}function serializeSymbol(e,t,n,r,i){e[r++]=constants.BSON_DATA_SYMBOL,r+=i?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var o=e.write(n.value,r+4,"utf8")+1;return e[r]=255&o,e[r+1]=o>>8&255,e[r+2]=o>>16&255,e[r+3]=o>>24&255,r=r+4+o-1,e[r++]=0,r}function serializeDBRef(e,t,n,r,i,o,s){e[r++]=constants.BSON_DATA_OBJECT,r+=s?e.write(t,r,"ascii"):e.write(t,r,"utf8"),e[r++]=0;var a,u=r,l={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(l.$db=n.db);var c=(a=serializeInto(e,l=Object.assign(l,n.fields),!1,r,i+1,o))-u;return e[u++]=255&c,e[u++]=c>>8&255,e[u++]=c>>16&255,e[u++]=c>>24&255,a}function serializeInto(e,t,n,r,i,o,s,a){r=r||0,(a=a||[]).push(t);var u=r+4;if(Array.isArray(t))for(var l=0;l<t.length;l++){var c=""+l,_=t[l];if(_&&_.toBSON){if("function"!=typeof _.toBSON)throw new TypeError("toBSON is not a function");_=_.toBSON()}var f=_typeof$3(_);if("string"===f)u=serializeString(e,c,_,u,!0);else if("number"===f)u=serializeNumber(e,c,_,u,!0);else if("boolean"===f)u=serializeBoolean(e,c,_,u,!0);else if(_ instanceof Date||isDate$1(_))u=serializeDate(e,c,_,u,!0);else if(void 0===_)u=serializeNull(e,c,_,u,!0);else if(null===_)u=serializeNull(e,c,_,u,!0);else if("ObjectId"===_._bsontype||"ObjectID"===_._bsontype)u=serializeObjectId(e,c,_,u,!0);else if(Buffer$5.isBuffer(_))u=serializeBuffer(e,c,_,u,!0);else if(_ instanceof RegExp||isRegExp$1(_))u=serializeRegExp(e,c,_,u,!0);else if("object"===f&&null==_._bsontype)u=serializeObject(e,c,_,u,n,i,o,s,!0,a);else if("object"===f&&"Decimal128"===_._bsontype)u=serializeDecimal128(e,c,_,u,!0);else if("Long"===_._bsontype||"Timestamp"===_._bsontype)u=serializeLong(e,c,_,u,!0);else if("Double"===_._bsontype)u=serializeDouble(e,c,_,u,!0);else if("function"==typeof _&&o)u=serializeFunction(e,c,_,u,n,i,o);else if("Code"===_._bsontype)u=serializeCode(e,c,_,u,n,i,o,s,!0);else if("Binary"===_._bsontype)u=serializeBinary(e,c,_,u,!0);else if("Symbol"===_._bsontype)u=serializeSymbol(e,c,_,u,!0);else if("DBRef"===_._bsontype)u=serializeDBRef(e,c,_,u,i,o,!0);else if("BSONRegExp"===_._bsontype)u=serializeBSONRegExp(e,c,_,u,!0);else if("Int32"===_._bsontype)u=serializeInt32(e,c,_,u,!0);else if("MinKey"===_._bsontype||"MaxKey"===_._bsontype)u=serializeMinMax(e,c,_,u,!0);else if(void 0!==_._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+_._bsontype)}else if(t instanceof map)for(var h=t.entries(),E=!1;!E;){var p=h.next();if(!(E=p.done)){var y=p.value[0],g=p.value[1],A=_typeof$3(g);if("string"==typeof y&&!ignoreKeys.has(y)){if(null!=y.match(regexp$1))throw Error("key "+y+" must not contain null bytes");if(n){if("$"===y[0])throw Error("key "+y+" must not start with '$'");if(~y.indexOf("."))throw Error("key "+y+" must not contain '.'")}}if("string"===A)u=serializeString(e,y,g,u);else if("number"===A)u=serializeNumber(e,y,g,u);else if("boolean"===A)u=serializeBoolean(e,y,g,u);else if(g instanceof Date||isDate$1(g))u=serializeDate(e,y,g,u);else if(null===g||void 0===g&&!1===s)u=serializeNull(e,y,g,u);else if("ObjectId"===g._bsontype||"ObjectID"===g._bsontype)u=serializeObjectId(e,y,g,u);else if(Buffer$5.isBuffer(g))u=serializeBuffer(e,y,g,u);else if(g instanceof RegExp||isRegExp$1(g))u=serializeRegExp(e,y,g,u);else if("object"===A&&null==g._bsontype)u=serializeObject(e,y,g,u,n,i,o,s,!1,a);else if("object"===A&&"Decimal128"===g._bsontype)u=serializeDecimal128(e,y,g,u);else if("Long"===g._bsontype||"Timestamp"===g._bsontype)u=serializeLong(e,y,g,u);else if("Double"===g._bsontype)u=serializeDouble(e,y,g,u);else if("Code"===g._bsontype)u=serializeCode(e,y,g,u,n,i,o,s);else if("function"==typeof g&&o)u=serializeFunction(e,y,g,u,n,i,o);else if("Binary"===g._bsontype)u=serializeBinary(e,y,g,u);else if("Symbol"===g._bsontype)u=serializeSymbol(e,y,g,u);else if("DBRef"===g._bsontype)u=serializeDBRef(e,y,g,u,i,o);else if("BSONRegExp"===g._bsontype)u=serializeBSONRegExp(e,y,g,u);else if("Int32"===g._bsontype)u=serializeInt32(e,y,g,u);else if("MinKey"===g._bsontype||"MaxKey"===g._bsontype)u=serializeMinMax(e,y,g,u);else if(void 0!==g._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+g._bsontype)}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!==_typeof$3(t))throw new TypeError("toBSON function did not return an object")}for(var S in t){var d=t[S];if(d&&d.toBSON){if("function"!=typeof d.toBSON)throw new TypeError("toBSON is not a function");d=d.toBSON()}var T=_typeof$3(d);if("string"==typeof S&&!ignoreKeys.has(S)){if(null!=S.match(regexp$1))throw Error("key "+S+" must not contain null bytes");if(n){if("$"===S[0])throw Error("key "+S+" must not start with '$'");if(~S.indexOf("."))throw Error("key "+S+" must not contain '.'")}}if("string"===T)u=serializeString(e,S,d,u);else if("number"===T)u=serializeNumber(e,S,d,u);else if("boolean"===T)u=serializeBoolean(e,S,d,u);else if(d instanceof Date||isDate$1(d))u=serializeDate(e,S,d,u);else if(void 0===d)!1===s&&(u=serializeNull(e,S,d,u));else if(null===d)u=serializeNull(e,S,d,u);else if("ObjectId"===d._bsontype||"ObjectID"===d._bsontype)u=serializeObjectId(e,S,d,u);else if(Buffer$5.isBuffer(d))u=serializeBuffer(e,S,d,u);else if(d instanceof RegExp||isRegExp$1(d))u=serializeRegExp(e,S,d,u);else if("object"===T&&null==d._bsontype)u=serializeObject(e,S,d,u,n,i,o,s,!1,a);else if("object"===T&&"Decimal128"===d._bsontype)u=serializeDecimal128(e,S,d,u);else if("Long"===d._bsontype||"Timestamp"===d._bsontype)u=serializeLong(e,S,d,u);else if("Double"===d._bsontype)u=serializeDouble(e,S,d,u);else if("Code"===d._bsontype)u=serializeCode(e,S,d,u,n,i,o,s);else if("function"==typeof d&&o)u=serializeFunction(e,S,d,u,n,i,o);else if("Binary"===d._bsontype)u=serializeBinary(e,S,d,u);else if("Symbol"===d._bsontype)u=serializeSymbol(e,S,d,u);else if("DBRef"===d._bsontype)u=serializeDBRef(e,S,d,u,i,o);else if("BSONRegExp"===d._bsontype)u=serializeBSONRegExp(e,S,d,u);else if("Int32"===d._bsontype)u=serializeInt32(e,S,d,u);else if("MinKey"===d._bsontype||"MaxKey"===d._bsontype)u=serializeMinMax(e,S,d,u);else if(void 0!==d._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+d._bsontype)}}a.pop(),e[u++]=0;var P=u-r;return e[r++]=255&P,e[r++]=P>>8&255,e[r++]=P>>16&255,e[r++]=P>>24&255,u}var serializer=serializeInto;function _typeof$4(e){return(_typeof$4="function"==typeof Symbol&&"symbol"===_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(e)}var Buffer$6=buffer.Buffer,normalizedFunctionString$2=utils.normalizedFunctionString;function isDate$2(e){return"object"===_typeof$4(e)&&"[object Date]"===Object.prototype.toString.call(e)}function calculateObjectSize(e,t,n){var r=5;if(Array.isArray(e))for(var i=0;i<e.length;i++)r+=calculateElement(i.toString(),e[i],t,!0,n);else for(var o in e.toBSON&&(e=e.toBSON()),e)r+=calculateElement(o,e[o],t,!1,n);return r}function calculateElement(e,t,n,r,i){switch(t&&t.toBSON&&(t=t.toBSON()),_typeof$4(t)){case"string":return 1+Buffer$6.byteLength(e,"utf8")+1+4+Buffer$6.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=constants.JS_INT_MIN&&t<=constants.JS_INT_MAX&&t>=constants.BSON_INT32_MIN&&t<=constants.BSON_INT32_MAX?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+5:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;case"undefined":return r||!i?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||isDate$2(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if(void 0!==Buffer$6&&Buffer$6.isBuffer(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+6+t.length;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&0<Object.keys(t.scope).length?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1+calculateObjectSize(t.scope,n,i):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===binary.SUBTYPE_BYTE_ARRAY?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+Buffer$6.byteLength(t.value,"utf8")+4+1+1;if("DBRef"!==t._bsontype)return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.pattern,"utf8")+1+Buffer$6.byteLength(t.options,"utf8")+1:(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+calculateObjectSize(t,n,i)+1;var o=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(o.$db=t.db),(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+calculateObjectSize(o,n,i);case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+Buffer$6.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(n&&null!=t.scope&&0<Object.keys(t.scope).length)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1+calculateObjectSize(t.scope,n,i);if(n)return(null!=e?Buffer$6.byteLength(e,"utf8")+1:0)+1+4+Buffer$6.byteLength(normalizedFunctionString$2(t),"utf8")+1}return 0}var calculate_size=calculateObjectSize,Buffer$7=buffer.Buffer,ensure_buffer=function(e){if(e instanceof Buffer$7)return e;if(e instanceof Uint8Array)return Buffer$7.from(e.buffer);throw new TypeError("Must use either Buffer or Uint8Array")},Buffer$8=buffer.Buffer,MAXSIZE=17825792,buffer$1=Buffer$8.alloc(MAXSIZE);function setInternalBufferSize(e){buffer$1.length<e&&(buffer$1=Buffer$8.alloc(e))}function serialize$1(e,t){var n="boolean"==typeof(t=t||{}).checkKeys&&t.checkKeys,r="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,i="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,o="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:MAXSIZE;buffer$1.length<o&&(buffer$1=Buffer$8.alloc(o));var s=serializer(buffer$1,e,n,0,0,r,i,[]),a=Buffer$8.alloc(s);return buffer$1.copy(a,0,0,a.length),a}function serializeWithBufferAndIndex(e,t,n){var r="boolean"==typeof(n=n||{}).checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,o="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,s="number"==typeof n.index?n.index:0,a=serializer(buffer$1,e,r,0,0,i,o);return buffer$1.copy(t,s,0,a),s+a-1}function deserialize$2(e,t){return e=ensure_buffer(e),deserializer(e,t)}function calculateObjectSize$1(e,t){var n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return calculate_size(e,n,r)}function deserializeStream(e,t,n,r,i,o){o=Object.assign({allowObjectSmallerThanBufferSize:!0},o),e=ensure_buffer(e);for(var s=t,a=0;a<n;a++){var u=e[s]|e[s+1]<<8|e[s+2]<<16|e[s+3]<<24;o.index=s,r[i+a]=deserializer(e,o),s+=u}return s}var bson={BSON_INT32_MAX:constants.BSON_INT32_MAX,BSON_INT32_MIN:constants.BSON_INT32_MIN,BSON_INT64_MAX:constants.BSON_INT64_MAX,BSON_INT64_MIN:constants.BSON_INT64_MIN,JS_INT_MAX:constants.JS_INT_MAX,JS_INT_MIN:constants.JS_INT_MIN,BSON_DATA_NUMBER:constants.BSON_DATA_NUMBER,BSON_DATA_STRING:constants.BSON_DATA_STRING,BSON_DATA_OBJECT:constants.BSON_DATA_OBJECT,BSON_DATA_ARRAY:constants.BSON_DATA_ARRAY,BSON_DATA_BINARY:constants.BSON_DATA_BINARY,BSON_DATA_UNDEFINED:constants.BSON_DATA_UNDEFINED,BSON_DATA_OID:constants.BSON_DATA_OID,BSON_DATA_BOOLEAN:constants.BSON_DATA_BOOLEAN,BSON_DATA_DATE:constants.BSON_DATA_DATE,BSON_DATA_NULL:constants.BSON_DATA_NULL,BSON_DATA_REGEXP:constants.BSON_DATA_REGEXP,BSON_DATA_DBPOINTER:constants.BSON_DATA_DBPOINTER,BSON_DATA_CODE:constants.BSON_DATA_CODE,BSON_DATA_SYMBOL:constants.BSON_DATA_SYMBOL,BSON_DATA_CODE_W_SCOPE:constants.BSON_DATA_CODE_W_SCOPE,BSON_DATA_INT:constants.BSON_DATA_INT,BSON_DATA_TIMESTAMP:constants.BSON_DATA_TIMESTAMP,BSON_DATA_LONG:constants.BSON_DATA_LONG,BSON_DATA_DECIMAL128:constants.BSON_DATA_DECIMAL128,BSON_DATA_MIN_KEY:constants.BSON_DATA_MIN_KEY,BSON_DATA_MAX_KEY:constants.BSON_DATA_MAX_KEY,BSON_BINARY_SUBTYPE_DEFAULT:constants.BSON_BINARY_SUBTYPE_DEFAULT,BSON_BINARY_SUBTYPE_FUNCTION:constants.BSON_BINARY_SUBTYPE_FUNCTION,BSON_BINARY_SUBTYPE_BYTE_ARRAY:constants.BSON_BINARY_SUBTYPE_BYTE_ARRAY,BSON_BINARY_SUBTYPE_UUID:constants.BSON_BINARY_SUBTYPE_UUID,BSON_BINARY_SUBTYPE_MD5:constants.BSON_BINARY_SUBTYPE_MD5,BSON_BINARY_SUBTYPE_USER_DEFINED:constants.BSON_BINARY_SUBTYPE_USER_DEFINED,Code:code,Map:map,BSONSymbol:symbol,DBRef:db_ref,Binary:binary,ObjectId:objectid,Long:long_1,Timestamp:timestamp,Double:double_1,Int32:int_32,MinKey:min_key,MaxKey:max_key,BSONRegExp:regexp,Decimal128:decimal128,serialize:serialize$1,serializeWithBufferAndIndex:serializeWithBufferAndIndex,deserialize:deserialize$2,calculateObjectSize:calculateObjectSize$1,deserializeStream:deserializeStream,setInternalBufferSize:setInternalBufferSize,ObjectID:objectid,EJSON:extended_json},bson_1=bson.BSON_INT32_MAX,bson_2=bson.BSON_INT32_MIN,bson_3=bson.BSON_INT64_MAX,bson_4=bson.BSON_INT64_MIN,bson_5=bson.JS_INT_MAX,bson_6=bson.JS_INT_MIN,bson_7=bson.BSON_DATA_NUMBER,bson_8=bson.BSON_DATA_STRING,bson_9=bson.BSON_DATA_OBJECT,bson_10=bson.BSON_DATA_ARRAY,bson_11=bson.BSON_DATA_BINARY,bson_12=bson.BSON_DATA_UNDEFINED,bson_13=bson.BSON_DATA_OID,bson_14=bson.BSON_DATA_BOOLEAN,bson_15=bson.BSON_DATA_DATE,bson_16=bson.BSON_DATA_NULL,bson_17=bson.BSON_DATA_REGEXP,bson_18=bson.BSON_DATA_DBPOINTER,bson_19=bson.BSON_DATA_CODE,bson_20=bson.BSON_DATA_SYMBOL,bson_21=bson.BSON_DATA_CODE_W_SCOPE,bson_22=bson.BSON_DATA_INT,bson_23=bson.BSON_DATA_TIMESTAMP,bson_24=bson.BSON_DATA_LONG,bson_25=bson.BSON_DATA_DECIMAL128,bson_26=bson.BSON_DATA_MIN_KEY,bson_27=bson.BSON_DATA_MAX_KEY,bson_28=bson.BSON_BINARY_SUBTYPE_DEFAULT,bson_29=bson.BSON_BINARY_SUBTYPE_FUNCTION,bson_30=bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY,bson_31=bson.BSON_BINARY_SUBTYPE_UUID,bson_32=bson.BSON_BINARY_SUBTYPE_MD5,bson_33=bson.BSON_BINARY_SUBTYPE_USER_DEFINED,bson_34=bson.Code,bson_35=bson.BSONSymbol,bson_36=bson.DBRef,bson_37=bson.Binary,bson_38=bson.ObjectId,bson_39=bson.Long,bson_40=bson.Timestamp,bson_41=bson.Double,bson_42=bson.Int32,bson_43=bson.MinKey,bson_44=bson.MaxKey,bson_45=bson.BSONRegExp,bson_46=bson.Decimal128,bson_47=bson.serialize,bson_48=bson.serializeWithBufferAndIndex,bson_49=bson.deserialize,bson_50=bson.calculateObjectSize,bson_51=bson.deserializeStream,bson_52=bson.setInternalBufferSize,bson_53=bson.ObjectID,bson_54=bson.EJSON;exports.default=bson,exports.BSON_INT32_MAX=bson_1,exports.BSON_INT32_MIN=bson_2,exports.BSON_INT64_MAX=bson_3,exports.BSON_INT64_MIN=bson_4,exports.JS_INT_MAX=bson_5,exports.JS_INT_MIN=bson_6,exports.BSON_DATA_NUMBER=bson_7,exports.BSON_DATA_STRING=bson_8,exports.BSON_DATA_OBJECT=bson_9,exports.BSON_DATA_ARRAY=bson_10,exports.BSON_DATA_BINARY=bson_11,exports.BSON_DATA_UNDEFINED=bson_12,exports.BSON_DATA_OID=bson_13,exports.BSON_DATA_BOOLEAN=bson_14,exports.BSON_DATA_DATE=bson_15,exports.BSON_DATA_NULL=bson_16,exports.BSON_DATA_REGEXP=bson_17,exports.BSON_DATA_DBPOINTER=bson_18,exports.BSON_DATA_CODE=bson_19,exports.BSON_DATA_SYMBOL=bson_20,exports.BSON_DATA_CODE_W_SCOPE=bson_21,exports.BSON_DATA_INT=bson_22,exports.BSON_DATA_TIMESTAMP=bson_23,exports.BSON_DATA_LONG=bson_24,exports.BSON_DATA_DECIMAL128=bson_25,exports.BSON_DATA_MIN_KEY=bson_26,exports.BSON_DATA_MAX_KEY=bson_27,exports.BSON_BINARY_SUBTYPE_DEFAULT=bson_28,exports.BSON_BINARY_SUBTYPE_FUNCTION=bson_29,exports.BSON_BINARY_SUBTYPE_BYTE_ARRAY=bson_30,exports.BSON_BINARY_SUBTYPE_UUID=bson_31,exports.BSON_BINARY_SUBTYPE_MD5=bson_32,exports.BSON_BINARY_SUBTYPE_USER_DEFINED=bson_33,exports.Code=bson_34,exports.BSONSymbol=bson_35,exports.DBRef=bson_36,exports.Binary=bson_37,exports.ObjectId=bson_38,exports.Long=bson_39,exports.Timestamp=bson_40,exports.Double=bson_41,exports.Int32=bson_42,exports.MinKey=bson_43,exports.MaxKey=bson_44,exports.BSONRegExp=bson_45,exports.Decimal128=bson_46,exports.serialize=bson_47,exports.serializeWithBufferAndIndex=bson_48,exports.deserialize=bson_49,exports.calculateObjectSize=bson_50,exports.deserializeStream=bson_51,exports.setInternalBufferSize=bson_52,exports.ObjectID=bson_53,exports.EJSON=bson_54,Object.defineProperty(exports,"__esModule",{value:!0})},Cu(exports,__webpack_require__(6),__webpack_require__(1))}).call(exports,__webpack_require__(0),__webpack_require__(1).Buffer)},function(e,t,n){t.byteLength=function(e){var t=_(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=_(e),i=r[0],o=r[1],s=new c(function(e,t,n){return 3*(t+n)/4-n}(0,i,o)),a=0,u=0<o?i-4:i;for(n=0;n<u;n+=4)t=l[e.charCodeAt(n)]<<18|l[e.charCodeAt(n+1)]<<12|l[e.charCodeAt(n+2)]<<6|l[e.charCodeAt(n+3)],s[a++]=t>>16&255,s[a++]=t>>8&255,s[a++]=255&t;2===o&&(t=l[e.charCodeAt(n)]<<2|l[e.charCodeAt(n+1)]>>4,s[a++]=255&t);1===o&&(t=l[e.charCodeAt(n)]<<10|l[e.charCodeAt(n+1)]<<4|l[e.charCodeAt(n+2)]>>2,s[a++]=t>>8&255,s[a++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],o=0,s=n-r;o<s;o+=16383)i.push(u(e,o,s<o+16383?s:o+16383));1==r?(t=e[n-1],i.push(a[t>>2]+a[t<<4&63]+"==")):2==r&&(t=(e[n-2]<<8)+e[n-1],i.push(a[t>>10]+a[t>>4&63]+a[t<<2&63]+"="));return i.join("")};for(var a=[],l=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,o=r.length;i<o;++i)a[i]=r[i],l[r.charCodeAt(i)]=i;function _(e){var t=e.length;if(0<t%4)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,i,o=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),o.push(a[(i=r)>>18&63]+a[i>>12&63]+a[i>>6&63]+a[63&i]);return o.join("")}l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,_=n?i-1:0,f=n?-1:1,h=e[t+_];for(_+=f,o=h&(1<<-c)-1,h>>=-c,c+=a;0<c;o=256*o+e[t+_],_+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;0<c;s=256*s+e[t+_],_+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,_=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,E=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+_?f/u:f*Math.pow(2,1-_))*u&&(s++,u/=2),c<=s+_?(a=0,s=c):1<=s+_?(a=(t*u-1)*Math.pow(2,i),s+=_):(a=t*Math.pow(2,_-1)*Math.pow(2,i),s=0));8<=i;e[n+h]=255&a,h+=E,a/=256,i-=8);for(s=s<<i|a,l+=i;0<l;e[n+h]=255&s,h+=E,s/=256,l-=8);e[n+h-E]|=128*p}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){e.exports=r;var h=null;try{h=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function r(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function E(e){return!0===(e&&e.__isLong__)}Object.defineProperty(r.prototype,"__isLong__",{value:!0}),r.isLong=E;var o={},s={};function n(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=y(e,(0|e)<0?-1:0,!0),i&&(s[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=o[e])?r:(n=y(e,e<0?-1:0,!1),i&&(o[e]=n),n)}function p(e,t){if(isNaN(e))return t?l:S;if(t){if(e<0)return l;if(a<=e)return v}else{if(e<=-u)return I;if(u<=e+1)return P}return e<0?p(-e,t).neg():y(e%i|0,e/i|0,t)}function y(e,t,n){return new r(e,t,n)}r.fromInt=n,r.fromNumber=p,r.fromBits=y;var c=Math.pow;function _(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return S;if(t="number"==typeof t?(n=t,!1):!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if(0<(r=e.indexOf("-")))throw Error("interior hyphen");if(0===r)return _(e.substring(1),t,n).neg();for(var i=p(c(n,8)),o=S,s=0;s<e.length;s+=8){var a=Math.min(8,e.length-s),u=parseInt(e.substring(s,s+a),n);if(a<8){var l=p(c(n,a));o=o.mul(l).add(p(u))}else o=(o=o.mul(i)).add(p(u))}return o.unsigned=t,o}function g(e,t){return"number"==typeof e?p(e,t):"string"==typeof e?_(e,t):y(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}r.fromString=_,r.fromValue=g;var i=4294967296,a=i*i,u=a/2,A=n(1<<24),S=n(0);r.ZERO=S;var l=n(0,!0);r.UZERO=l;var f=n(1);r.ONE=f;var d=n(1,!0);r.UONE=d;var T=n(-1);r.NEG_ONE=T;var P=y(-1,2147483647,!1);r.MAX_VALUE=P;var v=y(-1,-1,!0);r.MAX_UNSIGNED_VALUE=v;var I=y(0,-2147483648,!1);r.MIN_VALUE=I;var m=r.prototype;m.toInt=function(){return this.unsigned?this.low>>>0:this.low},m.toNumber=function(){return this.unsigned?(this.high>>>0)*i+(this.low>>>0):this.high*i+(this.low>>>0)},m.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=p(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=p(c(e,6),this.unsigned),o=this,s="";;){var a=o.div(i),u=(o.sub(a.mul(i)).toInt()>>>0).toString(e);if((o=a).isZero())return u+s;for(;u.length<6;)u="0"+u;s=""+u+s}},m.getHighBits=function(){return this.high},m.getHighBitsUnsigned=function(){return this.high>>>0},m.getLowBits=function(){return this.low},m.getLowBitsUnsigned=function(){return this.low>>>0},m.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;0<t&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},m.isZero=function(){return 0===this.high&&0===this.low},m.eqz=m.isZero,m.isNegative=function(){return!this.unsigned&&this.high<0},m.isPositive=function(){return this.unsigned||0<=this.high},m.isOdd=function(){return 1==(1&this.low)},m.isEven=function(){return 0==(1&this.low)},m.equals=function(e){return E(e)||(e=g(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},m.eq=m.equals,m.notEquals=function(e){return!this.eq(e)},m.neq=m.notEquals,m.ne=m.notEquals,m.lessThan=function(e){return this.comp(e)<0},m.lt=m.lessThan,m.lessThanOrEqual=function(e){return this.comp(e)<=0},m.lte=m.lessThanOrEqual,m.le=m.lessThanOrEqual,m.greaterThan=function(e){return 0<this.comp(e)},m.gt=m.greaterThan,m.greaterThanOrEqual=function(e){return 0<=this.comp(e)},m.gte=m.greaterThanOrEqual,m.ge=m.greaterThanOrEqual,m.compare=function(e){if(E(e)||(e=g(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},m.comp=m.compare,m.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(f)},m.neg=m.negate,m.add=function(e){E(e)||(e=g(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=65535&this.low,o=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=0,l=0,c=0,_=0;return c+=(_+=i+(65535&e.low))>>>16,l+=(c+=r+a)>>>16,u+=(l+=n+s)>>>16,u+=t+o,y((c&=65535)<<16|(_&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},m.subtract=function(e){return E(e)||(e=g(e)),this.add(e.neg())},m.sub=m.subtract,m.multiply=function(e){if(this.isZero())return S;if(E(e)||(e=g(e)),h)return y(h.mul(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned);if(e.isZero())return S;if(this.eq(I))return e.isOdd()?I:S;if(e.eq(I))return this.isOdd()?I:S;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(A)&&e.lt(A))return p(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,i=65535&this.low,o=e.high>>>16,s=65535&e.high,a=e.low>>>16,u=65535&e.low,l=0,c=0,_=0,f=0;return _+=(f+=i*u)>>>16,c+=(_+=r*u)>>>16,_&=65535,c+=(_+=i*a)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*a)>>>16,c&=65535,l+=(c+=i*s)>>>16,l+=t*u+n*a+r*s+i*o,y((_&=65535)<<16|(f&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},m.mul=m.multiply,m.divide=function(e){if(E(e)||(e=g(e)),e.isZero())throw Error("division by zero");var t,n,r;if(h)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?y((this.unsigned?h.div_u:h.div_s)(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?l:S;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return l;if(e.gt(this.shru(1)))return d;r=l}else{if(this.eq(I))return e.eq(f)||e.eq(T)?I:e.eq(I)?f:(t=this.shr(1).div(e).shl(1)).eq(S)?e.isNegative()?f:T:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));else if(e.eq(I))return this.unsigned?l:S;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=S}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(t)/Math.LN2),o=i<=48?1:c(2,i-48),s=p(t),a=s.mul(e);a.isNegative()||a.gt(n);)a=(s=p(t-=o,this.unsigned)).mul(e);s.isZero()&&(s=f),r=r.add(s),n=n.sub(a)}return r},m.div=m.divide,m.modulo=function(e){return E(e)||(e=g(e)),h?y((this.unsigned?h.rem_u:h.rem_s)(this.low,this.high,e.low,e.high),h.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},m.mod=m.modulo,m.rem=m.modulo,m.not=function(){return y(~this.low,~this.high,this.unsigned)},m.and=function(e){return E(e)||(e=g(e)),y(this.low&e.low,this.high&e.high,this.unsigned)},m.or=function(e){return E(e)||(e=g(e)),y(this.low|e.low,this.high|e.high,this.unsigned)},m.xor=function(e){return E(e)||(e=g(e)),y(this.low^e.low,this.high^e.high,this.unsigned)},m.shiftLeft=function(e){return E(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?y(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):y(0,this.low<<e-32,this.unsigned)},m.shl=m.shiftLeft,m.shiftRight=function(e){return E(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?y(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):y(this.high>>e-32,0<=this.high?0:-1,this.unsigned)},m.shr=m.shiftRight,m.shiftRightUnsigned=function(e){if(E(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?y(this.low>>>e|t<<32-e,t>>>e,this.unsigned):y(32===e?t:t>>>e-32,0,this.unsigned)},m.shru=m.shiftRightUnsigned,m.shr_u=m.shiftRightUnsigned,m.toSigned=function(){return this.unsigned?y(this.low,this.high,!1):this},m.toUnsigned=function(){return this.unsigned?this:y(this.low,this.high,!0)},m.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},m.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},m.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},r.fromBytes=function(e,t,n){return n?r.fromBytesLE(e,t):r.fromBytesBE(e,t)},r.fromBytesLE=function(e,t){return new r(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},r.fromBytesBE=function(e,t){return new r(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}}],Dk={},Ek.m=Ck,Ek.c=Dk,Ek.d=function(e,t,n){Ek.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},Ek.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return Ek.d(t,"a",t),t},Ek.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},Ek.p="",Ek(Ek.s=2))}),BSON=unwrapExports(bson_common),bson=BSON.bson,Bson=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"serialize",value:function(e){return bson.serialize(e)}},{key:"deserialize",value:function(e){return bson.deserialize(e)}}]),e}(),SdlPacket=function(){function _(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1,t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-1,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:-1,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:-1,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:0,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:null,l=9<arguments.length&&void 0!==arguments[9]?arguments[9]:0,c=10<arguments.length&&void 0!==arguments[10]?arguments[10]:0;return _classCallCheck(this,_),this._version=e,this._encryption=t,this._frameType=n,this._serviceType=r,this._frameInfo=i,this._sessionID=o,this._dataSize=s,this._messageID=a,this._payload=u,this._offset=l,this._bytesToWrite=c,this._bsonPayload=void 0,null!==u&&(this._payload=new Uint8Array(u.slice(l,c+l))),this}return _createClass(_,[{key:"getVersion",value:function(){return this._version}},{key:"getEncryption",value:function(){return this._encryption}},{key:"getServiceType",value:function(){return this._serviceType}},{key:"getFrameInfo",value:function(){return this._frameInfo}},{key:"getSessionID",value:function(){return this._sessionID}},{key:"getMessageID",value:function(){return this._messageID}},{key:"getDataSize",value:function(){return this._dataSize}},{key:"setPayload",value:function(e){return this._payload=e,this}},{key:"getPayload",value:function(){return this._payload}},{key:"getFrameType",value:function(){return null!==FrameType.keyForValue(this._frameType)?this._frameType:FrameType.SINGLE}},{key:"toString",value:function(){var e="***** Sdl Packet *****";return e+="\nVersion: ".concat(this._version),e+="\nEncryption: ".concat(this._encryption),e+="\nFrameType: ".concat(this._frameType),e+="\nServiceType: ".concat(this._serviceType),e+="\nFrameInfo: ".concat(this._frameInfo),e+="\nSessionID: ".concat(this._sessionID),e+="\nDataSize: ".concat(this._dataSize),1<this._version&&(e+="\nMessageID: ".concat(this._messageID)),e+="\n***** Sdl Packet End *****"}},{key:"toPacket",value:function(){return this._bsonPayload&&(this._payload=Bson.serialize(this._bsonPayload),this._dataSize=this._payload.length),_.constructPacket(this._version,this._encryption,this._frameType,this._serviceType,this._frameInfo,this._sessionID,this._dataSize,this._messageID,this._payload)}},{key:"putTag",value:function(e,t){this._bsonPayload||(this._bsonPayload={}),this._bsonPayload[e]=t}},{key:"getTag",value:function(e){return this._bsonPayload?this._bsonPayload[e]:this._payload&&0!==this._payload.length?(this._bsonPayload=Bson.deserialize(this._payload),this._bsonPayload[e]):null}}],[{key:"getEncryptionBit",value:function(e){return e?_.ENCRYPTION_MASK:0}},{key:"constructPacket",value:function(e,t,n,r,i,o,s,a,u){var l=null,c=0;return(l=1<e?new Uint8Array(_.HEADER_SIZE+s):new Uint8Array(_.HEADER_SIZE_V1+s))[c++]=(e<<4)+_.getEncryptionBit(t)+n,l[c++]=r,l[c++]=i,l[c++]=o,l[c++]=(4278190080&s)>>24,l[c++]=(16711680&s)>>16,l[c++]=(65280&s)>>8,l[c++]=255&s,1<e&&(l[c++]=(4278190080&a)>>24,l[c++]=(16711680&a)>>16,l[c++]=(65280&a)>>8,l[c++]=255&a),null!==u&&0<u.length&&l.set(u,c),l}}]),_}();SdlPacket.EXTRA_PARCEL_DATA_LENGTH=24,SdlPacket.HEADER_SIZE=12,SdlPacket.HEADER_SIZE_V1=8,SdlPacket.ENCRYPTION_MASK=8,SdlPacket.SERVICE_TYPE_CONTROL=0,SdlPacket.SERVICE_TYPE_RPC=7,SdlPacket.SERVICE_TYPE_PCM=10,SdlPacket.SERVICE_TYPE_VIDEO=11,SdlPacket.SERVICE_TYPE_BULK_DATA=15,SdlPacket.FRAME_INFO_HEART_BEAT=0,SdlPacket.FRAME_INFO_START_SERVICE=1,SdlPacket.FRAME_INFO_START_SERVICE_ACK=2,SdlPacket.FRAME_INFO_START_SERVICE_NAK=3,SdlPacket.FRAME_INFO_END_SERVICE=4,SdlPacket.FRAME_INFO_END_SERVICE_ACK=5,SdlPacket.FRAME_INFO_END_SERVICE_NAK=6,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT=7,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK=8,SdlPacket.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK=9,SdlPacket.FRAME_INFO_TRANSPORT_EVENT_UPDATE=253,SdlPacket.FRAME_INFO_SERVICE_DATA_ACK=254,SdlPacket.FRAME_INFO_HEART_BEAT_ACK=255,SdlPacket.FRAME_INFO_FINAL_CONNESCUTIVE_FRAME=0,SdlPacket.FRAME_INFO_RESERVED=0;var global$1="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,inited=!1;function init(){inited=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,n=e.length;t<n;++t)lookup[t]=e[t],revLookup[e.charCodeAt(t)]=t;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63}function toByteArray(e){var t,n,r,i,o;inited||init();var s=e.length;if(0<s%4)throw new Error("Invalid string. Length must be a multiple of 4");i="="===e[s-2]?2:"="===e[s-1]?1:0,o=new Arr(3*s/4-i),n=0<i?s-4:s;var a=0;for(t=0;t<n;t+=4,3)r=revLookup[e.charCodeAt(t)]<<18|revLookup[e.charCodeAt(t+1)]<<12|revLookup[e.charCodeAt(t+2)]<<6|revLookup[e.charCodeAt(t+3)],o[a++]=r>>16&255,o[a++]=r>>8&255,o[a++]=255&r;return 2==i?(r=revLookup[e.charCodeAt(t)]<<2|revLookup[e.charCodeAt(t+1)]>>4,o[a++]=255&r):1==i&&(r=revLookup[e.charCodeAt(t)]<<10|revLookup[e.charCodeAt(t+1)]<<4|revLookup[e.charCodeAt(t+2)]>>2,o[a++]=r>>8&255,o[a++]=255&r),o}function tripletToBase64(e){return lookup[e>>18&63]+lookup[e>>12&63]+lookup[e>>6&63]+lookup[63&e]}function encodeChunk(e,t,n){for(var r,i=[],o=t;o<n;o+=3)r=(e[o]<<16)+(e[o+1]<<8)+e[o+2],i.push(tripletToBase64(r));return i.join("")}function fromByteArray(e){var t;inited||init();for(var n=e.length,r=n%3,i="",o=[],s=0,a=n-r;s<a;s+=16383)o.push(encodeChunk(e,s,a<s+16383?a:s+16383));return 1==r?(t=e[n-1],i+=lookup[t>>2],i+=lookup[t<<4&63],i+="=="):2==r&&(t=(e[n-2]<<8)+e[n-1],i+=lookup[t>>10],i+=lookup[t>>4&63],i+=lookup[t<<2&63],i+="="),o.push(i),o.join("")}function read(e,t,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,_=n?i-1:0,f=n?-1:1,h=e[t+_];for(_+=f,o=h&(1<<-c)-1,h>>=-c,c+=a;0<c;o=256*o+e[t+_],_+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;0<c;s=256*s+e[t+_],_+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),o-=l}return(h?-1:1)*s*Math.pow(2,o-r)}function write(e,t,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,_=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,E=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),2<=(t+=1<=s+_?f/u:f*Math.pow(2,1-_))*u&&(s++,u/=2),c<=s+_?(a=0,s=c):1<=s+_?(a=(t*u-1)*Math.pow(2,i),s+=_):(a=t*Math.pow(2,_-1)*Math.pow(2,i),s=0));8<=i;e[n+h]=255&a,h+=E,a/=256,i-=8);for(s=s<<i|a,l+=i;0<l;e[n+h]=255&s,h+=E,s/=256,l-=8);e[n+h-E]|=128*p}var toString={}.toString,isArray=Array.isArray||function(e){return"[object Array]"==toString.call(e)},INSPECT_MAX_BYTES=50;function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(e,t){if(kMaxLength()<t)throw new RangeError("Invalid typed array length");return Buffer.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Buffer.prototype:(null===e&&(e=new Buffer(t)),e.length=t),e}function Buffer(e,t,n){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(e,t,n);if("number"!=typeof e)return from(this,e,t,n);if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(this,e)}function from(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?fromArrayBuffer(e,t,n,r):"string"==typeof t?fromString(e,t,n):fromObject(e,t)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,n,r){return assertSize(t),t<=0?createBuffer(e,t):void 0!==n?"string"==typeof r?createBuffer(e,t).fill(n,r):createBuffer(e,t).fill(n):createBuffer(e,t)}function allocUnsafe(e,t){if(assertSize(t),e=createBuffer(e,t<0?0:0|checked(t)),!Buffer.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function fromString(e,t,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(t,n),i=(e=createBuffer(e,r)).write(t,n);return i!==r&&(e=e.slice(0,i)),e}function fromArrayLike(e,t){var n=t.length<0?0:0|checked(t.length);e=createBuffer(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function fromArrayBuffer(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r),Buffer.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Buffer.prototype:e=fromArrayLike(e,t),e}function fromObject(e,t){if(internalIsBuffer(t)){var n=0|checked(t.length);return 0===(e=createBuffer(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||isnan(t.length)?createBuffer(e,0):fromArrayLike(e,t);if("Buffer"===t.type&&isArray(t.data))return fromArrayLike(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|e}function internalIsBuffer(e){return!(null==e||!e._isBuffer)}function byteLength(e,t){if(internalIsBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return base64ToBytes(e).length;default:if(r)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),r=!0}}function slowToString(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e=e||"utf8";;)switch(e){case"hex":return hexSlice(this,t,n);case"utf8":case"utf-8":return utf8Slice(this,t,n);case"ascii":return asciiSlice(this,t,n);case"latin1":case"binary":return latin1Slice(this,t,n);case"base64":return base64Slice(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function swap(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function bidirectionalIndexOf(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):2147483647<n?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=Buffer.from(t,r)),internalIsBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,n,r,i);if("number"==typeof t)return t&=255,Buffer.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):arrayIndexOf(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,n,r,i){var o,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a/=s=2,u/=2,n/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(a<n+u&&(n=a-u),o=n;0<=o;o--){for(var _=!0,f=0;f<u;f++)if(l(e,o+f)!==l(t,f)){_=!1;break}if(_)return o}return-1}function hexWrite(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?i<(r=Number(r))&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");o/2<r&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function utf8Write(e,t,n,r){return blitBuffer(utf8ToBytes(t,e.length-n),e,n,r)}function asciiWrite(e,t,n,r){return blitBuffer(asciiToBytes(t),e,n,r)}function latin1Write(e,t,n,r){return asciiWrite(e,t,n,r)}function base64Write(e,t,n,r){return blitBuffer(base64ToBytes(t),e,n,r)}function ucs2Write(e,t,n,r){return blitBuffer(utf16leToBytes(t,e.length-n),e,n,r)}function base64Slice(e,t,n){return 0===t&&n===e.length?fromByteArray(e):fromByteArray(e.slice(t,n))}function utf8Slice(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,s,a,u,l=e[i],c=null,_=239<l?4:223<l?3:191<l?2:1;if(i+_<=n)switch(_){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&127<(u=(31&l)<<6|63&o)&&(c=u);break;case 3:o=e[i+1],s=e[i+2],128==(192&o)&&128==(192&s)&&2047<(u=(15&l)<<12|(63&o)<<6|63&s)&&(u<55296||57343<u)&&(c=u);break;case 4:o=e[i+1],s=e[i+2],a=e[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&65535<(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)&&u<1114112&&(c=u)}null===c?(c=65533,_=1):65535<c&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=_}return decodeCodePointsArray(r)}Buffer.TYPED_ARRAY_SUPPORT=void 0===global$1.TYPED_ARRAY_SUPPORT||global$1.TYPED_ARRAY_SUPPORT,Buffer.poolSize=8192,Buffer._augment=function(e){return e.__proto__=Buffer.prototype,e},Buffer.from=function(e,t,n){return from(null,e,t,n)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array),Buffer.alloc=function(e,t,n){return alloc(null,e,t,n)},Buffer.allocUnsafe=function(e){return allocUnsafe(null,e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(null,e)},Buffer.isBuffer=isBuffer,Buffer.compare=function(e,t){if(!internalIsBuffer(e)||!internalIsBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},Buffer.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function(e,t){if(!isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var n;if(void 0===t)for(n=t=0;n<e.length;++n)t+=e[n].length;var r=Buffer.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!internalIsBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function(){var e=0|this.length;return 0==e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function(e){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function(){var e="",t=INSPECT_MAX_BYTES;return 0<this.length&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function(e,t,n,r,i){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(i<=r&&n<=t)return 0;if(i<=r)return-1;if(n<=t)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(o,s),u=this.slice(r,i),l=e.slice(t,n),c=0;c<a;++c)if(u[c]!==l[c]){o=u[c],s=l[c];break}return o<s?-1:s<o?1:0},Buffer.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Buffer.prototype.indexOf=function(e,t,n){return bidirectionalIndexOf(this,e,t,n,!0)},Buffer.prototype.lastIndexOf=function(e,t,n){return bidirectionalIndexOf(this,e,t,n,!1)},Buffer.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||i<n)&&(n=i),0<e.length&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r=r||"utf8";for(var o=!1;;)switch(r){case"hex":return hexWrite(this,e,t,n);case"utf8":case"utf-8":return utf8Write(this,e,t,n);case"ascii":return asciiWrite(this,e,t,n);case"latin1":case"binary":return latin1Write(this,e,t,n);case"base64":return base64Write(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},Buffer.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=MAX_ARGUMENTS_LENGTH));return n}function asciiSlice(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function latin1Slice(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function hexSlice(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||r<n)&&(n=r);for(var i="",o=t;o<n;++o)i+=toHex(e[o]);return i}function utf16leSlice(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function checkOffset(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(n<e+t)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,n,r,i,o){if(!internalIsBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(i<t||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function objectWriteUInt16(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function objectWriteUInt32(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function checkIEEE754(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function writeFloat(e,t,n,r,i){return i||checkIEEE754(e,t,n,4),write(e,t,n,r,23,4),n+4}function writeDouble(e,t,n,r,i){return i||checkIEEE754(e,t,n,8),write(e,t,n,r,52,8),n+8}Buffer.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):r<e&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):r<t&&(t=r),t<e&&(t=e),Buffer.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=Buffer.prototype;else{var i=t-e;n=new Buffer(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},Buffer.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},Buffer.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e+--t],i=1;0<t&&(i*=256);)r+=this[e+--t]*i;return r},Buffer.prototype.readUInt8=function(e,t){return t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function(e,t){return t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function(e,t){return t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function(e,t){return t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function(e,t){return t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return(i*=128)<=r&&(r-=Math.pow(2,8*t)),r},Buffer.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=t,i=1,o=this[e+--r];0<r&&(i*=256);)o+=this[e+--r]*i;return(i*=128)<=o&&(o-=Math.pow(2,8*t)),o},Buffer.prototype.readInt8=function(e,t){return t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer.prototype.readInt16LE=function(e,t){t||checkOffset(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt16BE=function(e,t){t||checkOffset(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt32LE=function(e,t){return t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function(e,t){return t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},Buffer.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;0<=--i&&(o*=256);)this[t+i]=e/o&255;return t+n},Buffer.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);checkInt(this,e,t,n,i-1,-i)}var o=0,s=1,a=0;for(this[t]=255&e;++o<n&&(s*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},Buffer.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);checkInt(this,e,t,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[t+o]=255&e;0<=--o&&(s*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/s>>0)-a&255;return t+n},Buffer.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeFloatLE=function(e,t,n){return writeFloat(this,e,t,!0,n)},Buffer.prototype.writeFloatBE=function(e,t,n){return writeFloat(this,e,t,!1,n)},Buffer.prototype.writeDoubleLE=function(e,t,n){return writeDouble(this,e,t,!0,n)},Buffer.prototype.writeDoubleBE=function(e,t,n){return writeDouble(this,e,t,!1,n)},Buffer.prototype.copy=function(e,t,n,r){if(n=n||0,r||0===r||(r=this.length),t>=e.length&&(t=e.length),t=t||0,0<r&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;0<=i;--i)e[i+t]=this[i+n];else if(o<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},Buffer.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Buffer.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,"number"==typeof(e=e||0))for(o=t;o<n;++o)this[o]=e;else{var s=internalIsBuffer(e)?e:utf8ToBytes(new Buffer(e,r).toString()),a=s.length;for(o=0;o<n-t;++o)this[o+t]=s[o%a]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(e){if((e=stringtrim(e).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function stringtrim(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],s=0;s<r;++s){if(55295<(n=e.charCodeAt(s))&&n<57344){if(!i){if(56319<n){-1<(t-=3)&&o.push(239,191,189);continue}if(s+1===r){-1<(t-=3)&&o.push(239,191,189);continue}i=n;continue}if(n<56320){-1<(t-=3)&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&-1<(t-=3)&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function asciiToBytes(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}function utf16leToBytes(e,t){for(var n,r,i,o=[],s=0;s<e.length&&!((t-=2)<0);++s)r=(n=e.charCodeAt(s))>>8,i=n%256,o.push(i),o.push(r);return o}function base64ToBytes(e){return toByteArray(base64clean(e))}function blitBuffer(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}function isnan(e){return e!=e}function isBuffer(e){return null!=e&&(!!e._isBuffer||isFastBuffer(e)||isSlowBuffer(e))}function isFastBuffer(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function isSlowBuffer(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&isFastBuffer(e.slice(0,0))}var TextEncoder=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"encode",value:function(e){for(var t=e.length,n=-1,r=[],i=0,o=0,s=0;s!==t;){if(i=e.charCodeAt(s),s+=1,55296<=i&&i<=56319){if(s===t){r[n+=1]=239,r[n+=1]=191,r[n+=1]=189;break}if(!(56320<=(o=e.charCodeAt(s))&&o<=57343)){r[n+=1]=239,r[n+=1]=191,r[n+=1]=189;continue}if(s+=1,65535<(i=1024*(i-55296)+o-56320+65536)){r[n+=1]=240|i>>>18,r[n+=1]=128|i>>>12&63,r[n+=1]=128|i>>>6&63,r[n+=1]=128|63&i;continue}}i<=127?r[n+=1]=0|i:(i<=2047?r[n+=1]=192|i>>>6:(r[n+=1]=224|i>>>12,r[n+=1]=128|i>>>6&63),r[n+=1]=128|63&i)}return r.length=n+1,r}}]),e}(),JsonRpcMarshaller=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"marshall",value:function(e){var t=null;try{var n=function e(t){var n=t.getParameters();for(var r in n)n[r]instanceof RpcStruct&&(n[r]=e(n[r]));return n}(e),r=JSON.stringify(n);t=this._encode(r)}catch(e){console.error("Failed to encode messages to JSON.",e)}return t}},{key:"unmarshall",value:function(e){var t=null;try{var n=this._decode(e);t=JSON.parse(n)}catch(e){console.error("Failed to parse JSON",e)}return t}},{key:"_encode",value:function(e){return new Uint8Array(TextEncoder.encode(e))}},{key:"_decode",value:function(e){return Buffer.from(e).toString()}}]),e}(),BinaryFrameHeader=function(){function l(e,t,n,r){_classCallCheck(this,l),this._rpcType=e,this._functionId=t,this._correlationId=n,this._jsonSize=r,this._bulkData=null,this._jsonData=null}return _createClass(l,[{key:"assembleHeaderBytes",value:function(){var e=[],t=this._functionId,n=this._correlationId;this._rpcType;e.push((251658240&t)>>24),e.push((16711680&t)>>16),e.push((65280&t)>>8),e.push(255&t),e.push((4278190080&n)>>24),e.push((16711680&n)>>16),e.push((65280&n)>>8),e.push(255&n);var r=this._jsonSize;return e.push((4278190080&r)>>24),e.push((16711680&r)>>16),e.push((65280&r)>>8),e.push(255&r),e}},{key:"setRpcType",value:function(e){return this._rpcType=e,this}},{key:"getRpcType",value:function(){return this._rpcType}},{key:"setFunctionId",value:function(e){return this._functionId=e,this}},{key:"getFunctionId",value:function(){return this._functionId}},{key:"setCorrelationId",value:function(e){return this._correlationId=e,this}},{key:"getCorrelationId",value:function(){return this._correlationId}},{key:"setJsonSize",value:function(e){return this._jsonSize=e,this}},{key:"getJsonSize",value:function(){return this._jsonSize}},{key:"getJsonData",value:function(){return this._jsonData}},{key:"setJsonData",value:function(e){return this._jsonData=e,this}},{key:"setBulkData",value:function(e){return this._bulkData=e,this}},{key:"getBulkData",value:function(){return this._bulkData}}],[{key:"fromBinaryHeader",value:function(e){var t=e[0]>>4,n=(15&e[0])<<24;n+=(255&e[1])<<16,n+=(255&e[2])<<8,n+=255&e[3];var r=(255&e[4])<<24;r+=(255&e[5])<<16,r+=(255&e[6])<<8,r+=255&e[7];var i=(255&e[8])<<24;i+=(255&e[9])<<16,i+=(255&e[10])<<8;var o=new l(t,n,r,i+=255&e[11]),s=l.HEADER_SIZE,a=l.HEADER_SIZE+i;if(o.setJsonData(e.slice(s,a)),e.length>a){var u=e.slice(a);o.setBulkData(u)}return o}}]),l}();BinaryFrameHeader.HEADER_SIZE=12;var MessageFrameDisassembler=function(){function u(e,t,n,r,i,o,s){if(_classCallCheck(this,u),this._rpcRequest=e,this._sessionId=t,this._messageId=n,this._isEncrypted=o,!r)throw new Error("MTU must be specified.");if(this._mtu=r,!i)throw new Error("Version must be specified.");this._version=i,this._packetCallback=s}return _createClass(u,[{key:"_buildRPCMainBuffer",value:function(){var e=this._rpcRequest.getBulkData(),t=this._rpcRequest.getCorrelationId(),n=this._rpcRequest.getRPCType(),r=this._rpcRequest.getFunctionName(),i=FunctionID.valueForKey(r);if(!i)throw new Error("Failed to find function ".concat(r));var o=JsonRpcMarshaller.marshall(this._rpcRequest),s=o.length,a=new BinaryFrameHeader(n,i,t);a.setJsonData(o),a.setJsonSize(s),a.setBulkData(e);var u=a.getBulkData(),l=0;u&&(l=u.length);var c=new Uint8Array(12+s+l);return c.set(a.assembleHeaderBytes(),0),c.set(o,12),u&&c.set(u,12+s),c}},{key:"doRequest",value:function(){var e=this._version,t=FrameType.SINGLE,n=SdlPacket.SERVICE_TYPE_RPC,r=this._sessionId,i=this._messageId,o=this._isEncrypted,s=this._buildRPCMainBuffer(),a=this._mtu,u=Math.ceil(s.length/a);if(u<=1){var l=this._constructPacket(e,n,0,r,i,t,s,o);this._packetCallback(l)}else{var c=new ArrayBuffer(8),_=new DataView(c);_.setUint32(0,s.length,!1),_.setUint32(4,u,!1);var f=new Uint8Array(c),h=this._constructPacket(e,n,0,r,i,FrameType.FIRST,f,o);this._packetCallback(h),this._buildConsecutiveFrames(e,n,r,i,s,a,o)}}},{key:"_constructPacket",value:function(e,t,n,r,i,o,s,a){var u=s.length;return new SdlPacket(e,a,o,t,n,r,u,i,s,0,u)}},{key:"_buildConsecutiveFrames",value:function(e,t,n,r,i,o,s){for(var a,u=0,l=0;0!==a;){a=l+o>=i.length?0:u%255+1;var c=this._constructPacket(e,t,a,n,r,FrameType.CONSECUTIVE,i.slice(l,l+o),s);this._packetCallback(c),u++,l+=o}}}],[{key:"buildRPC",value:function(e,t,n,r,i,o,s){var a=new u(e,t,n,r,i,o,s);return a.doRequest(),a}}]),u}(),TransportListener=function(){function e(){_classCallCheck(this,e),this._onTransportConnected=null,this._onTransportDisconnected=null,this._onError=null,this._onPacketReceived=null}return _createClass(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}},{key:"setOnTransportDisconnected",value:function(e){return this._onTransportDisconnected=e,this}},{key:"setOnError",value:function(e){return this._onError=e,this}},{key:"setOnPacketReceived",value:function(e){return this._onPacketReceived=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onTransportDisconnected",value:function(){"function"==typeof this._onTransportDisconnected&&this._onTransportDisconnected()}},{key:"onError",value:function(e){var t=0<arguments.length&&void 0!==e?e:null;"function"==typeof this._onError&&this._onError(t)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),Version=function(){function r(e,t,n){_classCallCheck(this,r),this.setMajor(e),this.setMinor(t),this.setPatch(n)}return _createClass(r,[{key:"setMajor",value:function(e){return this._major=parseInt(e)||0,this}},{key:"getMajor",value:function(){return this._major}},{key:"setMinor",value:function(e){return this._minor=parseInt(e)||0,this}},{key:"getMinor",value:function(){return this._minor}},{key:"setPatch",value:function(e){return this._patch=parseInt(e)||0,this}},{key:"getPatch",value:function(){return this._patch}},{key:"fromString",value:function(e){var t=e.split(".");if(3!==t.length)throw new Error("Incorrect version string format");return this.setMajor(t[0]),this.setMinor(t[1]),this.setPatch(t[2]),this}},{key:"toString",value:function(){return"".concat(this.getMajor(),".").concat(this.getMinor(),".").concat(this.getPatch())}},{key:"isNewerThan",value:function(e){if(this.getMajor()>e.getMajor())return 1;if(this.getMajor()===e.getMajor()){if(this.getMinor()>e.getMinor())return 1;if(this.getMinor()===e.getMinor()){if(this.getPatch()>e.getPatch())return 1;if(this.getPatch()===e.getPatch())return 0}}return-1}}]),r}(),ServiceType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CONTROL",get:function(){return t._MAP.CONTROL}},{key:"RPC",get:function(){return t._MAP.RPC}},{key:"AUDIO",get:function(){return t._MAP.AUDIO}},{key:"VIDEO",get:function(){return t._MAP.VIDEO}},{key:"HYBRID",get:function(){return t._MAP.HYBRID}}]),t}();ServiceType._MAP=Object.freeze({CONTROL:0,RPC:7,AUDIO:10,VIDEO:11,HYBRID:15});var MessageFrameAssembler=function(){function t(e){if(_classCallCheck(this,t),"function"!=typeof e)throw new Error("Callback not of expected type (function) for MessageFrameAssembler");this._callback=e,this._accumulator=[],this._totalConsecutiveFrames=0,this._consecutiveFramesHandledCount=0,this._consecutiveFramesDataLength=0}return _createClass(t,[{key:"handleFrame",value:function(e){var t=e.getFrameType();return t!==FrameType.FIRST&&t!==FrameType.CONSECUTIVE?this._callback(null,e):this._handleMultiFrameMessage(e)}},{key:"_handleFirstDataFrame",value:function(e){var t=e.getPayload();if(t instanceof Uint8Array!=!0||8!==t.length)throw new Error("Error handling first frame. Payload is an invalid length should be length 8.");for(var n in t)if(n<0||255<n)throw new Error("Invalid payload. Must be an array of uint8 bytes.");var r=(15&t[0])<<24;r+=(255&t[1])<<16,r+=(255&t[2])<<8,r+=255&t[3];var i=(255&t[4])<<24;i+=(255&t[5])<<16,i+=(255&t[6])<<8,i+=255&t[7],this._totalConsecutiveFrames=i,this._consecutiveFramesDataLength=r}},{key:"_handleConsecutiveFrame",value:function(e){this._consecutiveFramesHandledCount++;var t=e.getFrameType(),n=e.getFrameInfo(),r=e.getPayload(),i=!0,o=!1,s=void 0;try{for(var a,u=r[Symbol.iterator]();!(i=(a=u.next()).done);i=!0){var l=a.value;this._accumulator.push(l)}}catch(e){o=!0,s=e}finally{try{i||null==u.return||u.return()}finally{if(o)throw s}}if(0===n){this._consecutiveFramesHandledCount!==this._totalConsecutiveFrames&&console.warn("Total frames expected ".concat(this._totalConsecutiveFrames," does not match total frames received ").concat(this._consecutiveFramesHandledCount)),this._consecutiveFramesDataLength!==this._accumulator.length&&console.warn("Total data expected ".concat(this._consecutiveFramesDataLength," does not match total data received ").concat(this._accumulator.length));var c=new SdlPacket(e.getVersion(),e.getEncryption(),t,e.getServiceType(),n,e.getSessionID(),this._accumulator.length,e.getMessageID(),this._accumulator,0,this._accumulator.length);this._callback(null,c)}}},{key:"_handleMultiFrameMessage",value:function(e){return e.getFrameType()===FrameType.FIRST?this._handleFirstDataFrame(e):this._handleConsecutiveFrame(e)}}]),t}(),ControlFrameTags=function e(){_classCallCheck(this,e)},StartServiceACKBase={MTU:"mtu"},NAKBase={REJECTED_PARAMS:"rejectedParams"},StartServiceProtocolVersion={PROTOCOL_VERSION:"protocolVersion"},StartServiceHashId={HASH_ID:"hashId"},StartServiceDimensions={HEIGHT:"height",WIDTH:"width"};ControlFrameTags.RPC=Object.freeze({StartService:StartServiceProtocolVersion,StartServiceACK:Object.assign({SECONDARY_TRANSPORTS:"secondaryTransports",AUDIO_SERVICE_TRANSPORTS:"audioServiceTransports",VIDEO_SERVICE_TRANSPORTS:"videoServiceTransports",AUTH_TOKEN:"authToken"},StartServiceACKBase,StartServiceProtocolVersion,StartServiceHashId),StartServiceNAK:NAKBase,EndService:StartServiceHashId,EndServiceACK:{},EndServiceNAK:NAKBase,TransportEventUpdate:{TCP_IP_ADDRESS:"tcpIpAddress",TCP_PORT:"tcpPort"},RegisterSecondaryTransport:{},RegisterSecondaryTransportACK:{},RegisterSecondaryTransportNAK:Object.assign({REASON:"reason"},NAKBase)}),ControlFrameTags.Audio=Object.freeze({StartService:{},StartServiceACK:StartServiceACKBase,StartServiceNAK:NAKBase,EndService:{},EndServiceACK:{},EndServiceNAK:NAKBase}),ControlFrameTags.Video=Object.freeze({StartService:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},StartServiceDimensions),StartServiceACK:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},StartServiceACKBase,StartServiceDimensions),StartServiceNAK:NAKBase,EndService:{},EndServiceACK:{},EndServiceNAK:NAKBase});var BitConverter=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"arrayBufferToInt32",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:0;return e?new DataView(e).getUint32(n):-1}},{key:"int32ToArrayBuffer",value:function(e){var t=new ArrayBuffer(4);return new DataView(t).setUint32(0,e,!1),t}}]),e}(),SdlPacketFactory=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"createHeartbeatACK",value:function(e,t,n){return new SdlPacket(n,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_HEART_BEAT_ACK,t,0,0,null)}},{key:"createEndSession",value:function(e,t,n,r,i){if(r<5){var o=new Uint8Array(BitConverter.int32ToArrayBuffer(i));return new SdlPacket(r,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_END_SERVICE,t,o.length,n,o,0,o.length)}var s=new SdlPacket(r,!1,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_END_SERVICE,t,0,n,null);return s.putTag(ControlFrameTags.RPC.EndService.HASH_ID,i),s}}]),e}(),ImageType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"STATIC",get:function(){return t._MAP.STATIC}},{key:"DYNAMIC",get:function(){return t._MAP.DYNAMIC}}]),t}();ImageType._MAP=Object.freeze({STATIC:"STATIC",DYNAMIC:"DYNAMIC"});var Image=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setValue",value:function(e){return this.setParameter(t.KEY_VALUE,e),this}},{key:"getValue",value:function(){return this.getParameter(t.KEY_VALUE)}},{key:"setImageType",value:function(e){return this.validateType(ImageType,e),this.setParameter(t.KEY_IMAGE_TYPE,e),this}},{key:"getImageType",value:function(){return this.getObject(ImageType,t.KEY_IMAGE_TYPE)}},{key:"setIsTemplate",value:function(e){return this.setParameter(t.KEY_IS_TEMPLATE,e),this}},{key:"getIsTemplate",value:function(){return this.getParameter(t.KEY_IS_TEMPLATE)}}]),t}();Image.KEY_VALUE="value",Image.KEY_IMAGE_TYPE="imageType",Image.KEY_IS_TEMPLATE="isTemplate";var MenuParams=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setParentID",value:function(e){return this.setParameter(t.KEY_PARENT_ID,e),this}},{key:"getParentID",value:function(){return this.getParameter(t.KEY_PARENT_ID)}},{key:"setPosition",value:function(e){return this.setParameter(t.KEY_POSITION,e),this}},{key:"getPosition",value:function(){return this.getParameter(t.KEY_POSITION)}},{key:"setMenuName",value:function(e){return this.setParameter(t.KEY_MENU_NAME,e),this}},{key:"getMenuName",value:function(){return this.getParameter(t.KEY_MENU_NAME)}}]),t}();MenuParams.KEY_PARENT_ID="parentID",MenuParams.KEY_POSITION="position",MenuParams.KEY_MENU_NAME="menuName";var AddCommand=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.AddCommand),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setCmdID",value:function(e){return this.setParameter(n.KEY_CMD_ID,e),this}},{key:"getCmdID",value:function(){return this.getParameter(n.KEY_CMD_ID)}},{key:"setMenuParams",value:function(e){return this.validateType(MenuParams,e),this.setParameter(n.KEY_MENU_PARAMS,e),this}},{key:"getMenuParams",value:function(){return this.getObject(MenuParams,n.KEY_MENU_PARAMS)}},{key:"setVrCommands",value:function(e){return this.setParameter(n.KEY_VR_COMMANDS,e),this}},{key:"getVrCommands",value:function(){return this.getParameter(n.KEY_VR_COMMANDS)}},{key:"setCmdIcon",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_CMD_ICON,e),this}},{key:"getCmdIcon",value:function(){return this.getObject(Image,n.KEY_CMD_ICON)}}]),n}();AddCommand.KEY_CMD_ICON="cmdIcon",AddCommand.KEY_MENU_PARAMS="menuParams",AddCommand.KEY_CMD_ID="cmdID",AddCommand.KEY_VR_COMMANDS="vrCommands";var AddCommandResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.AddCommand),t}return _inherits(n,RpcResponse),n}(),RpcNotification=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setRPCType(RpcType.NOTIFICATION),t}return _inherits(n,RpcMessage),n}(),HMILevel=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"HMI_FULL",get:function(){return t._MAP.HMI_FULL}},{key:"HMI_LIMITED",get:function(){return t._MAP.HMI_LIMITED}},{key:"HMI_BACKGROUND",get:function(){return t._MAP.HMI_BACKGROUND}},{key:"HMI_NONE",get:function(){return t._MAP.HMI_NONE}}]),t}();HMILevel._MAP=Object.freeze({HMI_FULL:"FULL",HMI_LIMITED:"LIMITED",HMI_BACKGROUND:"BACKGROUND",HMI_NONE:"NONE"});var AudioStreamingState=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"AUDIBLE",get:function(){return t._MAP.AUDIBLE}},{key:"ATTENUATED",get:function(){return t._MAP.ATTENUATED}},{key:"NOT_AUDIBLE",get:function(){return t._MAP.NOT_AUDIBLE}}]),t}();AudioStreamingState._MAP=Object.freeze({AUDIBLE:"AUDIBLE",ATTENUATED:"ATTENUATED",NOT_AUDIBLE:"NOT_AUDIBLE"});var VideoStreamingState=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"STREAMABLE",get:function(){return t._MAP.STREAMABLE}},{key:"NOT_STREAMABLE",get:function(){return t._MAP.NOT_STREAMABLE}}]),t}();VideoStreamingState._MAP=Object.freeze({STREAMABLE:"STREAMABLE",NOT_STREAMABLE:"NOT_STREAMABLE"});var SystemContext=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SYSCTXT_MAIN",get:function(){return t._MAP.SYSCTXT_MAIN}},{key:"SYSCTXT_VRSESSION",get:function(){return t._MAP.SYSCTXT_VRSESSION}},{key:"SYSCTXT_MENU",get:function(){return t._MAP.SYSCTXT_MENU}},{key:"SYSCTXT_HMI_OBSCURED",get:function(){return t._MAP.SYSCTXT_HMI_OBSCURED}},{key:"SYSCTXT_ALERT",get:function(){return t._MAP.SYSCTXT_ALERT}}]),t}();SystemContext._MAP=Object.freeze({SYSCTXT_MAIN:"MAIN",SYSCTXT_VRSESSION:"VRSESSION",SYSCTXT_MENU:"MENU",SYSCTXT_HMI_OBSCURED:"HMI_OBSCURED",SYSCTXT_ALERT:"ALERT"});var OnHmiStatus=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.OnHMIStatus),t}return _inherits(n,RpcNotification),_createClass(n,[{key:"setHMILevel",value:function(e){return this.validateType(HMILevel,e),this.setParameter(n.KEY_HMI_LEVEL,e),this}},{key:"getHMILevel",value:function(){return this.getObject(HMILevel,n.KEY_HMI_LEVEL)}},{key:"setAudioStreamingState",value:function(e){return this.validateType(AudioStreamingState,e),this.setParameter(n.KEY_AUDIO_STREAMING_STATE,e),this}},{key:"getAudioStreamingState",value:function(){return this.getObject(AudioStreamingState,n.KEY_AUDIO_STREAMING_STATE)}},{key:"setSystemContext",value:function(e){return this.validateType(SystemContext,e),this.setParameter(n.KEY_SYSTEM_CONTEXT,e),this}},{key:"getSystemContext",value:function(){return this.getObject(SystemContext,n.KEY_SYSTEM_CONTEXT)}},{key:"setVideoStreamingState",value:function(e){return this.validateType(VideoStreamingState,e),this.setParameter(n.KEY_VIDEO_STREAMING_STATE,e),this}},{key:"getVideoStreamingState",value:function(){return this.getObject(VideoStreamingState,n.KEY_VIDEO_STREAMING_STATE)}},{key:"setWindowID",value:function(e){return this.setParameter(n.KEY_WINDOW_ID,e),this}},{key:"getWindowID",value:function(){return this.getParameter(n.KEY_WINDOW_ID)}}]),n}();OnHmiStatus.KEY_HMI_LEVEL="hmiLevel",OnHmiStatus.KEY_AUDIO_STREAMING_STATE="audioStreamingState",OnHmiStatus.KEY_SYSTEM_CONTEXT="systemContext",OnHmiStatus.KEY_VIDEO_STREAMING_STATE="videoStreamingState",OnHmiStatus.KEY_WINDOW_ID="windowID";var OnLanguageChange=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.OnLanguageChange),t}return _inherits(n,RpcNotification),_createClass(n,[{key:"setLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_LANGUAGE,e),this}},{key:"getLanguage",value:function(){return this.getObject(Language,n.KEY_LANGUAGE)}},{key:"setHMIDisplayLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE,e),this}},{key:"getHMIDisplayLanguage",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE)}}]),n}();OnLanguageChange.KEY_LANGUAGE="language",OnLanguageChange.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage";var FileType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"GRAPHIC_BMP",get:function(){return t._MAP.GRAPHIC_BMP}},{key:"GRAPHIC_JPEG",get:function(){return t._MAP.GRAPHIC_JPEG}},{key:"GRAPHIC_PNG",get:function(){return t._MAP.GRAPHIC_PNG}},{key:"AUDIO_WAVE",get:function(){return t._MAP.AUDIO_WAVE}},{key:"AUDIO_AAC",get:function(){return t._MAP.AUDIO_AAC}},{key:"BINARY",get:function(){return t._MAP.BINARY}},{key:"JSON",get:function(){return t._MAP.JSON}}]),t}();FileType._MAP=Object.freeze({GRAPHIC_BMP:"GRAPHIC_BMP",GRAPHIC_JPEG:"GRAPHIC_JPEG",GRAPHIC_PNG:"GRAPHIC_PNG",AUDIO_WAVE:"AUDIO_WAVE",AUDIO_MP3:"AUDIO_MP3",AUDIO_AAC:"AUDIO_AAC",BINARY:"BINARY",JSON:"JSON"});var PutFile=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.PutFile),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setFileData",value:function(e){return this.setBulkData(e),this}},{key:"getFileData",value:function(){return this.getBulkData()}},{key:"setFileName",value:function(e){return this.setParameter(n.KEY_FILE_NAME,e),this}},{key:"getFileName",value:function(){return this.getParameter(n.KEY_FILE_NAME)}},{key:"setFileType",value:function(e){return this.validateType(FileType,e),this.setParameter(n.KEY_FILE_TYPE,e),this}},{key:"getFileType",value:function(){return this.getObject(FileType,n.KEY_MENU_PARAMS)}},{key:"setPersistentFile",value:function(e){return this.setParameter(n.KEY_PERSISTENT_FILE,e),this}},{key:"getPersistentFile",value:function(){return this.getParameter(n.KEY_PERSISTENT_FILE)}},{key:"setSystemFile",value:function(e){return this.setParameter(n.KEY_SYSTEM_FILE,e),this}},{key:"getSystemFile",value:function(){return this.getParameter(n.KEY_SYSTEM_FILE)}},{key:"setOffset",value:function(e){return this.setParameter(n.KEY_OFFSET,e),this}},{key:"getOffset",value:function(){return this.getParameter(n.KEY_OFFSET)}},{key:"setLength",value:function(e){return this.setParameter(n.KEY_LENGTH,e),this}},{key:"getLength",value:function(){return this.getParameter(n.KEY_LENGTH)}},{key:"setCRC",value:function(e){return this.setParameter(n.KEY_CRC,e),this}},{key:"getCRC",value:function(){return this.getParameter(n.KEY_CRC)}}]),n}();PutFile.KEY_FILE_NAME="syncFileName",PutFile.KEY_FILE_TYPE="fileType",PutFile.KEY_PERSISTENT_FILE="persistentFile",PutFile.KEY_SYSTEM_FILE="systemFile",PutFile.KEY_OFFSET="offset",PutFile.KEY_LENGTH="length",PutFile.KEY_CRC="crc";var PutFileResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.PutFile),t}return _inherits(n,RpcResponse),_createClass(n,[{key:"setSpaceAvailable",value:function(e){return this.setParameter(n.KEY_SPACE_AVAILABLE,e),this}},{key:"getSpaceAvailable",value:function(){return this.getParameter(n.KEY_SPACE_AVAILABLE)}}]),n}();PutFileResponse.KEY_SPACE_AVAILABLE="spaceAvailable";var TextFieldName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"mainField1",get:function(){return t._MAP.mainField1}},{key:"mainField2",get:function(){return t._MAP.mainField2}},{key:"mainField3",get:function(){return t._MAP.mainField3}},{key:"mainField4",get:function(){return t._MAP.mainField4}},{key:"statusBar",get:function(){return t._MAP.statusBar}},{key:"mediaClock",get:function(){return t._MAP.mediaClock}},{key:"mediaTrack",get:function(){return t._MAP.mediaTrack}},{key:"templateTitle",get:function(){return t._MAP.templateTitle}},{key:"alertText1",get:function(){return t._MAP.alertText1}},{key:"alertText2",get:function(){return t._MAP.alertText2}},{key:"alertText3",get:function(){return t._MAP.alertText3}},{key:"scrollableMessageBody",get:function(){return t._MAP.scrollableMessageBody}},{key:"initialInteractionText",get:function(){return t._MAP.initialInteractionText}},{key:"navigationText1",get:function(){return t._MAP.navigationText1}},{key:"navigationText2",get:function(){return t._MAP.navigationText2}},{key:"ETA",get:function(){return t._MAP.ETA}},{key:"totalDistance",get:function(){return t._MAP.totalDistance}},{key:"audioPassThruDisplayText1",get:function(){return t._MAP.audioPassThruDisplayText1}},{key:"audioPassThruDisplayText2",get:function(){return t._MAP.audioPassThruDisplayText2}},{key:"sliderHeader",get:function(){return t._MAP.sliderHeader}},{key:"sliderFooter",get:function(){return t._MAP.sliderFooter}},{key:"menuName",get:function(){return t._MAP.menuName}},{key:"secondaryText",get:function(){return t._MAP.secondaryText}},{key:"tertiaryText",get:function(){return t._MAP.tertiaryText}},{key:"menuTitle",get:function(){return t._MAP.menuTitle}},{key:"locationName",get:function(){return t._MAP.locationName}},{key:"locationDescription",get:function(){return t._MAP.locationDescription}},{key:"addressLines",get:function(){return t._MAP.addressLines}},{key:"phoneNumber",get:function(){return t._MAP.phoneNumber}}]),t}();TextFieldName._MAP=Object.freeze({mainField1:"mainField1",mainField2:"mainField2",mainField3:"mainField3",mainField4:"mainField4",statusBar:"statusBar",mediaClock:"mediaClock",mediaTrack:"mediaTrack",templateTitle:"templateTitle",alertText1:"alertText1",alertText2:"alertText2",alertText3:"alertText3",scrollableMessageBody:"scrollableMessageBody",initialInteractionText:"initialInteractionText",navigationText1:"navigationText1",navigationText2:"navigationText2",ETA:"ETA",totalDistance:"totalDistance",audioPassThruDisplayText1:"audioPassThruDisplayText1",audioPassThruDisplayText2:"audioPassThruDisplayText2",sliderHeader:"sliderHeader",sliderFooter:"sliderFooter",menuName:"menuName",secondaryText:"secondaryText",tertiaryText:"tertiaryText",menuTitle:"menuTitle",locationName:"locationName",locationDescription:"locationDescription",addressLines:"addressLines",phoneNumber:"phoneNumber"});var CharacterSet=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"TYPE2SET",get:function(){return t._MAP.TYPE2SET}},{key:"TYPE5SET",get:function(){return t._MAP.TYPE5SET}},{key:"CID1SET",get:function(){return t._MAP.CID1SET}},{key:"CID2SET",get:function(){return t._MAP.CID2SET}}]),t}();CharacterSet._MAP=Object.freeze({TYPE2SET:"TYPE2SET",TYPE5SET:"TYPE5SET",CID1SET:"CID1SET",CID2SET:"CID2SET"});var TextField=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setTextFieldName",value:function(e){return this.validateType(TextFieldName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getTextFieldName",value:function(){return this.getObject(TextFieldName,t.KEY_NAME)}},{key:"setCharacterSet",value:function(e){return this.validateType(CharacterSet,e),this.setParameter(t.KEY_CHARACTER_SET,e),this}},{key:"getCharacterSet",value:function(){return this.getObject(CharacterSet,t.KEY_CHARACTER_SET)}},{key:"setWidth",value:function(e){return this.setParameter(t.KEY_WIDTH,e),this}},{key:"getWidth",value:function(){return this.getParameter(t.KEY_WIDTH)}},{key:"setRows",value:function(e){return this.setParameter(t.KEY_ROWS,e),this}},{key:"getRows",value:function(){return this.getParameter(t.KEY_ROWS)}}]),t}();TextField.KEY_NAME="name",TextField.KEY_CHARACTER_SET="characterSet",TextField.KEY_WIDTH="width",TextField.KEY_ROWS="rows";var ImageResolution=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setResolutionWidth",value:function(e){return this.setParameter(t.KEY_RESOLUTION_WIDTH,e),this}},{key:"getResolutionWidth",value:function(){return this.getParameter(t.KEY_RESOLUTION_WIDTH)}},{key:"setResolutionHeight",value:function(e){return this.setParameter(t.KEY_RESOLUTION_HEIGHT,e),this}},{key:"getResolutionHeight",value:function(){return this.getParameter(t.KEY_RESOLUTION_HEIGHT)}}]),t}();ImageResolution.KEY_RESOLUTION_WIDTH="resolutionWidth",ImageResolution.KEY_RESOLUTION_HEIGHT="resolutionHeight";var ImageFieldName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"softButtonImage",get:function(){return t._MAP.softButtonImage}},{key:"choiceImage",get:function(){return t._MAP.choiceImage}},{key:"choiceSecondaryImage",get:function(){return t._MAP.choiceSecondaryImage}},{key:"vrHelpItem",get:function(){return t._MAP.vrHelpItem}},{key:"turnIcon",get:function(){return t._MAP.turnIcon}},{key:"menuIcon",get:function(){return t._MAP.menuIcon}},{key:"cmdIcon",get:function(){return t._MAP.cmdIcon}},{key:"appIcon",get:function(){return t._MAP.appIcon}},{key:"graphic",get:function(){return t._MAP.graphic}},{key:"secondaryGraphic",get:function(){return t._MAP.secondaryGraphic}},{key:"showConstantTBTIcon",get:function(){return t._MAP.showConstantTBTIcon}},{key:"showConstantTBTNextTurnIcon",get:function(){return t._MAP.showConstantTBTNextTurnIcon}},{key:"locationImage",get:function(){return t._MAP.locationImage}},{key:"alertIcon",get:function(){return t._MAP.alertIcon}}]),t}();ImageFieldName._MAP=Object.freeze({softButtonImage:"softButtonImage",choiceImage:"choiceImage",choiceSecondaryImage:"choiceSecondaryImage",vrHelpItem:"vrHelpItem",turnIcon:"turnIcon",menuIcon:"menuIcon",cmdIcon:"cmdIcon",appIcon:"appIcon",graphic:"graphic",secondaryGraphic:"secondaryGraphic",showConstantTBTIcon:"showConstantTBTIcon",showConstantTBTNextTurnIcon:"showConstantTBTNextTurnIcon",locationImage:"locationImage",alertIcon:"alertIcon"});var ImageField=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setImageFieldName",value:function(e){return this.validateType(ImageFieldName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getImageFieldName",value:function(){return this.getObject(ImageFieldName,t.KEY_NAME)}},{key:"setImageTypeSupported",value:function(e){return this.validateType(FileType,e,!0),this.setParameter(t.KEY_IMAGE_TYPE_SUPPORTED,e),this}},{key:"getImageTypeSupported",value:function(){return this.getObject(FileType,t.KEY_IMAGE_TYPE_SUPPORTED)}},{key:"setImageResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_IMAGE_RESOLUTION,e),this}},{key:"getImageResolution",value:function(){return this.getObject(ImageResolution,t.KEY_IMAGE_RESOLUTION)}}]),t}();ImageField.KEY_NAME="name",ImageField.KEY_IMAGE_TYPE_SUPPORTED="imageTypeSupported",ImageField.KEY_IMAGE_RESOLUTION="imageResolution";var TouchEventCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPressAvailable",value:function(e){return this.setParameter(t.KEY_PRESS_AVAILABLE,e),this}},{key:"getPressAvailable",value:function(){return this.getParameter(t.KEY_PRESS_AVAILABLE)}},{key:"setMultiTouchAvailable",value:function(e){return this.setParameter(t.KEY_MULTI_TOUCH_AVAILABLE,e),this}},{key:"getMultiTouchAvailable",value:function(){return this.getParameter(t.KEY_MULTI_TOUCH_AVAILABLE)}},{key:"setDoublePressAvailable",value:function(e){return this.setParameter(t.KEY_DOUBLE_PRESS_AVAILABLE,e),this}},{key:"getDoublePressAvailable",value:function(){return this.getParameter(t.KEY_DOUBLE_PRESS_AVAILABLE)}}]),t}();TouchEventCapabilities.KEY_PRESS_AVAILABLE="pressAvailable",TouchEventCapabilities.KEY_MULTI_TOUCH_AVAILABLE="multiTouchAvailable",TouchEventCapabilities.KEY_DOUBLE_PRESS_AVAILABLE="doublePressAvailable";var ScreenParams=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_RESOLUTION,e),this}},{key:"getResolution",value:function(){return this.getObject(ImageResolution,t.KEY_RESOLUTION)}},{key:"setTouchEventAvailable",value:function(e){return this.validateType(TouchEventCapabilities,e),this.setParameter(t.KEY_TOUCH_EVENT_AVAILABLE,e),this}},{key:"getTouchEventAvailable",value:function(){return this.getObject(TouchEventCapabilities,t.KEY_TOUCH_EVENT_AVAILABLE)}}]),t}();ScreenParams.KEY_RESOLUTION="resolution",ScreenParams.KEY_TOUCH_EVENT_AVAILABLE="touchEventAvailable";var DisplayType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CID",get:function(){return t._MAP.CID}},{key:"TYPE2",get:function(){return t._MAP.TYPE2}},{key:"TYPE5",get:function(){return t._MAP.TYPE5}},{key:"NGN",get:function(){return t._MAP.NGN}},{key:"GEN2_8_DMA",get:function(){return t._MAP.GEN2_8_DMA}},{key:"GEN2_6_DMA",get:function(){return t._MAP.GEN2_6_DMA}},{key:"MFD3",get:function(){return t._MAP.MFD3}},{key:"MFD4",get:function(){return t._MAP.MFD4}},{key:"MFD5",get:function(){return t._MAP.MFD5}},{key:"GEN3_8_INCH",get:function(){return t._MAP.GEN3_8_INCH}},{key:"SDL_GENERIC",get:function(){return t._MAP.SDL_GENERIC}}]),t}();DisplayType._MAP=Object.freeze({CID:"CID",TYPE2:"TYPE2",TYPE5:"TYPE5",NGN:"NGN",GEN2_8_DMA:"GEN2_8_DMA",GEN2_6_DMA:"GEN2_6_DMA",MFD3:"MFD3",MFD4:"MFD4",TESTING:"TESTING",MFD5:"MFD5",GEN3_8_INCH:"GEN3_8-INCH",SDL_GENERIC:"SDL_GENERIC"});var MediaClockFormat=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"CLOCK1",get:function(){return t._MAP.CLOCK1}},{key:"CLOCK2",get:function(){return t._MAP.CLOCK2}},{key:"CLOCK3",get:function(){return t._MAP.CLOCK3}},{key:"CLOCKTEXT1",get:function(){return t._MAP.CLOCKTEXT1}},{key:"CLOCKTEXT2",get:function(){return t._MAP.CLOCKTEXT2}},{key:"CLOCKTEXT3",get:function(){return t._MAP.CLOCKTEXT3}},{key:"CLOCKTEXT4",get:function(){return t._MAP.CLOCKTEXT4}}]),t}();MediaClockFormat._MAP=Object.freeze({CLOCK1:"CLOCK1",CLOCK2:"CLOCK2",CLOCK3:"CLOCK3",CLOCKTEXT1:"CLOCKTEXT1",CLOCKTEXT2:"CLOCKTEXT2",CLOCKTEXT3:"CLOCKTEXT3",CLOCKTEXT4:"CLOCKTEXT4"});var DisplayCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setDisplayType",value:function(e){return this.validateType(DisplayType,e),this.setParameter(t.KEY_DISPLAY_TYPE,e),this}},{key:"getDisplayType",value:function(){return this.getObject(DisplayType,t.KEY_DISPLAY_TYPE)}},{key:"setDisplayName",value:function(e){return this.setParameter(t.KEY_DISPLAY_NAME,e),this}},{key:"getDisplayName",value:function(){return this.getParameter(t.KEY_DISPLAY_NAME)}},{key:"setTextFields",value:function(e){return this.setParameter(t.KEY_TEXT_FIELDS,e),this}},{key:"getTextFields",value:function(){return this.getObject(TextField,t.KEY_TEXT_FIELDS)}},{key:"setImageFields",value:function(e){return this.setParameter(t.KEY_IMAGE_FIELDS,e),this}},{key:"getImageFields",value:function(){return this.getObject(ImageField,t.KEY_IMAGE_FIELDS)}},{key:"setMediaClockFormats",value:function(e){return this.setParameter(t.KEY_MEDIA_CLOCK_FORMATS,e),this}},{key:"getMediaClockFormats",value:function(){return this.getObject(MediaClockFormat,t.KEY_MEDIA_CLOCK_FORMATS)}},{key:"setGraphicsSupported",value:function(e){return this.setParameter(t.KEY_GRAPHICS_SUPPORTED,e),this}},{key:"getGraphicsSupported",value:function(){return this.getParameter(t.KEY_GRAPHICS_SUPPORTED)}},{key:"setTemplatesAvailable",value:function(e){return this.setParameter(t.KEY_TEMPLATES_AVAILABLE,e),this}},{key:"getTemplatesAvailable",value:function(){return this.getParameter(t.KEY_TEMPLATES_AVAILABLE)}},{key:"setScreenParams",value:function(e){return this.validateType(ScreenParams,e),this.setParameter(t.KEY_SCREEN_PARAMS,e),this}},{key:"getScreenParams",value:function(){return this.getObject(ScreenParams,t.KEY_SCREEN_PARAMS)}},{key:"setNumCustomPresetsAvailable",value:function(e){return this.setParameter(t.KEY_NUM_CUSTOM_PRESETS_AVAILABLE,e),this}},{key:"getNumCustomPresetsAvailable",value:function(){return this.getParameter(t.KEY_NUM_CUSTOM_PRESETS_AVAILABLE)}}]),t}();DisplayCapabilities.KEY_DISPLAY_TYPE="displayType",DisplayCapabilities.KEY_DISPLAY_NAME="displayName",DisplayCapabilities.KEY_TEXT_FIELDS="textFields",DisplayCapabilities.KEY_IMAGE_FIELDS="imageFields",DisplayCapabilities.KEY_MEDIA_CLOCK_FORMATS="mediaClockFormats",DisplayCapabilities.KEY_GRAPHICS_SUPPORTED="graphicSupported",DisplayCapabilities.KEY_TEMPLATES_AVAILABLE="templatesAvailable",DisplayCapabilities.KEY_SCREEN_PARAMS="screenParams",DisplayCapabilities.KEY_NUM_CUSTOM_PRESETS_AVAILABLE="numCustomPresetsAvailable";var Grid=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setColumn",value:function(e){return this.setParameter(t.KEY_COLUMN,e),this}},{key:"getColumn",value:function(){return this.getParameter(t.KEY_COLUMN)}},{key:"setRow",value:function(e){return this.setParameter(t.KEY_ROW,e),this}},{key:"getRow",value:function(){return this.getParameter(t.KEY_ROW)}},{key:"setLevel",value:function(e){return this.setParameter(t.KEY_LEVEL,e),this}},{key:"getLevel",value:function(){return this.getParameter(t.KEY_LEVEL)}},{key:"setColumnSpan",value:function(e){return this.setParameter(t.KEY_COLUMN_SPAN,e),this}},{key:"getColumnSpan",value:function(){return this.getParameter(t.KEY_COLUMN_SPAN)}},{key:"setRowSpan",value:function(e){return this.setParameter(t.KEY_ROW_SPAN,e),this}},{key:"getRowSpan",value:function(){return this.getParameter(t.KEY_ROW_SPAN)}},{key:"setLevelSpan",value:function(e){return this.setParameter(t.KEY_LEVEL_SPAN,e),this}},{key:"getLevelSpan",value:function(){return this.getParameter(t.KEY_LEVEL_SPAN)}}]),t}();Grid.KEY_COLUMN="col",Grid.KEY_ROW="row",Grid.KEY_LEVEL="level",Grid.KEY_COLUMN_SPAN="colspan",Grid.KEY_ROW_SPAN="rowspan",Grid.KEY_LEVEL_SPAN="levelspan";var ModuleInfo=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setModuleId",value:function(e){return this.setParameter(t.KEY_MODULE_ID,e),this}},{key:"getModuleId",value:function(){return this.getParameter(t.KEY_MODULE_ID)}},{key:"setLocation",value:function(e){return this.validateType(Grid,e),this.setParameter(t.KEY_LOCATION,e),this}},{key:"getLocation",value:function(){return this.getObject(Grid,t.KEY_LOCATION)}},{key:"setServiceArea",value:function(e){return this.validateType(Grid,e),this.setParameter(t.KEY_SERVICE_AREA,e),this}},{key:"getServiceArea",value:function(){return this.getObject(Grid,t.KEY_SERVICE_AREA)}},{key:"setAllowMultipleAccess",value:function(e){return this.setParameter(t.KEY_ALLOW_MULTIPLE_ACCESS,e),this}},{key:"getAllowMultipleAccess",value:function(){return this.getParameter(t.KEY_ALLOW_MULTIPLE_ACCESS)}}]),t}();ModuleInfo.KEY_MODULE_ID="moduleId",ModuleInfo.KEY_LOCATION="location",ModuleInfo.KEY_SERVICE_AREA="serviceArea",ModuleInfo.KEY_ALLOW_MULTIPLE_ACCESS="allowMultipleAccess";var ButtonName=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"OK",get:function(){return t._MAP.OK}},{key:"PLAY_PAUSE",get:function(){return t._MAP.PLAY_PAUSE}},{key:"SEEKLEFT",get:function(){return t._MAP.SEEKLEFT}},{key:"SEEKRIGHT",get:function(){return t._MAP.SEEKRIGHT}},{key:"TUNEUP",get:function(){return t._MAP.TUNEUP}},{key:"TUNEDOWN",get:function(){return t._MAP.TUNEDOWN}},{key:"PRESET_0",get:function(){return t._MAP.PRESET_0}},{key:"PRESET_1",get:function(){return t._MAP.PRESET_1}},{key:"PRESET_2",get:function(){return t._MAP.PRESET_2}},{key:"PRESET_3",get:function(){return t._MAP.PRESET_3}},{key:"PRESET_4",get:function(){return t._MAP.PRESET_4}},{key:"PRESET_5",get:function(){return t._MAP.PRESET_5}},{key:"PRESET_6",get:function(){return t._MAP.PRESET_6}},{key:"PRESET_7",get:function(){return t._MAP.PRESET_7}},{key:"PRESET_8",get:function(){return t._MAP.PRESET_8}},{key:"PRESET_9",get:function(){return t._MAP.PRESET_9}},{key:"CUSTOM_BUTTON",get:function(){return t._MAP.CUSTOM_BUTTON}},{key:"SEARCH",get:function(){return t._MAP.SEARCH}},{key:"AC_MAX",get:function(){return t._MAP.AC_MAX}},{key:"AC",get:function(){return t._MAP.AC}},{key:"RECIRCULATE",get:function(){return t._MAP.RECIRCULATE}},{key:"FAN_UP",get:function(){return t._MAP.FAN_UP}},{key:"FAN_DOWN",get:function(){return t._MAP.FAN_DOWN}},{key:"TEMP_UP",get:function(){return t._MAP.TEMP_UP}},{key:"TEMP_DOWN",get:function(){return t._MAP.TEMP_DOWN}},{key:"DEFROST_MAX",get:function(){return t._MAP.DEFROST_MAX}},{key:"DEFROST",get:function(){return t._MAP.DEFROST}},{key:"DEFROST_REAR",get:function(){return t._MAP.DEFROST_REAR}},{key:"UPPER_VENT",get:function(){return t._MAP.UPPER_VENT}},{key:"LOWER_VENT",get:function(){return t._MAP.LOWER_VENT}},{key:"VOLUME_UP",get:function(){return t._MAP.VOLUME_UP}},{key:"VOLUME_DOWN",get:function(){return t._MAP.VOLUME_DOWN}},{key:"EJECT",get:function(){return t._MAP.EJECT}},{key:"SOURCE",get:function(){return t._MAP.SOURCE}},{key:"SHUFFLE",get:function(){return t._MAP.SHUFFLE}},{key:"REPEAT",get:function(){return t._MAP.REPEAT}},{key:"NAV_CENTER_LOCATION",get:function(){return t._MAP.NAV_CENTER_LOCATION}},{key:"NAV_ZOOM_IN",get:function(){return t._MAP.NAV_ZOOM_IN}},{key:"NAV_ZOOM_OUT",get:function(){return t._MAP.NAV_ZOOM_OUT}},{key:"NAV_PAN_UP",get:function(){return t._MAP.NAV_PAN_UP}},{key:"NAV_PAN_UP_RIGHT",get:function(){return t._MAP.NAV_PAN_UP_RIGHT}},{key:"NAV_PAN_RIGHT",get:function(){return t._MAP.NAV_PAN_RIGHT}},{key:"NAV_PAN_DOWN_RIGHT",get:function(){return t._MAP.NAV_PAN_DOWN_RIGHT}},{key:"NAV_PAN_DOWN",get:function(){return t._MAP.NAV_PAN_DOWN}},{key:"NAV_PAN_DOWN_LEFT",get:function(){return t._MAP.NAV_PAN_DOWN_LEFT}},{key:"NAV_PAN_LEFT",get:function(){return t._MAP.NAV_PAN_LEFT}},{key:"NAV_PAN_UP_LEFT",get:function(){return t._MAP.NAV_PAN_UP_LEFT}},{key:"NAV_TILT_TOGGLE",get:function(){return t._MAP.NAV_TILT_TOGGLE}},{key:"NAV_ROTATE_CLOCKWISE",get:function(){return t._MAP.NAV_ROTATE_CLOCKWISE}},{key:"NAV_ROTATE_COUNTERCLOCKWISE",get:function(){return t._MAP.NAV_ROTATE_COUNTERCLOCKWISE}},{key:"NAV_HEADING_TOGGLE",get:function(){return t._MAP.NAV_HEADING_TOGGLE}}]),t}();ButtonName._MAP=Object.freeze({OK:"OK",PLAY_PAUSE:"PLAY_PAUSE",SEEKLEFT:"SEEKLEFT",SEEKRIGHT:"SEEKRIGHT",TUNEUP:"TUNEUP",TUNEDOWN:"TUNEDOWN",PRESET_0:"PRESET_0",PRESET_1:"PRESET_1",PRESET_2:"PRESET_2",PRESET_3:"PRESET_3",PRESET_4:"PRESET_4",PRESET_5:"PRESET_5",PRESET_6:"PRESET_6",PRESET_7:"PRESET_7",PRESET_8:"PRESET_8",PRESET_9:"PRESET_9",CUSTOM_BUTTON:"CUSTOM_BUTTON",SEARCH:"SEARCH",AC_MAX:"AC_MAX",AC:"AC",RECIRCULATE:"RECIRCULATE",FAN_UP:"FAN_UP",FAN_DOWN:"FAN_DOWN",TEMP_UP:"TEMP_UP",TEMP_DOWN:"TEMP_DOWN",DEFROST_MAX:"DEFROST_MAX",DEFROST:"DEFROST",DEFROST_REAR:"DEFROST_REAR",UPPER_VENT:"UPPER_VENT",LOWER_VENT:"LOWER_VENT",VOLUME_UP:"VOLUME_UP",VOLUME_DOWN:"VOLUME_DOWN",EJECT:"EJECT",SOURCE:"SOURCE",SHUFFLE:"SHUFFLE",REPEAT:"REPEAT",NAV_CENTER_LOCATION:"NAV_CENTER_LOCATION",NAV_ZOOM_IN:"NAV_ZOOM_IN",NAV_ZOOM_OUT:"NAV_ZOOM_OUT",NAV_PAN_UP:"NAV_PAN_UP",NAV_PAN_UP_RIGHT:"NAV_PAN_UP_RIGHT",NAV_PAN_RIGHT:"NAV_PAN_RIGHT",NAV_PAN_DOWN_RIGHT:"NAV_PAN_DOWN_RIGHT",NAV_PAN_DOWN:"NAV_PAN_DOWN",NAV_PAN_DOWN_LEFT:"NAV_PAN_DOWN_LEFT",NAV_PAN_LEFT:"NAV_PAN_LEFT",NAV_PAN_UP_LEFT:"NAV_PAN_UP_LEFT",NAV_TILT_TOGGLE:"NAV_TILT_TOGGLE",NAV_ROTATE_CLOCKWISE:"NAV_ROTATE_CLOCKWISE",NAV_ROTATE_COUNTERCLOCKWISE:"NAV_ROTATE_COUNTERCLOCKWISE",NAV_HEADING_TOGGLE:"NAV_HEADING_TOGGLE"});var ButtonCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setName",value:function(e){return this.validateType(ButtonName,e),this.setParameter(t.KEY_NAME,e),this}},{key:"getName",value:function(){return this.getObject(ButtonName,t.KEY_NAME)}},{key:"setModuleInfo",value:function(e){return this.validateType(ModuleInfo,e),this.setParameter(t.KEY_MODULE_INFO,e),this}},{key:"getModuleInfo",value:function(){return this.getObject(ModuleInfo,t.KEY_MODULE_INFO)}},{key:"setShortPressAvailable",value:function(e){return this.setParameter(t.KEY_SHORT_PRESS_AVAILABLE,e),this}},{key:"getShortPressAvailable",value:function(){return this.getParameter(t.KEY_SHORT_PRESS_AVAILABLE)}},{key:"setLongPressAvailable",value:function(e){return this.setParameter(t.KEY_LONG_PRESS_AVAILABLE,e),this}},{key:"getLongPressAvailable",value:function(){return this.getParameter(t.KEY_LONG_PRESS_AVAILABLE)}},{key:"setUpDownAvailable",value:function(e){return this.setParameter(t.KEY_UP_DOWN_AVAILABLE,e),this}},{key:"getUpDownAvailable",value:function(){return this.getParameter(t.KEY_UP_DOWN_AVAILABLE)}}]),t}();ButtonCapabilities.KEY_NAME="name",ButtonCapabilities.KEY_MODULE_INFO="moduleInfo",ButtonCapabilities.KEY_SHORT_PRESS_AVAILABLE="shortPressAvailable",ButtonCapabilities.KEY_LONG_PRESS_AVAILABLE="longPressAvailable",ButtonCapabilities.KEY_UP_DOWN_AVAILABLE="upDownAvailable";var SoftButtonCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setShortPressAvailable",value:function(e){return this.setParameter(t.KEY_SHORT_PRESS_AVAILABLE,e),this}},{key:"getShortPressAvailable",value:function(){return this.getParameter(t.KEY_SHORT_PRESS_AVAILABLE)}},{key:"setLongPressAvailable",value:function(e){return this.setParameter(t.KEY_LONG_PRESS_AVAILABLE,e),this}},{key:"getLongPressAvailable",value:function(){return this.getParameter(t.KEY_LONG_PRESS_AVAILABLE)}},{key:"setUpDownAvailable",value:function(e){return this.setParameter(t.KEY_UP_DOWN_AVAILABLE,e),this}},{key:"getUpDownAvailable",value:function(){return this.getParameter(t.KEY_UP_DOWN_AVAILABLE)}},{key:"setImageSupported",value:function(e){return this.setParameter(t.KEY_IMAGE_SUPPORTED,e),this}},{key:"getImageSupported",value:function(){return this.getParameter(t.KEY_IMAGE_SUPPORTED)}},{key:"setTextSupported",value:function(e){return this.setParameter(t.KEY_TEXT_SUPPORTED,e),this}},{key:"getTextSupported",value:function(){return this.getParameter(t.KEY_TEXT_SUPPORTED)}}]),t}();SoftButtonCapabilities.KEY_SHORT_PRESS_AVAILABLE="shortPressAvailable",SoftButtonCapabilities.KEY_LONG_PRESS_AVAILABLE="longPressAvailable",SoftButtonCapabilities.KEY_UP_DOWN_AVAILABLE="upDownAvailable",SoftButtonCapabilities.KEY_IMAGE_SUPPORTED="imageSupported",SoftButtonCapabilities.KEY_TEXT_SUPPORTED="textSupported";var PresetBankCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setOnScreenPresetsAvailable",value:function(e){return this.setParameter(t.KEY_ON_SCREEN_PRESETS_AVAILABLE,e),this}},{key:"getOnScreenPresetsAvailable",value:function(){return this.getParameter(t.KEY_ON_SCREEN_PRESETS_AVAILABLE)}}]),t}();PresetBankCapabilities.KEY_ON_SCREEN_PRESETS_AVAILABLE="onScreenPresetsAvailable";var VehicleType=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMake",value:function(e){return this.setParameter(t.KEY_MAKE,e),this}},{key:"getMake",value:function(){return this.getParameter(t.KEY_MAKE)}},{key:"setModel",value:function(e){return this.setParameter(t.KEY_MODEL,e),this}},{key:"getModel",value:function(){return this.getParameter(t.KEY_MODEL)}},{key:"setModelYear",value:function(e){return this.setParameter(t.KEY_MODEL_YEAR,e),this}},{key:"getModelYear",value:function(){return this.getParameter(t.KEY_MODEL_YEAR)}},{key:"setTrim",value:function(e){return this.setParameter(t.KEY_TRIM,e),this}},{key:"getTrim",value:function(){return this.getParameter(t.KEY_TRIM)}}]),t}();VehicleType.KEY_MAKE="make",VehicleType.KEY_MODEL="model",VehicleType.KEY_MODEL_YEAR="modelYear",VehicleType.KEY_TRIM="trim";var HmiZoneCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"FRONT",get:function(){return t._MAP.FRONT}},{key:"BACK",get:function(){return t._MAP.BACK}}]),t}();HmiZoneCapabilities._MAP=Object.freeze({FRONT:"FRONT",BACK:"BACK"});var PrerecordedSpeech=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"HELP_JINGLE",get:function(){return t._MAP.HELP_JINGLE}},{key:"INITIAL_JINGLE",get:function(){return t._MAP.INITIAL_JINGLE}},{key:"LISTEN_JINGLE",get:function(){return t._MAP.LISTEN_JINGLE}},{key:"POSITIVE_JINGLE",get:function(){return t._MAP.POSITIVE_JINGLE}},{key:"NEGATIVE_JINGLE",get:function(){return t._MAP.NEGATIVE_JINGLE}}]),t}();PrerecordedSpeech._MAP=Object.freeze({HELP_JINGLE:"HELP_JINGLE",INITIAL_JINGLE:"INITIAL_JINGLE",LISTEN_JINGLE:"LISTEN_JINGLE",POSITIVE_JINGLE:"POSITIVE_JINGLE",NEGATIVE_JINGLE:"NEGATIVE_JINGLE"});var SamplingRate=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SamplingRate_8KHZ",get:function(){return t._MAP.SamplingRate_8KHZ}},{key:"SamplingRate_16KHZ",get:function(){return t._MAP.SamplingRate_16KHZ}},{key:"SamplingRate_22KHZ",get:function(){return t._MAP.SamplingRate_22KHZ}},{key:"SamplingRate_44KHZ",get:function(){return t._MAP.SamplingRate_44KHZ}}]),t}();SamplingRate._MAP=Object.freeze({SamplingRate_8KHZ:"8KHZ",SamplingRate_16KHZ:"16KHZ",SamplingRate_22KHZ:"22KHZ",SamplingRate_44KHZ:"44KHZ"});var BitsPerSample=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"BitsPerSample_8_BIT",get:function(){return t._MAP.BitsPerSample_8_BIT}},{key:"BitsPerSample_16_BIT",get:function(){return t._MAP.BitsPerSample_16_BIT}}]),t}();BitsPerSample._MAP=Object.freeze({BitsPerSample_8_BIT:"8_BIT",BitsPerSample_16_BIT:"16_BIT"});var AudioType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"PCM",get:function(){return t._MAP.PCM}}]),t}();AudioType._MAP=Object.freeze({PCM:"PCM"});var AudioPassThruCapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setSamplingRate",value:function(e){return this.validateType(SamplingRate,e),this.setParameter(t.KEY_SAMPLING_RATE,e),this}},{key:"getSamplingRate",value:function(){return this.getObject(SamplingRate,t.KEY_SAMPLING_RATE)}},{key:"setBitsPerSample",value:function(e){return this.validateType(BitsPerSample,e),this.setParameter(t.KEY_BITS_PER_SAMPLE,e),this}},{key:"getBitsPerSample",value:function(){return this.getObject(BitsPerSample,t.KEY_BITS_PER_SAMPLE)}},{key:"setAudioType",value:function(e){return this.validateType(AudioType,e),this.setParameter(t.KEY_AUDIO_TYPE,e),this}},{key:"getAudioType",value:function(){return this.getObject(AudioType,t.KEY_AUDIO_TYPE)}}]),t}();AudioPassThruCapabilities.KEY_SAMPLING_RATE="samplingRate",AudioPassThruCapabilities.KEY_BITS_PER_SAMPLE="bitsPerSample",AudioPassThruCapabilities.KEY_AUDIO_TYPE="audioType";var VrCapabilities=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"VR_TEXT",get:function(){return t._MAP.VR_TEXT}}]),t}();VrCapabilities._MAP=Object.freeze({VR_TEXT:"TEXT"});var HMICapabilities=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setNavigation",value:function(e){return this.setParameter(t.KEY_NAVIGATION,e),this}},{key:"getNavigation",value:function(){return this.getParameter(t.KEY_NAVIGATION)}},{key:"setPhoneCall",value:function(e){return this.setParameter(t.KEY_PHONE_CALL,e),this}},{key:"getPhoneCall",value:function(){return this.getParameter(t.KEY_PHONE_CALL)}},{key:"setVideoStreaming",value:function(e){return this.setParameter(t.KEY_VIDEO_STREAMING,e),this}},{key:"getVideoStreaming",value:function(){return this.getParameter(t.KEY_VIDEO_STREAMING)}},{key:"setRemoteControl",value:function(e){return this.setParameter(t.KEY_REMOTE_CONTROL,e),this}},{key:"getRemoteControl",value:function(){return this.getParameter(t.KEY_REMOTE_CONTROL)}},{key:"setAppService",value:function(e){return this.setParameter(t.KEY_APP_SERVICES,e),this}},{key:"getAppService",value:function(){return this.getParameter(t.KEY_APP_SERVICES)}},{key:"setDisplays",value:function(e){return this.setParameter(t.KEY_DISPLAYS,e),this}},{key:"getDisplays",value:function(){return this.getParameter(t.KEY_DISPLAYS)}},{key:"setSeatLocation",value:function(e){return this.setParameter(t.KEY_SEAT_LOCATION,e),this}},{key:"getSeatLocation",value:function(){return this.getParameter(t.KEY_SEAT_LOCATION)}}]),t}();HMICapabilities.KEY_NAVIGATION="navigation",HMICapabilities.KEY_PHONE_CALL="phoneCall",HMICapabilities.KEY_VIDEO_STREAMING="videoStreaming",HMICapabilities.KEY_REMOTE_CONTROL="remoteControl",HMICapabilities.KEY_APP_SERVICES="appServices",HMICapabilities.KEY_DISPLAYS="displays",HMICapabilities.KEY_SEAT_LOCATION="seatLocation";var RegisterAppInterfaceResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.RegisterAppInterface),t}return _inherits(n,RpcResponse),_createClass(n,[{key:"setSdlMsgVersion",value:function(e){return this.validateType(SdlMsgVersion,e),this.setParameter(n.KEY_SDL_MSG_VERSION,e),this}},{key:"getSdlMsgVersion",value:function(){return this.getObject(SdlMsgVersion,n.KEY_SDL_MSG_VERSION)}},{key:"setLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_LANGUAGE,e),this}},{key:"getLanguage",value:function(){return this.getObject(Language,n.KEY_LANGUAGE)}},{key:"setHmiDisplayLanguage",value:function(e){return this.validateType(Language,e),this.setParameter(n.KEY_HMI_DISPLAY_LANGUAGE,e),this}},{key:"getHmiDisplayLanguage",value:function(){return this.getObject(Language,n.KEY_HMI_DISPLAY_LANGUAGE)}},{key:"setDisplayCapabilities",value:function(e){return this.validateType(DisplayCapabilities,e),this.setParameter(n.KEY_DISPLAY_CAPABILITIES,e),this}},{key:"getDisplayCapabilities",value:function(){return this.getObject(DisplayCapabilities,n.KEY_DISPLAY_CAPABILITIES)}},{key:"setButtonCapabilities",value:function(e){return this.setParameter(n.KEY_BUTTON_CAPABILITIES,e),this}},{key:"getButtonCapabilities",value:function(){return this.getObject(ButtonCapabilities,n.KEY_BUTTON_CAPABILITIES)}},{key:"setSoftButtonCapabilities",value:function(e){return this.setParameter(n.KEY_SOFT_BUTTON_CAPABILITIES,e),this}},{key:"getSoftButtonCapabilities",value:function(){return this.getObject(SoftButtonCapabilities,n.KEY_SOFT_BUTTON_CAPABILITIES)}},{key:"setPresetBankCapabilities",value:function(e){return this.validateType(PresetBankCapabilities,e),this.setParameter(n.KEY_PRESET_BANK_CAPABILITIES,e),this}},{key:"getPresetBankCapabilities",value:function(){return this.getObject(PresetBankCapabilities,n.KEY_PRESET_BANK_CAPABILITIES)}},{key:"setHmiZoneCapabilities",value:function(e){return this.setParameter(n.KEY_HMI_ZONE_CAPABILITIES,e),this}},{key:"getHmiZoneCapabilities",value:function(){return this.getObject(HmiZoneCapabilities,n.KEY_HMI_ZONE_CAPABILITIES)}},{key:"setSpeechCapabilities",value:function(e){return this.setParameter(n.KEY_SPEECH_CAPABILITIES,e),this}},{key:"getSpeechCapabilities",value:function(){return this.getObject(SpeechCapabilities,n.KEY_SPEECH_CAPABILITIES)}},{key:"setPrerecordedSpeech",value:function(e){return this.setParameter(n.KEY_PRERECORDED_SPEECH,e),this}},{key:"getPrerecordedSpeech",value:function(){return this.getObject(PrerecordedSpeech,n.KEY_PRERECORDED_SPEECH)}},{key:"setVrCapabilities",value:function(e){return this.setParameter(n.KEY_VR_CAPABILITIES,e),this}},{key:"getVrCapabilities",value:function(){return this.getObject(VrCapabilities,n.KEY_VR_CAPABILITIES)}},{key:"setAudioPassThruCapabilities",value:function(e){return this.setParameter(n.KEY_AUDIO_PASS_THRU_CAPABILITIES,e),this}},{key:"getAudioPassThruCapabilities",value:function(){return this.getObject(AudioPassThruCapabilities,n.KEY_AUDIO_PASS_THRU_CAPABILITIES)}},{key:"setPcmStreamCapabilities",value:function(e){return this.validateType(AudioPassThruCapabilities,e),this.setParameter(n.KEY_PCM_STREAM_CAPABILITIES,e),this}},{key:"getPcmStreamCapabilities",value:function(){return this.getObject(AudioPassThruCapabilities,n.KEY_PCM_STREAM_CAPABILITIES)}},{key:"setVehicleType",value:function(e){return this.validateType(VehicleType,e),this.setParameter(n.KEY_VEHICLE_TYPE,e),this}},{key:"getVehicleType",value:function(){return this.getObject(VehicleType,n.KEY_VEHICLE_TYPE)}},{key:"setSupportedDiagModes",value:function(e){return this.setParameter(n.KEY_SUPPORTED_DIAG_MODE,e),this}},{key:"getSupportedDiagModes",value:function(){return this.getParameter(n.KEY_SUPPORTED_DIAG_MODE)}},{key:"setHMICapabilities",value:function(e){return this.validateType(HMICapabilities,e),this.setParameter(n.KEY_HMI_CAPABILITIES,e),this}},{key:"getHMICapabilities",value:function(){return this.getObject(HMICapabilities,n.KEY_HMI_CAPABILITIES)}},{key:"setSdlVersion",value:function(e){return this.setParameter(n.KEY_SDL_VERSION,e),this}},{key:"getSdlVersion",value:function(){return this.getParameter(n.KEY_SDL_VERSION)}},{key:"setSystemSoftwareVersion",value:function(e){return this.setParameter(n.KEY_SYSTEM_SOFTWARE_VERSION,e),this}},{key:"getSystemSoftwareVersion",value:function(){return this.getParameter(n.KEY_SYSTEM_SOFTWARE_VERSION)}},{key:"setIconResumed",value:function(e){return this.setParameter(n.KEY_ICON_RESUMED,e),this}},{key:"getIconResumed",value:function(){return this.getParameter(n.KEY_ICON_RESUMED)}}]),n}();RegisterAppInterfaceResponse.KEY_SDL_MSG_VERSION="syncMsgVersion",RegisterAppInterfaceResponse.KEY_LANGUAGE="language",RegisterAppInterfaceResponse.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage",RegisterAppInterfaceResponse.KEY_DISPLAY_CAPABILITIES="displayCapabilities",RegisterAppInterfaceResponse.KEY_BUTTON_CAPABILITIES="buttonCapabilities",RegisterAppInterfaceResponse.KEY_SOFT_BUTTON_CAPABILITIES="softButtonCapabilities",RegisterAppInterfaceResponse.KEY_PRESET_BANK_CAPABILITIES="presetBankCapabilities",RegisterAppInterfaceResponse.KEY_HMI_ZONE_CAPABILITIES="hmiZoneCapabilities",RegisterAppInterfaceResponse.KEY_SPEECH_CAPABILITIES="speechCapabilities",RegisterAppInterfaceResponse.KEY_PRERECORDED_SPEECH="prerecordedSpeech",RegisterAppInterfaceResponse.KEY_VR_CAPABILITIES="vrCapabilities",RegisterAppInterfaceResponse.KEY_AUDIO_PASS_THRU_CAPABILITIES="audioPassThruCapabilities",RegisterAppInterfaceResponse.KEY_PCM_STREAM_CAPABILITIES="pcmStreamCapabilities",RegisterAppInterfaceResponse.KEY_VEHICLE_TYPE="vehicleType",RegisterAppInterfaceResponse.KEY_SUPPORTED_DIAG_MODE="supportedDiagModes",RegisterAppInterfaceResponse.KEY_HMI_CAPABILITIES="hmiCapabilities",RegisterAppInterfaceResponse.KEY_SDL_VERSION="sdlVersion",RegisterAppInterfaceResponse.KEY_SYSTEM_SOFTWARE_VERSION="systemSoftwareVersion",RegisterAppInterfaceResponse.KEY_ICON_RESUMED="iconResumed";var SetAppIcon=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.SetAppIcon),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setFileName",value:function(e){return this.setParameter(n.KEY_FILE_NAME,e),this}},{key:"getFileName",value:function(){return this.getParameter(n.KEY_FILE_NAME)}}]),n}();SetAppIcon.KEY_FILE_NAME="syncFileName";var SetAppIconResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.SetAppIcon),t}return _inherits(n,RpcResponse),n}(),SoftButtonType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"SBT_TEXT",get:function(){return t._MAP.SBT_TEXT}},{key:"SBT_IMAGE",get:function(){return t._MAP.SBT_IMAGE}},{key:"SBT_BOTH",get:function(){return t._MAP.SBT_BOTH}}]),t}();SoftButtonType._MAP=Object.freeze({SBT_TEXT:"TEXT",SBT_IMAGE:"IMAGE",SBT_BOTH:"BOTH"});var SystemAction=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"DEFAULT_ACTION",get:function(){return t._MAP.DEFAULT_ACTION}},{key:"STEAL_FOCUS",get:function(){return t._MAP.STEAL_FOCUS}},{key:"KEEP_CONTEXT",get:function(){return t._MAP.KEEP_CONTEXT}}]),t}();SystemAction._MAP=Object.freeze({DEFAULT_ACTION:"DEFAULT_ACTION",STEAL_FOCUS:"STEAL_FOCUS",KEEP_CONTEXT:"KEEP_CONTEXT"});var SoftButton=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setType",value:function(e){return this.validateType(SoftButtonType,e),this.setParameter(t.KEY_TYPE,e),this}},{key:"getType",value:function(){return this.getObject(SoftButtonType,t.KEY_TYPE)}},{key:"setText",value:function(e){return this.setParameter(t.KEY_TEXT,e),this}},{key:"getText",value:function(){return this.getParameter(t.KEY_TEXT)}},{key:"setImage",value:function(e){return this.validateType(Image,e),this.setParameter(t.KEY_IMAGE,e),this}},{key:"getImage",value:function(){return this.getObject(Image,t.KEY_IMAGE)}},{key:"setIsHighlighted",value:function(e){return this.setParameter(t.KEY_IS_HIGHLIGHTED,e),this}},{key:"getIsHighlighted",value:function(){return this.getParameter(t.KEY_IS_HIGHLIGHTED)}},{key:"setSoftButtonID",value:function(e){return this.setParameter(t.KEY_SOFT_BUTTON_ID,e),this}},{key:"getSoftButtonID",value:function(){return this.getParameter(t.KEY_SOFT_BUTTON_ID)}},{key:"setSystemAction",value:function(e){return this.validateType(SystemAction,e),this.setParameter(t.KEY_SYSTEM_ACTION,e),this}},{key:"getSystemAction",value:function(){return this.getObject(SystemAction,t.KEY_SYSTEM_ACTION)}}]),t}();SoftButton.KEY_TYPE="type",SoftButton.KEY_TEXT="text",SoftButton.KEY_IMAGE="image",SoftButton.KEY_IS_HIGHLIGHTED="isHighlighted",SoftButton.KEY_SOFT_BUTTON_ID="softButtonID",SoftButton.KEY_SYSTEM_ACTION="systemAction";var MetadataType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"mediaTitle",get:function(){return t._MAP.mediaTitle}},{key:"mediaArtist",get:function(){return t._MAP.mediaArtist}},{key:"mediaAlbum",get:function(){return t._MAP.mediaAlbum}},{key:"mediaYear",get:function(){return t._MAP.mediaYear}},{key:"mediaGenre",get:function(){return t._MAP.mediaGenre}},{key:"mediaStation",get:function(){return t._MAP.mediaStation}},{key:"rating",get:function(){return t._MAP.rating}},{key:"currentTemperature",get:function(){return t._MAP.currentTemperature}},{key:"maximumTemperature",get:function(){return t._MAP.maximumTemperature}},{key:"minimumTemperature",get:function(){return t._MAP.minimumTemperature}},{key:"weatherTerm",get:function(){return t._MAP.weatherTerm}},{key:"humidity",get:function(){return t._MAP.humidity}}]),t}();MetadataType._MAP=Object.freeze({mediaTitle:"mediaTitle",mediaArtist:"mediaArtist",mediaAlbum:"mediaAlbum",mediaYear:"mediaYear",mediaGenre:"mediaGenre",mediaStation:"mediaStation",rating:"rating",currentTemperature:"currentTemperature",maximumTemperature:"maximumTemperature",minimumTemperature:"minimumTemperature",weatherTerm:"weatherTerm",humidity:"humidity"});var MetadataTags=function(){function t(e){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setMainField1",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_1,e),this}},{key:"getMainField1",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_1)}},{key:"setMainField2",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_2,e),this}},{key:"getMainField2",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_2)}},{key:"setMainField3",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_3,e),this}},{key:"getMainField3",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_3)}},{key:"setMainField4",value:function(e){return this.setParameter(t.KEY_MAIN_FIELD_4,e),this}},{key:"getMainField4",value:function(){return this.getObject(MetadataType,t.KEY_MAIN_FIELD_4)}}]),t}();MetadataTags.KEY_MAIN_FIELD_1="mainField1",MetadataTags.KEY_MAIN_FIELD_2="mainField2",MetadataTags.KEY_MAIN_FIELD_3="mainField3",MetadataTags.KEY_MAIN_FIELD_4="mainField4";var TextAlignment=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"LEFT_ALIGNED",get:function(){return t._MAP.LEFT_ALIGNED}},{key:"RIGHT_ALIGNED",get:function(){return t._MAP.RIGHT_ALIGNED}},{key:"CENTERED",get:function(){return t._MAP.CENTERED}}]),t}();TextAlignment._MAP=Object.freeze({LEFT_ALIGNED:"LEFT_ALIGNED",RIGHT_ALIGNED:"RIGHT_ALIGNED",CENTERED:"CENTERED"});var Show=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.Show),t}return _inherits(n,RpcRequest),_createClass(n,[{key:"setMainField1",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_1,e),this}},{key:"getMainField1",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_1)}},{key:"setMainField2",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_2,e),this}},{key:"getMainField2",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_2)}},{key:"setMainField3",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_3,e),this}},{key:"getMainField3",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_3)}},{key:"setMainField4",value:function(e){return this.setParameter(n.KEY_MAIN_FIELD_4,e),this}},{key:"getMainField4",value:function(){return this.getParameter(n.KEY_MAIN_FIELD_4)}},{key:"setAlignment",value:function(e){return this.validateType(TextAlignment,e),this.setParameter(n.KEY_ALIGNMENT,e),this}},{key:"getAlignment",value:function(){return this.getObject(TextAlignment,n.KEY_ALIGNMENT)}},{key:"setStatusBar",value:function(e){return this.setParameter(n.KEY_STATUS_BAR,e),this}},{key:"getStatusBar",value:function(){return this.getParameter(n.KEY_STATUS_BAR)}},{key:"setMediaClock",value:function(e){return this.setParameter(n.KEY_MEDIA_CLOCK,e),this}},{key:"getMediaClock",value:function(){return this.getParameter(n.KEY_MEDIA_CLOCK)}},{key:"setMediaTrack",value:function(e){return this.setParameter(n.KEY_MEDIA_TRACK,e),this}},{key:"getMediaTrack",value:function(){return this.getParameter(n.KEY_MEDIA_TRACK)}},{key:"setGraphic",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_GRAPHIC,e),this}},{key:"getGraphic",value:function(){return this.getObject(Image,n.KEY_GRAPHIC)}},{key:"setSecondaryGraphic",value:function(e){return this.validateType(Image,e),this.setParameter(n.KEY_SECONDARY_GRAPHIC,e),this}},{key:"getSecondaryGraphic",value:function(){return this.getObject(Image,n.KEY_SECONDARY_GRAPHIC)}},{key:"setSoftButtons",value:function(e){return this.setParameter(n.KEY_SOFT_BUTTONS,e),this}},{key:"getSoftButtons",value:function(){return this.getObject(SoftButton,n.KEY_SOFT_BUTTONS)}},{key:"setCustomPresets",value:function(e){return this.setParameter(n.KEY_CUSTOM_PRESETS,e),this}},{key:"getCustomPresets",value:function(){return this.getParameter(n.KEY_CUSTOM_PRESETS)}},{key:"setMetadataTags",value:function(e){return this.validateType(MetadataTags,e),this.setParameter(n.KEY_METADATA_TAGS,e),this}},{key:"getMetadataTags",value:function(){return this.getObject(MetadataTags,n.KEY_METADATA_TAGS)}},{key:"setTemplateTitle",value:function(e){return this.setParameter(n.KEY_TEMPLATE_TITLE,e),this}},{key:"getTemplateTitle",value:function(){return this.getParameter(n.KEY_TEMPLATE_TITLE)}},{key:"setWindowID",value:function(e){return this.setParameter(n.KEY_WINDOW_ID,e),this}},{key:"getWindowID",value:function(){return this.getParameter(n.KEY_WINDOW_ID)}}]),n}();Show.KEY_MAIN_FIELD_1="mainField1",Show.KEY_MAIN_FIELD_2="mainField2",Show.KEY_MAIN_FIELD_3="mainField3",Show.KEY_MAIN_FIELD_4="mainField4",Show.KEY_ALIGNMENT="alignment",Show.KEY_STATUS_BAR="statusBar",Show.KEY_MEDIA_CLOCK="mediaClock",Show.KEY_MEDIA_TRACK="mediaTrack",Show.KEY_GRAPHIC="graphic",Show.KEY_SECONDARY_GRAPHIC="secondaryGraphic",Show.KEY_SOFT_BUTTONS="softButtons",Show.KEY_CUSTOM_PRESETS="customPresets",Show.KEY_METADATA_TAGS="metadataTags",Show.KEY_TEMPLATE_TITLE="templateTitle",Show.KEY_WINDOW_ID="windowID";var ShowResponse=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.Show),t}return _inherits(n,RpcResponse),n}(),UnregisterAppInterface=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e))).setFunctionName(FunctionID.UnregisterAppInterface),t}return _inherits(n,RpcRequest),n}(),RpcCreator=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"construct",value:function(e){var t,n=e.getPayload(),r=BinaryFrameHeader.fromBinaryHeader(n),i=r.getRpcType(),o=RpcType.keyForValue(i),s=r.getCorrelationId(),a=r.getFunctionId(),u=FunctionID.keyForValue(a),l=r.getBulkData(),c=r.getJsonData(),_={parameters:JsonRpcMarshaller.unmarshall(c)};switch(a){case FunctionID.AddCommand:i===RpcType.REQUEST?t=new AddCommand(_):i===RpcType.RESPONSE&&(t=new AddCommandResponse(_));break;case FunctionID.OnHMIStatus:i===RpcType.NOTIFICATION&&(t=new OnHmiStatus(_));break;case FunctionID.OnLanguageChange:i===RpcType.NOTIFICATION&&(t=new OnLanguageChange(_));break;case FunctionID.PutFile:i===RpcType.REQUEST?t=new PutFile(_):i===RpcType.RESPONSE&&(t=new PutFileResponse(_));break;case FunctionID.RegisterAppInterface:i===RpcType.REQUEST?t=new RegisterAppInterface(_):i===RpcType.RESPONSE&&(t=new RegisterAppInterfaceResponse(_));break;case FunctionID.SetAppIcon:i===RpcType.REQUEST?t=new SetAppIcon(_):i===RpcType.RESPONSE&&(t=new SetAppIconResponse(_));break;case FunctionID.Show:i===RpcType.REQUEST?t=new Show(_):i===RpcType.RESPONSE&&(t=new ShowResponse(_));break;case FunctionID.UnregisterAppInterface:i===RpcType.REQUEST&&(t=new UnregisterAppInterface(_));break;default:t=null}return null==t?(console.warn("RpcCreator couldn't construct an RPC for the ".concat(u," ").concat(o)),null):(i!==RpcType.REQUEST&&i!==RpcType.RESPONSE||t.setCorrelationId(s),l&&t.setBulkData(l),t)}}]),e}(),VideoStreamingProtocol=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"RAW",get:function(){return t._MAP.RAW}},{key:"RTP",get:function(){return t._MAP.RTP}},{key:"RTSP",get:function(){return t._MAP.RTSP}},{key:"RTMP",get:function(){return t._MAP.RTMP}},{key:"WEBM",get:function(){return t._MAP.WEBM}}]),t}();VideoStreamingProtocol._MAP=Object.freeze({RAW:"RAW",RTP:"RTP",RTSP:"RTSP",RTMP:"RTMP",WEBM:"WEBM"});var VideoStreamingCodec=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"H264",get:function(){return t._MAP.H264}},{key:"H265",get:function(){return t._MAP.H265}},{key:"Theora",get:function(){return t._MAP.Theora}},{key:"VP8",get:function(){return t._MAP.VP8}},{key:"VP9",get:function(){return t._MAP.VP9}}]),t}();VideoStreamingCodec._MAP=Object.freeze({H264:"H264",H265:"H265",Theora:"Theora",VP8:"VP8",VP9:"VP9"});var VideoStreamingFormat=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setProtocol",value:function(e){return this.validateType(VideoStreamingProtocol,e),this.setParameter(t.KEY_PROTOCOL,e),this}},{key:"getProtocol",value:function(){return this.getParameter(t.KEY_PROTOCOL)}},{key:"setCodec",value:function(e){return this.validateType(VideoStreamingCodec,e),this.setParameter(t.KEY_CODEC,e),this}},{key:"getCodec",value:function(){return this.getParameter(t.KEY_CODEC)}}]),t}();VideoStreamingFormat.KEY_PROTOCOL="protocol",VideoStreamingFormat.KEY_CODEC="codec";var SdlProtocolBase=function(){function n(e,t){_classCallCheck(this,n),this._baseTransportConfig=e,this._transportConfig=e,this._sdlProtocolListener=t,this._transportManager=null,this.reset(),this._createTransportListener()}return _createClass(n,[{key:"reset",value:function(){this._protocolVersion=new Version(1,0,0),this._transportConfig=this._baseTransportConfig,this._headerSize=n.V1_HEADER_SIZE,this._serviceStatus={},this._serviceStatus[ServiceType.CONTROL]=!0,this._mtus={},this._mtus[ServiceType.RPC]=n.V1_V2_MTU_SIZE-this._headerSize,this._hashID=0,this._messageFrameAssemblers={},this._messageID=1,this._sessionID=0}},{key:"setTransportManager",value:function(e){this._serviceStatus[ServiceType.RPC]||this.startService(ServiceType.RPC,0,!1),this._transportManager=e}},{key:"_createTransportListener",value:function(){var t=this;this._transportListener=new TransportListener,this._transportListener.setOnTransportConnected(function(){t._handleTransportConnected()}),this._transportListener.setOnTransportDisconnected(function(){}),this._transportListener.setOnPacketReceived(function(e){t._handlePacketReceived(e)}),this._transportListener.setOnError(function(){})}},{key:"_handleTransportConnected",value:function(){this._sdlProtocolListener.onTransportConnected()}},{key:"start",value:function(){if(!this._transportManager)throw new Error("A transport manager must be defined, unable to start SDL Protocol");this._transportManager.start()}},{key:"startService",value:function(e,t,n){var r=this.constructor.MAX_PROTOCOL_VERSION,i=new SdlPacket(r.getMajor(),n,FrameType.CONTROL,e,SdlPacket.FRAME_INFO_START_SERVICE,t,0,0,null);if(e===ServiceType.AUDIO)return this.sendPacket(i);if(e!==ServiceType.RPC){if(e!==ServiceType.VIDEO)throw new Error("Service type not implemented");if(null!==this._sdlProtocolListener){var o=this._sdlProtocolListener.getDesiredVideoParams();if(null!==o){var s=o.getResolution(),a=o.getFormat();s&&(i.putTag(ControlFrameTags.Video.StartService.WIDTH,s.getResolutionWidth()),i.putTag(ControlFrameTags.Video.StartService.HEIGHT,s.getResolutionHeight())),a&&(i.putTag(ControlFrameTags.Video.StartService.VIDEO_CODEC,a.getCodec()),i.putTag(ControlFrameTags.Video.StartService.VIDEO_PROTOCOL,a.getProtocol()))}}return this.sendPacket(i)}i.putTag(ControlFrameTags.RPC.StartService.PROTOCOL_VERSION,r.toString()),this.sendPacket(i)}},{key:"getMtu",value:function(e){var t=this._mtus[e];return t||n.V1_V2_MTU_SIZE}},{key:"isConnected",value:function(){return this._transportManager&&this._transportManager.isConnected(null,null)}},{key:"getProtocolVersion",value:function(){return this._protocolVersion}},{key:"_setVersion",value:function(e){5<e?(this._protocolVersion=new Version("5.1.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):5===e?(this._protocolVersion=new Version("5.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):4===e?(this._protocolVersion=new Version("4.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):3===e?(this._protocolVersion=new Version("3.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V3_V4_MTU_SIZE):2===e?(this._protocolVersion=new Version("2.0.0"),this.headerSize=this.constructor.V2_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V1_V2_MTU_SIZE-this.headerSize):1===e&&(this._protocolVersion=new Version("1.0.0"),this.headerSize=this.constructor.V1_HEADER_SIZE,this._mtus[ServiceType.RPC]=this.constructor.V1_V2_MTU_SIZE-this.headerSize)}},{key:"sendPacket",value:function(e){this._transportManager&&this._transportManager.sendPacket(e)}},{key:"_getSessionId",value:function(){return this._sdlProtocolListener.getSessionId()}},{key:"_getNextMessageID",value:function(){return this._messageID++}},{key:"sendRpc",value:function(e){var t=this,n=this._getSessionId(),r=this._getNextMessageID(),i=t._mtus[ServiceType.RPC],o=t._protocolVersion.getMajor(),s=e.getIsEncrypted();MessageFrameDisassembler.buildRPC(e,n,r,i,o,s,function(e){t.sendPacket(e)})}},{key:"_handlePacketReceived",value:function(e){return null!==this._protocolVersion&&1!==this._protocolVersion.getMajor()||this._setVersion(e.getVersion()),e.getFrameType()===FrameType.CONTROL?this._handleControlPacket(e):this._getMessageFrameAssembler(e).handleFrame(e)}},{key:"_handleOnMessageAssembled",value:function(e){var t=e.getServiceType();return t===ServiceType.RPC||t===ServiceType.HYBRID?this._handleRPCPacket(e):t===ServiceType.HYBRID?this._handleRPCPacket(e):void console.warn("Unhandled service type ",e)}},{key:"_getMessageFrameAssembler",value:function(e){var n=this,t=n._messageFrameAssemblers[e.getMessageID()];return t||(t=new MessageFrameAssembler(function(e,t){if(e)throw new Error(e);n._messageFrameAssemblers[t.getMessageID()]=null,n._handleOnMessageAssembled(t)}),n._messageFrameAssemblers[e.getMessageID()]=t),t}},{key:"_handleControlPacket",value:function(e){var t=e.getFrameInfo();return t===SdlPacket.FRAME_INFO_HEART_BEAT?this._handleProtocolHeartbeat(e):t===SdlPacket.FRAME_INFO_HEART_BEAT_ACK?this._handleProtocolHeartbeatACK(e):t===SdlPacket.FRAME_INFO_START_SERVICE_ACK?this._handleStartServiceACK(e):t===SdlPacket.FRAME_INFO_START_SERVICE_NAK?this._handleStartServiceNAK(e):t===SdlPacket.FRAME_INFO_END_SERVICE_ACK?this._handleEndServiceACK(e):t===SdlPacket.FRAME_INFO_END_SERVICE?this._handleEndService(e):t===SdlPacket.FRAME_INFO_END_SERVICE_NAK?this._handleEndServiceNAK(e):void console.warn("Unhandled control packet",{frameInfo:t})}},{key:"_handleProtocolHeartbeat",value:function(){var e=SdlPacketFactory.createHeartbeatACK(ServiceType.CONTROL,this._getSessionId(),this._protocolVersion.getMajor());this.sendPacket(e)}},{key:"_handleProtocolHeartbeatACK",value:function(e){console.log("Received HeartbeatACK - ".concat(e.toString()))}},{key:"_handleStartServiceACK",value:function(e){var t=e.getVersion(),n=e.getServiceType();if(5<=t){var r=null;n===ServiceType.RPC?r=ControlFrameTags.RPC.StartServiceACK.MTU:n===ServiceType.PCM?r=ControlFrameTags.Audio.StartServiceACK.MTU:n===ServiceType.NAV&&(r=ControlFrameTags.Video.StartServiceACK.MTU);var i=e.getTag(r);if(null!==i&&(this._mtus[n]=i),n===ServiceType.RPC){this._sessionID=e.getSessionID(),this._hashID=e.getTag(ControlFrameTags.RPC.StartServiceACK.HASH_ID);var o=e.getTag(ControlFrameTags.RPC.StartServiceACK.PROTOCOL_VERSION);this._protocolVersion=o?(new Version).fromString(o):new Version(5,0,0)}else if(n===ServiceType.VIDEO&&null!==this._sdlProtocolListener){var s=new ImageResolution,a=new VideoStreamingFormat;s.setResolutionHeight(Math.floor(e.getTag(ControlFrameTags.Video.StartServiceACK.HEIGHT))),s.setResolutionWidth(Math.floor(e.getTag(ControlFrameTags.Video.StartServiceACK.WIDTH))),a.setCodec(e.getTag(ControlFrameTags.Video.StartServiceACK.VIDEO_CODEC)),a.setProtocol(e.getTag(ControlFrameTags.Video.StartServiceACK.VIDEO_PROTOCOL));var u=this._sdlProtocolListener.getDesiredVideoParams();u.setResolution(s),u.setFormat(a),this._sdlProtocolListener.setAcceptedVideoParams(u)}}else if(1<this._protocolVersion.getMajor()){var l=e.getPayload();null!==l&&4===l.length&&(this._hashID=BitConverter.arrayBufferToInt32(l.buffer))}this._sdlProtocolListener.onProtocolSessionStarted(n,e.getSessionID(),this._protocolVersion.getMajor(),"",this._hashID,e.getEncryption())}},{key:"_handleStartServiceNAK",value:function(e){var t="Got StartSessionNACK for protocol sessionID ".concat(e.getSessionID());throw new Error(t)}},{key:"_handleEndServiceACK",value:function(e){return this._handleServiceEnded(e)}},{key:"_handleEndService",value:function(e){return this._handleServiceEnded(e)}},{key:"_handleServiceEnded",value:function(e){this._sdlProtocolListener.onProtocolSessionEnded(e.getServiceType(),e.getSessionID(),"")}},{key:"_handleEndServiceNAK",value:function(e){var t=e.getServiceType();if(5<=e.getVersion()){var n=null;t===ServiceType.AUDIO?n=ControlFrameTags.Audio.EndServiceNAK.REJECTED_PARAMS:t===ServiceType.VIDEO&&(n=ControlFrameTags.Video.EndServiceNAK.REJECTED_PARAMS);var r=e.getTag(n);Array.isArray(r)&&0<r.length&&console.error("Got EndSessionNAK with rejected params",r)}this._sdlProtocolListener.onProtocolSessionEndedNACKed(t,e.getSessionID(),"")}},{key:"_handleRPCPacket",value:function(e){var t=RpcCreator.construct(e);null!==t&&this._sdlProtocolListener.onRpcMessageReceived(t)}},{key:"endSession",value:function(){var e=this._getSessionId(),t=this._hashID,n=ServiceType.RPC,r=this._getNextMessageID(),i=this._protocolVersion.getMajor(),o=SdlPacketFactory.createEndSession(n,e,r,i,t);this.sendPacket(o)}},{key:"endService",value:function(e,t){if(e===ServiceType.RPC)return this.endSession();var n=this._hashID,r=this._getNextMessageID(),i=this._protocolVersion.getMajor(),o=SdlPacketFactory.createEndSession(e,t,r,i,n);this.sendPacket(o)}}]),n}();SdlProtocolBase.V1_HEADER_SIZE=8,SdlProtocolBase.V2_HEADER_SIZE=12,SdlProtocolBase.V1_V2_MTU_SIZE=1500,SdlProtocolBase.V3_V4_MTU_SIZE=131072,SdlProtocolBase.MAX_PROTOCOL_VERSION=new Version(5,2,0);var TransportType=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,Enum),_createClass(t,null,[{key:"valueForKey",value:function(e){return t._valueForKey(e,t._MAP)}},{key:"keyForValue",value:function(e){return t._keyForValue(e,t._MAP)}},{key:"WEBSOCKET_CLIENT",get:function(){return t._MAP.WEBSOCKET_CLIENT}},{key:"WEBSOCKET_SERVER",get:function(){return t._MAP.WEBSOCKET_SERVER}},{key:"CUSTOM",get:function(){return t._MAP.CUSTOM}}]),t}();TransportType._MAP=Object.freeze({WEBSOCKET_CLIENT:"WEBSOCKET_CLIENT",WEBSOCKET_SERVER:"WEBSOCKET_SERVER",CUSTOM:"CUSTOM"});var SdlPsm=function(){function n(){_classCallCheck(this,n),this.reset()}return _createClass(n,[{key:"reset",value:function(){this._state=n.START_STATE,this._version=0,this._encryption=!1,this._frameType=FrameType.SINGLE,this._serviceType=0,this._controlFrameInfo=null,this._sessionID=null,this._dumpSize=null,this._dataLength=0,this._messageID=0,this._payload=null}},{key:"getState",value:function(){return this._state}},{key:"getFormedPacket",value:function(){return this._state===n.FINISHED_STATE?new SdlPacket(this._version,this._encryption,this._frameType,this._serviceType,this._controlFrameInfo,this._sessionID,this._dataLength,this._messageID,this._payload,0,this._dataLength):null}},{key:"handleByte",value:function(e){return this._state=this._transitionOnInput(e,this._state),this._state!==n.ERROR_STATE}},{key:"_transitionOnInput",value:function(e,t){if(t===n.START_STATE)return this._version=(e&n.VERSION_MASK)>>4,0===this._version?n.ERROR_STATE:(this._encryption=1==(e&n.ENCRYPTION_MASK)>>3,this._frameType=e&n.FRAME_TYPE_MASK,(this._version<1||5<this._version)&&this._frameType!==FrameType.CONTROL?n.ERROR_STATE:this._frameType<FrameType.CONTROL||this._frameType>FrameType.CONSECUTIVE?n.ERROR_STATE:n.SERVICE_TYPE_STATE);if(t===n.SERVICE_TYPE_STATE)return this._serviceType=255&e,n.CONTROL_FRAME_INFO_STATE;if(t===n.CONTROL_FRAME_INFO_STATE){switch(this._controlFrameInfo=255&e,this._frameType){case FrameType.CONTROL:break;case FrameType.SINGLE:case FrameType.FIRST:if(0!==this._controlFrameInfo)return n.ERROR_STATE;break;case FrameType.CONSECUTIVE:break;default:return n.ERROR_STATE}return n.SESSION_ID_STATE}if(t===n.SESSION_ID_STATE)return this._sessionID=255&e,n.DATA_SIZE_1_STATE;if(t===n.DATA_SIZE_1_STATE)return this._dataLength+=(255&e)<<24,n.DATA_SIZE_2_STATE;if(t===n.DATA_SIZE_2_STATE)return this._dataLength+=(255&e)<<16,n.DATA_SIZE_3_STATE;if(t===n.DATA_SIZE_3_STATE)return this._dataLength+=(255&e)<<8,n.DATA_SIZE_4_STATE;if(t!==n.DATA_SIZE_4_STATE)return t===n.MESSAGE_1_STATE?(this._messageID+=(255&e)<<24,n.MESSAGE_2_STATE):t===n.MESSAGE_2_STATE?(this._messageID+=(255&e)<<16,n.MESSAGE_3_STATE):t===n.MESSAGE_3_STATE?(this._messageID+=(255&e)<<8,n.MESSAGE_4_STATE):t===n.MESSAGE_4_STATE?(this._messageID+=255&e,0===this._dataLength?n.FINISHED_STATE:(this._dumpSize=this._dataLength,this._payload=new Uint8Array(this._dataLength),n.DATA_PUMP_STATE)):t===n.DATA_PUMP_STATE?(this._payload[this._dataLength-this._dumpSize]=e,this._dumpSize-=1,0<this._dumpSize?n.DATA_PUMP_STATE:0===this._dumpSize?n.FINISHED_STATE:n.ERROR_STATE):void 0;switch(this._dataLength+=255&e,this._frameType){case FrameType.SINGLE:case FrameType.CONSECUTIVE:break;case FrameType.CONTROL:if(1===this._version&&this._controlFrameInfo===SdlPacket.FRAME_INFO_START_SERVICE)return 0===this._dataLength?n.FINISHED_STATE:this._dataLength<=SdlProtocolBase.V1_V2_MTU_SIZE-SdlProtocolBase.V1_HEADER_SIZE?(this._payload=new Uint8Array(this._dataLength),this._dumpSize=this._dataLength,n.DATA_PUMP_STATE):n.ERROR_STATE;break;case FrameType.FIRST:if(this._dataLength!==n.FIRST_FRAME_DATA_SIZE)return n.ERROR_STATE;break;default:return n.ERROR_STATE}return 1===this._version?0===this._dataLength?n.FINISHED_STATE:this._dataLength<=SdlProtocolBase.V1_V2_MTU_SIZE-SdlProtocolBase.V1_HEADER_SIZE?(this._payload=new Uint8Array(this._dataLength),this._dumpSize=this._dataLength,n.DATA_PUMP_STATE):n.ERROR_STATE:n.MESSAGE_1_STATE}}]),n}();SdlPsm.START_STATE=0,SdlPsm.SERVICE_TYPE_STATE=2,SdlPsm.CONTROL_FRAME_INFO_STATE=3,SdlPsm.SESSION_ID_STATE=4,SdlPsm.DATA_SIZE_1_STATE=5,SdlPsm.DATA_SIZE_2_STATE=6,SdlPsm.DATA_SIZE_3_STATE=7,SdlPsm.DATA_SIZE_4_STATE=8,SdlPsm.MESSAGE_1_STATE=9,SdlPsm.MESSAGE_2_STATE=10,SdlPsm.MESSAGE_3_STATE=11,SdlPsm.MESSAGE_4_STATE=12,SdlPsm.DATA_PUMP_STATE=13,SdlPsm.FINISHED_STATE=255,SdlPsm.ERROR_STATE=-1,SdlPsm.FIRST_FRAME_DATA_SIZE=8,SdlPsm.VERSION_MASK=240,SdlPsm.ENCRYPTION_MASK=8,SdlPsm.FRAME_TYPE_MASK=7;var TransportBase=function(){function n(e,t){_classCallCheck(this,n),this._sdlPsm=new SdlPsm,this._transportConfig=e,this._transportCallback=t}return _createClass(n,[{key:"start",value:function(){throw new Error("start method must be overridden")}},{key:"stop",value:function(){throw new Error("stop method must be overridden")}},{key:"sendPacket",value:function(){throw new Error("sendPacket method must be overridden")}},{key:"setTransportCallback",value:function(){throw new Error("setTransportCallback method must be overridden")}}]),n}(),WebSocketClient=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t)))._queue=[],n._isRunning=!1,n._wsUrl="".concat(e.getHost(),":").concat(e.getPort()),n._ws=null,n}return _inherits(r,TransportBase),_createClass(r,[{key:"setTransportCallback",value:function(e){this._transportCallback=e}},{key:"start",value:function(){this._init()}},{key:"_init",value:function(){var t=this;this._ws=new WebSocket(this._wsUrl),this._ws.onopen=function(){t._transportCallback.onConnectionEstablished()},this._ws.onerror=function(e){console.error("Failed to connect",e),t._transportCallback.onError()},this._ws.onmessage=function(e){t._handleIncoming(e)},this._ws.onclose=function(){t._transportCallback.onConnectionTerminated()}}},{key:"stop",value:function(){this._ws.close()}},{key:"sendPacket",value:function(e){var t=e.toPacket();this._ws.send(t)}},{key:"_handleIncoming",value:function(e){this._queue.push(e.data),this._multiByteHandler()}},{key:"_multiByteHandler",value:function(){var u=this;if(!this._isRunning){for(this._isRunning=!0;0<this._queue.length;){var e=this._queue.shift();new Response(e).arrayBuffer().then(function(e){var t=new Uint8Array(e),n=!0,r=!1,i=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done);n=!0){var a=o.value;u._handleByte(a)}}catch(e){r=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(r)throw i}}})}this._isRunning=!1}}},{key:"_handleByte",value:function(e){if(this._sdlPsm.handleByte(e)||(console.error("failed",this._sdlPsm),this._sdlPsm.reset()),this._sdlPsm.getState()===SdlPsm.FINISHED_STATE){var t=this._sdlPsm.getFormedPacket();this._sdlPsm.reset(),this._transportCallback.onPacketReceived(t)}}}]),r}(),TransportCallback=function(){function e(){_classCallCheck(this,e),this._onConnectionEstablished=null,this._onError=null,this._onConnectionTerminated=null,this._onPacketReceived=null}return _createClass(e,[{key:"setOnConnectionEstablished",value:function(e){this._onConnectionEstablished=e}},{key:"setOnError",value:function(e){this._onError=e}},{key:"setOnConnectionTerminated",value:function(e){this._onConnectionTerminated=e}},{key:"setOnPacketReceived",value:function(e){this._onPacketReceived=e}},{key:"onConnectionEstablished",value:function(){"function"==typeof this._onConnectionEstablished&&this._onConnectionEstablished()}},{key:"onError",value:function(){"function"==typeof this._onError&&this._onError()}},{key:"onConnectionTerminated",value:function(e){"function"==typeof this._onConnectionTerminated&&this._onConnectionTerminated(e)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),TransportManagerBase=function(){function r(e,t){var n=this;_classCallCheck(this,r),this._transportConfig=e,this._transportListener=t,this._transport=null,this._isConnected=!1,this._transportCallback=new TransportCallback,this._transportCallback.setOnConnectionEstablished(function(){n._isConnected=!0,t.onTransportConnected()}),this._transportCallback.setOnConnectionTerminated(function(){n._isConnected=!1}),this._transportCallback.setOnPacketReceived(this.onPacketReceived.bind(this)),this._transportConfig.getTransportType()===TransportType.WEBSOCKET_CLIENT?this._transport=new WebSocketClient(this._transportConfig,this._transportCallback):this._transportConfig.getTransportType()===TransportType.CUSTOM&&(this._transport=this._transportConfig.getTransport(),this._transport.setTransportCallback(this._transportCallback))}return _createClass(r,[{key:"onTransportConnected",value:function(){this._transportListener.onTransportConnected()}},{key:"onTransportDisconnected",value:function(){this._transportListener.onTransportDisconnected()}},{key:"onError",value:function(){this._transportListener.onError()}},{key:"onPacketReceived",value:function(e){this._transportListener.onPacketReceived(e)}},{key:"start",value:function(){null!==this._transport&&"function"==typeof this._transport.start&&this._transport.start()}},{key:"stop",value:function(){null!==this._transport&&"function"==typeof this._transport.stop&&this._transport.stop()}},{key:"sendPacket",value:function(e){null!==this._transport&&"function"==typeof this._transport.sendPacket&&this._transport.sendPacket(e)}},{key:"isConnected",value:function(){return this._isConnected}}]),r}(),TransportManager=function(){function n(e,t){return _classCallCheck(this,n),_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,e,t))}return _inherits(n,TransportManagerBase),n}(),SdlProtocol=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,t))).setTransportManager(new TransportManager(n._transportConfig,n._transportListener)),n}return _inherits(r,SdlProtocolBase),r}(),ServiceListenerMap=function(){function e(){_classCallCheck(this,e),this._listeners={},this._listeners[ServiceType.CONTROL]=[],this._listeners[ServiceType.RPC]=[],this._listeners[ServiceType.AUDIO]=[],this._listeners[ServiceType.VIDEO]=[],this._listeners[ServiceType.HYBRID]=[]}return _createClass(e,[{key:"addListener",value:function(e,t){e&&this._listeners[e].push(t)}},{key:"removeListener",value:function(e,t){if(e){var n=this._listeners[e],r=!1;return this._listeners[e]=n.filter(function(e){return r=!0,e!==t}),r}}},{key:"sendEventServiceStarted",value:function(e,t,n){var r=this._listeners[t];for(var i in r)r[i].onServiceStarted(e,t,n)}},{key:"sendEventServiceEnded",value:function(e,t){var n=this._listeners[t];for(var r in n)n[r].onServiceEnded(e,t)}},{key:"sendEventServiceError",value:function(e,t,n){var r=this._listeners[t];for(var i in r)r[i].onServiceError(e,t,n)}}]),e}(),DEFAULT_PROTOCOL=VideoStreamingProtocol.RAW,DEFAULT_CODEC=VideoStreamingCodec.H264,DEFAULT_WIDTH=1024,DEFAULT_HEIGHT=576,DEFAULT_DENSITY=240,DEFAULT_FRAMERATE=30,DEFAULT_BITRATE=512e3,DEFAULT_INTERVAL=5,DEFAULT_SCALE=1,VideoStreamingParameters=function(){function s(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:null;_classCallCheck(this,s),this._displayDensity=e||DEFAULT_DENSITY,this._frameRate=t||DEFAULT_FRAMERATE,this._bitrate=n||DEFAULT_BITRATE,this._interval=r||DEFAULT_INTERVAL,i instanceof ImageResolution||((i=new ImageResolution).setResolutionWidth(DEFAULT_WIDTH),i.setResolutionHeight(DEFAULT_HEIGHT)),this._resolution=i,o instanceof VideoStreamingFormat||((o=new VideoStreamingFormat).setProtocol(DEFAULT_PROTOCOL),o.setCodec(DEFAULT_CODEC)),this._format=o}return _createClass(s,[{key:"update",value:function(e){null!==e.getMaxBitrate()&&(this._bitrate=1e3*e.getMaxBitrate());var t=DEFAULT_SCALE;null!==e.getScale()&&(t=e.getScale());var n=e.getPreferredResolution();null!==n&&(null!==n.getResolutionHeight()&&0<n.getResolutionHeight()&&this._resolution.setResolutionHeight(Math.floor(n.getResolutionHeight()/t)),null!==n.getResolutionWidth()&&0<n.getResolutionWidth()&&this._resolution.setResolutionWidth(Math.floor(n.getResolutionWidth()/t)));var r=e.getSupportedFormats();null!==r&&0<r.length&&(this._format=r[0])}},{key:"setDisplayDensity",value:function(e){return this._displayDensity=e,this}},{key:"getDisplayDensity",value:function(){return this._displayDensity}},{key:"setFrameRate",value:function(e){this._frameRate=e}},{key:"getFrameRate",value:function(){return this._frameRate}},{key:"setBitrate",value:function(e){return this._bitrate=e,this}},{key:"getBitrate",value:function(){return this._bitrate}},{key:"setInterval",value:function(e){return this._interval=e,this}},{key:"getInterval",value:function(){return this._interval}},{key:"setFormat",value:function(e){return this._format=e,this}},{key:"getFormat",value:function(){return this._format}},{key:"setResolution",value:function(e){return this._resolution=e,this}},{key:"getResolution",value:function(){return this._resolution}}]),s}(),SdlSession=function(){function n(e,t){_classCallCheck(this,n),this._baseTransportConfig=e,this._sessionId=null,this._sessionHashId=null,this._sdlSessionListener=t,this._baseTransportConfig=e,this._serviceListeners=new ServiceListenerMap,this._sdlProtocolListener=this._setupSdlProtocolListener(),this._sdlProtocol=new SdlProtocol(e,this._sdlProtocolListener)}return _createClass(n,[{key:"_setupSdlProtocolListener",value:function(){var e=new SdlProtocolListener;return e.setGetSessionId(this.getSessionId.bind(this)),e.setOnProtocolSessionStarted(this.onProtocolSessionStarted.bind(this)),e.setOnProtocolSessionEnded(this.onProtocolSessionEnded.bind(this)),e.setOnProtocolSessionEndedNACKed(this.onProtocolSessionEndedNACKed.bind(this)),e.setOnRpcMessageReceived(this.onRpcMessageReceived.bind(this)),e.setOnTransportConnected(this.onTransportConnected.bind(this)),e.setGetDesiredVideoParams(this.getDesiredVideoParams.bind(this)),e.setSetAcceptedVideoParams(this.setAcceptedVideoParams.bind(this)),e}},{key:"start",value:function(){this._sdlProtocol.start()}},{key:"getSessionId",value:function(){return this._sessionId}},{key:"onTransportConnected",value:function(){this._sdlSessionListener.onTransportConnected()}},{key:"onProtocolSessionStarted",value:function(e,t,n,r,i,o){this._sessionId=t,e===ServiceType.RPC&&(this._sessionHashId=i),this._sdlSessionListener.onProtocolSessionStarted(e,t,n,r,i,o),this._serviceListeners.sendEventServiceStarted(this,e,o)}},{key:"onProtocolSessionEnded",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEnded(e,t,n),this._serviceListeners.sendEventServiceEnded(this,e)}},{key:"onProtocolSessionEndedNACKed",value:function(e,t,n){this._sdlSessionListener.onProtocolSessionEndedNACKed(e,t,n),this._serviceListeners.sendEventServiceError(this,e,"End ".concat(e.toString()," Service NACK'ed"))}},{key:"onRpcMessageReceived",value:function(e){this._sdlSessionListener.onRpcMessageReceived(e)}},{key:"endSession",value:function(){this._sdlProtocol.endSession()}},{key:"sendRpc",value:function(e){this._sdlProtocol.sendRpc(e)}},{key:"sendPacket",value:function(e){this._sdlProtocol.sendPacket(e)}},{key:"getMtu",value:function(e){this._sdlProtocol.getMtu(e)}},{key:"close",value:function(){this._sdlProtocol.endSession(this._sessionId,this._sessionHashId)}},{key:"startService",value:function(e,t,n){this._sdlProtocol.startService(e,t,n)}},{key:"endService",value:function(e,t){this._sdlProtocol.endService(e,t)}},{key:"getCurrentTransportType",value:function(){return this._baseTransportConfig.getTransportType()}},{key:"getIsConnected",value:function(){return this._sdlProtocol.isConnected()}},{key:"getProtocolVersion",value:function(){return this._sdlProtocol.getProtocolVersion()}},{key:"getTransportConfig",value:function(){return this._baseTransportConfig}},{key:"getSessionHashId",value:function(){return this._sessionHashId}},{key:"addServiceListener",value:function(e,t){this._serviceListeners.addListener(e,t)}},{key:"removeServiceListener",value:function(e,t){return this._serviceListeners.removeListener(e,t)}},{key:"getServiceListeners",value:function(){return this._serviceListeners}},{key:"setDesiredVideoParams",value:function(e){return this._desiredVideoParams=e,this}},{key:"getDesiredVideoParams",value:function(){return this._desiredVideoParams instanceof VideoStreamingParameters||(this._desiredVideoParams=new VideoStreamingParameters),this._desiredVideoParams}},{key:"setAcceptedVideoParams",value:function(e){return this._desiredVideoParams=e,this}}]),n}(),ArrayTools=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"arrayRemove",value:function(e,t){return e.filter(function(e){return e!==t})}}]),e}(),LifecycleManager=function(){function n(e,t){if(_classCallCheck(this,n),null===e||null===t||void 0===e||void 0===t)throw new Error("Params must not be null");this._appConfig=e,this._lifecycleListener=t,this._sdlSession=new SdlSession(this._appConfig.getTransportConfig(),this._createSessionListener()),this._rpcSpecVersion=new Version(1,0,0),this._currentHMIStatus=null,this._firstTimeFull=!0,this._responseListeners=new Map,this._maxCorrelationId=0,this._rpcListeners=new Map}return _createClass(n,[{key:"_createSessionListener",value:function(){var s=this,e=new SdlSessionListener;return e.setOnProtocolSessionStarted(function(e,t,n,r,i,o){e===ServiceType.RPC&&null!==s._appConfig&&void 0!==s._appConfig&&s.sendRpcMessage(s._createRegisterAppInterface())}),e.setOnProtocolSessionEnded(function(e,t,n){}),e.setOnProtocolSessionEndedNACKed(function(e,t,n){}),e.setOnRpcMessageReceived(function(e){s._handleRpc(e)}),e.setOnTransportConnected(function(){s._sdlSession.startService(ServiceType.RPC,0,!1)}),e}},{key:"_handleRpc",value:function(n){if(null!=n&&null!==n.getFunctionName()&&void 0!==n.getFunctionName()){var e=FunctionID.valueForKey(n.getFunctionName()),t=this._rpcListeners.get(e);null!=t&&t.forEach(function(e,t){e.onRpcMessage(n)}),n instanceof RpcResponse&&this._responseListeners.has(n.getCorrelationId())&&this._responseListeners.get(n.getCorrelationId()).resolve()}}},{key:"start",value:function(){return this._setupInternalRpcListeners(),this._sdlSession.start(),this}},{key:"stop",value:function(){this._sdlSession.close()}},{key:"addRpcListener",value:function(e,t){var n=this._rpcListeners.get(e);null==n&&(this._rpcListeners.set(e,[]),n=this._rpcListeners.get(e)),n.push(t)}},{key:"removeRpcListener",value:function(e,t){if(null!=t){var n=this._rpcListeners.get(e);null!=n&&this._rpcListeners.set(e,ArrayTools.arrayRemove(n,t))}}},{key:"sendRpcMessage",value:function(e){null!=e&&this._sdlSession.getIsConnected()&&(e instanceof RpcRequest&&(e.getFunctionName!==FunctionID.RegisterAppInterface&&e.setCorrelationId(++this._maxCorrelationId),null!==e.getOnRPCResponsePromise()&&void 0!==e.getOnRPCResponsePromise()&&this._responseListeners.set(e.getCorrelationId(),e.getOnRPCResponsePromise())),this._sdlSession.sendRpc(e))}},{key:"getRegisterAppInterfaceResponse",value:function(){return this._registerAppInterfaceResponse}},{key:"_createRegisterAppInterface",value:function(){var e=new RegisterAppInterface;return e.setSdlMsgVersion((new SdlMsgVersion).setMajorVersion(n.MAX_RPC_VERSION.getMajor()).setMinorVersion(n.MAX_RPC_VERSION.getMinor()).setPatchVersion(n.MAX_RPC_VERSION.getPatch())).setAppName(this._appConfig.getAppName()).setFullAppId(this._appConfig.getAppId()).setNgnMediaScreenAppName(this._appConfig.getShortAppName()).setAppHmiType(this._appConfig.getAppTypes()).setLanguageDesired(this._appConfig.getLanguageDesired()).setHmiDisplayLanguageDesired(this._appConfig.getHmiDisplayLanguageDesired()).setIsMediaApplication(this._appConfig.isMediaApp()).setDayColorScheme(this._appConfig.getDayColorScheme()).setNightColorScheme(this._appConfig.getNightColorScheme()).setCorrelationId(n.REGISTER_APP_INTERFACE_CORRELATION_ID),e}},{key:"_setupInternalRpcListeners",value:function(){var n=this;this._rpcListener=(new RpcListener).setOnRpcMessage(function(e){switch(FunctionID.valueForKey(e.getFunctionName())){case FunctionID.RegisterAppInterface:n._processRaiResponse(e);break;case FunctionID.OnHMIStatus:var t=null!==e.getHMILevel()&&void 0!==e.getHMILevel()&&null===n._currentHMIStatus;n._currentHMIStatus=e.getHMILevel(),null!==n._lifecycleListener&&void 0!==n._lifecycleListener&&t&&n._lifecycleListener.onProxyConnected(n)}}),this.addRpcListener(FunctionID.RegisterAppInterface,this._rpcListener),this.addRpcListener(FunctionID.OnHMIStatus,this._rpcListener)}},{key:"_processRaiResponse",value:function(e){var t=(this._registerAppInterfaceResponse=e).getSdlMsgVersion();this._rpcSpecVersion=null!=t?new Version(t.getMajorVersion(),t.getMajorVersion(),t.getPatchVersion()):n.MAX_RPC_VERSION}}]),n}();LifecycleManager.MAX_RPC_VERSION=new Version(6,0,0),LifecycleManager.REGISTER_APP_INTERFACE_CORRELATION_ID=65529,LifecycleManager.UNREGISTER_APP_INTERFACE_CORRELATION_ID=65530;var VideoStreamingCapability=function(){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,_getPrototypeOf(t).call(this))}return _inherits(t,RpcStruct),_createClass(t,[{key:"setPreferredResolution",value:function(e){return this.validateType(ImageResolution,e),this.setParameter(t.KEY_PREFERRED_RESOLUTION,e),this}},{key:"getPreferredResolution",value:function(){return this.getObject(ImageResolution,t.KEY_PREFERRED_RESOLUTION)}},{key:"setMaxBitrate",value:function(e){return this.setParameter(t.KEY_MAX_BITRATE,e),this}},{key:"getMaxBitrate",value:function(){return this.getParameter(t.KEY_MAX_BITRATE)}},{key:"setSupportedFormats",value:function(e){this.validateType(VideoStreamingFormat,e,!0),this.setParameter(t.KEY_SUPPORTED_FORMATS,e)}},{key:"getSupportedFormats",value:function(){return this.getObject(VideoStreamingFormat,t.KEY_SUPPORTED_FORMATS)}},{key:"setHapticSpatialDataSupported",value:function(e){return this.setParameter(t.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED,e),this}},{key:"getHapticSpatialDataSupported",value:function(){return this.getParameter(t.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED)}},{key:"setDiagonalScreenSize",value:function(e){return this.setParameter(t.KEY_DIAGONAL_SCREEN_SIZE,e),this}},{key:"getDiagonalScreenSize",value:function(){return this.getParameter(t.KEY_DIAGONAL_SCREEN_SIZE)}},{key:"setPixelPerInch",value:function(e){return this.setParameter(t.KEY_PIXEL_PER_INCH,e),this}},{key:"getPixelPerInch",value:function(){return this.getParameter(t.KEY_PIXEL_PER_INCH)}},{key:"setScale",value:function(e){return this.setParameter(t.KEY_SCALE,e),this}},{key:"getScale",value:function(){return this.getParameter(t.KEY_SCALE)}}]),t}();VideoStreamingCapability.KEY_PREFERRED_RESOLUTION="preferredResolution",VideoStreamingCapability.KEY_MAX_BITRATE="maxBitrate",VideoStreamingCapability.KEY_SUPPORTED_FORMATS="supportedFormats",VideoStreamingCapability.KEY_HAPTIC_SPATIAL_DATA_SUPPORTED="hapticSpatialDataSupported",VideoStreamingCapability.KEY_DIAGONAL_SCREEN_SIZE="diagonalScreenSize",VideoStreamingCapability.KEY_PIXEL_PER_INCH="pixelPerInch",VideoStreamingCapability.KEY_SCALE="scale";var SdlServiceListener=function(){function e(){_classCallCheck(this,e),this._onServiceStarted=null,this._onServiceEnded=null,this._onServiceError=null}return _createClass(e,[{key:"setOnServiceStarted",value:function(e){this._onServiceStarted=e}},{key:"setOnServiceEnded",value:function(e){this._onServiceEnded=e}},{key:"setOnServiceError",value:function(e){this._onServiceError=e}},{key:"onServiceStarted",value:function(e,t,n){"function"==typeof this._onServiceStarted&&this._onServiceStarted(e,t,n)}},{key:"onServiceEnded",value:function(e,t){"function"==typeof this._onServiceEnded&&this._onServiceEnded(e,t)}},{key:"onServiceError",value:function(e,t,n){"function"==typeof this._onServiceError&&this._onServiceError(e,t,n)}}]),e}(),CustomTransport=function(){function r(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return _classCallCheck(this,r),(t=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,e,n)))._queue=[],t._isRunning=!1,t}return _inherits(r,TransportBase),_createClass(r,[{key:"setTransportCallback",value:function(e){return this._transportCallback=e,this}},{key:"start",value:function(){null!==this._transportCallback&&this._transportCallback.onConnectionEstablished()}},{key:"stop",value:function(){null!==this._transportCallback&&this._transportCallback.onConnectionTerminated("Transport told to stop")}},{key:"onError",value:function(){null!==this._transportCallback&&this._transportCallback.onError()}},{key:"sendPacket",value:function(e){var t=e.toPacket();this.onSendPacket(t,0,t.length)}},{key:"onSendPacket",value:function(){throw new Error("onSendPacket method must be overridden")}},{key:"onByteBufferReceived",value:function(e){this._queue.push(e),this._multiByteHandler()}},{key:"_multiByteHandler",value:function(){if(!this._isRunning){for(this._isRunning=!0;0<this._queue.length;){var e=this._queue.shift(),t=!0,n=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(t=(i=o.next()).done);t=!0){var s=i.value;this._handleByte(s)}}catch(e){n=!0,r=e}finally{try{t||null==o.return||o.return()}finally{if(n)throw r}}}this._isRunning=!1}}},{key:"_handleByte",value:function(e){var t=this._sdlPsm;if(t.handleByte(e)||(console.error("failed",t),t.reset()),t.getState()===SdlPsm.FINISHED_STATE){var n=t.getFormedPacket();t.reset(),null!==this._transportCallback&&this._transportCallback.onPacketReceived(n)}}}]),r}(),TransportConfigBase=function(){function t(e){_classCallCheck(this,t),this._transportType=e}return _createClass(t,[{key:"getTransportType",value:function(){return this._transportType}}]),t}(),CustomTransportConfig=function(){function n(e){var t;return _classCallCheck(this,n),(t=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,TransportType.CUSTOM)))._customTransport=e,t}return _inherits(n,TransportConfigBase),_createClass(n,[{key:"getTransportType",value:function(){return TransportType.CUSTOM}},{key:"getTransport",value:function(){return this._customTransport}}]),n}(),SslConfig=function(){function r(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;_classCallCheck(this,r),this._pemCertificate=e,this._privateKey=t,this._password=n}return _createClass(r,[{key:"getPemCertificate",value:function(){return this._pemCertificate}},{key:"getPrivateKey",value:function(){return this._privateKey}},{key:"getPassword",value:function(){return this._password}}]),r}(),WebSocketClientConfig=function(){function r(e,t){var n;return _classCallCheck(this,r),(n=_possibleConstructorReturn(this,_getPrototypeOf(r).call(this,TransportType.WEBSOCKET_CLIENT)))._host=e,n._port=t,n}return _inherits(r,TransportConfigBase),_createClass(r,[{key:"getHost",value:function(){return this._host}},{key:"getPort",value:function(){return this._port}}]),r}(),TransportRecord=function(){function n(e,t){_classCallCheck(this,n),this._type=e,this._address=t}return _createClass(n,[{key:"getType",value:function(){return this._type}},{key:"getAddress",value:function(){return this._address}},{key:"equals",value:function(e){return e instanceof n&&null!==e.getType&&e.getType()===this.getType()&&e.getAddress()===this.getAddress()}},{key:"toString",value:function(){return"Transport Type: ".concat(this._type.name()," \n Address: ").concat(this._address)}}]),n}(),SDL={manager:{AppConfig:AppConfig,lifecycle:{LifecycleListener:LifecycleListener,LifecycleManager:LifecycleManager}},protocol:{BinaryFrameHeader:BinaryFrameHeader,MessageFrameAssembler:MessageFrameAssembler,MessageFrameDisassembler:MessageFrameDisassembler,SdlPacket:SdlPacket,SdlPacketFactory:SdlPacketFactory,SdlProtocol:SdlProtocol,SdlProtocolBase:SdlProtocolBase,SdlProtocolListener:SdlProtocolListener,enums:{ControlFrameTags:ControlFrameTags,FrameType:FrameType,ServiceType:ServiceType}},rpc:{RpcCreator:RpcCreator,RpcListener:RpcListener,RpcMessage:RpcMessage,RpcNotification:RpcNotification,RpcRequest:RpcRequest,RpcResponse:RpcResponse,RpcStruct:RpcStruct,enums:{AppHMIType:AppHMIType,AudioStreamingState:AudioStreamingState,AudioType:AudioType,BitsPerSample:BitsPerSample,ButtonName:ButtonName,CharacterSet:CharacterSet,DisplayType:DisplayType,FileType:FileType,FunctionID:FunctionID,HMILevel:HMILevel,HmiZoneCapabilities:HmiZoneCapabilities,ImageFieldName:ImageFieldName,ImageType:ImageType,Language:Language,MediaClockFormat:MediaClockFormat,MetadataType:MetadataType,PrerecordedSpeech:PrerecordedSpeech,Result:Result,RpcType:RpcType,SamplingRate:SamplingRate,SoftButtonType:SoftButtonType,SpeechCapabilities:SpeechCapabilities,SystemAction:SystemAction,SystemContext:SystemContext,TextAlignment:TextAlignment,TextFieldName:TextFieldName,VideoStreamingCodec:VideoStreamingCodec,VideoStreamingProtocol:VideoStreamingProtocol,VideoStreamingState:VideoStreamingState,VrCapabilities:VrCapabilities},messages:{AddCommand:AddCommand,AddCommandResponse:AddCommandResponse,OnHmiStatus:OnHmiStatus,OnLanguageChange:OnLanguageChange,PutFile:PutFile,PutFileResponse:PutFileResponse,RegisterAppInterface:RegisterAppInterface,RegisterAppInterfaceResponse:RegisterAppInterfaceResponse,SetAppIcon:SetAppIcon,SetAppIconResponse:SetAppIconResponse,Show:Show,ShowResponse:ShowResponse,UnregisterAppInterface:UnregisterAppInterface},structs:{AppInfo:AppInfo,AudioPassThruCapabilities:AudioPassThruCapabilities,ButtonCapabilities:ButtonCapabilities,DeviceInfo:DeviceInfo,DisplayCapabilities:DisplayCapabilities,Grid:Grid,HMICapabilities:HMICapabilities,Image:Image,ImageField:ImageField,ImageResolution:ImageResolution,MenuParams:MenuParams,MetadataTags:MetadataTags,ModuleInfo:ModuleInfo,PresetBankCapabilities:PresetBankCapabilities,RGBColor:RGBColor,ScreenParams:ScreenParams,SdlMsgVersion:SdlMsgVersion,SoftButton:SoftButton,SoftButtonCapabilities:SoftButtonCapabilities,TTSChunk:TTSChunk,TemplateColorScheme:TemplateColorScheme,TextField:TextField,TouchEventCapabilities:TouchEventCapabilities,VehicleType:VehicleType,VideoStreamingCapability:VideoStreamingCapability,VideoStreamingFormat:VideoStreamingFormat}},session:{SdlServiceListener:SdlServiceListener,SdlSession:SdlSession,SdlSessionListener:SdlSessionListener,ServiceListenerMap:ServiceListenerMap},streaming:{video:{VideoStreamingParameters:VideoStreamingParameters}},transport:{CustomTransport:CustomTransport,CustomTransportConfig:CustomTransportConfig,SdlPsm:SdlPsm,SslConfig:SslConfig,TransportBase:TransportBase,TransportCallback:TransportCallback,TransportConfigBase:TransportConfigBase,TransportListener:TransportListener,TransportManager:TransportManager,TransportManagerBase:TransportManagerBase,WebSocketClient:WebSocketClient,WebSocketClientConfig:WebSocketClientConfig,enums:{TransportType:TransportType},util:{TransportRecord:TransportRecord}},util:{ArrayTools:ArrayTools,BitConverter:BitConverter,Bson:Bson,Enum:Enum,JsonRpcMarshaller:JsonRpcMarshaller,TextEncoder:TextEncoder,Version:Version}};return SDL});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0RMLmpzIiwic291cmNlcyI6WyIuLi9zcmMvbWFuYWdlci9BcHBDb25maWcuanMiLCIuLi9zcmMvbWFuYWdlci9saWZlY3ljbGUvTGlmZWN5Y2xlTGlzdGVuZXIuanMiLCIuLi9zcmMvdXRpbC9FbnVtLmpzIiwiLi4vc3JjL3JwYy9ScGNTdHJ1Y3QuanMiLCIuLi9zcmMvcnBjL2VudW1zL0Z1bmN0aW9uSUQuanMiLCIuLi9zcmMvcnBjL1JwY01lc3NhZ2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL1JwY1R5cGUuanMiLCIuLi9zcmMvcnBjL1JwY1JlcXVlc3QuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvU2RsTXNnVmVyc2lvbi5qcyIsIi4uL3NyYy9ycGMvZW51bXMvU3BlZWNoQ2FwYWJpbGl0aWVzLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL1RUU0NodW5rLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL0RldmljZUluZm8uanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvQXBwSW5mby5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9SR0JDb2xvci5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9UZW1wbGF0ZUNvbG9yU2NoZW1lLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9MYW5ndWFnZS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvQXBwSE1JVHlwZS5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvUmVnaXN0ZXJBcHBJbnRlcmZhY2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL1Jlc3VsdC5qcyIsIi4uL3NyYy9ycGMvUnBjUmVzcG9uc2UuanMiLCIuLi9zcmMvcnBjL1JwY0xpc3RlbmVyLmpzIiwiLi4vc3JjL3Nlc3Npb24vU2RsU2Vzc2lvbkxpc3RlbmVyLmpzIiwiLi4vc3JjL3Byb3RvY29sL1NkbFByb3RvY29sTGlzdGVuZXIuanMiLCIuLi9zcmMvcHJvdG9jb2wvZW51bXMvRnJhbWVUeXBlLmpzIiwiLi4vLi4vLi4vdGhpcmRfcGFydHkvYnNvbi5jb21tb24uanMiLCIuLi9zcmMvdXRpbC9Cc29uLmpzIiwiLi4vc3JjL3Byb3RvY29sL1NkbFBhY2tldC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtZ2xvYmFscy9zcmMvZ2xvYmFsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvYmFzZTY0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvaWVlZTc1NC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXItZXM2L2lzQXJyYXkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9pbmRleC5qcyIsIi4uL3NyYy91dGlsL1RleHRFbmNvZGVyLmpzIiwiLi4vc3JjL3V0aWwvSnNvblJwY01hcnNoYWxsZXIuanMiLCIuLi9zcmMvcHJvdG9jb2wvQmluYXJ5RnJhbWVIZWFkZXIuanMiLCIuLi9zcmMvcHJvdG9jb2wvTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9UcmFuc3BvcnRMaXN0ZW5lci5qcyIsIi4uL3NyYy91dGlsL1ZlcnNpb24uanMiLCIuLi9zcmMvcHJvdG9jb2wvZW51bXMvU2VydmljZVR5cGUuanMiLCIuLi9zcmMvcHJvdG9jb2wvTWVzc2FnZUZyYW1lQXNzZW1ibGVyLmpzIiwiLi4vc3JjL3Byb3RvY29sL2VudW1zL0NvbnRyb2xGcmFtZVRhZ3MuanMiLCIuLi9zcmMvdXRpbC9CaXRDb252ZXJ0ZXIuanMiLCIuLi9zcmMvcHJvdG9jb2wvU2RsUGFja2V0RmFjdG9yeS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvSW1hZ2VUeXBlLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL0ltYWdlLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL01lbnVQYXJhbXMuanMiLCIuLi9zcmMvcnBjL21lc3NhZ2VzL0FkZENvbW1hbmQuanMiLCIuLi9zcmMvcnBjL21lc3NhZ2VzL0FkZENvbW1hbmRSZXNwb25zZS5qcyIsIi4uL3NyYy9ycGMvUnBjTm90aWZpY2F0aW9uLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9ITUlMZXZlbC5qcyIsIi4uL3NyYy9ycGMvZW51bXMvQXVkaW9TdHJlYW1pbmdTdGF0ZS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvVmlkZW9TdHJlYW1pbmdTdGF0ZS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvU3lzdGVtQ29udGV4dC5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvT25IbWlTdGF0dXMuanMiLCIuLi9zcmMvcnBjL21lc3NhZ2VzL09uTGFuZ3VhZ2VDaGFuZ2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL0ZpbGVUeXBlLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9QdXRGaWxlLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9QdXRGaWxlUmVzcG9uc2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL1RleHRGaWVsZE5hbWUuanMiLCIuLi9zcmMvcnBjL2VudW1zL0NoYXJhY3RlclNldC5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9UZXh0RmllbGQuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvSW1hZ2VSZXNvbHV0aW9uLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9JbWFnZUZpZWxkTmFtZS5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9JbWFnZUZpZWxkLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL1RvdWNoRXZlbnRDYXBhYmlsaXRpZXMuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvU2NyZWVuUGFyYW1zLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9EaXNwbGF5VHlwZS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvTWVkaWFDbG9ja0Zvcm1hdC5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9EaXNwbGF5Q2FwYWJpbGl0aWVzLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL0dyaWQuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvTW9kdWxlSW5mby5qcyIsIi4uL3NyYy9ycGMvZW51bXMvQnV0dG9uTmFtZS5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9CdXR0b25DYXBhYmlsaXRpZXMuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9QcmVzZXRCYW5rQ2FwYWJpbGl0aWVzLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL1ZlaGljbGVUeXBlLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9IbWlab25lQ2FwYWJpbGl0aWVzLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9QcmVyZWNvcmRlZFNwZWVjaC5qcyIsIi4uL3NyYy9ycGMvZW51bXMvU2FtcGxpbmdSYXRlLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9CaXRzUGVyU2FtcGxlLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9BdWRpb1R5cGUuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcy5qcyIsIi4uL3NyYy9ycGMvZW51bXMvVnJDYXBhYmlsaXRpZXMuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvSE1JQ2FwYWJpbGl0aWVzLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9SZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9TZXRBcHBJY29uLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9TZXRBcHBJY29uUmVzcG9uc2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL1NvZnRCdXR0b25UeXBlLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9TeXN0ZW1BY3Rpb24uanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvU29mdEJ1dHRvbi5qcyIsIi4uL3NyYy9ycGMvZW51bXMvTWV0YWRhdGFUeXBlLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL01ldGFkYXRhVGFncy5qcyIsIi4uL3NyYy9ycGMvZW51bXMvVGV4dEFsaWdubWVudC5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvU2hvdy5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvU2hvd1Jlc3BvbnNlLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9VbnJlZ2lzdGVyQXBwSW50ZXJmYWNlLmpzIiwiLi4vc3JjL3JwYy9ScGNDcmVhdG9yLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9WaWRlb1N0cmVhbWluZ1Byb3RvY29sLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9WaWRlb1N0cmVhbWluZ0NvZGVjLmpzIiwiLi4vc3JjL3JwYy9zdHJ1Y3RzL1ZpZGVvU3RyZWFtaW5nRm9ybWF0LmpzIiwiLi4vc3JjL3Byb3RvY29sL1NkbFByb3RvY29sQmFzZS5qcyIsIi4uL3NyYy90cmFuc3BvcnQvZW51bXMvVHJhbnNwb3J0VHlwZS5qcyIsIi4uL3NyYy90cmFuc3BvcnQvU2RsUHNtLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9UcmFuc3BvcnRCYXNlLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9XZWJTb2NrZXRDbGllbnQuanMiLCIuLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydENhbGxiYWNrLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9UcmFuc3BvcnRNYW5hZ2VyQmFzZS5qcyIsIi4uL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0TWFuYWdlci5qcyIsIi4uL3NyYy9wcm90b2NvbC9TZGxQcm90b2NvbC5qcyIsIi4uL3NyYy9zZXNzaW9uL1NlcnZpY2VMaXN0ZW5lck1hcC5qcyIsIi4uL3NyYy9zdHJlYW1pbmcvdmlkZW8vVmlkZW9TdHJlYW1pbmdQYXJhbWV0ZXJzLmpzIiwiLi4vc3JjL3Nlc3Npb24vU2RsU2Vzc2lvbi5qcyIsIi4uL3NyYy91dGlsL0FycmF5VG9vbHMuanMiLCIuLi9zcmMvbWFuYWdlci9saWZlY3ljbGUvTGlmZWN5Y2xlTWFuYWdlci5qcyIsIi4uL3NyYy9ycGMvc3RydWN0cy9WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuanMiLCIuLi9zcmMvc2Vzc2lvbi9TZGxTZXJ2aWNlTGlzdGVuZXIuanMiLCIuLi9zcmMvdHJhbnNwb3J0L0N1c3RvbVRyYW5zcG9ydC5qcyIsIi4uL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0Q29uZmlnQmFzZS5qcyIsIi4uL3NyYy90cmFuc3BvcnQvQ3VzdG9tVHJhbnNwb3J0Q29uZmlnLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9Tc2xDb25maWcuanMiLCIuLi9zcmMvdHJhbnNwb3J0L1dlYlNvY2tldENsaWVudENvbmZpZy5qcyIsIi4uL3NyYy90cmFuc3BvcnQvdXRpbC9UcmFuc3BvcnRSZWNvcmQuanMiLCIuLi9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8vIFRPRE8gVGhpcyBjbGFzcyBtYXkgb3IgbWF5IG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVsZWFzZS4gV2Ugc2hvdWxkIGRldGVybWluZSBpZiBcbi8vIHRoZXJlIGlzIGEgYmV0dGVyIGNvZGluZyBwYXR0ZXJuIGZvciB0aGlzIGZvciBqYXZhc2NyaXB0LlxuXG5jbGFzcyBBcHBDb25maWcge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FwcElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYXBwTmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ljb25OYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5faWNvbkZpbGUgPSBudWxsO1xuICAgICAgICB0aGlzLl9zaG9ydEFwcE5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLl90dHNOYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdnJTeW5vbnltcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzTWVkaWFBcHAgPSBudWxsO1xuICAgICAgICB0aGlzLl9sYW5ndWFnZURlc2lyZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9obWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYXBwVHlwZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9kYXlDb2xvclNjaGVtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX25pZ2h0Q29sb3JTY2hlbWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9taW5pbXVtUlBDVmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX21pbmltdW1Qcm90b2NvbFZlcnNpb24gPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtUcmFuc3BvcnRDb25maWdCYXNlfSB0cmFuc3BvcnRDb25maWdcbiAgICAqIEByZXR1cm4ge0FwcENvbmZpZ31cbiAgICAqL1xuICAgIHNldFRyYW5zcG9ydENvbmZpZyAodHJhbnNwb3J0Q29uZmlnKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IHRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtUcmFuc3BvcnRDb25maWdCYXNlfVxuICAgICovXG4gICAgZ2V0VHJhbnNwb3J0Q29uZmlnICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydENvbmZpZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBhcHBJZFxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0QXBwSWQgKGFwcElkKSB7XG4gICAgICAgIHRoaXMuX2FwcElkID0gYXBwSWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0QXBwSWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwSWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwTmFtZVxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0QXBwTmFtZSAoYXBwTmFtZSkge1xuICAgICAgICB0aGlzLl9hcHBOYW1lID0gYXBwTmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRBcHBOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcE5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWNvbk5hbWVcbiAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZmlsZURhdGFcbiAgICAqIEByZXR1cm4ge0FwcENvbmZpZ31cbiAgICAqL1xuICAgIHNldEFwcEljb24gKGljb25OYW1lID0gJ2ljb24ucG5nJywgZmlsZURhdGEpIHtcbiAgICAgICAgLy8gVE9ETyBjcmVhdGUgU2RsQXJ0d29ya1xuICAgICAgICB0aGlzLl9pY29uTmFtZSA9IGljb25OYW1lO1xuICAgICAgICB0aGlzLl9pY29uRmlsZSA9IGZpbGVEYXRhO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0QXBwSWNvbk5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWNvbk5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuICAgICovXG4gICAgZ2V0QXBwSWNvbkZpbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ljb25GaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHNob3J0QXBwTmFtZVxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0U2hvcnRBcHBOYW1lIChzaG9ydEFwcE5hbWUpIHtcbiAgICAgICAgdGhpcy5fc2hvcnRBcHBOYW1lID0gc2hvcnRBcHBOYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldFNob3J0QXBwTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaG9ydEFwcE5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PFRUU0NodW5rPn0gdHRzTmFtZVxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0VHRzTmFtZSAodHRzTmFtZSkge1xuICAgICAgICB0aGlzLl90dHNOYW1lID0gdHRzTmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxUVFNDaHVuaz59XG4gICAgKi9cbiAgICBnZXRUdHNOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3R0c05hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IHZyU3lub255bXNcbiAgICAqIEByZXR1cm4ge0FwcENvbmZpZ31cbiAgICAqL1xuICAgIHNldFZyU3lub255bXMgKHZyU3lub255bXMpIHtcbiAgICAgICAgdGhpcy5fdnJTeW5vbnltcyA9IHZyU3lub255bXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn1cbiAgICAqL1xuICAgIGdldFZyU3lub255bXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdnJTeW5vbnltcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNNZWRpYUFwcFxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0SXNNZWRpYUFwcCAoaXNNZWRpYUFwcCkge1xuICAgICAgICB0aGlzLl9pc01lZGlhQXBwID0gaXNNZWRpYUFwcDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgaXNNZWRpYUFwcCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc01lZGlhQXBwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtMYW5ndWFnZX0gbGFuZ3VhZ2VEZXNpcmVkXG4gICAgKiBAcmV0dXJuIHtBcHBDb25maWd9XG4gICAgKi9cbiAgICBzZXRMYW5ndWFnZURlc2lyZWQgKGxhbmd1YWdlRGVzaXJlZCkge1xuICAgICAgICB0aGlzLl9sYW5ndWFnZURlc2lyZWQgPSBsYW5ndWFnZURlc2lyZWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRMYW5ndWFnZURlc2lyZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VEZXNpcmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtMYW5ndWFnZX0gaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZFxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0SG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZCAoaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZCkge1xuICAgICAgICB0aGlzLl9obWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkID0gaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtMYW5ndWFnZX1cbiAgICAqL1xuICAgIGdldEhtaURpc3BsYXlMYW5ndWFnZURlc2lyZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8QXBwSE1JVHlwZT59IGFwcFR5cGVzIGFuIGFycmF5IG9mIG9yZGVyZWQgYXBwIHR5cGVzXG4gICAgKiBAcmV0dXJuIHtBcHBDb25maWd9XG4gICAgKi9cbiAgICBzZXRBcHBUeXBlcyAoYXBwVHlwZXMpIHtcbiAgICAgICAgdGhpcy5fYXBwVHlwZXMgPSBhcHBUeXBlcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxBcHBITUlUeXBlPn1cbiAgICAqL1xuICAgIGdldEFwcFR5cGVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcFR5cGVzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1RlbXBsYXRlQ29sb3JTY2hlbWV9IGRheUNvbG9yU2NoZW1lXG4gICAgKiBAcmV0dXJuIHtBcHBDb25maWd9XG4gICAgKi9cbiAgICBzZXREYXlDb2xvclNjaGVtZSAoZGF5Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgdGhpcy5fZGF5Q29sb3JTY2hlbWUgPSBkYXlDb2xvclNjaGVtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtUZW1wbGF0ZUNvbG9yU2NoZW1lfVxuICAgICovXG4gICAgZ2V0RGF5Q29sb3JTY2hlbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF5Q29sb3JTY2hlbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1RlbXBsYXRlQ29sb3JTY2hlbWV9IG5pZ2h0Q29sb3JTY2hlbWVcbiAgICAqIEByZXR1cm4ge0FwcENvbmZpZ31cbiAgICAqL1xuICAgIHNldE5pZ2h0Q29sb3JTY2hlbWUgKG5pZ2h0Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgdGhpcy5fbmlnaHRDb2xvclNjaGVtZSA9IG5pZ2h0Q29sb3JTY2hlbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7VGVtcGxhdGVDb2xvclNjaGVtZX1cbiAgICAqL1xuICAgIGdldE5pZ2h0Q29sb3JTY2hlbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmlnaHRDb2xvclNjaGVtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFRoZSBtaW5pbXVtIFJQQyB2ZXJzaW9uIHRoYXQgd2lsbCBiZSBwZXJtaXR0ZWQgdG8gY29ubmVjdC5cbiAgICAqIElmIHRoZSBSUEMgdmVyc2lvbiBvZiB0aGUgaGVhZCB1bml0IGNvbm5lY3RlZCBpcyBiZWxvdyB0aGlzIHZlcnNpb24sIGFuIFVucmVnaXN0ZXJBcHBJbnRlcmZhY2Ugd2lsbCBiZSBzZW50LlxuICAgICpcbiAgICAqIEBwYXJhbSB7VmVyc2lvbn0gbWluaW11bVJQQ1ZlcnNpb25cbiAgICAqIEByZXR1cm4ge0FwcENvbmZpZ31cbiAgICAqL1xuICAgIHNldE1pbmltdW1SUENWZXJzaW9uIChtaW5pbXVtUlBDVmVyc2lvbikge1xuICAgICAgICB0aGlzLl9taW5pbXVtUlBDVmVyc2lvbiA9IG1pbmltdW1SUENWZXJzaW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAqIEByZXR1cm4ge1ZlcnNpb259XG4gICAgKi9cbiAgICBnZXRNaW5pbXVtUlBDVmVyc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5pbXVtUlBDVmVyc2lvbjtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogU2V0cyB0aGUgbWluaW11bSBwcm90b2NvbCB2ZXJzaW9uIHRoYXQgd2lsbCBiZSBwZXJtaXR0ZWQgdG8gY29ubmVjdC5cbiAgICAqIElmIHRoZSBwcm90b2NvbCB2ZXJzaW9uIG9mIHRoZSBoZWFkIHVuaXQgY29ubmVjdGVkIGlzIGJlbG93IHRoaXMgdmVyc2lvbixcbiAgICAqIHRoZSBhcHAgd2lsbCBkaXNjb25uZWN0IHdpdGggYW4gRW5kU2VydmljZSBwcm90b2NvbCBtZXNzYWdlIGFuZCB3aWxsIG5vdCByZWdpc3Rlci5cbiAgICAqIEBwYXJhbSB7VmVyc2lvbn0gbWluaW11bVByb3RvY29sVmVyc2lvblxuICAgICogQHJldHVybiB7QXBwQ29uZmlnfVxuICAgICovXG4gICAgc2V0TWluaW11bVByb3RvY29sVmVyc2lvbiAobWluaW11bVByb3RvY29sVmVyc2lvbikge1xuICAgICAgICB0aGlzLl9taW5pbXVtUHJvdG9jb2xWZXJzaW9uID0gbWluaW11bVByb3RvY29sVmVyc2lvbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtWZXJzaW9ufVxuICAgICovXG4gICAgZ2V0TWluaW11bVByb3RvY29sVmVyc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9taW5pbXVtUHJvdG9jb2xWZXJzaW9uO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgQXBwQ29uZmlnIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTGlmZWN5Y2xlTGlzdGVuZXJcbiAqL1xuY2xhc3MgTGlmZWN5Y2xlTGlzdGVuZXIge1xuICAgIC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLl9vblByb3h5Q29ubmVjdGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25Qcm94eUNsb3NlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uU2VydmljZVN0YXJ0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblNlcnZpY2VFbmRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uUHJveHlDb25uZWN0ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uUHJveHlDb25uZWN0ZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPblByb3h5Q2xvc2VkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblByb3h5Q2xvc2VkID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgXG4gICAgICovXG4gICAgc2V0T25TZXJ2aWNlU3RhcnRlZCAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25TZXJ2aWNlU3RhcnRlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uU2VydmljZUVuZGVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblNlcnZpY2VFbmRlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uRXJyb3IgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0xpZmVjeWNsZU1hbmFnZXJ9IGxpZmVjeWNsZU1hbmFnZXIgXG5cbiAgICAgKi9cbiAgICBvblByb3h5Q29ubmVjdGVkIChsaWZlY3ljbGVNYW5hZ2VyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Qcm94eUNvbm5lY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25Qcm94eUNvbm5lY3RlZChsaWZlY3ljbGVNYW5hZ2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TGlmZWN5Y2xlTWFuYWdlcn0gbGlmZWN5Y2xlTWFuYWdlciBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5mbyBcbiAgICAgKiBAcGFyYW0ge1NkbERpc2Nvbm5lY3RlZFJlYXNvbn0gcmVhc29uXG4gICAgICovXG4gICAgb25Qcm94eUNsb3NlZCAobGlmZWN5Y2xlTWFuYWdlciwgaW5mbywgcmVhc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Qcm94eUNsb3NlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25Qcm94eUNsb3NlZChsaWZlY3ljbGVNYW5hZ2VyLCBpbmZvLCByZWFzb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICovXG4gICAgb25TZXJ2aWNlU3RhcnRlZCAoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgY29ycmVsYXRpb25JRCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uU2VydmljZVN0YXJ0ZWQoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgY29ycmVsYXRpb25JRCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKi9cbiAgICBvblNlcnZpY2VFbmRlZCAoc2VydmljZVR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblNlcnZpY2VFbmRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25TZXJ2aWNlRW5kZWQoc2VydmljZVR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtMaWZlY3ljbGVNYW5hZ2VyfSBsaWZlY3ljbGVNYW5hZ2VyIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpbmZvIFxuICAgICAqL1xuICAgIG9uRXJyb3IgKGxpZmVjeWNsZU1hbmFnZXIsIGluZm8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yKGxpZmVjeWNsZU1hbmFnZXIsIGluZm8pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBMaWZlY3ljbGVMaXN0ZW5lciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBFbnVtIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBrZXkgZm9yIGEgZ2l2ZW4gdmFsdWUgaWYgdGhlIHZhbHVlIGlzIGZvdW5kIHdpdGhpbiB0aGUga2V5OnZhbHVlIG1hcFxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCBpbiB0aGUgbWFwXG4gICAgKiBAcGFyYW0gbWFwIHtPYmplY3R9IC0gQW4gbWFwIG9mIHN0cmluZyBwcm9wZXJ0aWVzIHRvIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAqIEByZXR1cm4ge251bGx8U3RyaW5nfSAtIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBfa2V5Rm9yVmFsdWUgKHZhbHVlLCBtYXApIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICBpZiAobWFwW2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQSBtZXRob2QgZm9yIHN1YmNsYXNzZXMgdG8gaW1wbGVtZW50IHRoYXQgZG9lcyB3aGF0IF9rZXlGb3JWYWx1ZSBkb2VzXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtZXRob2QgbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleSBpZiB0aGUga2V5IGlzIGZvdW5kIHdpdGhpbiB0aGUga2V5OnZhbHVlIG1hcFxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCBpbiB0aGUgbWFwXG4gICAgKiBAcGFyYW0gbWFwIHtPYmplY3R9IC0gQW4gbWFwIG9mIHN0cmluZyBwcm9wZXJ0aWVzIHRvIHByaW1pdGl2ZSB2YWx1ZXNcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIF92YWx1ZUZvcktleSAoa2V5LCBtYXApIHtcbiAgICAgICAgcmV0dXJuIG1hcFtrZXldIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBBIG1ldGhvZCBmb3Igc3ViY2xhc3NlcyB0byBpbXBsZW1lbnQgdGhhdCBkb2VzIHdoYXQgX3ZhbHVlRm9yS2V5IGRvZXNcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEVudW0gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uL3V0aWwvRW51bS5qcyc7XG5cbmNsYXNzIFJwY1N0cnVjdCB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgdGhpcy5faXNGb3JtYXRSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcnBjU3BlY1ZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAqL1xuICAgIGdldFBhcmFtZXRlcnMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAqIEByZXR1cm4geyp9XG4gICAgKi9cbiAgICBnZXRQYXJhbWV0ZXIgKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyc1trZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICogQHJldHVybiB7UnBjU3RydWN0fVxuICAgICovXG4gICAgc2V0UGFyYW1ldGVyIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3BhcmFtZXRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmFtZXRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0Q2xhc3NcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAqL1xuICAgIGdldE9iamVjdCAodENsYXNzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0T2JqZWN0KHRDbGFzcywgdGhpcy5nZXRQYXJhbWV0ZXIoa2V5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0Q2xhc3NcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAqIEByZXR1cm4ge251bGx8T2JqZWN0fVxuICAgICovXG4gICAgZm9ybWF0T2JqZWN0ICh0Q2xhc3MsIG9iaikge1xuICAgICAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChvYmouY29uc3RydWN0b3IgPT09IHRDbGFzcykge1xuICAgICAgICAgICAgLy8gaWYgdENsYXNzIGlzIFN0cmluZyBhbmQgb2JqIGlzIGEgU3RyaW5nLCB0aGlzIHNob3VsZCBleGVjdXRlXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSB7IC8vIHRoaXMgY292ZXJzIHRoZSBFbnVtIGNhc2UgdG9vXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAodENsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIFJwY1N0cnVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdENsYXNzKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChvYmouY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICBpZiAob2JqLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0QXJyYXkucHVzaCh0aGlzLmZvcm1hdE9iamVjdCh0Q2xhc3MsIGl0ZW0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dEFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdENsYXNzXG4gICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQXJyYXkgKGZhbHNlKVxuICAgICovXG4gICAgdmFsaWRhdGVUeXBlICh0Q2xhc3MsIG9iaiwgaXNBcnJheSA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtvYmoubmFtZX0gbXVzdCBiZSBhbiBhcnJheSBjb250YWluaW5nIGl0ZW1zIG9mIHR5cGUgJHt0Q2xhc3MubmFtZX1gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG9iaikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZSh0Q2xhc3MsIGl0ZW0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAodENsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVudW0gJiYgdENsYXNzLmtleUZvclZhbHVlKG9iaikgPT09IG51bGwpXG4gICAgICAgICAgICB8fCAodENsYXNzLnByb3RvdHlwZSBpbnN0YW5jZW9mIFJwY1N0cnVjdCAmJiBvYmogIT09IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9PSB0Q2xhc3MpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke29iai5uYW1lfSBtdXN0IGJlIG9mIHR5cGUgJHt0Q2xhc3MubmFtZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgUnBjU3RydWN0IH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBGdW5jdGlvbklEXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBGdW5jdGlvbklEIGV4dGVuZHMgRW51bSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBSZWdpc3RlckFwcEludGVyZmFjZSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuUmVnaXN0ZXJBcHBJbnRlcmZhY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVucmVnaXN0ZXJBcHBJbnRlcmZhY2UgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlVucmVnaXN0ZXJBcHBJbnRlcmZhY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNldEdsb2JhbFByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNldEdsb2JhbFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJlc2V0R2xvYmFsUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuUmVzZXRHbG9iYWxQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBBZGRDb21tYW5kICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5BZGRDb21tYW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBEZWxldGVDb21tYW5kICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5EZWxldGVDb21tYW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBBZGRTdWJNZW51ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5BZGRTdWJNZW51O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBEZWxldGVTdWJNZW51ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5EZWxldGVTdWJNZW51O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDcmVhdGVJbnRlcmFjdGlvbkNob2ljZVNldCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuQ3JlYXRlSW50ZXJhY3Rpb25DaG9pY2VTZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFBlcmZvcm1JbnRlcmFjdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuUGVyZm9ybUludGVyYWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBEZWxldGVJbnRlcmFjdGlvbkNob2ljZVNldCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuRGVsZXRlSW50ZXJhY3Rpb25DaG9pY2VTZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFsZXJ0ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5BbGVydDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2hvdyAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuU2hvdztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU3BlYWsgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNwZWFrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTZXRNZWRpYUNsb2NrVGltZXIgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNldE1lZGlhQ2xvY2tUaW1lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgUGVyZm9ybUF1ZGlvUGFzc1RocnUgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlBlcmZvcm1BdWRpb1Bhc3NUaHJ1O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBFbmRBdWRpb1Bhc3NUaHJ1ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5FbmRBdWRpb1Bhc3NUaHJ1O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTdWJzY3JpYmVCdXR0b24gKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlN1YnNjcmliZUJ1dHRvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgVW5zdWJzY3JpYmVCdXR0b24gKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlVuc3Vic2NyaWJlQnV0dG9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTdWJzY3JpYmVWZWhpY2xlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuU3Vic2NyaWJlVmVoaWNsZURhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVuc3Vic2NyaWJlVmVoaWNsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlVuc3Vic2NyaWJlVmVoaWNsZURhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdldFZlaGljbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5HZXRWZWhpY2xlRGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgUmVhZERJRCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuUmVhZERJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgR2V0RFRDcyAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuR2V0RFRDcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2Nyb2xsYWJsZU1lc3NhZ2UgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNjcm9sbGFibGVNZXNzYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTbGlkZXIgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNsaWRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2hvd0NvbnN0YW50VEJUICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5TaG93Q29uc3RhbnRUQlQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFsZXJ0TWFuZXV2ZXIgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkFsZXJ0TWFuZXV2ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVwZGF0ZVR1cm5MaXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5VcGRhdGVUdXJuTGlzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ2hhbmdlUmVnaXN0cmF0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5DaGFuZ2VSZWdpc3RyYXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdlbmVyaWNSZXNwb25zZSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuR2VuZXJpY1Jlc3BvbnNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBQdXRGaWxlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5QdXRGaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBEZWxldGVGaWxlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5EZWxldGVGaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBMaXN0RmlsZXMgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkxpc3RGaWxlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2V0QXBwSWNvbiAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuU2V0QXBwSWNvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2V0RGlzcGxheUxheW91dCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuU2V0RGlzcGxheUxheW91dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgRGlhZ25vc3RpY01lc3NhZ2UgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkRpYWdub3N0aWNNZXNzYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTeXN0ZW1SZXF1ZXN0ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5TeXN0ZW1SZXF1ZXN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTZW5kTG9jYXRpb24gKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNlbmRMb2NhdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgRGlhbE51bWJlciAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuRGlhbE51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQnV0dG9uUHJlc3MgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkJ1dHRvblByZXNzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBHZXRJbnRlcmlvclZlaGljbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5HZXRJbnRlcmlvclZlaGljbGVEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTZXRJbnRlcmlvclZlaGljbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5TZXRJbnRlcmlvclZlaGljbGVEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBHZXRXYXlQb2ludHMgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkdldFdheVBvaW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU3Vic2NyaWJlV2F5UG9pbnRzICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5TdWJzY3JpYmVXYXlQb2ludHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVuc3Vic2NyaWJlV2F5UG9pbnRzICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5VbnN1YnNjcmliZVdheVBvaW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgR2V0U3lzdGVtQ2FwYWJpbGl0eSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuR2V0U3lzdGVtQ2FwYWJpbGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2VuZEhhcHRpY0RhdGEgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNlbmRIYXB0aWNEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBTZXRDbG91ZEFwcFByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLlNldENsb3VkQXBwUHJvcGVydGllcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgR2V0Q2xvdWRBcHBQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5HZXRDbG91ZEFwcFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFB1Ymxpc2hBcHBTZXJ2aWNlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5QdWJsaXNoQXBwU2VydmljZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgR2V0QXBwU2VydmljZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkdldEFwcFNlcnZpY2VEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBHZXRGaWxlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5HZXRGaWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBQZXJmb3JtQXBwU2VydmljZUludGVyYWN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5QZXJmb3JtQXBwU2VydmljZUludGVyYWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBVbnB1Ymxpc2hBcHBTZXJ2aWNlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5VbnB1Ymxpc2hBcHBTZXJ2aWNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDYW5jZWxJbnRlcmFjdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuQ2FuY2VsSW50ZXJhY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IENsb3NlQXBwbGljYXRpb24gKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLkNsb3NlQXBwbGljYXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNob3dBcHBNZW51ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5TaG93QXBwTWVudTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ3JlYXRlV2luZG93ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5DcmVhdGVXaW5kb3c7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IERlbGV0ZVdpbmRvdyAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuRGVsZXRlV2luZG93O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBHZXRJbnRlcmlvclZlaGljbGVEYXRhQ29uc2VudCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuR2V0SW50ZXJpb3JWZWhpY2xlRGF0YUNvbnNlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJlbGVhc2VJbnRlcmlvclZlaGljbGVEYXRhTW9kdWxlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5SZWxlYXNlSW50ZXJpb3JWZWhpY2xlRGF0YU1vZHVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgT25ITUlTdGF0dXMgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uSE1JU3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPbkFwcEludGVyZmFjZVVucmVnaXN0ZXJlZCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuT25BcHBJbnRlcmZhY2VVbnJlZ2lzdGVyZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uQnV0dG9uRXZlbnQgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uQnV0dG9uRXZlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uQnV0dG9uUHJlc3MgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uQnV0dG9uUHJlc3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uVmVoaWNsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uVmVoaWNsZURhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uQ29tbWFuZCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuT25Db21tYW5kO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPblRCVENsaWVudFN0YXRlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PblRCVENsaWVudFN0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPbkRyaXZlckRpc3RyYWN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PbkRyaXZlckRpc3RyYWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPblBlcm1pc3Npb25zQ2hhbmdlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PblBlcm1pc3Npb25zQ2hhbmdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPbkF1ZGlvUGFzc1RocnUgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uQXVkaW9QYXNzVGhydTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgT25MYW5ndWFnZUNoYW5nZSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuT25MYW5ndWFnZUNoYW5nZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgT25LZXlib2FyZElucHV0ICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PbktleWJvYXJkSW5wdXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uVG91Y2hFdmVudCAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuT25Ub3VjaEV2ZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPblN5c3RlbVJlcXVlc3QgKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5fTUFQLk9uU3lzdGVtUmVxdWVzdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgT25IYXNoQ2hhbmdlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5Pbkhhc2hDaGFuZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9uSW50ZXJpb3JWZWhpY2xlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl9NQVAuT25JbnRlcmlvclZlaGljbGVEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPbldheVBvaW50Q2hhbmdlICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PbldheVBvaW50Q2hhbmdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPblJDU3RhdHVzICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PblJDU3RhdHVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPbkFwcFNlcnZpY2VEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PbkFwcFNlcnZpY2VEYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBPblN5c3RlbUNhcGFiaWxpdHlVcGRhdGVkICgpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX01BUC5PblN5c3RlbUNhcGFiaWxpdHlVcGRhdGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbklELl92YWx1ZUZvcktleShrZXksIEZ1bmN0aW9uSUQuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuX2tleUZvclZhbHVlKHZhbHVlLCBGdW5jdGlvbklELl9NQVApO1xuICAgIH1cbn1cblxuRnVuY3Rpb25JRC5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1JlZ2lzdGVyQXBwSW50ZXJmYWNlJzogICAgICAgICAgICAgICAgMHgwMSxcbiAgICAnVW5yZWdpc3RlckFwcEludGVyZmFjZSc6ICAgICAgICAgICAgICAweDAyLFxuICAgICdTZXRHbG9iYWxQcm9wZXJ0aWVzJzogICAgICAgICAgICAgICAgIDB4MDMsXG4gICAgJ1Jlc2V0R2xvYmFsUHJvcGVydGllcyc6ICAgICAgICAgICAgICAgMHgwNCxcbiAgICAnQWRkQ29tbWFuZCc6ICAgICAgICAgICAgICAgICAgICAgICAgICAweDA1LFxuICAgICdEZWxldGVDb21tYW5kJzogICAgICAgICAgICAgICAgICAgICAgIDB4MDYsXG4gICAgJ0FkZFN1Yk1lbnUnOiAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwNyxcbiAgICAnRGVsZXRlU3ViTWVudSc6ICAgICAgICAgICAgICAgICAgICAgICAweDA4LFxuICAgICdDcmVhdGVJbnRlcmFjdGlvbkNob2ljZVNldCc6ICAgICAgICAgIDB4MDksXG4gICAgJ1BlcmZvcm1JbnRlcmFjdGlvbic6ICAgICAgICAgICAgICAgICAgMHgwQSxcbiAgICAnRGVsZXRlSW50ZXJhY3Rpb25DaG9pY2VTZXQnOiAgICAgICAgICAweDBCLFxuICAgICdBbGVydCc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MEMsXG4gICAgJ1Nob3cnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgwRCxcbiAgICAnU3BlYWsnOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDBFLFxuICAgICdTZXRNZWRpYUNsb2NrVGltZXInOiAgICAgICAgICAgICAgICAgIDB4MEYsXG4gICAgJ1BlcmZvcm1BdWRpb1Bhc3NUaHJ1JzogICAgICAgICAgICAgICAgMHgxMCxcbiAgICAnRW5kQXVkaW9QYXNzVGhydSc6ICAgICAgICAgICAgICAgICAgICAweDExLFxuICAgICdTdWJzY3JpYmVCdXR0b24nOiAgICAgICAgICAgICAgICAgICAgIDB4MTIsXG4gICAgJ1Vuc3Vic2NyaWJlQnV0dG9uJzogICAgICAgICAgICAgICAgICAgMHgxMyxcbiAgICAnU3Vic2NyaWJlVmVoaWNsZURhdGEnOiAgICAgICAgICAgICAgICAweDE0LFxuICAgICdVbnN1YnNjcmliZVZlaGljbGVEYXRhJzogICAgICAgICAgICAgIDB4MTUsXG4gICAgJ0dldFZlaGljbGVEYXRhJzogICAgICAgICAgICAgICAgICAgICAgMHgxNixcbiAgICAnUmVhZERJRCc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDE3LFxuICAgICdHZXREVENzJzogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4MTgsXG4gICAgJ1Njcm9sbGFibGVNZXNzYWdlJzogICAgICAgICAgICAgICAgICAgMHgxOSxcbiAgICAnU2xpZGVyJzogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDFBLFxuICAgICdTaG93Q29uc3RhbnRUQlQnOiAgICAgICAgICAgICAgICAgICAgIDB4MUIsXG4gICAgJ0FsZXJ0TWFuZXV2ZXInOiAgICAgICAgICAgICAgICAgICAgICAgMHgxQyxcbiAgICAnVXBkYXRlVHVybkxpc3QnOiAgICAgICAgICAgICAgICAgICAgICAweDFELFxuICAgICdDaGFuZ2VSZWdpc3RyYXRpb24nOiAgICAgICAgICAgICAgICAgIDB4MUUsXG4gICAgJ0dlbmVyaWNSZXNwb25zZSc6ICAgICAgICAgICAgICAgICAgICAgMHgxRixcbiAgICAnUHV0RmlsZSc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDIwLFxuICAgICdEZWxldGVGaWxlJzogICAgICAgICAgICAgICAgICAgICAgICAgIDB4MjEsXG4gICAgJ0xpc3RGaWxlcyc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgMHgyMixcbiAgICAnU2V0QXBwSWNvbic6ICAgICAgICAgICAgICAgICAgICAgICAgICAweDIzLFxuICAgICdTZXREaXNwbGF5TGF5b3V0JzogICAgICAgICAgICAgICAgICAgIDB4MjQsXG4gICAgJ0RpYWdub3N0aWNNZXNzYWdlJzogICAgICAgICAgICAgICAgICAgMHgyNSxcbiAgICAnU3lzdGVtUmVxdWVzdCc6ICAgICAgICAgICAgICAgICAgICAgICAweDI2LFxuICAgICdTZW5kTG9jYXRpb24nOiAgICAgICAgICAgICAgICAgICAgICAgIDB4MjcsXG4gICAgJ0RpYWxOdW1iZXInOiAgICAgICAgICAgICAgICAgICAgICAgICAgMHgyOCxcbiAgICAnQnV0dG9uUHJlc3MnOiAgICAgICAgICAgICAgICAgICAgICAgICAweDI5LFxuICAgICdHZXRJbnRlcmlvclZlaGljbGVEYXRhJzogICAgICAgICAgICAgIDB4MkIsXG4gICAgJ1NldEludGVyaW9yVmVoaWNsZURhdGEnOiAgICAgICAgICAgICAgMHgyQyxcbiAgICAnR2V0V2F5UG9pbnRzJzogICAgICAgICAgICAgICAgICAgICAgICAweDJELFxuICAgICdTdWJzY3JpYmVXYXlQb2ludHMnOiAgICAgICAgICAgICAgICAgIDB4MkUsXG4gICAgJ1Vuc3Vic2NyaWJlV2F5UG9pbnRzJzogICAgICAgICAgICAgICAgMHgyRixcbiAgICAnR2V0U3lzdGVtQ2FwYWJpbGl0eSc6ICAgICAgICAgICAgICAgICAweDMwLFxuICAgICdTZW5kSGFwdGljRGF0YSc6ICAgICAgICAgICAgICAgICAgICAgIDB4MzEsXG4gICAgJ1NldENsb3VkQXBwUHJvcGVydGllcyc6ICAgICAgICAgICAgICAgMHgzMixcbiAgICAnR2V0Q2xvdWRBcHBQcm9wZXJ0aWVzJzogICAgICAgICAgICAgICAweDMzLFxuICAgICdQdWJsaXNoQXBwU2VydmljZSc6ICAgICAgICAgICAgICAgICAgIDB4MzQsXG4gICAgJ0dldEFwcFNlcnZpY2VEYXRhJzogICAgICAgICAgICAgICAgICAgMHgzNSxcbiAgICAnR2V0RmlsZSc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDM2LFxuICAgICdQZXJmb3JtQXBwU2VydmljZUludGVyYWN0aW9uJzogICAgICAgIDB4MzcsXG4gICAgJ1VucHVibGlzaEFwcFNlcnZpY2UnOiAgICAgICAgICAgICAgICAgMHgzOCxcbiAgICAnQ2FuY2VsSW50ZXJhY3Rpb24nOiAgICAgICAgICAgICAgICAgICAweDM5LFxuICAgICdDbG9zZUFwcGxpY2F0aW9uJzogICAgICAgICAgICAgICAgICAgIDB4M0EsXG4gICAgJ1Nob3dBcHBNZW51JzogICAgICAgICAgICAgICAgICAgICAgICAgMHgzQixcbiAgICAnQ3JlYXRlV2luZG93JzogICAgICAgICAgICAgICAgICAgICAgICAweDNDLFxuICAgICdEZWxldGVXaW5kb3cnOiAgICAgICAgICAgICAgICAgICAgICAgIDB4M0QsXG4gICAgJ0dldEludGVyaW9yVmVoaWNsZURhdGFDb25zZW50JzogICAgICAgMHgzRSxcbiAgICAnUmVsZWFzZUludGVyaW9yVmVoaWNsZURhdGFNb2R1bGUnOiAgICAweDNGLFxuICAgICdPbkhNSVN0YXR1cyc6ICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAwMCxcbiAgICAnT25BcHBJbnRlcmZhY2VVbnJlZ2lzdGVyZWQnOiAgICAgICAgICAweDgwMDEsXG4gICAgJ09uQnV0dG9uRXZlbnQnOiAgICAgICAgICAgICAgICAgICAgICAgMHg4MDAyLFxuICAgICdPbkJ1dHRvblByZXNzJzogICAgICAgICAgICAgICAgICAgICAgIDB4ODAwMyxcbiAgICAnT25WZWhpY2xlRGF0YSc6ICAgICAgICAgICAgICAgICAgICAgICAweDgwMDQsXG4gICAgJ09uQ29tbWFuZCc6ICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MDA1LFxuICAgICdPblRCVENsaWVudFN0YXRlJzogICAgICAgICAgICAgICAgICAgIDB4ODAwNixcbiAgICAnT25Ecml2ZXJEaXN0cmFjdGlvbic6ICAgICAgICAgICAgICAgICAweDgwMDcsXG4gICAgJ09uUGVybWlzc2lvbnNDaGFuZ2UnOiAgICAgICAgICAgICAgICAgMHg4MDA4LFxuICAgICdPbkF1ZGlvUGFzc1RocnUnOiAgICAgICAgICAgICAgICAgICAgIDB4ODAwOSxcbiAgICAnT25MYW5ndWFnZUNoYW5nZSc6ICAgICAgICAgICAgICAgICAgICAweDgwMEEsXG4gICAgJ09uS2V5Ym9hcmRJbnB1dCc6ICAgICAgICAgICAgICAgICAgICAgMHg4MDBCLFxuICAgICdPblRvdWNoRXZlbnQnOiAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAwQyxcbiAgICAnT25TeXN0ZW1SZXF1ZXN0JzogICAgICAgICAgICAgICAgICAgICAweDgwMEQsXG4gICAgJ09uSGFzaENoYW5nZSc6ICAgICAgICAgICAgICAgICAgICAgICAgMHg4MDBFLFxuICAgICdPbkludGVyaW9yVmVoaWNsZURhdGEnOiAgICAgICAgICAgICAgIDB4ODAwRixcbiAgICAnT25XYXlQb2ludENoYW5nZSc6ICAgICAgICAgICAgICAgICAgICAweDgwMTAsXG4gICAgJ09uUkNTdGF0dXMnOiAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MDExLFxuICAgICdPbkFwcFNlcnZpY2VEYXRhJzogICAgICAgICAgICAgICAgICAgIDB4ODAxMixcbiAgICAnT25TeXN0ZW1DYXBhYmlsaXR5VXBkYXRlZCc6ICAgICAgICAgICAweDgwMTMsXG59KTtcblxuZXhwb3J0IHsgRnVuY3Rpb25JRCB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuL1JwY1N0cnVjdC5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBScGNNZXNzYWdlXG4gKiBAcHJvcGVydHkge1JwY1R5cGV9IHJwY1R5cGVcbiAqL1xuY2xhc3MgUnBjTWVzc2FnZSBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgLypcbiAgICB7XG4gICAgICAgIFwicnBjVHlwZVwiOiBcIlJlcXVlc3RcIixcbiAgICAgICAgXCJmdW5jdGlvbk5hbWVcIjogXCJSZWdpc3RlckFwcEludGVyZmFjZVwiLFxuICAgICAgICBcImNvb3JlbGF0aW9uSURcIjogXCIzMjA5NDhcIixcbiAgICAgICAgXCJpc0VuY3J5cHRlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgICAgIFwiYXBwTmFtZVwiOiBcIkhlbGxvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJidWxrRGF0YVwiOiBcIi4uLlwiLFxuICAgIH1cbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChzdG9yZSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHN0b3JlLnBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLl9pc0VuY3J5cHRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9ycGNUeXBlID0gc3RvcmUucnBjVHlwZTtcbiAgICAgICAgdGhpcy5fZnVuY3Rpb25OYW1lID0gc3RvcmUuZnVuY3Rpb25OYW1lO1xuICAgICAgICB0aGlzLl9jb3JyZWxhdGlvbklEID0gc3RvcmUuY29ycmVsYXRpb25JRDtcbiAgICAgICAgdGhpcy5zZXRCdWxrRGF0YShzdG9yZS5idWxrRGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtScGNUeXBlfVxuICAgICovXG4gICAgZ2V0UlBDVHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ycGNUeXBlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtScGNUeXBlfSB0eXBlXG4gICAgKiBAcmV0dXJuIHtScGNNZXNzYWdlfVxuICAgICovXG4gICAgc2V0UlBDVHlwZSAodHlwZSkge1xuICAgICAgICB0aGlzLl9ycGNUeXBlID0gdHlwZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Z1bmN0aW9uSUR9IHR5cGVcbiAgICAqL1xuICAgIGdldEZ1bmN0aW9uTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mdW5jdGlvbk5hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9uSUR9IG5hbWVcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRGdW5jdGlvbk5hbWUgKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fZnVuY3Rpb25OYW1lID0gRnVuY3Rpb25JRC5rZXlGb3JWYWx1ZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bmN0aW9uTmFtZSA9IG5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gdHlwZVxuICAgICovXG4gICAgZ2V0Q29ycmVsYXRpb25JZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JyZWxhdGlvbklEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRDb3JyZWxhdGlvbklkIChpZCkge1xuICAgICAgICB0aGlzLl9jb3JyZWxhdGlvbklEID0gaWQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSBkYXRhXG4gICAgKi9cbiAgICBnZXRCdWxrRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWxrRGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7VUludDhBcnJheX0gZGF0YVxuICAgICogQHJldHVybiB7UnBjTWVzc2FnZX1cbiAgICAqL1xuICAgIHNldEJ1bGtEYXRhIChkYXRhID0gbnVsbCkge1xuICAgICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBkYXRhLnNsaWNlKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0SXNFbmNyeXB0ZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNFbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGJvb2xcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRJc0VuY3J5cHRlZCAoYm9vbCkge1xuICAgICAgICB0aGlzLl9pc0VuY3J5cHRlZCA9IGJvb2w7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgeyBScGNNZXNzYWdlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFJwY1R5cGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFJwY1R5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5PVElGSUNBVElPTiAoKSB7XG4gICAgICAgIHJldHVybiBScGNUeXBlLl9NQVAuTk9USUZJQ0FUSU9OO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFU1BPTlNFICgpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUuX01BUC5SRVNQT05TRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBSRVFVRVNUICgpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUuX01BUC5SRVFVRVNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBScGNUeXBlLl92YWx1ZUZvcktleShrZXksIFJwY1R5cGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUuX2tleUZvclZhbHVlKHZhbHVlLCBScGNUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuUnBjVHlwZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ05PVElGSUNBVElPTic6IDB4MixcbiAgICAnUkVTUE9OU0UnOiAweDEsXG4gICAgJ1JFUVVFU1QnOiAweDAsXG59KTtcblxuZXhwb3J0IHsgUnBjVHlwZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cblxuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vUnBjTWVzc2FnZS5qcyc7XG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9lbnVtcy9ScGNUeXBlLmpzJztcblxuY2xhc3MgUnBjUmVxdWVzdCBleHRlbmRzIFJwY01lc3NhZ2Uge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldFJQQ1R5cGUoUnBjVHlwZS5SRVFVRVNUKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgZ2V0T25SUENSZXNwb25zZVByb21pc2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZVxuICAgICogQHJldHVybiB7UnBjTWVzc2FnZX1cbiAgICAqL1xuICAgIHNldE9uUlBDUmVzcG9uc2VQcm9taXNlIChwcm9taXNlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFByb21pc2UsIHByb21pc2UpO1xuXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJwY1JlcXVlc3QgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgU2RsTXNnVmVyc2lvbiBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdGhlIG1ham9yIHZlcnNpb24gb2YgdGhpcyBvYmplY3RcbiAgICAqIEByZXR1cm4ge1NkbE1zZ1ZlcnNpb259XG4gICAgKi9cbiAgICBzZXRNYWpvclZlcnNpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNkbE1zZ1ZlcnNpb24uS0VZX01BSk9SX1ZFUlNJT04sIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBtYWpvciB2ZXJzaW9uIG9mIHRoaXMgb2JqZWN0XG4gICAgKi9cbiAgICBnZXRNYWpvclZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU2RsTXNnVmVyc2lvbi5LRVlfTUFKT1JfVkVSU0lPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdGhlIG1pbm9yIHZlcnNpb24gb2YgdGhpcyBvYmplY3RcbiAgICAqIEByZXR1cm4ge1NkbE1zZ1ZlcnNpb259XG4gICAgKi9cbiAgICBzZXRNaW5vclZlcnNpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNkbE1zZ1ZlcnNpb24uS0VZX01JTk9SX1ZFUlNJT04sIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBtaW5vciB2ZXJzaW9uIG9mIHRoaXMgb2JqZWN0XG4gICAgKi9cbiAgICBnZXRNaW5vclZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU2RsTXNnVmVyc2lvbi5LRVlfTUlOT1JfVkVSU0lPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdGhlIHBhdGNoIHZlcnNpb24gb2YgdGhpcyBvYmplY3RcbiAgICAqIEByZXR1cm4ge1NkbE1zZ1ZlcnNpb259XG4gICAgKi9cbiAgICBzZXRQYXRjaFZlcnNpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNkbE1zZ1ZlcnNpb24uS0VZX1BBVENIX1ZFUlNJT04sIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBwYXRjaCB2ZXJzaW9uIG9mIHRoaXMgb2JqZWN0c1xuICAgICovXG4gICAgZ2V0UGF0Y2hWZXJzaW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNkbE1zZ1ZlcnNpb24uS0VZX1BBVENIX1ZFUlNJT04pO1xuICAgIH1cbn1cblxuU2RsTXNnVmVyc2lvbi5LRVlfTUFKT1JfVkVSU0lPTiA9ICdtYWpvclZlcnNpb24nO1xuU2RsTXNnVmVyc2lvbi5LRVlfTUlOT1JfVkVSU0lPTiA9ICdtaW5vclZlcnNpb24nO1xuU2RsTXNnVmVyc2lvbi5LRVlfUEFUQ0hfVkVSU0lPTiA9ICdwYXRjaFZlcnNpb24nO1xuXG5leHBvcnQgeyBTZGxNc2dWZXJzaW9uIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFNwZWVjaENhcGFiaWxpdGllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgU3BlZWNoQ2FwYWJpbGl0aWVzIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNDX1RFWFQgKCkge1xuICAgICAgICByZXR1cm4gU3BlZWNoQ2FwYWJpbGl0aWVzLl9NQVAuU0NfVEVYVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTQVBJX1BIT05FTUVTICgpIHtcbiAgICAgICAgcmV0dXJuIFNwZWVjaENhcGFiaWxpdGllcy5fTUFQLlNBUElfUEhPTkVNRVM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTEhQTFVTX1BIT05FTUVTICgpIHtcbiAgICAgICAgcmV0dXJuIFNwZWVjaENhcGFiaWxpdGllcy5fTUFQLkxIUExVU19QSE9ORU1FUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQUkVfUkVDT1JERUQgKCkge1xuICAgICAgICByZXR1cm4gU3BlZWNoQ2FwYWJpbGl0aWVzLl9NQVAuUFJFX1JFQ09SREVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNJTEVOQ0UgKCkge1xuICAgICAgICByZXR1cm4gU3BlZWNoQ2FwYWJpbGl0aWVzLl9NQVAuU0lMRU5DRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBGSUxFICgpIHtcbiAgICAgICAgcmV0dXJuIFNwZWVjaENhcGFiaWxpdGllcy5fTUFQLkZJTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFNwZWVjaENhcGFiaWxpdGllcy5fdmFsdWVGb3JLZXkoa2V5LCBTcGVlY2hDYXBhYmlsaXRpZXMuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFNwZWVjaENhcGFiaWxpdGllcy5fa2V5Rm9yVmFsdWUodmFsdWUsIFNwZWVjaENhcGFiaWxpdGllcy5fTUFQKTtcbiAgICB9XG59XG5cblNwZWVjaENhcGFiaWxpdGllcy5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1NDX1RFWFQnOiAnVEVYVCcsXG4gICAgJ1NBUElfUEhPTkVNRVMnOiAnU0FQSV9QSE9ORU1FUycsXG4gICAgJ0xIUExVU19QSE9ORU1FUyc6ICdMSFBMVVNfUEhPTkVNRVMnLFxuICAgICdQUkVfUkVDT1JERUQnOiAnUFJFX1JFQ09SREVEJyxcbiAgICAnU0lMRU5DRSc6ICdTSUxFTkNFJyxcbiAgICAnRklMRSc6ICdGSUxFJyxcbn0pO1xuXG5leHBvcnQgeyBTcGVlY2hDYXBhYmlsaXRpZXMgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IFNwZWVjaENhcGFiaWxpdGllcyB9IGZyb20gJy4uL2VudW1zL1NwZWVjaENhcGFiaWxpdGllcy5qcyc7XG5cbmNsYXNzIFRUU0NodW5rIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gICAgKiBAcmV0dXJuIHtUVFNDaHVua31cbiAgICAqL1xuICAgIHNldFRleHQgKHRleHQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVFRTQ2h1bmsuS0VZX1RFWFQsIHRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldFRleHQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoVFRTQ2h1bmsuS0VZX1RFWFQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTcGVlY2hDYXBhYmlsaXRpZXN9IHR5cGVcbiAgICAqIEByZXR1cm4ge1RUU0NodW5rfVxuICAgICovXG4gICAgc2V0VHlwZSAodHlwZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTcGVlY2hDYXBhYmlsaXRpZXMsIHR5cGUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRUU0NodW5rLktFWV9UWVBFLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTcGVlY2hDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBnZXRUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFNwZWVjaENhcGFiaWxpdGllcywgVFRTQ2h1bmsuS0VZX1RZUEUpO1xuICAgIH1cbn1cblxuVFRTQ2h1bmsuS0VZX1RFWFQgPSAndGV4dCc7XG5UVFNDaHVuay5LRVlfVFlQRSA9ICd0eXBlJztcblxuZXhwb3J0IHsgVFRTQ2h1bmsgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuXG5jbGFzcyBEZXZpY2VJbmZvIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBoYXJkd2FyZVxuICAgICogQHJldHVybiB7RGV2aWNlSW5mb31cbiAgICAqL1xuICAgIHNldEhhcmR3YXJlIChoYXJkd2FyZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIGhhcmR3YXJlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEZXZpY2VJbmZvLktFWV9IQVJEV0FSRSwgaGFyZHdhcmUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEhhcmR3YXJlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX0hBUkRXQVJFKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGZpcm13YXJlUmV2XG4gICAgKiBAcmV0dXJuIHtEZXZpY2VJbmZvfVxuICAgICovXG4gICAgc2V0RmlybXdhcmVSZXYgKGZpcm13YXJlUmV2KSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFN0cmluZywgZmlybXdhcmVSZXYpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX0ZJUk1XQVJFX1JFViwgZmlybXdhcmVSZXYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEZpcm13YXJlUmV2ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX0ZJUk1XQVJFX1JFVik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBvc1xuICAgICogQHJldHVybiB7RGV2aWNlSW5mb31cbiAgICAqL1xuICAgIHNldE9zIChvcykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIG9zKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEZXZpY2VJbmZvLktFWV9PUywgb3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldE9zICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX09TKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBvc1ZlcnNpb25cbiAgICAqIEByZXR1cm4ge0RldmljZUluZm99XG4gICAgKi9cbiAgICBzZXRPc1ZlcnNpb24gKG9zVmVyc2lvbikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIG9zVmVyc2lvbik7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoRGV2aWNlSW5mby5LRVlfT1NfVkVSU0lPTiwgb3NWZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRPc1ZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoRGV2aWNlSW5mby5LRVlfT1NfVkVSU0lPTik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBjYXJyaWVyXG4gICAgKiBAcmV0dXJuIHtEZXZpY2VJbmZvfVxuICAgICovXG4gICAgc2V0Q2FycmllciAoY2Fycmllcikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIGNhcnJpZXIpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX0NBUlJJRVIsIGNhcnJpZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldENhcnJpZXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoRGV2aWNlSW5mby5LRVlfQ0FSUklFUik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXhOdW1iZXJSRkNPTU1Qb3J0c1xuICAgICogQHJldHVybiB7RGV2aWNlSW5mb31cbiAgICAqL1xuICAgIHNldE1heE51bWJlclJGQ09NTVBvcnRzIChtYXhOdW1iZXJSRkNPTU1Qb3J0cykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShOdW1iZXIsIG1heE51bWJlclJGQ09NTVBvcnRzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEZXZpY2VJbmZvLktFWV9NQVhfTlVNQkVSX1JGQ09NTV9QT1JUUywgbWF4TnVtYmVyUkZDT01NUG9ydHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldE1heE51bWJlclJGQ09NTVBvcnRzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERldmljZUluZm8uS0VZX01BWF9OVU1CRVJfUkZDT01NX1BPUlRTKTtcbiAgICB9XG59XG5cbkRldmljZUluZm8uS0VZX0hBUkRXQVJFID0gJ2hhcmR3YXJlJztcbkRldmljZUluZm8uS0VZX0ZJUk1XQVJFX1JFViA9ICdmaXJtd2FyZVJldic7XG5EZXZpY2VJbmZvLktFWV9PUyA9ICdvcyc7XG5EZXZpY2VJbmZvLktFWV9PU19WRVJTSU9OID0gJ29zVmVyc2lvbic7XG5EZXZpY2VJbmZvLktFWV9DQVJSSUVSID0gJ2NhcnJpZXInO1xuRGV2aWNlSW5mby5LRVlfTUFYX05VTUJFUl9SRkNPTU1fUE9SVFMgPSAnbWF4TnVtYmVyUkZDT01NUG9ydHMnO1xuXG5leHBvcnQgeyBEZXZpY2VJbmZvIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgQXBwSW5mbyBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwRGlzcGxheU5hbWVcbiAgICAqIEByZXR1cm4ge0FwcEluZm99XG4gICAgKi9cbiAgICBzZXRBcHBEaXNwbGF5TmFtZSAoYXBwRGlzcGxheU5hbWUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXBwSW5mby5LRVlfQVBQX0RJU1BMQVlfTkFNRSwgYXBwRGlzcGxheU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEFwcERpc3BsYXlOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEFwcEluZm8uS0VZX0FQUF9ESVNQTEFZX05BTUUpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwQnVuZGxlSURcbiAgICAqIEByZXR1cm4ge0FwcEluZm99XG4gICAgKi9cbiAgICBzZXRBcHBCdW5kbGVJRCAoYXBwQnVuZGxlSUQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXBwSW5mby5LRVlfQVBQX0JVTkRMRV9JRCwgYXBwQnVuZGxlSUQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEFwcEJ1bmRsZUlEICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEFwcEluZm8uS0VZX0FQUF9CVU5ETEVfSUQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYXBwVmVyc2lvblxuICAgICogQHJldHVybiB7QXBwSW5mb31cbiAgICAqL1xuICAgIHNldEFwcFZlcnNpb24gKGFwcFZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXBwSW5mby5LRVlfQVBQX1ZFUlNJT04sIGFwcFZlcnNpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEFwcFZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoQXBwSW5mby5LRVlfQVBQX1ZFUlNJT04pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGFwcEljb24gc3RyaW5nIG9mIHRoZSBhcHAgaWNvbiBmaWxlIG5hbWVcbiAgICAqIEByZXR1cm4ge0FwcEluZm99XG4gICAgKi9cbiAgICBzZXRBcHBJY29uIChhcHBJY29uKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEFwcEluZm8uS0VZX0FQUF9JQ09OLCBhcHBJY29uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRBcHBJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEFwcEluZm8uS0VZX0FQUF9JQ09OKTtcbiAgICB9XG59XG5cbkFwcEluZm8uS0VZX0FQUF9ESVNQTEFZX05BTUUgPSAnYXBwRGlzcGxheU5hbWUnO1xuQXBwSW5mby5LRVlfQVBQX0JVTkRMRV9JRCA9ICdhcHBCdW5kbGVJRCc7XG5BcHBJbmZvLktFWV9BUFBfVkVSU0lPTiA9ICdhcHBWZXJzaW9uJztcbkFwcEluZm8uS0VZX0FQUF9JQ09OID0gJ2FwcEljb24nO1xuXG5leHBvcnQgeyBBcHBJbmZvIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgUkdCQ29sb3IgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHJlZFZhbHVlXG4gICAgKiBAcmV0dXJuIHtSR0JDb2xvcn1cbiAgICAqL1xuICAgIHNldFJlZFZhbHVlIChyZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSR0JDb2xvci5LRVlfUkVELCByZWRWYWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0UmVkVmFsdWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUkdCQ29sb3IuS0VZX1JFRCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBncmVlblZhbHVlXG4gICAgKiBAcmV0dXJuIHtSR0JDb2xvcn1cbiAgICAqL1xuICAgIHNldEdyZWVuVmFsdWUgKGdyZWVuVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUkdCQ29sb3IuS0VZX0dSRUVOLCBncmVlblZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRHcmVlblZhbHVlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJHQkNvbG9yLktFWV9HUkVFTik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBibHVlVmFsdWVcbiAgICAqIEByZXR1cm4ge1JHQkNvbG9yfVxuICAgICovXG4gICAgc2V0Qmx1ZVZhbHVlIChibHVlVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUkdCQ29sb3IuS0VZX0JMVUUsIGJsdWVWYWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Qmx1ZVZhbHVlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJHQkNvbG9yLktFWV9CTFVFKTtcbiAgICB9XG59XG5cblJHQkNvbG9yLktFWV9SRUQgPSAncmVkJztcblJHQkNvbG9yLktFWV9HUkVFTiA9ICdncmVlbic7XG5SR0JDb2xvci5LRVlfQkxVRSA9ICdibHVlJztcblxuZXhwb3J0IHsgUkdCQ29sb3IgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tICcuL1JHQkNvbG9yLmpzJztcblxuY2xhc3MgVGVtcGxhdGVDb2xvclNjaGVtZSBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1JHQkNvbG9yfSBwcmltYXJ5Q29sb3JcbiAgICAqIEByZXR1cm4ge1RlbXBsYXRlQ29sb3JTY2hlbWV9XG4gICAgKi9cbiAgICBzZXRQcmltYXJ5Q29sb3IgKHByaW1hcnlDb2xvcikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShSR0JDb2xvciwgcHJpbWFyeUNvbG9yKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihUZW1wbGF0ZUNvbG9yU2NoZW1lLktFWV9QUklNQVJZX0NPTE9SLCBwcmltYXJ5Q29sb3IpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1JHQkNvbG9yfVxuICAgICovXG4gICAgZ2V0UHJpbWFyeUNvbG9yICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFJHQkNvbG9yLCBUZW1wbGF0ZUNvbG9yU2NoZW1lLktFWV9QUklNQVJZX0NPTE9SKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7UkdCQ29sb3J9IHNlY29uZGFyeUNvbG9yXG4gICAgKiBAcmV0dXJuIHtUZW1wbGF0ZUNvbG9yU2NoZW1lfVxuICAgICovXG4gICAgc2V0U2Vjb25kYXJ5Q29sb3IgKHNlY29uZGFyeUNvbG9yKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFJHQkNvbG9yLCBzZWNvbmRhcnlDb2xvcik7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVGVtcGxhdGVDb2xvclNjaGVtZS5LRVlfU0VDT05EQVJZX0NPTE9SLCBzZWNvbmRhcnlDb2xvcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UkdCQ29sb3J9XG4gICAgKi9cbiAgICBnZXRTZWNvbmRhcnlDb2xvciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChSR0JDb2xvciwgVGVtcGxhdGVDb2xvclNjaGVtZS5LRVlfU0VDT05EQVJZX0NPTE9SKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7UkdCQ29sb3J9IGJhY2tncm91bmRDb2xvclxuICAgICogQHJldHVybiB7VGVtcGxhdGVDb2xvclNjaGVtZX1cbiAgICAqL1xuICAgIHNldEJhY2tncm91bmRDb2xvciAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFJHQkNvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRlbXBsYXRlQ29sb3JTY2hlbWUuS0VZX0JBQ0tHUk9VTkRfQ09MT1IsIGJhY2tncm91bmRDb2xvcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UkdCQ29sb3J9XG4gICAgKi9cbiAgICBnZXRCYWNrZ3JvdW5kQ29sb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoUkdCQ29sb3IsIFRlbXBsYXRlQ29sb3JTY2hlbWUuS0VZX0JBQ0tHUk9VTkRfQ09MT1IpO1xuICAgIH1cbn1cblxuVGVtcGxhdGVDb2xvclNjaGVtZS5LRVlfUFJJTUFSWV9DT0xPUiA9ICdwcmltYXJ5Q29sb3InO1xuVGVtcGxhdGVDb2xvclNjaGVtZS5LRVlfU0VDT05EQVJZX0NPTE9SID0gJ3NlY29uZGFyeUNvbG9yJztcblRlbXBsYXRlQ29sb3JTY2hlbWUuS0VZX0JBQ0tHUk9VTkRfQ09MT1IgPSAnYmFja2dyb3VuZENvbG9yJztcblxuZXhwb3J0IHsgVGVtcGxhdGVDb2xvclNjaGVtZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBMYW5ndWFnZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgTGFuZ3VhZ2UgZXh0ZW5kcyBFbnVtIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRU5fU0EgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5FTl9TQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBIRV9JTCAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkhFX0lMO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJPX1JPICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuUk9fUk87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVUtfVUEgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5VS19VQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBJRF9JRCAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLklEX0lEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFZJX1ZOICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuVklfVk47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTVNfTVkgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5NU19NWTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBISV9JTiAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkhJX0lOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5MX0JFICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuTkxfQkU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRUxfR1IgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5FTF9HUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBIVV9IVSAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkhVX0hVO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEZJX0ZJICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuRklfRkk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0tfU0sgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5TS19TSztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTl9VUyAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkVOX1VTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVTX01YICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuRVNfTVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRlJfQ0EgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5GUl9DQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBERV9ERSAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkRFX0RFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVTX0VTICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuRVNfRVM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRU5fR0IgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5FTl9HQjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBSVV9SVSAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLlJVX1JVO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRSX1RSICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuVFJfVFI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUExfUEwgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5QTF9QTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBGUl9GUiAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkZSX0ZSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElUX0lUICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuSVRfSVQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU1ZfU0UgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5TVl9TRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQVF9QVCAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLlBUX1BUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5MX05MICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuTkxfTkw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRU5fQVUgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5FTl9BVTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBaSF9DTiAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLlpIX0NOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFpIX1RXICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuWkhfVFc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSkFfSlAgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5KQV9KUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBBUl9TQSAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkFSX1NBO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEtPX0tSICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuS09fS1I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFRfQlIgKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5QVF9CUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBDU19DWiAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkNTX0NaO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IERBX0RLICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuREFfREs7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTk9fTk8gKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuX01BUC5OT19OTztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTl9JTiAoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fTUFQLkVOX0lOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRIX1RIICgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl9NQVAuVEhfVEg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLl92YWx1ZUZvcktleShrZXksIExhbmd1YWdlLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5fa2V5Rm9yVmFsdWUodmFsdWUsIExhbmd1YWdlLl9NQVApO1xuICAgIH1cbn1cblxuTGFuZ3VhZ2UuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdFTl9TQSc6ICdFTi1TQScsXG4gICAgJ0hFX0lMJzogJ0hFLUlMJyxcbiAgICAnUk9fUk8nOiAnUk8tUk8nLFxuICAgICdVS19VQSc6ICdVSy1VQScsXG4gICAgJ0lEX0lEJzogJ0lELUlEJyxcbiAgICAnVklfVk4nOiAnVkktVk4nLFxuICAgICdNU19NWSc6ICdNUy1NWScsXG4gICAgJ0hJX0lOJzogJ0hJLUlOJyxcbiAgICAnTkxfQkUnOiAnTkwtQkUnLFxuICAgICdFTF9HUic6ICdFTC1HUicsXG4gICAgJ0hVX0hVJzogJ0hVLUhVJyxcbiAgICAnRklfRkknOiAnRkktRkknLFxuICAgICdTS19TSyc6ICdTSy1TSycsXG4gICAgJ0VOX1VTJzogJ0VOLVVTJyxcbiAgICAnRVNfTVgnOiAnRVMtTVgnLFxuICAgICdGUl9DQSc6ICdGUi1DQScsXG4gICAgJ0RFX0RFJzogJ0RFLURFJyxcbiAgICAnRVNfRVMnOiAnRVMtRVMnLFxuICAgICdFTl9HQic6ICdFTi1HQicsXG4gICAgJ1JVX1JVJzogJ1JVLVJVJyxcbiAgICAnVFJfVFInOiAnVFItVFInLFxuICAgICdQTF9QTCc6ICdQTC1QTCcsXG4gICAgJ0ZSX0ZSJzogJ0ZSLUZSJyxcbiAgICAnSVRfSVQnOiAnSVQtSVQnLFxuICAgICdTVl9TRSc6ICdTVi1TRScsXG4gICAgJ1BUX1BUJzogJ1BULVBUJyxcbiAgICAnTkxfTkwnOiAnTkwtTkwnLFxuICAgICdFTl9BVSc6ICdFTi1BVScsXG4gICAgJ1pIX0NOJzogJ1pILUNOJyxcbiAgICAnWkhfVFcnOiAnWkgtVFcnLFxuICAgICdKQV9KUCc6ICdKQS1KUCcsXG4gICAgJ0FSX1NBJzogJ0FSLVNBJyxcbiAgICAnS09fS1InOiAnS08tS1InLFxuICAgICdQVF9CUic6ICdQVC1CUicsXG4gICAgJ0NTX0NaJzogJ0NTLUNaJyxcbiAgICAnREFfREsnOiAnREEtREsnLFxuICAgICdOT19OTyc6ICdOTy1OTycsXG4gICAgJ0VOX0lOJzogJ0VOLUlOJyxcbiAgICAnVEhfVEgnOiAnVEgtVEgnLFxufSk7XG5cblxuZXhwb3J0IHsgTGFuZ3VhZ2UgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEFwcEhNSVR5cGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIEFwcEhNSVR5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgREVGQVVMVCAoKSB7XG4gICAgICAgIHJldHVybiBBcHBITUlUeXBlLl9NQVAuREVGQVVMVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBDT01NVU5JQ0FUSU9OICgpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX01BUC5DT01NVU5JQ0FUSU9OO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1FRElBICgpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX01BUC5NRURJQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBNRVNTQUdJTkcgKCkge1xuICAgICAgICByZXR1cm4gQXBwSE1JVHlwZS5fTUFQLk1FU1NBR0lORztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZJR0FUSU9OICgpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX01BUC5OQVZJR0FUSU9OO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElORk9STUFUSU9OICgpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX01BUC5JTkZPUk1BVElPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTT0NJQUwgKCkge1xuICAgICAgICByZXR1cm4gQXBwSE1JVHlwZS5fTUFQLlNPQ0lBTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBCQUNLR1JPVU5EX1BST0NFU1MgKCkge1xuICAgICAgICByZXR1cm4gQXBwSE1JVHlwZS5fTUFQLkJBQ0tHUk9VTkRfUFJPQ0VTUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBURVNUSU5HICgpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX01BUC5URVNUSU5HO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNZU1RFTSAoKSB7XG4gICAgICAgIHJldHVybiBBcHBITUlUeXBlLl9NQVAuU1lTVEVNO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFBST0pFQ1RJT04gKCkge1xuICAgICAgICByZXR1cm4gQXBwSE1JVHlwZS5fTUFQLlBST0pFQ1RJT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVNT1RFX0NPTlRST0wgKCkge1xuICAgICAgICByZXR1cm4gQXBwSE1JVHlwZS5fTUFQLlJFTU9URV9DT05UUk9MO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBBcHBITUlUeXBlLl92YWx1ZUZvcktleShrZXksIEFwcEhNSVR5cGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEFwcEhNSVR5cGUuX2tleUZvclZhbHVlKHZhbHVlLCBBcHBITUlUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuQXBwSE1JVHlwZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ0RFRkFVTFQnOiAnREVGQVVMVCcsXG4gICAgJ0NPTU1VTklDQVRJT04nOiAnQ09NTVVOSUNBVElPTicsXG4gICAgJ01FRElBJzogJ01FRElBJyxcbiAgICAnTUVTU0FHSU5HJzogJ01FU1NBR0lORycsXG4gICAgJ05BVklHQVRJT04nOiAnTkFWSUdBVElPTicsXG4gICAgJ0lORk9STUFUSU9OJzogJ0lORk9STUFUSU9OJyxcbiAgICAnU09DSUFMJzogJ1NPQ0lBTCcsXG4gICAgJ0JBQ0tHUk9VTkRfUFJPQ0VTUyc6ICdCQUNLR1JPVU5EX1BST0NFU1MnLFxuICAgICdURVNUSU5HJzogJ1RFU1RJTkcnLFxuICAgICdTWVNURU0nOiAnU1lTVEVNJyxcbiAgICAnUFJPSkVDVElPTic6ICdQUk9KRUNUSU9OJyxcbiAgICAnUkVNT1RFX0NPTlRST0wnOiAnUkVNT1RFX0NPTlRST0wnLFxufSk7XG5cbmV4cG9ydCB7IEFwcEhNSVR5cGUgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVxdWVzdCB9IGZyb20gJy4uL1JwY1JlcXVlc3QuanMnO1xuaW1wb3J0IHsgU2RsTXNnVmVyc2lvbiB9IGZyb20gJy4uL3N0cnVjdHMvU2RsTXNnVmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBUVFNDaHVuayB9IGZyb20gJy4uL3N0cnVjdHMvVFRTQ2h1bmsuanMnO1xuaW1wb3J0IHsgRGV2aWNlSW5mbyB9IGZyb20gJy4uL3N0cnVjdHMvRGV2aWNlSW5mby5qcyc7XG5pbXBvcnQgeyBBcHBJbmZvIH0gZnJvbSAnLi4vc3RydWN0cy9BcHBJbmZvLmpzJztcbmltcG9ydCB7IFRlbXBsYXRlQ29sb3JTY2hlbWUgfSBmcm9tICcuLi9zdHJ1Y3RzL1RlbXBsYXRlQ29sb3JTY2hlbWUuanMnO1xuXG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJy4uL2VudW1zL0xhbmd1YWdlLmpzJztcbmltcG9ydCB7IEFwcEhNSVR5cGUgfSBmcm9tICcuLi9lbnVtcy9BcHBITUlUeXBlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgUmVnaXN0ZXJBcHBJbnRlcmZhY2UgZXh0ZW5kcyBScGNSZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELlJlZ2lzdGVyQXBwSW50ZXJmYWNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U2RsTXNnVmVyc2lvbn0gVGhlIG1heCBSUEMgU3BlYyB2ZXJzaW9uIHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnlcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlfVxuICAgICovXG4gICAgc2V0U2RsTXNnVmVyc2lvbiAoc2RsTXNnVmVyc2lvbikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTZGxNc2dWZXJzaW9uLCBzZGxNc2dWZXJzaW9uKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfU0RMX01TR19WRVJTSU9OLCBzZGxNc2dWZXJzaW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTZGxNc2dWZXJzaW9ufVxuICAgICovXG4gICAgZ2V0U2RsTXNnVmVyc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChTZGxNc2dWZXJzaW9uLCBSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfU0RMX01TR19WRVJTSU9OKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGFwcE5hbWUgdGhlIG5hbWUgb2YgdGhlIGFwcCB0aGF0IGlzIHJlZ2lzdGVyaW5nXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZX1cbiAgICAqL1xuICAgIHNldEFwcE5hbWUgKGFwcE5hbWUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoU3RyaW5nLCBhcHBOYW1lKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfQVBQX05BTUUsIGFwcE5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGFwcCBuYW1lXG4gICAgKi9cbiAgICBnZXRBcHBOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9BUFBfTkFNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAqIEBwYXJhbSB7QXJyYXk8VFRTQ2h1bms+fSB0dHNOYW1lcyBUVFMgc3RyaW5nIGZvciBWUiByZWNvZ25pdGlvbiBvZiB0aGUgbW9iaWxlIGFwcGxpY2F0aW9uIG5hbWUsIGUuZy4gXCJNeSBTIEQgTCBBcHBcIi5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lYW50IHRvIG92ZXJjb21lIGFueSBmYWlsaW5nIG9uIHNwZWVjaCBlbmdpbmUgaW4gcHJvcGVybHkgcHJvbm91bmNpbmcgLyB1bmRlcnN0YW5kaW5nXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAgbmFtZS4gTmVlZHMgdG8gYmUgdW5pcXVlIG92ZXIgYWxsIGFwcGxpY2F0aW9ucyBmcm9tIHRoZSBzYW1lIGRldmljZS4gTWF5IG5vdCBiZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHkuIE1heSBub3Qgc3RhcnQgd2l0aCBhIG5ldyBsaW5lIGNoYXJhY3Rlci4gT25seSBjaGFyYWN0ZXJzIGZyb20gY2hhciBzZXRcbiAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAqL1xuICAgIHNldFR0c05hbWUgKHR0c05hbWVzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9UVFNfTkFNRSwgdHRzTmFtZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PFRUU0NodW5rPn1cbiAgICAqL1xuICAgIGdldFR0c05hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoVFRTQ2h1bmssIFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9UVFNfTkFNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gIG5nbnBwTmFtZSBQcm92aWRlcyBhbiBhYmJyZXZpYXRlZCB2ZXJzaW9uIG9mIHRoZSBhcHAgbmFtZSAoaWYgbmVlZGVkKSwgdGhhdCB3aWxsIGJlIGRpc3BsYXllZFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gdGhlIE5HTiBtZWRpYSBzY3JlZW4uIElmIG5vdCBwcm92aWRlZCwgdGhlIGFwcE5hbWUgaXMgdXNlZCBpbnN0ZWFkIChhbmRcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdHJ1bmNhdGVkIGlmIHRvbyBsb25nKU9ubHkgY2hhcmFjdGVycyBmcm9tIGNoYXIgc2V0LlxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgKi9cbiAgICBzZXROZ25NZWRpYVNjcmVlbkFwcE5hbWUgKG5nbnBwTmFtZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIG5nbnBwTmFtZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX05HTl9NRURJQV9TQ1JFRU5fQVBQX05BTUUsIG5nbnBwTmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfSBhbiBhYmJyZXZpYXRlZCB2ZXJzaW9uIG9mIHRoZSBhcHAgbmFtZVxuICAgICovXG4gICAgZ2V0TmduTWVkaWFTY3JlZW5BcHBOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9OR05fTUVESUFfU0NSRUVOX0FQUF9OQU1FKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gdnJTeW5vbnltcyBEZWZpbmVzIGFuIGFkZGl0aW9uYWwgdm9pY2UgcmVjb2duaXRpb24gY29tbWFuZC4gTWF5IG5vdFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZmVyZSB3aXRoIGFueSBhcHAgbmFtZSBvZiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgYXBwbGljYXRpb25zXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgc2FtZSBkZXZpY2UgYW5kIGFueSBwcmVkZWZpbmVkIGJsYWNrbGlzdCBvZiB3b3JkcyAoZ2xvYmFsXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMpT25seSBjaGFyYWN0ZXJzIGZyb20gY2hhciBzZXRcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlfVxuICAgICovXG4gICAgc2V0VnJTeW5vbnltcyAodnJTeW5vbnltcykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfVlJfU1lOT05ZTVMsIHZyU3lub255bXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59XG4gICAgKi9cbiAgICBnZXRWclN5bm9ueW1zICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9WUl9TWU5PTllNUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzTWVkaWFBcHBsaWNhdGlvbiBJbmRpY2F0ZXMgaWYgdGhlIGFwcGxpY2F0aW9uIGlzIGEgbWVkaWEgb3IgYSBub24tbWVkaWEgYXBwbGljYXRpb24uXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbmx5IG1lZGlhIGFwcGxpY2F0aW9ucyB3aWxsIGJlIGFibGUgdG8gc3RyZWFtIGF1ZGlvIHRvIHRoZSBtb2R1bGVcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgYXVkaWJsZSBvdXRzaWRlIG9mIHRoZSBCVCBtZWRpYSBzb3VyY2UuXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZX1cbiAgICAqL1xuICAgIHNldElzTWVkaWFBcHBsaWNhdGlvbiAoaXNNZWRpYUFwcGxpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9JU19NRURJQV9BUFBMSUNBVElPTiwgaXNNZWRpYUFwcGxpY2F0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0SXNNZWRpYUFwcGxpY2F0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9JU19NRURJQV9BUFBMSUNBVElPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0xhbmd1YWdlfSBsYW5ndWFnZURlc2lyZWRcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlfVxuICAgICovXG4gICAgc2V0TGFuZ3VhZ2VEZXNpcmVkIChsYW5ndWFnZURlc2lyZWQpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoTGFuZ3VhZ2UsIGxhbmd1YWdlRGVzaXJlZCk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0xBTkdVQUdFX0RFU0lSRUQsIGxhbmd1YWdlRGVzaXJlZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRMYW5ndWFnZURlc2lyZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoTGFuZ3VhZ2UsIFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9MQU5HVUFHRV9ERVNJUkVEKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtMYW5ndWFnZX0gaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZFxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgKi9cbiAgICBzZXRIbWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkIChobWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKExhbmd1YWdlLCBobWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfSE1JX0RJU1BMQVlfTEFOR1VBR0VfREVTSVJFRCwgaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRIbWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KExhbmd1YWdlLCBSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfSE1JX0RJU1BMQVlfTEFOR1VBR0VfREVTSVJFRCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8QXBwSE1JVHlwZT59IGFwcEhNSVR5cGVcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlfVxuICAgICovXG4gICAgc2V0QXBwSG1pVHlwZSAoYXBwSE1JVHlwZSkge1xuICAgICAgICAvLyBUT0RPIG1ha2UgdmFsaWRhdGUgdHlwZSBhY2NlcHQgYXJyYXlzXG4gICAgICAgIC8vIHRoaXMudmFsaWRhdGVUeXBlKEFwcEhNSVR5cGUsIGFwcEhNSVR5cGUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9BUFBfSE1JX1RZUEUsIGFwcEhNSVR5cGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PEFwcEhNSVR5cGU+fVxuICAgICovXG4gICAgZ2V0QXBwSG1pVHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChBcHBITUlUeXBlLCBSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfQVBQX0hNSV9UWVBFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBoYXNoSUQgdGhlIGhhc2ggSURcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlfVxuICAgICovXG4gICAgc2V0SGFzaElEIChoYXNoSUQpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoU3RyaW5nLCBoYXNoSUQpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9IQVNIX0lELCBoYXNoSUQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGhhc2ggSURcbiAgICAqL1xuICAgIGdldEhhc2hJRCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfSEFTSF9JRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtEZXZpY2VJbmZvfSBkZXZpY2VJbmZvXG4gICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgICovXG4gICAgc2V0RGV2aWNlSW5mbyAoZGV2aWNlSW5mbykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShEZXZpY2VJbmZvLCBkZXZpY2VJbmZvKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfREVWSUNFX0lORk8sIGRldmljZUluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0RldmljZUluZm99XG4gICAgKi9cbiAgICBnZXREZXZpY2VJbmZvICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KERldmljZUluZm8sIFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9ERVZJQ0VfSU5GTyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBhcHBOYW1lIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgYWNjZXNzZWQgZGlyZWN0bHkgYnkgZGV2ZWxvcGVycy4gT25seSBzZXQgdGhlIGZ1bGwgSUQgYW5kIHRoaXMgcGFyYW0gd2lsbCBiZSBzZXQuXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZX1cbiAgICAqL1xuICAgIF9zZXRBcHBJZCAoYXBwSWQpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoU3RyaW5nLCBhcHBJZCk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9JRCwgYXBwSWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGFwcCBpZFxuICAgICovXG4gICAgZ2V0QXBwSWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9JRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gZnVsbEFwcElkXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZX1cbiAgICAqL1xuICAgIHNldEZ1bGxBcHBJZCAoZnVsbEFwcElkKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFN0cmluZywgZnVsbEFwcElkKTtcblxuICAgICAgICBpZiAoZnVsbEFwcElkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmdWxsQXBwSWQgPSBmdWxsQXBwSWQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9GVUxMX0FQUF9JRCwgZnVsbEFwcElkKTtcbiAgICAgICAgICAgIGxldCBhcHBJZDtcbiAgICAgICAgICAgIGlmIChmdWxsQXBwSWQubGVuZ3RoIDw9IFJlZ2lzdGVyQXBwSW50ZXJmYWNlLkFQUF9JRF9NQVhfTEVOR1RIKSB7XG4gICAgICAgICAgICAgICAgYXBwSWQgPSBmdWxsQXBwSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcElkID0gZnVsbEFwcElkLnJlcGxhY2UoJy0nLCAnJykuc3Vic3RyaW5nKDAsIFJlZ2lzdGVyQXBwSW50ZXJmYWNlLkFQUF9JRF9NQVhfTEVOR1RIKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldEFwcElkKGFwcElkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9GVUxMX0FQUF9JRCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIGFwcCBpZFxuICAgICovXG4gICAgZ2V0RnVsbEFwcElkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9GVUxMX0FQUF9JRCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FwcEluZm99IGFwcEluZm9cbiAgICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZX1cbiAgICAgKi9cbiAgICBzZXRBcHBJbmZvIChhcHBJbmZvKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEFwcEluZm8sIGFwcEluZm8pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9BUFBfSU5GTywgYXBwSW5mbyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXBwSW5mb31cbiAgICAqL1xuICAgIGdldEFwcEluZm8gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoQXBwSW5mbywgUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9JTkZPKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlQ29sb3JTY2hlbWV9IGRheUNvbG9yU2NoZW1lXG4gICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgICovXG4gICAgc2V0RGF5Q29sb3JTY2hlbWUgKGRheUNvbG9yU2NoZW1lKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFRlbXBsYXRlQ29sb3JTY2hlbWUsIGRheUNvbG9yU2NoZW1lKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfREFZX0NPTE9SX1NDSEVNRSwgZGF5Q29sb3JTY2hlbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1RlbXBsYXRlQ29sb3JTY2hlbWV9XG4gICAgKi9cbiAgICBnZXREYXlDb2xvclNjaGVtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChUZW1wbGF0ZUNvbG9yU2NoZW1lLCBSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfREFZX0NPTE9SX1NDSEVNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUNvbG9yU2NoZW1lfSBuaWdodENvbG9yU2NoZW1lXG4gICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgICovXG4gICAgc2V0TmlnaHRDb2xvclNjaGVtZSAobmlnaHRDb2xvclNjaGVtZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShUZW1wbGF0ZUNvbG9yU2NoZW1lLCBuaWdodENvbG9yU2NoZW1lKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfTklHSFRfQ09MT1JfU0NIRU1FLCBuaWdodENvbG9yU2NoZW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtUZW1wbGF0ZUNvbG9yU2NoZW1lfVxuICAgICovXG4gICAgZ2V0TmlnaHRDb2xvclNjaGVtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChUZW1wbGF0ZUNvbG9yU2NoZW1lLCBSZWdpc3RlckFwcEludGVyZmFjZS5LRVlfTklHSFRfQ09MT1JfU0NIRU1FKTtcbiAgICB9XG59XG5cblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9TWU5DX01TR19WRVJTSU9OID0gJ3N5bmNNc2dWZXJzaW9uJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9TRExfTVNHX1ZFUlNJT04gPSAnc3luY01zZ1ZlcnNpb24nO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9OQU1FID0gJ2FwcE5hbWUnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX1RUU19OQU1FID0gJ3R0c05hbWUnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX05HTl9NRURJQV9TQ1JFRU5fQVBQX05BTUUgPSAnbmduTWVkaWFTY3JlZW5BcHBOYW1lJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9WUl9TWU5PTllNUyA9ICd2clN5bm9ueW1zJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9JU19NRURJQV9BUFBMSUNBVElPTiA9ICdpc01lZGlhQXBwbGljYXRpb24nO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0xBTkdVQUdFX0RFU0lSRUQgPSAnbGFuZ3VhZ2VEZXNpcmVkJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9ITUlfRElTUExBWV9MQU5HVUFHRV9ERVNJUkVEID0gJ2htaURpc3BsYXlMYW5ndWFnZURlc2lyZWQnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9ITUlfVFlQRSA9ICdhcHBITUlUeXBlJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9IQVNIX0lEID0gJ2hhc2hJRCc7XG5SZWdpc3RlckFwcEludGVyZmFjZS5LRVlfREVWSUNFX0lORk8gPSAnZGV2aWNlSW5mbyc7XG5SZWdpc3RlckFwcEludGVyZmFjZS5LRVlfQVBQX0lEID0gJ2FwcElEJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLktFWV9GVUxMX0FQUF9JRCA9ICdmdWxsQXBwSUQnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0FQUF9JTkZPID0gJ2FwcEluZm8nO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX0RBWV9DT0xPUl9TQ0hFTUUgPSAnZGF5Q29sb3JTY2hlbWUnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2UuS0VZX05JR0hUX0NPTE9SX1NDSEVNRSA9ICduaWdodENvbG9yU2NoZW1lJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlLkFQUF9JRF9NQVhfTEVOR1RIID0gMTA7XG5cbmV4cG9ydCB7IFJlZ2lzdGVyQXBwSW50ZXJmYWNlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFJlc3VsdFxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgUmVzdWx0IGV4dGVuZHMgRW51bSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNVQ0NFU1MgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuU1VDQ0VTUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBVTlNVUFBPUlRFRF9SRVFVRVNUICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLlVOU1VQUE9SVEVEX1JFUVVFU1Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVU5TVVBQT1JURURfUkVTT1VSQ0UgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuVU5TVVBQT1JURURfUkVRVUVTVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBESVNBTExPV0VEICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLkRJU0FMTE9XRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVKRUNURUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuUkVKRUNURUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQUJPUlRFRCAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5BQk9SVEVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElHTk9SRUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuSUdOT1JFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBSRVRSWSAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5SRVRSWTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBJTl9VU0UgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuSU5fVVNFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFZFSElDTEVfREFUQV9OT1RfQVZBSUxBQkxFICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLlZFSElDTEVfREFUQV9OT1RfQVZBSUxBQkxFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRJTUVEX09VVCAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5USU1FRF9PVVQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSU5WQUxJRF9EQVRBICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLklOVkFMSURfREFUQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBDSEFSX0xJTUlUX0VYQ0VFREVEICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLkNIQVJfTElNSVRfRVhDRUVERUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSU5WQUxJRF9JRCAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5JTlZBTElEX0lEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IERVUExJQ0FURV9OQU1FICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLkRVUExJQ0FURV9OQU1FO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFQUExJQ0FUSU9OX05PVF9SRUdJU1RFUkVEICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLkFQUExJQ0FUSU9OX05PVF9SRUdJU1RFUkVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFdST05HX0xBTkdVQUdFICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLldST05HX0xBTkdVQUdFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9VVF9PRl9NRU1PUlkgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuT1VUX09GX01FTU9SWTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBUT09fTUFOWV9QRU5ESU5HX1JFUVVFU1RTICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLlRPT19NQU5ZX1BFTkRJTkdfUkVRVUVTVFM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVE9PX01BTllfQVBQTElDQVRJT05TICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLlRPT19NQU5ZX0FQUExJQ0FUSU9OUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBBUFBMSUNBVElPTl9SRUdJU1RFUkVEX0FMUkVBRFkgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuQVBQTElDQVRJT05fUkVHSVNURVJFRF9BTFJFQURZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFdBUk5JTkdTICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLldBUk5JTkdTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdFTkVSSUNfRVJST1IgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuR0VORVJJQ19FUlJPUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBVU0VSX0RJU0FMTE9XRUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuVVNFUl9ESVNBTExPV0VEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRSVU5DQVRFRF9EQVRBICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLlRSVU5DQVRFRF9EQVRBO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVOU1VQUE9SVEVEX1ZFUlNJT04gKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuVU5TVVBQT1JURURfVkVSU0lPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBWRUhJQ0xFX0RBVEFfTk9UX0FMTE9XRUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuVkVISUNMRV9EQVRBX05PVF9BTExPV0VEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEZJTEVfTk9UX0ZPVU5EICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLkZJTEVfTk9UX0ZPVU5EO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENBTkNFTF9ST1VURSAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5DQU5DRUxfUk9VVEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0FWRUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuU0FWRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSU5WQUxJRF9DRVJUICgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fTUFQLklOVkFMSURfQ0VSVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBFWFBJUkVEX0NFUlQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuRVhQSVJFRF9DRVJUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFU1VNRV9GQUlMRUQgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuUkVTVU1FX0ZBSUxFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBEQVRBX05PVF9BVkFJTEFCTEUgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuREFUQV9OT1RfQVZBSUxBQkxFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFQURfT05MWSAoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuX01BUC5SRUFEX09OTFk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ09SUlVQVEVEX0RBVEEgKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Ll9NQVAuQ09SUlVQVEVEX0RBVEE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fdmFsdWVGb3JLZXkoa2V5LCBSZXN1bHQuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5fa2V5Rm9yVmFsdWUodmFsdWUsIFJlc3VsdC5fTUFQKTtcbiAgICB9XG59XG5cblJlc3VsdC5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1NVQ0NFU1MnOiAnU1VDQ0VTUycsXG4gICAgJ1VOU1VQUE9SVEVEX1JFUVVFU1QnOiAnVU5TVVBQT1JURURfUkVRVUVTVCcsXG4gICAgJ1VOU1VQUE9SVEVEX1JFU09VUkNFJzogJ1VOU1VQUE9SVEVEX1JFU09VUkNFJyxcbiAgICAnRElTQUxMT1dFRCc6ICdESVNBTExPV0VEJyxcbiAgICAnUkVKRUNURUQnOiAnUkVKRUNURUQnLFxuICAgICdBQk9SVEVEJzogJ0FCT1JURUQnLFxuICAgICdJR05PUkVEJzogJ0lHTk9SRUQnLFxuICAgICdSRVRSWSc6ICdSRVRSWScsXG4gICAgJ0lOX1VTRSc6ICdJTl9VU0UnLFxuICAgICdWRUhJQ0xFX0RBVEFfTk9UX0FWQUlMQUJMRSc6ICdWRUhJQ0xFX0RBVEFfTk9UX0FWQUlMQUJMRScsXG4gICAgJ1RJTUVEX09VVCc6ICdUSU1FRF9PVVQnLFxuICAgICdJTlZBTElEX0RBVEEnOiAnSU5WQUxJRF9EQVRBJyxcbiAgICAnQ0hBUl9MSU1JVF9FWENFRURFRCc6ICdDSEFSX0xJTUlUX0VYQ0VFREVEJyxcbiAgICAnSU5WQUxJRF9JRCc6ICdJTlZBTElEX0lEJyxcbiAgICAnRFVQTElDQVRFX05BTUUnOiAnRFVQTElDQVRFX05BTUUnLFxuICAgICdBUFBMSUNBVElPTl9OT1RfUkVHSVNURVJFRCc6ICdBUFBMSUNBVElPTl9OT1RfUkVHSVNURVJFRCcsXG4gICAgJ1dST05HX0xBTkdVQUdFJzogJ1dST05HX0xBTkdVQUdFJyxcbiAgICAnT1VUX09GX01FTU9SWSc6ICdPVVRfT0ZfTUVNT1JZJyxcbiAgICAnVE9PX01BTllfUEVORElOR19SRVFVRVNUUyc6ICdUT09fTUFOWV9QRU5ESU5HX1JFUVVFU1RTJyxcbiAgICAnVE9PX01BTllfQVBQTElDQVRJT05TJzogJ1RPT19NQU5ZX0FQUExJQ0FUSU9OUycsXG4gICAgJ0FQUExJQ0FUSU9OX1JFR0lTVEVSRURfQUxSRUFEWSc6ICdBUFBMSUNBVElPTl9SRUdJU1RFUkVEX0FMUkVBRFknLFxuICAgICdXQVJOSU5HUyc6ICdXQVJOSU5HUycsXG4gICAgJ0dFTkVSSUNfRVJST1InOiAnR0VORVJJQ19FUlJPUicsXG4gICAgJ1VTRVJfRElTQUxMT1dFRCc6ICdVU0VSX0RJU0FMTE9XRUQnLFxuICAgICdUUlVOQ0FURURfREFUQSc6ICdUUlVOQ0FURURfREFUQScsXG4gICAgJ1VOU1VQUE9SVEVEX1ZFUlNJT04nOiAnVU5TVVBQT1JURURfVkVSU0lPTicsXG4gICAgJ1ZFSElDTEVfREFUQV9OT1RfQUxMT1dFRCc6ICdWRUhJQ0xFX0RBVEFfTk9UX0FMTE9XRUQnLFxuICAgICdGSUxFX05PVF9GT1VORCc6ICdGSUxFX05PVF9GT1VORCcsXG4gICAgJ0NBTkNFTF9ST1VURSc6ICdDQU5DRUxfUk9VVEUnLFxuICAgICdTQVZFRCc6ICdTQVZFRCcsXG4gICAgJ0lOVkFMSURfQ0VSVCc6ICdJTlZBTElEX0NFUlQnLFxuICAgICdFWFBJUkVEX0NFUlQnOiAnRVhQSVJFRF9DRVJUJyxcbiAgICAnUkVTVU1FX0ZBSUxFRCc6ICdSRVNVTUVfRkFJTEVEJyxcbiAgICAnREFUQV9OT1RfQVZBSUxBQkxFJzogJ0RBVEFfTk9UX0FWQUlMQUJMRScsXG4gICAgJ1JFQURfT05MWSc6ICdSRUFEX09OTFknLFxuICAgICdDT1JSVVBURURfREFUQSc6ICdDT1JSVVBURURfREFUQScsXG59KTtcblxuZXhwb3J0IHsgUmVzdWx0IH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vUnBjTWVzc2FnZS5qcyc7XG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9lbnVtcy9ScGNUeXBlLmpzJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4vZW51bXMvUmVzdWx0LmpzJztcblxuY2xhc3MgUnBjUmVzcG9uc2UgZXh0ZW5kcyBScGNNZXNzYWdlIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRSUENUeXBlKFJwY1R5cGUuUkVTUE9OU0UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFN1Y2Nlc3MgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUnBjUmVzcG9uc2UuS0VZX1NVQ0NFU1MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UnBjUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRTdWNjZXNzIChzdWNjZXNzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJwY1Jlc3BvbnNlLktFWV9TVUNDRVNTLCBzdWNjZXNzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRJbmZvICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFJwY1Jlc3BvbnNlLktFWV9JTkZPKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1JwY1Jlc3BvbnNlfVxuICAgICovXG4gICAgc2V0SW5mbyAoaW5mbykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihScGNSZXNwb25zZS5LRVlfSU5GTywgaW5mbyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UmVzdWx0fVxuICAgICovXG4gICAgZ2V0UmVzdWx0Q29kZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChSZXN1bHQsIFJwY1Jlc3BvbnNlLktFWV9SRVNVTFRfQ09ERSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtScGNSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFJlc3VsdENvZGUgKHJlc3VsdENvZGUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoUmVzdWx0LCByZXN1bHRDb2RlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihScGNSZXNwb25zZS5LRVlfUkVTVUxUX0NPREUsIHJlc3VsdENvZGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cblJwY1Jlc3BvbnNlLktFWV9TVUNDRVNTICAgICA9ICdzdWNjZXNzJztcblJwY1Jlc3BvbnNlLktFWV9JTkZPICAgICAgICA9ICdpbmZvJztcblJwY1Jlc3BvbnNlLktFWV9SRVNVTFRfQ09ERSA9ICdyZXN1bHRDb2RlJztcblxuZXhwb3J0IHsgUnBjUmVzcG9uc2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNNZXNzYWdlIH0gZnJvbSAnLi9ScGNNZXNzYWdlLmpzJztcblxuY2xhc3MgUnBjTGlzdGVuZXIge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fb25ScGNNZXNzYWdlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7UnBjTGlzdGVuZXJ9XG4gICAgICovXG4gICAgc2V0T25ScGNNZXNzYWdlIChmdW5jKSB7XG4gICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZSA9IGZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtScGNNZXNzYWdlfSBycGNNZXNzYWdlIFxuICAgICAqL1xuICAgIG9uUnBjTWVzc2FnZSAocnBjTWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uUnBjTWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25ScGNNZXNzYWdlKHJwY01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBScGNMaXN0ZW5lciB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsU2Vzc2lvbkxpc3RlbmVyXG4gKi9cbmNsYXNzIFNkbFNlc3Npb25MaXN0ZW5lciB7XG4gICAgLyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25ScGNNZXNzYWdlUmVjZWl2ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgXG4gICAgICovXG4gICAgc2V0T25Qcm90b2NvbFNlc3Npb25TdGFydGVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPblByb3RvY29sU2Vzc2lvbkVuZGVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgXG4gICAgICovXG4gICAgc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uUnBjTWVzc2FnZVJlY2VpdmVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblJwY01lc3NhZ2VSZWNlaXZlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uVHJhbnNwb3J0Q29ubmVjdGVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSUQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiAtIHJlcHJlc2VudHMgYSBieXRlIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklEXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhhc2hJRFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNFbmNyeXB0ZWRcbiAgICAgKi9cbiAgICBvblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSUQsIHZlcnNpb24sIGNvcnJlbGF0aW9uSUQsIGhhc2hJRCwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklELCB2ZXJzaW9uLCBjb3JyZWxhdGlvbklELCBoYXNoSUQsIGlzRW5jcnlwdGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSUQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29ycmVsYXRpb25JRFxuICAgICAqL1xuICAgIG9uUHJvdG9jb2xTZXNzaW9uRW5kZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSUQsIGNvcnJlbGF0aW9uSUQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkKHNlcnZpY2VUeXBlLCBzZXNzaW9uSUQsIGNvcnJlbGF0aW9uSUQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JRCAtIHJlcHJlc2VudHMgYSBieXRlIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklEXG4gICAgICovXG4gICAgb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCAoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgY29ycmVsYXRpb25JKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklELCBjb3JyZWxhdGlvbkkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtScGNNZXNzYWdlfSBycGNNZXNzYWdlIFxuICAgICAqL1xuICAgIG9uUnBjTWVzc2FnZVJlY2VpdmVkIChycGNNZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25ScGNNZXNzYWdlUmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZVJlY2VpdmVkKHJwY01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBhcHAgYW5kIGNvcmUgY29ubmVjdFxuICAgICAqL1xuICAgIG9uVHJhbnNwb3J0Q29ubmVjdGVkICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgU2RsU2Vzc2lvbkxpc3RlbmVyIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsUHJvdG9jb2xMaXN0ZW5lclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0T25ScGNNZXNzYWdlUmVjZWl2ZWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uUnBjTWVzc2FnZVJlY2VpdmVkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBzZXRPblByb3RvY29sU2Vzc2lvblN0YXJ0ZWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Qcm90b2NvbFNlc3Npb25FbmRlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0R2V0U2Vzc2lvbklkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRTZXNzaW9uSWRcbiAqL1xuY2xhc3MgU2RsUHJvdG9jb2xMaXN0ZW5lciB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLl9vblJwY01lc3NhZ2VSZWNlaXZlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZ2V0U2Vzc2lvbklkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0T25UcmFuc3BvcnRDb25uZWN0ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uVHJhbnNwb3J0Q29ubmVjdGVkID0gbGlzdGVuZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0T25ScGNNZXNzYWdlUmVjZWl2ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZVJlY2VpdmVkID0gbGlzdGVuZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UnBjTWVzc2FnZX0gcnBjTWVzc2FnZVxuICAgICAqL1xuICAgIG9uUnBjTWVzc2FnZVJlY2VpdmVkIChycGNNZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25ScGNNZXNzYWdlUmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZVJlY2VpdmVkKHJwY01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKi9cbiAgICBzZXRPblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZCA9IGxpc3RlbmVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIG9uVHJhbnNwb3J0Q29ubmVjdGVkICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGUgb25Qcm90b2NvbFNlc3Npb25TdGFydGVkIGxpc3RlbmVyIHdpdGggdGhlIGV2ZW50IGRhdGFcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhhc2hJZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNFbmNyeXB0ZWRcbiAgICAgKi9cbiAgICBvblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQsIHZlcnNpb24sIGNvcnJlbGF0aW9uSWQsIGhhc2hJZCwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCB2ZXJzaW9uLCBjb3JyZWxhdGlvbklkLCBoYXNoSWQsIGlzRW5jcnlwdGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICovXG4gICAgc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZCAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25Qcm90b2NvbFNlc3Npb25FbmRlZCA9IGxpc3RlbmVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhlIG9uUHJvdG9jb2xTZXNzaW9uRW5kZWQgbGlzdGVuZXIgd2l0aCB0aGUgZXZlbnQgZGF0YVxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklkXG4gICAgICovXG4gICAgb25Qcm90b2NvbFNlc3Npb25FbmRlZCAoc2VydmljZVR5cGUsIHNlc3Npb25JZCwgY29ycmVsYXRpb25JZCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWQoc2VydmljZVR5cGUsIHNlc3Npb25JZCwgY29ycmVsYXRpb25JZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lclxuICAgICAqL1xuICAgIHNldE9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQgPSBsaXN0ZW5lcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoZSBvblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkIGxpc3RlbmVyIHdpdGggdGhlIGV2ZW50IGRhdGFcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29ycmVsYXRpb25JZFxuICAgICAqL1xuICAgIG9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQsIGNvcnJlbGF0aW9uSWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQsIGNvcnJlbGF0aW9uSWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZ2V0dGVyXG4gICAgICovXG4gICAgc2V0R2V0U2Vzc2lvbklkIChnZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5fZ2V0U2Vzc2lvbklkID0gZ2V0dGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhlIGdldFNlc3Npb25JZCBnZXR0ZXJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBzZXNzaW9uSWRcbiAgICAgKi9cbiAgICBnZXRTZXNzaW9uSWQgKCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2dldFNlc3Npb25JZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNlc3Npb25JZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnZXREZXNpcmVkVmlkZW9QYXJhbXMgZ2V0dGVyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZ2V0dGVyXG4gICAgICovXG4gICAgc2V0R2V0RGVzaXJlZFZpZGVvUGFyYW1zIChnZXR0ZXIpIHtcbiAgICAgICAgdGhpcy5fZ2V0RGVzaXJlZFZpZGVvUGFyYW1zID0gZ2V0dGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhlIGdldERlc2lyZWRWaWRlb1BhcmFtcyBnZXR0ZXJcbiAgICAgKiBAcmV0dXJucyB7VmlkZW9TdHJlYW1pbmdQYXJhbWV0ZXJzfVxuICAgICAqL1xuICAgIGdldERlc2lyZWRWaWRlb1BhcmFtcyAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fZ2V0RGVzaXJlZFZpZGVvUGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RGVzaXJlZFZpZGVvUGFyYW1zKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZXRTZXRBY2NlcHRlZFZpZGVvUGFyYW1zIHNldHRlclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHNldHRlclxuICAgICAqL1xuICAgIHNldFNldEFjY2VwdGVkVmlkZW9QYXJhbXMgKHNldHRlcikge1xuICAgICAgICB0aGlzLl9zZXRBY2NlcHRlZFZpZGVvUGFyYW1zID0gc2V0dGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGUgc2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyBzZXR0ZXJcbiAgICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nUGFyYW1ldGVyc30gcGFyYW1zXG4gICAgICovXG4gICAgc2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyAocGFyYW1zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fc2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fc2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyhwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gRnJhbWVUeXBlXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBGcmFtZVR5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDT05UUk9MICgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5fTUFQLkNPTlRST0w7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEZJUlNUICgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5fTUFQLkZJUlNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDT05TRUNVVElWRSAoKSB7XG4gICAgICAgIHJldHVybiBGcmFtZVR5cGUuX01BUC5DT05TRUNVVElWRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0lOR0xFICgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5fTUFQLlNJTkdMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gRnJhbWVUeXBlLl92YWx1ZUZvcktleShrZXksIEZyYW1lVHlwZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gRnJhbWVUeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgRnJhbWVUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuRnJhbWVUeXBlLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnQ09OVFJPTCc6IDB4MDAsXG4gICAgJ0ZJUlNUJzogMHgwMixcbiAgICAnQ09OU0VDVVRJVkUnOiAweDAzLFxuICAgICdTSU5HTEUnOiAweDAxLFxufSk7XG5cbmV4cG9ydCB7IEZyYW1lVHlwZSB9O1xuIiwiZXhwb3J0c1tcImJzb25cIl0gPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XG59IGNhdGNoKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcblx0XHRnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG5cblxudmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oMylcbnZhciBpZWVlNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KVxudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygwKSkpXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsLCBCdWZmZXIpIHsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHQgdHJ1ZSA/IGZhY3RvcnkoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg2KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2xvbmcnLCAnYnVmZmVyJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5CU09OID0ge30pLGdsb2JhbC5sb25nLGdsb2JhbC5CdWZmZXIpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLGxvbmcsYnVmZmVyKSB7ICd1c2Ugc3RyaWN0JztcblxuXHRsb25nID0gbG9uZyAmJiBsb25nLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBsb25nWydkZWZhdWx0J10gOiBsb25nO1xuXHRidWZmZXIgPSBidWZmZXIgJiYgYnVmZmVyLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBidWZmZXJbJ2RlZmF1bHQnXSA6IGJ1ZmZlcjtcblxuXHR2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0XHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlIChuKSB7XG5cdFx0cmV0dXJuIG4gJiYgbi5kZWZhdWx0IHx8IG47XG5cdH1cblxuXHR2YXIgbWFwID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXG5cdCAgaWYgKHR5cGVvZiBjb21tb25qc0dsb2JhbC5NYXAgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IGNvbW1vbmpzR2xvYmFsLk1hcDtcblx0ICAgIG1vZHVsZS5leHBvcnRzLk1hcCA9IGNvbW1vbmpzR2xvYmFsLk1hcDtcblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gV2Ugd2lsbCByZXR1cm4gYSBwb2x5ZmlsbFxuXHQgICAgdmFyIE1hcCA9IGZ1bmN0aW9uIE1hcChhcnJheSkge1xuXHQgICAgICB0aGlzLl9rZXlzID0gW107XG5cdCAgICAgIHRoaXMuX3ZhbHVlcyA9IHt9O1xuXG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICBpZiAoYXJyYXlbaV0gPT0gbnVsbCkgY29udGludWU7IC8vIHNraXAgbnVsbCBhbmQgdW5kZWZpbmVkXG5cblx0ICAgICAgICB2YXIgZW50cnkgPSBhcnJheVtpXTtcblx0ICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG5cdCAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07IC8vIEFkZCB0aGUga2V5IHRvIHRoZSBsaXN0IG9mIGtleXMgaW4gb3JkZXJcblxuXHQgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpOyAvLyBBZGQgdGhlIGtleSBhbmQgdmFsdWUgdG8gdGhlIHZhbHVlcyBkaWN0aW9uYXJ5IHdpdGggYSBwb2ludFxuXHQgICAgICAgIC8vIHRvIHRoZSBsb2NhdGlvbiBpbiB0aGUgb3JkZXJlZCBrZXlzIGxpc3RcblxuXG5cdCAgICAgICAgdGhpcy5fdmFsdWVzW2tleV0gPSB7XG5cdCAgICAgICAgICB2OiB2YWx1ZSxcblx0ICAgICAgICAgIGk6IHRoaXMuX2tleXMubGVuZ3RoIC0gMVxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHRoaXMuX2tleXMgPSBbXTtcblx0ICAgICAgdGhpcy5fdmFsdWVzID0ge307XG5cdCAgICB9O1xuXG5cdCAgICBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgdmFyIHZhbHVlID0gdGhpcy5fdmFsdWVzW2tleV07XG5cdCAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7IC8vIERlbGV0ZSBlbnRyeVxuXG5cdCAgICAgIGRlbGV0ZSB0aGlzLl92YWx1ZXNba2V5XTsgLy8gUmVtb3ZlIHRoZSBrZXkgZnJvbSB0aGUgb3JkZXJlZCBrZXlzIGxpc3RcblxuXHQgICAgICB0aGlzLl9rZXlzLnNwbGljZSh2YWx1ZS5pLCAxKTtcblxuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH07XG5cblx0ICAgIE1hcC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG5cdCAgICAgICAgICB2YXIga2V5ID0gc2VsZi5fa2V5c1tpbmRleCsrXTtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IFtrZXksIHNlbGYuX3ZhbHVlc1trZXldLnZdIDogdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICBkb25lOiBrZXkgIT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdHJ1ZVxuXHQgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXG5cdCAgICBNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNlbGYpIHtcblx0ICAgICAgc2VsZiA9IHNlbGYgfHwgdGhpcztcblxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2tleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5c1tpXTsgLy8gQ2FsbCB0aGUgZm9yRWFjaCBjYWxsYmFja1xuXG5cdCAgICAgICAgY2FsbGJhY2suY2FsbChzZWxmLCB0aGlzLl92YWx1ZXNba2V5XS52LCBrZXksIHNlbGYpO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1trZXldID8gdGhpcy5fdmFsdWVzW2tleV0udiA6IHVuZGVmaW5lZDtcblx0ICAgIH07XG5cblx0ICAgIE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW2tleV0gIT0gbnVsbDtcblx0ICAgIH07XG5cblx0ICAgIE1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXHQgICAgICB2YXIgaW5kZXggPSAwO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG5cdCAgICAgICAgICB2YXIga2V5ID0gc2VsZi5fa2V5c1tpbmRleCsrXTtcblx0ICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHZhbHVlOiBrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6IHVuZGVmaW5lZCxcblx0ICAgICAgICAgICAgZG9uZToga2V5ICE9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWVcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfTtcblxuXHQgICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgICAgICBpZiAodGhpcy5fdmFsdWVzW2tleV0pIHtcblx0ICAgICAgICB0aGlzLl92YWx1ZXNba2V5XS52ID0gdmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgIH0gLy8gQWRkIHRoZSBrZXkgdG8gdGhlIGxpc3Qgb2Yga2V5cyBpbiBvcmRlclxuXG5cblx0ICAgICAgdGhpcy5fa2V5cy5wdXNoKGtleSk7IC8vIEFkZCB0aGUga2V5IGFuZCB2YWx1ZSB0byB0aGUgdmFsdWVzIGRpY3Rpb25hcnkgd2l0aCBhIHBvaW50XG5cdCAgICAgIC8vIHRvIHRoZSBsb2NhdGlvbiBpbiB0aGUgb3JkZXJlZCBrZXlzIGxpc3RcblxuXG5cdCAgICAgIHRoaXMuX3ZhbHVlc1trZXldID0ge1xuXHQgICAgICAgIHY6IHZhbHVlLFxuXHQgICAgICAgIGk6IHRoaXMuX2tleXMubGVuZ3RoIC0gMVxuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cblx0ICAgIE1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICAgIHZhciBpbmRleCA9IDA7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0ICAgICAgICAgIHZhciBrZXkgPSBzZWxmLl9rZXlzW2luZGV4KytdO1xuXHQgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdmFsdWU6IGtleSAhPT0gdW5kZWZpbmVkID8gc2VsZi5fdmFsdWVzW2tleV0udiA6IHVuZGVmaW5lZCxcblx0ICAgICAgICAgICAgZG9uZToga2V5ICE9PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWVcblx0ICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfTsgLy8gTGFzdCBpc21hc3RlclxuXG5cblx0ICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCAnc2l6ZScsIHtcblx0ICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuX2tleXMubGVuZ3RoO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIG1vZHVsZS5leHBvcnRzID0gTWFwO1xuXHQgIH1cblx0fSk7XG5cdHZhciBtYXBfMSA9IG1hcC5NYXA7XG5cblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHRsb25nLnByb3RvdHlwZS50b0V4dGVuZGVkSlNPTiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdCAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWxheGVkKSByZXR1cm4gdGhpcy50b051bWJlcigpO1xuXHQgIHJldHVybiB7XG5cdCAgICAkbnVtYmVyTG9uZzogdGhpcy50b1N0cmluZygpXG5cdCAgfTtcblx0fTtcblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHRsb25nLmZyb21FeHRlbmRlZEpTT04gPSBmdW5jdGlvbiAoZG9jLCBvcHRpb25zKSB7XG5cdCAgdmFyIHJlc3VsdCA9IGxvbmcuZnJvbVN0cmluZyhkb2MuJG51bWJlckxvbmcpO1xuXHQgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCA/IHJlc3VsdC50b051bWJlcigpIDogcmVzdWx0O1xuXHR9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsb25nLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcblx0ICB2YWx1ZTogJ0xvbmcnXG5cdH0pO1xuXHR2YXIgbG9uZ18xID0gbG9uZztcblxuXHQvKipcblx0ICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBEb3VibGUgdHlwZS5cblx0ICovXG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cblx0ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXHR2YXIgRG91YmxlID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgRG91YmxlIHR5cGVcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSB0aGUgbnVtYmVyIHdlIHdhbnQgdG8gcmVwcmVzZW50IGFzIGEgZG91YmxlLlxuXHQgICAqIEByZXR1cm4ge0RvdWJsZX1cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBEb3VibGUodmFsdWUpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEb3VibGUpO1xuXG5cdCAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAqIEFjY2VzcyB0aGUgbnVtYmVyIHZhbHVlLlxuXHQgICAqXG5cdCAgICogQG1ldGhvZFxuXHQgICAqIEByZXR1cm4ge251bWJlcn0gcmV0dXJucyB0aGUgd3JhcHBlZCBkb3VibGUgbnVtYmVyLlxuXHQgICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MoRG91YmxlLCBbe1xuXHQgICAga2V5OiBcInZhbHVlT2ZcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9KU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTihvcHRpb25zKSB7XG5cdCAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCAmJiBpc0Zpbml0ZSh0aGlzLnZhbHVlKSkgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgJG51bWJlckRvdWJsZTogdGhpcy52YWx1ZS50b1N0cmluZygpXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jLCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCA/IHBhcnNlRmxvYXQoZG9jLiRudW1iZXJEb3VibGUpIDogbmV3IERvdWJsZShwYXJzZUZsb2F0KGRvYy4kbnVtYmVyRG91YmxlKSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIERvdWJsZTtcblx0fSgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb3VibGUucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuXHQgIHZhbHVlOiAnRG91YmxlJ1xuXHR9KTtcblx0dmFyIGRvdWJsZV8xID0gRG91YmxlO1xuXG5cdGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDEoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDEodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQxKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkMShDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDEoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5cdGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5cdGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5cdGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cdC8qKlxuXHQgKiBAY2xhc3Ncblx0ICogQHBhcmFtIHtudW1iZXJ9IGxvdyAgdGhlIGxvdyAoc2lnbmVkKSAzMiBiaXRzIG9mIHRoZSBUaW1lc3RhbXAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIHRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIFRpbWVzdGFtcC5cblx0ICogQHJldHVybiB7VGltZXN0YW1wfVxuXHQgKi9cblxuXG5cdHZhciBUaW1lc3RhbXAgPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uIChfTG9uZykge1xuXHQgIF9pbmhlcml0cyhUaW1lc3RhbXAsIF9Mb25nKTtcblxuXHQgIGZ1bmN0aW9uIFRpbWVzdGFtcChsb3csIGhpZ2gpIHtcblx0ICAgIHZhciBfdGhpcztcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrJDEodGhpcywgVGltZXN0YW1wKTtcblxuXHQgICAgaWYgKGxvbmdfMS5pc0xvbmcobG93KSkge1xuXHQgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUaW1lc3RhbXApLmNhbGwodGhpcywgbG93LmxvdywgbG93LmhpZ2gpKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVzdGFtcCkuY2FsbCh0aGlzLCBsb3csIGhpZ2gpKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcblx0ICB9XG5cdCAgLyoqXG5cdCAgICogUmV0dXJuIHRoZSBKU09OIHZhbHVlLlxuXHQgICAqXG5cdCAgICogQG1ldGhvZFxuXHQgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIEpTT04gcmVwcmVzZW50YXRpb24uXG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyQxKFRpbWVzdGFtcCwgW3tcblx0ICAgIGtleTogXCJ0b0pTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgJHRpbWVzdGFtcDogdGhpcy50b1N0cmluZygpXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgYSBUaW1lc3RhbXAgcmVwcmVzZW50ZWQgYnkgdGhlIGdpdmVuICgzMi1iaXQpIGludGVnZXIgdmFsdWUuXG5cdCAgICAgKlxuXHQgICAgICogQG1ldGhvZFxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIHRoZSAzMi1iaXQgaW50ZWdlciBpbiBxdWVzdGlvbi5cblx0ICAgICAqIEByZXR1cm4ge1RpbWVzdGFtcH0gdGhlIHRpbWVzdGFtcC5cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG5cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgJHRpbWVzdGFtcDoge1xuXHQgICAgICAgICAgdDogdGhpcy5oaWdoLFxuXHQgICAgICAgICAgaTogdGhpcy5sb3dcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZnJvbUludFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21JbnQodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBUaW1lc3RhbXAobG9uZ18xLmZyb21JbnQodmFsdWUpKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyBhIFRpbWVzdGFtcCByZXByZXNlbnRpbmcgdGhlIGdpdmVuIG51bWJlciB2YWx1ZSwgcHJvdmlkZWQgdGhhdCBpdCBpcyBhIGZpbml0ZSBudW1iZXIuIE90aGVyd2lzZSwgemVybyBpcyByZXR1cm5lZC5cblx0ICAgICAqXG5cdCAgICAgKiBAbWV0aG9kXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIG51bWJlciBpbiBxdWVzdGlvbi5cblx0ICAgICAqIEByZXR1cm4ge1RpbWVzdGFtcH0gdGhlIHRpbWVzdGFtcC5cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImZyb21OdW1iZXJcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKGxvbmdfMS5mcm9tTnVtYmVyKHZhbHVlKSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgYSBUaW1lc3RhbXAgZm9yIHRoZSBnaXZlbiBoaWdoIGFuZCBsb3cgYml0cy4gRWFjaCBpcyBhc3N1bWVkIHRvIHVzZSAzMiBiaXRzLlxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3dCaXRzIHRoZSBsb3cgMzItYml0cy5cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0cyB0aGUgaGlnaCAzMi1iaXRzLlxuXHQgICAgICogQHJldHVybiB7VGltZXN0YW1wfSB0aGUgdGltZXN0YW1wLlxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZnJvbUJpdHNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tQml0cyhsb3dCaXRzLCBoaWdoQml0cykge1xuXHQgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChsb3dCaXRzLCBoaWdoQml0cyk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgYSBUaW1lc3RhbXAgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLCBvcHRpb25hbGx5IHVzaW5nIHRoZSBnaXZlbiByYWRpeC5cblx0ICAgICAqXG5cdCAgICAgKiBAbWV0aG9kXG5cdCAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSB0ZXh0dWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBUaW1lc3RhbXAuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdF9yYWRpeF0gdGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4uXG5cdCAgICAgKiBAcmV0dXJuIHtUaW1lc3RhbXB9IHRoZSB0aW1lc3RhbXAuXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJmcm9tU3RyaW5nXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbVN0cmluZyhzdHIsIG9wdF9yYWRpeCkge1xuXHQgICAgICByZXR1cm4gbmV3IFRpbWVzdGFtcChsb25nXzEuZnJvbVN0cmluZyhzdHIsIG9wdF9yYWRpeCkpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBUaW1lc3RhbXAoZG9jLiR0aW1lc3RhbXAuaSwgZG9jLiR0aW1lc3RhbXAudCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFRpbWVzdGFtcDtcblx0fShsb25nXzEpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaW1lc3RhbXAucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuXHQgIHZhbHVlOiAnVGltZXN0YW1wJ1xuXHR9KTtcblx0dmFyIHRpbWVzdGFtcCA9IFRpbWVzdGFtcDtcblxuXHR2YXIgZW1wdHkgPSB7fTtcblxuXHR2YXIgZW1wdHkkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0XHRkZWZhdWx0OiBlbXB0eVxuXHR9KTtcblxuXHR2YXIgcmVxdWlyZSQkMCA9IGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UoZW1wdHkkMSk7XG5cblx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXG5cdC8qKlxuXHQgKiBOb3JtYWxpemVzIG91ciBleHBlY3RlZCBzdHJpbmdpZmllZCBmb3JtIG9mIGEgZnVuY3Rpb24gYWNyb3NzIHZlcnNpb25zIG9mIG5vZGVcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHN0cmluZ2lmeVxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyhmbikge1xuXHQgIHJldHVybiBmbi50b1N0cmluZygpLnJlcGxhY2UoJ2Z1bmN0aW9uKCcsICdmdW5jdGlvbiAoJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBpbnNlY3VyZVJhbmRvbUJ5dGVzKHNpemUpIHtcblx0ICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG5cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuXHQgICAgcmVzdWx0W2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KTtcblx0ICB9XG5cblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0dmFyIHJhbmRvbUJ5dGVzID0gaW5zZWN1cmVSYW5kb21CeXRlcztcblxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNyeXB0byAmJiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuXHQgIHJhbmRvbUJ5dGVzID0gZnVuY3Rpb24gcmFuZG9tQnl0ZXMoc2l6ZSkge1xuXHQgICAgcmV0dXJuIHdpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcblx0ICB9O1xuXHR9IGVsc2Uge1xuXHQgIHRyeSB7XG5cdCAgICByYW5kb21CeXRlcyA9IHJlcXVpcmUkJDAucmFuZG9tQnl0ZXM7XG5cdCAgfSBjYXRjaCAoZSkge30gLy8ga2VlcCB0aGUgZmFsbGJhY2tcblx0ICAvLyBOT1RFOiBpbiB0cmFuc3BpbGVkIGNhc2VzIHRoZSBhYm92ZSByZXF1aXJlIG1pZ2h0IHJldHVybiBudWxsL3VuZGVmaW5lZFxuXG5cblx0ICBpZiAocmFuZG9tQnl0ZXMgPT0gbnVsbCkge1xuXHQgICAgcmFuZG9tQnl0ZXMgPSBpbnNlY3VyZVJhbmRvbUJ5dGVzO1xuXHQgIH1cblx0fVxuXG5cdHZhciB1dGlscyA9IHtcblx0ICBub3JtYWxpemVkRnVuY3Rpb25TdHJpbmc6IG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyxcblx0ICByYW5kb21CeXRlczogcmFuZG9tQnl0ZXNcblx0fTtcblxuXHQvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblx0Ly8gYmFzZWQgb2ZmIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWZ1bmN0em9tYmllL25vZGUtcHJvY2Vzcy9ibG9iL21hc3Rlci9icm93c2VyLmpzXG5cdGZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG5cdCAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCkge1xuXHQgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG5cdH1cblxuXHR2YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG5cdHZhciBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuXG5cdGlmICh0eXBlb2YgZ2xvYmFsLnNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcblx0ICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcblx0fVxuXG5cdGlmICh0eXBlb2YgZ2xvYmFsLmNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG5cdCAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcblx0ICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuXHQgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcblx0ICB9IC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG5cblxuXHQgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuXHQgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG5cdCAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuXHQgIH1cblxuXHQgIHRyeSB7XG5cdCAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG5cdCAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuXHQgIH0gY2F0Y2ggKGUpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuXHQgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG5cdCAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG5cdCAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG5cdCAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG5cdCAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcblx0ICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICB9IC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcblxuXG5cdCAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG5cdCAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG5cdCAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG5cdCAgfVxuXG5cdCAgdHJ5IHtcblx0ICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3Ncblx0ICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICB0cnkge1xuXHQgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG5cdCAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuXHQgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cblx0ICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuXHQgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcblx0ICAgIH1cblx0ICB9XG5cdH1cblxuXHR2YXIgcXVldWUgPSBbXTtcblx0dmFyIGRyYWluaW5nID0gZmFsc2U7XG5cdHZhciBjdXJyZW50UXVldWU7XG5cdHZhciBxdWV1ZUluZGV4ID0gLTE7XG5cblx0ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuXHQgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblxuXHQgIGRyYWluaW5nID0gZmFsc2U7XG5cblx0ICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuXHQgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgIH1cblxuXHQgIGlmIChxdWV1ZS5sZW5ndGgpIHtcblx0ICAgIGRyYWluUXVldWUoKTtcblx0ICB9XG5cdH1cblxuXHRmdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuXHQgIGlmIChkcmFpbmluZykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblxuXHQgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuXHQgIGRyYWluaW5nID0gdHJ1ZTtcblx0ICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuXG5cdCAgd2hpbGUgKGxlbikge1xuXHQgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG5cdCAgICBxdWV1ZSA9IFtdO1xuXG5cdCAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG5cdCAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcblx0ICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcXVldWVJbmRleCA9IC0xO1xuXHQgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuXHQgIH1cblxuXHQgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG5cdCAgZHJhaW5pbmcgPSBmYWxzZTtcblx0ICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG5cdH1cblxuXHRmdW5jdGlvbiBuZXh0VGljayhmdW4pIHtcblx0ICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG5cblx0ICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0ICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG5cblx0ICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuXHQgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcblx0ICB9XG5cdH0gLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuXG5cdGZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuXHQgIHRoaXMuZnVuID0gZnVuO1xuXHQgIHRoaXMuYXJyYXkgPSBhcnJheTtcblx0fVxuXG5cdEl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcblx0ICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcblx0fTtcblxuXHR2YXIgdGl0bGUgPSAnYnJvd3Nlcic7XG5cdHZhciBwbGF0Zm9ybSA9ICdicm93c2VyJztcblx0dmFyIGJyb3dzZXIgPSB0cnVlO1xuXHR2YXIgZW52ID0ge307XG5cdHZhciBhcmd2ID0gW107XG5cdHZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5cblx0dmFyIHZlcnNpb25zID0ge307XG5cdHZhciByZWxlYXNlID0ge307XG5cdHZhciBjb25maWcgPSB7fTtcblxuXHRmdW5jdGlvbiBub29wKCkge31cblxuXHR2YXIgb24gPSBub29wO1xuXHR2YXIgYWRkTGlzdGVuZXIgPSBub29wO1xuXHR2YXIgb25jZSA9IG5vb3A7XG5cdHZhciBvZmYgPSBub29wO1xuXHR2YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuXHR2YXIgcmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcblx0dmFyIGVtaXQgPSBub29wO1xuXHRmdW5jdGlvbiBiaW5kaW5nKG5hbWUpIHtcblx0ICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG5cdH1cblx0ZnVuY3Rpb24gY3dkKCkge1xuXHQgIHJldHVybiAnLyc7XG5cdH1cblx0ZnVuY3Rpb24gY2hkaXIoZGlyKSB7XG5cdCAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcblx0fVxuXHRmdW5jdGlvbiB1bWFzaygpIHtcblx0ICByZXR1cm4gMDtcblx0fSAvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9rdW1hdmlzL2Jyb3dzZXItcHJvY2Vzcy1ocnRpbWUvYmxvYi9tYXN0ZXIvaW5kZXguanNcblxuXHR2YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge307XG5cblx0dmFyIHBlcmZvcm1hbmNlTm93ID0gcGVyZm9ybWFuY2Uubm93IHx8IHBlcmZvcm1hbmNlLm1vek5vdyB8fCBwZXJmb3JtYW5jZS5tc05vdyB8fCBwZXJmb3JtYW5jZS5vTm93IHx8IHBlcmZvcm1hbmNlLndlYmtpdE5vdyB8fCBmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9OyAvLyBnZW5lcmF0ZSB0aW1lc3RhbXAgb3IgZGVsdGFcblx0Ly8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuXG5cblx0ZnVuY3Rpb24gaHJ0aW1lKHByZXZpb3VzVGltZXN0YW1wKSB7XG5cdCAgdmFyIGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlTm93LmNhbGwocGVyZm9ybWFuY2UpICogMWUtMztcblx0ICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoY2xvY2t0aW1lKTtcblx0ICB2YXIgbmFub3NlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSAlIDEgKiAxZTkpO1xuXG5cdCAgaWYgKHByZXZpb3VzVGltZXN0YW1wKSB7XG5cdCAgICBzZWNvbmRzID0gc2Vjb25kcyAtIHByZXZpb3VzVGltZXN0YW1wWzBdO1xuXHQgICAgbmFub3NlY29uZHMgPSBuYW5vc2Vjb25kcyAtIHByZXZpb3VzVGltZXN0YW1wWzFdO1xuXG5cdCAgICBpZiAobmFub3NlY29uZHMgPCAwKSB7XG5cdCAgICAgIHNlY29uZHMtLTtcblx0ICAgICAgbmFub3NlY29uZHMgKz0gMWU5O1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBbc2Vjb25kcywgbmFub3NlY29uZHNdO1xuXHR9XG5cdHZhciBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuXHRmdW5jdGlvbiB1cHRpbWUoKSB7XG5cdCAgdmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcblx0ICB2YXIgZGlmID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWU7XG5cdCAgcmV0dXJuIGRpZiAvIDEwMDA7XG5cdH1cblx0dmFyIHByb2Nlc3MgPSB7XG5cdCAgbmV4dFRpY2s6IG5leHRUaWNrLFxuXHQgIHRpdGxlOiB0aXRsZSxcblx0ICBicm93c2VyOiBicm93c2VyLFxuXHQgIGVudjogZW52LFxuXHQgIGFyZ3Y6IGFyZ3YsXG5cdCAgdmVyc2lvbjogdmVyc2lvbixcblx0ICB2ZXJzaW9uczogdmVyc2lvbnMsXG5cdCAgb246IG9uLFxuXHQgIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcblx0ICBvbmNlOiBvbmNlLFxuXHQgIG9mZjogb2ZmLFxuXHQgIHJlbW92ZUxpc3RlbmVyOiByZW1vdmVMaXN0ZW5lcixcblx0ICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcblx0ICBlbWl0OiBlbWl0LFxuXHQgIGJpbmRpbmc6IGJpbmRpbmcsXG5cdCAgY3dkOiBjd2QsXG5cdCAgY2hkaXI6IGNoZGlyLFxuXHQgIHVtYXNrOiB1bWFzayxcblx0ICBocnRpbWU6IGhydGltZSxcblx0ICBwbGF0Zm9ybTogcGxhdGZvcm0sXG5cdCAgcmVsZWFzZTogcmVsZWFzZSxcblx0ICBjb25maWc6IGNvbmZpZyxcblx0ICB1cHRpbWU6IHVwdGltZVxuXHR9O1xuXG5cdHZhciBpbmhlcml0cztcblxuXHRpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcblx0ICBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuXHQgICAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcblx0ICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuXHQgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcblx0ICAgICAgY29uc3RydWN0b3I6IHtcblx0ICAgICAgICB2YWx1ZTogY3Rvcixcblx0ICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcblx0ICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblx0ICAgICAgICBjb25maWd1cmFibGU6IHRydWVcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0fSBlbHNlIHtcblx0ICBpbmhlcml0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuXHQgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG5cblx0ICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uIFRlbXBDdG9yKCkge307XG5cblx0ICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG5cdCAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuXHQgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuXHQgIH07XG5cdH1cblxuXHR2YXIgaW5oZXJpdHMkMSA9IGluaGVyaXRzO1xuXG5cdGZ1bmN0aW9uIF90eXBlb2YkMShvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkMSA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDEgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQxKG9iaik7IH1cblx0dmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5cdGZ1bmN0aW9uIGZvcm1hdChmKSB7XG5cdCAgaWYgKCFpc1N0cmluZyhmKSkge1xuXHQgICAgdmFyIG9iamVjdHMgPSBbXTtcblxuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcblx0ICB9XG5cblx0ICB2YXIgaSA9IDE7XG5cdCAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdCAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuXHQgIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uICh4KSB7XG5cdCAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcblx0ICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG5cblx0ICAgIHN3aXRjaCAoeCkge1xuXHQgICAgICBjYXNlICclcyc6XG5cdCAgICAgICAgcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuXG5cdCAgICAgIGNhc2UgJyVkJzpcblx0ICAgICAgICByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG5cblx0ICAgICAgY2FzZSAnJWonOlxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcblx0ICAgICAgICB9IGNhdGNoIChfKSB7XG5cdCAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuXHQgICAgICAgIH1cblxuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIHJldHVybiB4O1xuXHQgICAgfVxuXHQgIH0pO1xuXG5cdCAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcblx0ICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG5cdCAgICAgIHN0ciArPSAnICcgKyB4O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHN0cjtcblx0fVxuXHQvLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuXHQvLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuXG5cdGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbXNnKSB7XG5cdCAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cblx0ICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHQgIH1cblxuXHQgIHZhciB3YXJuZWQgPSBmYWxzZTtcblxuXHQgIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG5cdCAgICBpZiAoIXdhcm5lZCkge1xuXHQgICAgICB7XG5cdCAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuXHQgICAgICB9XG5cblx0ICAgICAgd2FybmVkID0gdHJ1ZTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG5cdH1cblx0dmFyIGRlYnVncyA9IHt9O1xuXHR2YXIgZGVidWdFbnZpcm9uO1xuXHRmdW5jdGlvbiBkZWJ1Z2xvZyhzZXQpIHtcblx0ICBpZiAoaXNVbmRlZmluZWQoZGVidWdFbnZpcm9uKSkgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcblx0ICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcblxuXHQgIGlmICghZGVidWdzW3NldF0pIHtcblx0ICAgIGlmIChuZXcgUmVnRXhwKCdcXFxcYicgKyBzZXQgKyAnXFxcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkge1xuXHQgICAgICB2YXIgcGlkID0gMDtcblxuXHQgICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbXNnID0gZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG5cdCAgICAgIH07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uICgpIHt9O1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBkZWJ1Z3Nbc2V0XTtcblx0fVxuXHQvKipcblx0ICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuXHQgKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cblx0ICovXG5cblx0LyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuXG5cdGZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG5cdCAgLy8gZGVmYXVsdCBvcHRpb25zXG5cdCAgdmFyIGN0eCA9IHtcblx0ICAgIHNlZW46IFtdLFxuXHQgICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3Jcblx0ICB9OyAvLyBsZWdhY3kuLi5cblxuXHQgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcblx0ICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuXG5cdCAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuXHQgICAgLy8gbGVnYWN5Li4uXG5cdCAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG5cdCAgfSBlbHNlIGlmIChvcHRzKSB7XG5cdCAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG5cdCAgICBfZXh0ZW5kKGN0eCwgb3B0cyk7XG5cdCAgfSAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5cblxuXHQgIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG5cdCAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG5cdCAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG5cdCAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuXHQgIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG5cdCAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xuXHR9IC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuXG5cdGluc3BlY3QuY29sb3JzID0ge1xuXHQgICdib2xkJzogWzEsIDIyXSxcblx0ICAnaXRhbGljJzogWzMsIDIzXSxcblx0ICAndW5kZXJsaW5lJzogWzQsIDI0XSxcblx0ICAnaW52ZXJzZSc6IFs3LCAyN10sXG5cdCAgJ3doaXRlJzogWzM3LCAzOV0sXG5cdCAgJ2dyZXknOiBbOTAsIDM5XSxcblx0ICAnYmxhY2snOiBbMzAsIDM5XSxcblx0ICAnYmx1ZSc6IFszNCwgMzldLFxuXHQgICdjeWFuJzogWzM2LCAzOV0sXG5cdCAgJ2dyZWVuJzogWzMyLCAzOV0sXG5cdCAgJ21hZ2VudGEnOiBbMzUsIDM5XSxcblx0ICAncmVkJzogWzMxLCAzOV0sXG5cdCAgJ3llbGxvdyc6IFszMywgMzldXG5cdH07IC8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuXG5cdGluc3BlY3Quc3R5bGVzID0ge1xuXHQgICdzcGVjaWFsJzogJ2N5YW4nLFxuXHQgICdudW1iZXInOiAneWVsbG93Jyxcblx0ICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuXHQgICd1bmRlZmluZWQnOiAnZ3JleScsXG5cdCAgJ251bGwnOiAnYm9sZCcsXG5cdCAgJ3N0cmluZyc6ICdncmVlbicsXG5cdCAgJ2RhdGUnOiAnbWFnZW50YScsXG5cdCAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcblx0ICAncmVnZXhwJzogJ3JlZCdcblx0fTtcblxuXHRmdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG5cdCAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuXHQgIGlmIChzdHlsZSkge1xuXHQgICAgcmV0dXJuIFwiXFx4MUJbXCIgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgKyBcIlxceDFCW1wiICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gc3RyO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG5cdCAgcmV0dXJuIHN0cjtcblx0fVxuXG5cdGZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG5cdCAgdmFyIGhhc2ggPSB7fTtcblx0ICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGlkeCkge1xuXHQgICAgaGFzaFt2YWxdID0gdHJ1ZTtcblx0ICB9KTtcblx0ICByZXR1cm4gaGFzaDtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuXHQgIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cblx0ICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcblx0ICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiYgdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJiAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcblx0ICB2YWx1ZS5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuXHQgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcblx0ICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcblxuXHQgICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG5cdCAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcmV0O1xuXHQgIH0gLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcblxuXG5cdCAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcblxuXHQgIGlmIChwcmltaXRpdmUpIHtcblx0ICAgIHJldHVybiBwcmltaXRpdmU7XG5cdCAgfSAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG5cblxuXHQgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXHQgIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG5cdCAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG5cdCAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuXHQgIH0gLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuXHQgIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG5cblxuXHQgIGlmIChpc0Vycm9yKHZhbHVlKSAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcblx0ICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG5cdCAgfSAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG5cblxuXHQgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdCAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG5cdCAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cblx0ICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcblx0ICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICB2YXIgYmFzZSA9ICcnLFxuXHQgICAgICBhcnJheSA9IGZhbHNlLFxuXHQgICAgICBicmFjZXMgPSBbJ3snLCAnfSddOyAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG5cblx0ICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcblx0ICAgIGFycmF5ID0gdHJ1ZTtcblx0ICAgIGJyYWNlcyA9IFsnWycsICddJ107XG5cdCAgfSAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcblxuXG5cdCAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG5cdCAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuXHQgICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG5cdCAgfSAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuXG5cblx0ICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG5cdCAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblx0ICB9IC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuXG5cblx0ICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuXHQgICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuXHQgIH0gLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuXG5cblx0ICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcblx0ICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG5cdCAgfVxuXG5cdCAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG5cdCAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcblx0ICB9XG5cblx0ICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuXHQgICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuXHQgICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cdCAgdmFyIG91dHB1dDtcblxuXHQgIGlmIChhcnJheSkge1xuXHQgICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuXHQgICAgfSk7XG5cdCAgfVxuXG5cdCAgY3R4LnNlZW4ucG9wKCk7XG5cdCAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG5cdCAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG5cblx0ICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG5cdCAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJykucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuXHQgICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuXHQgIH1cblxuXHQgIGlmIChpc051bWJlcih2YWx1ZSkpIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cdCAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpOyAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG5cblx0ICBpZiAoaXNOdWxsKHZhbHVlKSkgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG5cdCAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcblx0ICB2YXIgb3V0cHV0ID0gW107XG5cblx0ICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuXHQgICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG5cdCAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIFN0cmluZyhpKSwgdHJ1ZSkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgb3V0cHV0LnB1c2goJycpO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcblx0ICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCB0cnVlKSk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgcmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcblx0ICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuXHQgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHtcblx0ICAgIHZhbHVlOiB2YWx1ZVtrZXldXG5cdCAgfTtcblxuXHQgIGlmIChkZXNjLmdldCkge1xuXHQgICAgaWYgKGRlc2Muc2V0KSB7XG5cdCAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgaWYgKGRlc2Muc2V0KSB7XG5cdCAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuXHQgICAgbmFtZSA9ICdbJyArIGtleSArICddJztcblx0ICB9XG5cblx0ICBpZiAoIXN0cikge1xuXHQgICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG5cdCAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuXHQgICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuXHQgICAgICAgIGlmIChhcnJheSkge1xuXHQgICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuXHQgICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG5cdCAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcblx0ICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG5cdCAgICAgIHJldHVybiBzdHI7XG5cdCAgICB9XG5cblx0ICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG5cblx0ICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuXHQgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcblx0ICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIikucmVwbGFjZSgvXFxcXFwiL2csICdcIicpLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG5cdCAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcblx0ICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VyKSB7XG5cdCAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIDtcblx0ICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcblx0ICB9LCAwKTtcblxuXHQgIGlmIChsZW5ndGggPiA2MCkge1xuXHQgICAgcmV0dXJuIGJyYWNlc1swXSArIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgKyAnICcgKyBvdXRwdXQuam9pbignLFxcbiAgJykgKyAnICcgKyBicmFjZXNbMV07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcblx0fSAvLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcblx0Ly8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cblxuXHRmdW5jdGlvbiBpc0FycmF5KGFyKSB7XG5cdCAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xuXHR9XG5cdGZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xuXHR9XG5cdGZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcblx0ICByZXR1cm4gYXJnID09PSBudWxsO1xuXHR9XG5cdGZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuXHQgIHJldHVybiBhcmcgPT0gbnVsbDtcblx0fVxuXHRmdW5jdGlvbiBpc051bWJlcihhcmcpIHtcblx0ICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG5cdH1cblx0ZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xuXHR9XG5cdGZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuXHQgIHJldHVybiBfdHlwZW9mJDEoYXJnKSA9PT0gJ3N5bWJvbCc7XG5cdH1cblx0ZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xuXHR9XG5cdGZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xuXHR9XG5cdGZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuXHQgIHJldHVybiBfdHlwZW9mJDEoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xuXHR9XG5cdGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG5cdH1cblx0ZnVuY3Rpb24gaXNFcnJvcihlKSB7XG5cdCAgcmV0dXJuIGlzT2JqZWN0KGUpICYmIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xuXHR9XG5cdGZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG5cdCAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG5cdH1cblx0ZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG5cdCAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHwgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwgX3R5cGVvZiQxKGFyZykgPT09ICdzeW1ib2wnIHx8IC8vIEVTNiBzeW1ib2xcblx0ICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcblx0fVxuXHRmdW5jdGlvbiBpc0J1ZmZlcihtYXliZUJ1Zikge1xuXHQgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIobWF5YmVCdWYpO1xuXHR9XG5cblx0ZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG5cdH1cblxuXHRmdW5jdGlvbiBwYWQobikge1xuXHQgIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xuXHR9XG5cblx0dmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXTsgLy8gMjYgRmViIDE2OjE5OjM0XG5cblx0ZnVuY3Rpb24gdGltZXN0YW1wJDEoKSB7XG5cdCAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuXHQgIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLCBwYWQoZC5nZXRNaW51dGVzKCkpLCBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG5cdCAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcblx0fSAvLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5cblxuXHRmdW5jdGlvbiBsb2coKSB7XG5cdCAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAkMSgpLCBmb3JtYXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG5cdH1cblx0ZnVuY3Rpb24gX2V4dGVuZChvcmlnaW4sIGFkZCkge1xuXHQgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3Rcblx0ICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblx0ICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG5cdCAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcblxuXHQgIHdoaWxlIChpLS0pIHtcblx0ICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcblx0ICB9XG5cblx0ICByZXR1cm4gb3JpZ2luO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuXHR9XG5cblx0dmFyIHV0aWwgPSB7XG5cdCAgaW5oZXJpdHM6IGluaGVyaXRzJDEsXG5cdCAgX2V4dGVuZDogX2V4dGVuZCxcblx0ICBsb2c6IGxvZyxcblx0ICBpc0J1ZmZlcjogaXNCdWZmZXIsXG5cdCAgaXNQcmltaXRpdmU6IGlzUHJpbWl0aXZlLFxuXHQgIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG5cdCAgaXNFcnJvcjogaXNFcnJvcixcblx0ICBpc0RhdGU6IGlzRGF0ZSxcblx0ICBpc09iamVjdDogaXNPYmplY3QsXG5cdCAgaXNSZWdFeHA6IGlzUmVnRXhwLFxuXHQgIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcblx0ICBpc1N5bWJvbDogaXNTeW1ib2wsXG5cdCAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuXHQgIGlzTnVtYmVyOiBpc051bWJlcixcblx0ICBpc051bGxPclVuZGVmaW5lZDogaXNOdWxsT3JVbmRlZmluZWQsXG5cdCAgaXNOdWxsOiBpc051bGwsXG5cdCAgaXNCb29sZWFuOiBpc0Jvb2xlYW4sXG5cdCAgaXNBcnJheTogaXNBcnJheSxcblx0ICBpbnNwZWN0OiBpbnNwZWN0LFxuXHQgIGRlcHJlY2F0ZTogZGVwcmVjYXRlLFxuXHQgIGZvcm1hdDogZm9ybWF0LFxuXHQgIGRlYnVnbG9nOiBkZWJ1Z2xvZ1xuXHR9O1xuXG5cdHZhciB1dGlsJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdFx0Zm9ybWF0OiBmb3JtYXQsXG5cdFx0ZGVwcmVjYXRlOiBkZXByZWNhdGUsXG5cdFx0ZGVidWdsb2c6IGRlYnVnbG9nLFxuXHRcdGluc3BlY3Q6IGluc3BlY3QsXG5cdFx0aXNBcnJheTogaXNBcnJheSxcblx0XHRpc0Jvb2xlYW46IGlzQm9vbGVhbixcblx0XHRpc051bGw6IGlzTnVsbCxcblx0XHRpc051bGxPclVuZGVmaW5lZDogaXNOdWxsT3JVbmRlZmluZWQsXG5cdFx0aXNOdW1iZXI6IGlzTnVtYmVyLFxuXHRcdGlzU3RyaW5nOiBpc1N0cmluZyxcblx0XHRpc1N5bWJvbDogaXNTeW1ib2wsXG5cdFx0aXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuXHRcdGlzUmVnRXhwOiBpc1JlZ0V4cCxcblx0XHRpc09iamVjdDogaXNPYmplY3QsXG5cdFx0aXNEYXRlOiBpc0RhdGUsXG5cdFx0aXNFcnJvcjogaXNFcnJvcixcblx0XHRpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuXHRcdGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcblx0XHRpc0J1ZmZlcjogaXNCdWZmZXIsXG5cdFx0bG9nOiBsb2csXG5cdFx0aW5oZXJpdHM6IGluaGVyaXRzJDEsXG5cdFx0X2V4dGVuZDogX2V4dGVuZCxcblx0XHRkZWZhdWx0OiB1dGlsXG5cdH0pO1xuXG5cdHZhciB1dGlsJDIgPSBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlKHV0aWwkMSk7XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDIoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDIodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQyKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkMihDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDIoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblx0dmFyIEJ1ZmZlciQxID0gYnVmZmVyLkJ1ZmZlcjtcblx0dmFyIHJhbmRvbUJ5dGVzJDEgPSB1dGlscy5yYW5kb21CeXRlcztcblx0dmFyIGRlcHJlY2F0ZSQxID0gdXRpbCQyLmRlcHJlY2F0ZTsgLy8gY29uc3RhbnRzXG5cblx0dmFyIFBST0NFU1NfVU5JUVVFID0gcmFuZG9tQnl0ZXMkMSg1KTsgLy8gUmVndWxhciBleHByZXNzaW9uIHRoYXQgY2hlY2tzIGZvciBoZXggdmFsdWVcblxuXHR2YXIgY2hlY2tGb3JIZXhSZWdFeHAgPSBuZXcgUmVnRXhwKCdeWzAtOWEtZkEtRl17MjR9JCcpO1xuXHR2YXIgaGFzQnVmZmVyVHlwZSA9IGZhbHNlOyAvLyBDaGVjayBpZiBidWZmZXIgZXhpc3RzXG5cblx0dHJ5IHtcblx0ICBpZiAoQnVmZmVyJDEgJiYgQnVmZmVyJDEuZnJvbSkgaGFzQnVmZmVyVHlwZSA9IHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHQgIGhhc0J1ZmZlclR5cGUgPSBmYWxzZTtcblx0fSAvLyBQcmVjb21wdXRlZCBoZXggdGFibGUgZW5hYmxlcyBzcGVlZHkgaGV4IHN0cmluZyBjb252ZXJzaW9uXG5cblxuXHR2YXIgaGV4VGFibGUgPSBbXTtcblxuXHRmb3IgKHZhciBfaSA9IDA7IF9pIDwgMjU2OyBfaSsrKSB7XG5cdCAgaGV4VGFibGVbX2ldID0gKF9pIDw9IDE1ID8gJzAnIDogJycpICsgX2kudG9TdHJpbmcoMTYpO1xuXHR9IC8vIExvb2t1cCB0YWJsZXNcblxuXG5cdHZhciBkZWNvZGVMb29rdXAgPSBbXTtcblx0dmFyIGkgPSAwO1xuXG5cdHdoaWxlIChpIDwgMTApIHtcblx0ICBkZWNvZGVMb29rdXBbMHgzMCArIGldID0gaSsrO1xuXHR9XG5cblx0d2hpbGUgKGkgPCAxNikge1xuXHQgIGRlY29kZUxvb2t1cFsweDQxIC0gMTAgKyBpXSA9IGRlY29kZUxvb2t1cFsweDYxIC0gMTAgKyBpXSA9IGkrKztcblx0fVxuXG5cdHZhciBfQnVmZmVyID0gQnVmZmVyJDE7XG5cblx0ZnVuY3Rpb24gY29udmVydFRvSGV4KGJ5dGVzKSB7XG5cdCAgcmV0dXJuIGJ5dGVzLnRvU3RyaW5nKCdoZXgnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1ha2VPYmplY3RJZEVycm9yKGludmFsaWRTdHJpbmcsIGluZGV4KSB7XG5cdCAgdmFyIGludmFsaWRDaGFyYWN0ZXIgPSBpbnZhbGlkU3RyaW5nW2luZGV4XTtcblx0ICByZXR1cm4gbmV3IFR5cGVFcnJvcihcIk9iamVjdElkIHN0cmluZyBcXFwiXCIuY29uY2F0KGludmFsaWRTdHJpbmcsIFwiXFxcIiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlciBcXFwiXCIpLmNvbmNhdChpbnZhbGlkQ2hhcmFjdGVyLCBcIlxcXCIgd2l0aCBjaGFyYWN0ZXIgY29kZSAoXCIpLmNvbmNhdChpbnZhbGlkU3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpLCBcIikuIEFsbCBjaGFyYWN0ZXIgY29kZXMgZm9yIGEgbm9uLWhleCBzdHJpbmcgbXVzdCBiZSBsZXNzIHRoYW4gMjU2LlwiKSk7XG5cdH1cblx0LyoqXG5cdCAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gT2JqZWN0SWQgdHlwZS5cblx0ICovXG5cblxuXHR2YXIgT2JqZWN0SWQgPVxuXHQvKiNfX1BVUkVfXyovXG5cdGZ1bmN0aW9uICgpIHtcblx0ICAvKipcblx0ICAgKiBDcmVhdGUgYW4gT2JqZWN0SWQgdHlwZVxuXHQgICAqXG5cdCAgICogQHBhcmFtIHsoc3RyaW5nfEJ1ZmZlcnxudW1iZXIpfSBpZCBDYW4gYmUgYSAyNCBieXRlIGhleCBzdHJpbmcsIDEyIGJ5dGUgYmluYXJ5IEJ1ZmZlciwgb3IgYSBOdW1iZXIuXG5cdCAgICogQHByb3BlcnR5IHtudW1iZXJ9IGdlbmVyYXRpb25UaW1lIFRoZSBnZW5lcmF0aW9uIHRpbWUgb2YgdGhpcyBPYmplY3RJZCBpbnN0YW5jZVxuXHQgICAqIEByZXR1cm4ge09iamVjdElkfSBpbnN0YW5jZSBvZiBPYmplY3RJZC5cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBPYmplY3RJZChpZCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrJDIodGhpcywgT2JqZWN0SWQpO1xuXG5cdCAgICAvLyBEdWNrLXR5cGluZyB0byBzdXBwb3J0IE9iamVjdElkIGZyb20gZGlmZmVyZW50IG5wbSBwYWNrYWdlc1xuXHQgICAgaWYgKGlkIGluc3RhbmNlb2YgT2JqZWN0SWQpIHJldHVybiBpZDsgLy8gVGhlIG1vc3QgY29tbW9uIHVzZWNhc2UgKGJsYW5rIGlkLCBuZXcgb2JqZWN0SWQgaW5zdGFuY2UpXG5cblx0ICAgIGlmIChpZCA9PSBudWxsIHx8IHR5cGVvZiBpZCA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgaWRcblx0ICAgICAgdGhpcy5pZCA9IE9iamVjdElkLmdlbmVyYXRlKGlkKTsgLy8gSWYgd2UgYXJlIGNhY2hpbmcgdGhlIGhleCBzdHJpbmdcblxuXHQgICAgICBpZiAoT2JqZWN0SWQuY2FjaGVIZXhTdHJpbmcpIHRoaXMuX19pZCA9IHRoaXMudG9TdHJpbmcoJ2hleCcpOyAvLyBSZXR1cm4gdGhlIG9iamVjdFxuXG5cdCAgICAgIHJldHVybjtcblx0ICAgIH0gLy8gQ2hlY2sgaWYgdGhlIHBhc3NlZCBpbiBpZCBpcyB2YWxpZFxuXG5cblx0ICAgIHZhciB2YWxpZCA9IE9iamVjdElkLmlzVmFsaWQoaWQpOyAvLyBUaHJvdyBhbiBlcnJvciBpZiBpdCdzIG5vdCBhIHZhbGlkIHNldHVwXG5cblx0ICAgIGlmICghdmFsaWQgJiYgaWQgIT0gbnVsbCkge1xuXHQgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBwYXNzZWQgaW4gbXVzdCBiZSBhIHNpbmdsZSBTdHJpbmcgb2YgMTIgYnl0ZXMgb3IgYSBzdHJpbmcgb2YgMjQgaGV4IGNoYXJhY3RlcnMnKTtcblx0ICAgIH0gZWxzZSBpZiAodmFsaWQgJiYgdHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJiBpZC5sZW5ndGggPT09IDI0ICYmIGhhc0J1ZmZlclR5cGUpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZChCdWZmZXIkMS5mcm9tKGlkLCAnaGV4JykpO1xuXHQgICAgfSBlbHNlIGlmICh2YWxpZCAmJiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnICYmIGlkLmxlbmd0aCA9PT0gMjQpIHtcblx0ICAgICAgcmV0dXJuIE9iamVjdElkLmNyZWF0ZUZyb21IZXhTdHJpbmcoaWQpO1xuXHQgICAgfSBlbHNlIGlmIChpZCAhPSBudWxsICYmIGlkLmxlbmd0aCA9PT0gMTIpIHtcblx0ICAgICAgLy8gYXNzdW1lIDEyIGJ5dGUgc3RyaW5nXG5cdCAgICAgIHRoaXMuaWQgPSBpZDtcblx0ICAgIH0gZWxzZSBpZiAoaWQgIT0gbnVsbCAmJiBpZC50b0hleFN0cmluZykge1xuXHQgICAgICAvLyBEdWNrLXR5cGluZyB0byBzdXBwb3J0IE9iamVjdElkIGZyb20gZGlmZmVyZW50IG5wbSBwYWNrYWdlc1xuXHQgICAgICByZXR1cm4gT2JqZWN0SWQuY3JlYXRlRnJvbUhleFN0cmluZyhpZC50b0hleFN0cmluZygpKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IHBhc3NlZCBpbiBtdXN0IGJlIGEgc2luZ2xlIFN0cmluZyBvZiAxMiBieXRlcyBvciBhIHN0cmluZyBvZiAyNCBoZXggY2hhcmFjdGVycycpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoT2JqZWN0SWQuY2FjaGVIZXhTdHJpbmcpIHRoaXMuX19pZCA9IHRoaXMudG9TdHJpbmcoJ2hleCcpO1xuXHQgIH1cblx0ICAvKipcblx0ICAgKiBSZXR1cm4gdGhlIE9iamVjdElkIGlkIGFzIGEgMjQgYnl0ZSBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uXG5cdCAgICpcblx0ICAgKiBAbWV0aG9kXG5cdCAgICogQHJldHVybiB7c3RyaW5nfSByZXR1cm4gdGhlIDI0IGJ5dGUgaGV4IHN0cmluZyByZXByZXNlbnRhdGlvbi5cblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzJDIoT2JqZWN0SWQsIFt7XG5cdCAgICBrZXk6IFwidG9IZXhTdHJpbmdcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0hleFN0cmluZygpIHtcblx0ICAgICAgaWYgKE9iamVjdElkLmNhY2hlSGV4U3RyaW5nICYmIHRoaXMuX19pZCkgcmV0dXJuIHRoaXMuX19pZDtcblx0ICAgICAgdmFyIGhleFN0cmluZyA9ICcnO1xuXG5cdCAgICAgIGlmICghdGhpcy5pZCB8fCAhdGhpcy5pZC5sZW5ndGgpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIE9iamVjdElkLCBPYmplY3RJZC5pZCBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBhIEJ1ZmZlciwgYnV0IGlzIFsnICsgSlNPTi5zdHJpbmdpZnkodGhpcy5pZCkgKyAnXScpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHRoaXMuaWQgaW5zdGFuY2VvZiBfQnVmZmVyKSB7XG5cdCAgICAgICAgaGV4U3RyaW5nID0gY29udmVydFRvSGV4KHRoaXMuaWQpO1xuXHQgICAgICAgIGlmIChPYmplY3RJZC5jYWNoZUhleFN0cmluZykgdGhpcy5fX2lkID0gaGV4U3RyaW5nO1xuXHQgICAgICAgIHJldHVybiBoZXhTdHJpbmc7XG5cdCAgICAgIH1cblxuXHQgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB0aGlzLmlkLmxlbmd0aDsgX2kyKyspIHtcblx0ICAgICAgICB2YXIgaGV4Q2hhciA9IGhleFRhYmxlW3RoaXMuaWQuY2hhckNvZGVBdChfaTIpXTtcblxuXHQgICAgICAgIGlmICh0eXBlb2YgaGV4Q2hhciAhPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgIHRocm93IG1ha2VPYmplY3RJZEVycm9yKHRoaXMuaWQsIF9pMik7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaGV4U3RyaW5nICs9IGhleENoYXI7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoT2JqZWN0SWQuY2FjaGVIZXhTdHJpbmcpIHRoaXMuX19pZCA9IGhleFN0cmluZztcblx0ICAgICAgcmV0dXJuIGhleFN0cmluZztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogVXBkYXRlIHRoZSBPYmplY3RJZCBpbmRleCB1c2VkIGluIGdlbmVyYXRpbmcgbmV3IE9iamVjdElkJ3Mgb24gdGhlIGRyaXZlclxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEByZXR1cm4ge251bWJlcn0gcmV0dXJucyBuZXh0IGluZGV4IHZhbHVlLlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9TdHJpbmdcIixcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDb252ZXJ0cyB0aGUgaWQgaW50byBhIDI0IGJ5dGUgaGV4IHN0cmluZyBmb3IgcHJpbnRpbmdcblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IFRoZSBCdWZmZXIgdG9TdHJpbmcgZm9ybWF0IHBhcmFtZXRlci5cblx0ICAgICAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJuIHRoZSAyNCBieXRlIGhleCBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG5cdCAgICAgKiBAaWdub3JlXG5cdCAgICAgKi9cblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhmb3JtYXQpIHtcblx0ICAgICAgLy8gSXMgdGhlIGlkIGEgYnVmZmVyIHRoZW4gdXNlIHRoZSBidWZmZXIgdG9TdHJpbmcgbWV0aG9kIHRvIHJldHVybiB0aGUgZm9ybWF0XG5cdCAgICAgIGlmICh0aGlzLmlkICYmIHRoaXMuaWQuY29weSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmlkLnRvU3RyaW5nKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnID8gZm9ybWF0IDogJ2hleCcpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRoaXMudG9IZXhTdHJpbmcoKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ29udmVydHMgdG8gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7U3RyaW5nfSByZXR1cm4gdGhlIDI0IGJ5dGUgaGV4IHN0cmluZyByZXByZXNlbnRhdGlvbi5cblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG9IZXhTdHJpbmcoKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ29tcGFyZXMgdGhlIGVxdWFsaXR5IG9mIHRoaXMgT2JqZWN0SWQgd2l0aCBgb3RoZXJJRGAuXG5cdCAgICAgKlxuXHQgICAgICogQG1ldGhvZFxuXHQgICAgICogQHBhcmFtIHtvYmplY3R9IG90aGVySWQgT2JqZWN0SWQgaW5zdGFuY2UgdG8gY29tcGFyZSBhZ2FpbnN0LlxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn0gdGhlIHJlc3VsdCBvZiBjb21wYXJpbmcgdHdvIE9iamVjdElkJ3Ncblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImVxdWFsc1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcklkKSB7XG5cdCAgICAgIGlmIChvdGhlcklkIGluc3RhbmNlb2YgT2JqZWN0SWQpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpID09PSBvdGhlcklkLnRvU3RyaW5nKCk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIG90aGVySWQgPT09ICdzdHJpbmcnICYmIE9iamVjdElkLmlzVmFsaWQob3RoZXJJZCkgJiYgb3RoZXJJZC5sZW5ndGggPT09IDEyICYmIHRoaXMuaWQgaW5zdGFuY2VvZiBfQnVmZmVyKSB7XG5cdCAgICAgICAgcmV0dXJuIG90aGVySWQgPT09IHRoaXMuaWQudG9TdHJpbmcoJ2JpbmFyeScpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHR5cGVvZiBvdGhlcklkID09PSAnc3RyaW5nJyAmJiBPYmplY3RJZC5pc1ZhbGlkKG90aGVySWQpICYmIG90aGVySWQubGVuZ3RoID09PSAyNCkge1xuXHQgICAgICAgIHJldHVybiBvdGhlcklkLnRvTG93ZXJDYXNlKCkgPT09IHRoaXMudG9IZXhTdHJpbmcoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0eXBlb2Ygb3RoZXJJZCA9PT0gJ3N0cmluZycgJiYgT2JqZWN0SWQuaXNWYWxpZChvdGhlcklkKSAmJiBvdGhlcklkLmxlbmd0aCA9PT0gMTIpIHtcblx0ICAgICAgICByZXR1cm4gb3RoZXJJZCA9PT0gdGhpcy5pZDtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChvdGhlcklkICE9IG51bGwgJiYgKG90aGVySWQgaW5zdGFuY2VvZiBPYmplY3RJZCB8fCBvdGhlcklkLnRvSGV4U3RyaW5nKSkge1xuXHQgICAgICAgIHJldHVybiBvdGhlcklkLnRvSGV4U3RyaW5nKCkgPT09IHRoaXMudG9IZXhTdHJpbmcoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogUmV0dXJucyB0aGUgZ2VuZXJhdGlvbiBkYXRlIChhY2N1cmF0ZSB1cCB0byB0aGUgc2Vjb25kKSB0aGF0IHRoaXMgSUQgd2FzIGdlbmVyYXRlZC5cblx0ICAgICAqXG5cdCAgICAgKiBAbWV0aG9kXG5cdCAgICAgKiBAcmV0dXJuIHtEYXRlfSB0aGUgZ2VuZXJhdGlvbiBkYXRlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJnZXRUaW1lc3RhbXBcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaW1lc3RhbXAoKSB7XG5cdCAgICAgIHZhciB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuXHQgICAgICB2YXIgdGltZSA9IHRoaXMuaWQucmVhZFVJbnQzMkJFKDApO1xuXHQgICAgICB0aW1lc3RhbXAuc2V0VGltZShNYXRoLmZsb29yKHRpbWUpICogMTAwMCk7XG5cdCAgICAgIHJldHVybiB0aW1lc3RhbXA7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG5cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG5cdCAgICAgIGlmICh0aGlzLnRvSGV4U3RyaW5nKSByZXR1cm4ge1xuXHQgICAgICAgICRvaWQ6IHRoaXMudG9IZXhTdHJpbmcoKVxuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgICRvaWQ6IHRoaXMudG9TdHJpbmcoJ2hleCcpXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZ2V0SW5jXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW5jKCkge1xuXHQgICAgICByZXR1cm4gT2JqZWN0SWQuaW5kZXggPSAoT2JqZWN0SWQuaW5kZXggKyAxKSAlIDB4ZmZmZmZmO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBHZW5lcmF0ZSBhIDEyIGJ5dGUgaWQgYnVmZmVyIHVzZWQgaW4gT2JqZWN0SWQnc1xuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZV0gb3B0aW9uYWwgcGFyYW1ldGVyIGFsbG93aW5nIHRvIHBhc3MgaW4gYSBzZWNvbmQgYmFzZWQgdGltZXN0YW1wLlxuXHQgICAgICogQHJldHVybiB7QnVmZmVyfSByZXR1cm4gdGhlIDEyIGJ5dGUgaWQgYnVmZmVyIHN0cmluZy5cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImdlbmVyYXRlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUodGltZSkge1xuXHQgICAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aW1lKSB7XG5cdCAgICAgICAgdGltZSA9IH5+KERhdGUubm93KCkgLyAxMDAwKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBpbmMgPSBPYmplY3RJZC5nZXRJbmMoKTtcblx0ICAgICAgdmFyIGJ1ZmZlciQkMSA9IEJ1ZmZlciQxLmFsbG9jKDEyKTsgLy8gNC1ieXRlIHRpbWVzdGFtcFxuXG5cdCAgICAgIGJ1ZmZlciQkMVszXSA9IHRpbWUgJiAweGZmO1xuXHQgICAgICBidWZmZXIkJDFbMl0gPSB0aW1lID4+IDggJiAweGZmO1xuXHQgICAgICBidWZmZXIkJDFbMV0gPSB0aW1lID4+IDE2ICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxWzBdID0gdGltZSA+PiAyNCAmIDB4ZmY7IC8vIDUtYnl0ZSBwcm9jZXNzIHVuaXF1ZVxuXG5cdCAgICAgIGJ1ZmZlciQkMVs0XSA9IFBST0NFU1NfVU5JUVVFWzBdO1xuXHQgICAgICBidWZmZXIkJDFbNV0gPSBQUk9DRVNTX1VOSVFVRVsxXTtcblx0ICAgICAgYnVmZmVyJCQxWzZdID0gUFJPQ0VTU19VTklRVUVbMl07XG5cdCAgICAgIGJ1ZmZlciQkMVs3XSA9IFBST0NFU1NfVU5JUVVFWzNdO1xuXHQgICAgICBidWZmZXIkJDFbOF0gPSBQUk9DRVNTX1VOSVFVRVs0XTsgLy8gMy1ieXRlIGNvdW50ZXJcblxuXHQgICAgICBidWZmZXIkJDFbMTFdID0gaW5jICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxWzEwXSA9IGluYyA+PiA4ICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxWzldID0gaW5jID4+IDE2ICYgMHhmZjtcblx0ICAgICAgcmV0dXJuIGJ1ZmZlciQkMTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiY3JlYXRlUGtcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVQaygpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZCgpO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBDcmVhdGVzIGFuIE9iamVjdElkIGZyb20gYSBzZWNvbmQgYmFzZWQgbnVtYmVyLCB3aXRoIHRoZSByZXN0IG9mIHRoZSBPYmplY3RJZCB6ZXJvZWQgb3V0LiBVc2VkIGZvciBjb21wYXJpc29ucyBvciBzb3J0aW5nIHRoZSBPYmplY3RJZC5cblx0ICAgICAqXG5cdCAgICAgKiBAbWV0aG9kXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZSBhbiBpbnRlZ2VyIG51bWJlciByZXByZXNlbnRpbmcgYSBudW1iZXIgb2Ygc2Vjb25kcy5cblx0ICAgICAqIEByZXR1cm4ge09iamVjdElkfSByZXR1cm4gdGhlIGNyZWF0ZWQgT2JqZWN0SWRcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcImNyZWF0ZUZyb21UaW1lXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRnJvbVRpbWUodGltZSkge1xuXHQgICAgICB2YXIgYnVmZmVyJCQxID0gQnVmZmVyJDEuZnJvbShbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0pOyAvLyBFbmNvZGUgdGltZSBpbnRvIGZpcnN0IDQgYnl0ZXNcblxuXHQgICAgICBidWZmZXIkJDFbM10gPSB0aW1lICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxWzJdID0gdGltZSA+PiA4ICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxWzFdID0gdGltZSA+PiAxNiAmIDB4ZmY7XG5cdCAgICAgIGJ1ZmZlciQkMVswXSA9IHRpbWUgPj4gMjQgJiAweGZmOyAvLyBSZXR1cm4gdGhlIG5ldyBvYmplY3RJZFxuXG5cdCAgICAgIHJldHVybiBuZXcgT2JqZWN0SWQoYnVmZmVyJCQxKTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlcyBhbiBPYmplY3RJZCBmcm9tIGEgaGV4IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBPYmplY3RJZC5cblx0ICAgICAqXG5cdCAgICAgKiBAbWV0aG9kXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyaW5nIGNyZWF0ZSBhIE9iamVjdElkIGZyb20gYSBwYXNzZWQgaW4gMjQgYnl0ZSBoZXhzdHJpbmcuXG5cdCAgICAgKiBAcmV0dXJuIHtPYmplY3RJZH0gcmV0dXJuIHRoZSBjcmVhdGVkIE9iamVjdElkXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJjcmVhdGVGcm9tSGV4U3RyaW5nXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRnJvbUhleFN0cmluZyhzdHJpbmcpIHtcblx0ICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgaXQncyBub3QgYSB2YWxpZCBzZXR1cFxuXHQgICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3RyaW5nICE9IG51bGwgJiYgc3RyaW5nLmxlbmd0aCAhPT0gMjQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBwYXNzZWQgaW4gbXVzdCBiZSBhIHNpbmdsZSBTdHJpbmcgb2YgMTIgYnl0ZXMgb3IgYSBzdHJpbmcgb2YgMjQgaGV4IGNoYXJhY3RlcnMnKTtcblx0ICAgICAgfSAvLyBVc2UgQnVmZmVyLmZyb20gbWV0aG9kIGlmIGF2YWlsYWJsZVxuXG5cblx0ICAgICAgaWYgKGhhc0J1ZmZlclR5cGUpIHJldHVybiBuZXcgT2JqZWN0SWQoQnVmZmVyJDEuZnJvbShzdHJpbmcsICdoZXgnKSk7IC8vIENhbGN1bGF0ZSBsZW5ndGhzXG5cblx0ICAgICAgdmFyIGFycmF5ID0gbmV3IF9CdWZmZXIoMTIpO1xuXHQgICAgICB2YXIgbiA9IDA7XG5cdCAgICAgIHZhciBpID0gMDtcblxuXHQgICAgICB3aGlsZSAoaSA8IDI0KSB7XG5cdCAgICAgICAgYXJyYXlbbisrXSA9IGRlY29kZUxvb2t1cFtzdHJpbmcuY2hhckNvZGVBdChpKyspXSA8PCA0IHwgZGVjb2RlTG9va3VwW3N0cmluZy5jaGFyQ29kZUF0KGkrKyldO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIG5ldyBPYmplY3RJZChhcnJheSk7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIENoZWNrcyBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgYnNvbiBPYmplY3RJZFxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGJzb24gT2JqZWN0SWQsIHJldHVybiBmYWxzZSBvdGhlcndpc2UuXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpc1ZhbGlkXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaXNWYWxpZChpZCkge1xuXHQgICAgICBpZiAoaWQgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHJldHVybiBpZC5sZW5ndGggPT09IDEyIHx8IGlkLmxlbmd0aCA9PT0gMjQgJiYgY2hlY2tGb3JIZXhSZWdFeHAudGVzdChpZCk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoaWQgaW5zdGFuY2VvZiBPYmplY3RJZCkge1xuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGlkIGluc3RhbmNlb2YgX0J1ZmZlciAmJiBpZC5sZW5ndGggPT09IDEyKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH0gLy8gRHVjay1UeXBpbmcgZGV0ZWN0aW9uIG9mIE9iamVjdElkIGxpa2Ugb2JqZWN0c1xuXG5cblx0ICAgICAgaWYgKGlkLnRvSGV4U3RyaW5nKSB7XG5cdCAgICAgICAgcmV0dXJuIGlkLmlkLmxlbmd0aCA9PT0gMTIgfHwgaWQuaWQubGVuZ3RoID09PSAyNCAmJiBjaGVja0ZvckhleFJlZ0V4cC50ZXN0KGlkLmlkKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jKSB7XG5cdCAgICAgIHJldHVybiBuZXcgT2JqZWN0SWQoZG9jLiRvaWQpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBPYmplY3RJZDtcblx0fSgpOyAvLyBEZXByZWNhdGVkIG1ldGhvZHNcblxuXG5cdE9iamVjdElkLmdldF9pbmMgPSBkZXByZWNhdGUkMShmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdElkLmdldEluYygpO1xuXHR9LCAnUGxlYXNlIHVzZSB0aGUgc3RhdGljIGBPYmplY3RJZC5nZXRJbmMoKWAgaW5zdGVhZCcpO1xuXHRPYmplY3RJZC5wcm90b3R5cGUuZ2V0X2luYyA9IGRlcHJlY2F0ZSQxKGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gT2JqZWN0SWQuZ2V0SW5jKCk7XG5cdH0sICdQbGVhc2UgdXNlIHRoZSBzdGF0aWMgYE9iamVjdElkLmdldEluYygpYCBpbnN0ZWFkJyk7XG5cdE9iamVjdElkLnByb3RvdHlwZS5nZXRJbmMgPSBkZXByZWNhdGUkMShmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdElkLmdldEluYygpO1xuXHR9LCAnUGxlYXNlIHVzZSB0aGUgc3RhdGljIGBPYmplY3RJZC5nZXRJbmMoKWAgaW5zdGVhZCcpO1xuXHRPYmplY3RJZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBkZXByZWNhdGUkMShmdW5jdGlvbiAodGltZSkge1xuXHQgIHJldHVybiBPYmplY3RJZC5nZW5lcmF0ZSh0aW1lKTtcblx0fSwgJ1BsZWFzZSB1c2UgdGhlIHN0YXRpYyBgT2JqZWN0SWQuZ2VuZXJhdGUodGltZSlgIGluc3RlYWQnKTtcblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdElkLnByb3RvdHlwZSwgJ2dlbmVyYXRpb25UaW1lJywge1xuXHQgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG5cdCAgICByZXR1cm4gdGhpcy5pZFszXSB8IHRoaXMuaWRbMl0gPDwgOCB8IHRoaXMuaWRbMV0gPDwgMTYgfCB0aGlzLmlkWzBdIDw8IDI0O1xuXHQgIH0sXG5cdCAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcblx0ICAgIC8vIEVuY29kZSB0aW1lIGludG8gZmlyc3QgNCBieXRlc1xuXHQgICAgdGhpcy5pZFszXSA9IHZhbHVlICYgMHhmZjtcblx0ICAgIHRoaXMuaWRbMl0gPSB2YWx1ZSA+PiA4ICYgMHhmZjtcblx0ICAgIHRoaXMuaWRbMV0gPSB2YWx1ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgICB0aGlzLmlkWzBdID0gdmFsdWUgPj4gMjQgJiAweGZmO1xuXHQgIH1cblx0fSk7XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIElkLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybiB0aGUgMjQgYnl0ZSBoZXggc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuXHQgKiBAaWdub3JlXG5cdCAqL1xuXG5cdE9iamVjdElkLnByb3RvdHlwZVt1dGlsJDIuaW5zcGVjdC5jdXN0b20gfHwgJ2luc3BlY3QnXSA9IE9iamVjdElkLnByb3RvdHlwZS50b1N0cmluZztcblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblx0T2JqZWN0SWQuaW5kZXggPSB+fihNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYpOyAvLyBJbiA0LjAuMCBhbmQgNC4wLjEsIHRoaXMgcHJvcGVydHkgbmFtZSB3YXMgY2hhbmdlZCB0byBPYmplY3RJZCB0byBtYXRjaCB0aGUgY2xhc3MgbmFtZS5cblx0Ly8gVGhpcyBjYXVzZWQgaW50ZXJvcGVyYWJpbGl0eSBwcm9ibGVtcyB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LCBzbyBpblxuXHQvLyBsYXRlciBidWlsZHMgd2UgY2hhbmdlZCBpdCBiYWNrIHRvIE9iamVjdElEIChjYXBpdGFsIEQpIHRvIG1hdGNoIGxlZ2FjeSBpbXBsZW1lbnRhdGlvbnMuXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdElkLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcblx0ICB2YWx1ZTogJ09iamVjdElEJ1xuXHR9KTtcblx0dmFyIG9iamVjdGlkID0gT2JqZWN0SWQ7XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDMoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkMyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblx0ZnVuY3Rpb24gYWxwaGFiZXRpemUoc3RyKSB7XG5cdCAgcmV0dXJuIHN0ci5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpO1xuXHR9XG5cdC8qKlxuXHQgKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIFJlZ0V4cCB0eXBlLlxuXHQgKi9cblxuXG5cdHZhciBCU09OUmVnRXhwID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgUmVnRXhwIHR5cGVcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybiB0byBtYXRjaFxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zIFRoZSByZWd1bGFyIGV4cHJlc3Npb24gb3B0aW9uc1xuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIEJTT05SZWdFeHAocGF0dGVybiwgb3B0aW9ucykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrJDModGhpcywgQlNPTlJlZ0V4cCk7XG5cblx0ICAgIC8vIEV4ZWN1dGVcblx0ICAgIHRoaXMucGF0dGVybiA9IHBhdHRlcm4gfHwgJyc7XG5cdCAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID8gYWxwaGFiZXRpemUob3B0aW9ucykgOiAnJzsgLy8gVmFsaWRhdGUgb3B0aW9uc1xuXG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICBpZiAoISh0aGlzLm9wdGlvbnNbaV0gPT09ICdpJyB8fCB0aGlzLm9wdGlvbnNbaV0gPT09ICdtJyB8fCB0aGlzLm9wdGlvbnNbaV0gPT09ICd4JyB8fCB0aGlzLm9wdGlvbnNbaV0gPT09ICdsJyB8fCB0aGlzLm9wdGlvbnNbaV0gPT09ICdzJyB8fCB0aGlzLm9wdGlvbnNbaV0gPT09ICd1JykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcmVndWxhciBleHByZXNzaW9uIG9wdGlvbiBbXCIuY29uY2F0KHRoaXMub3B0aW9uc1tpXSwgXCJdIGlzIG5vdCBzdXBwb3J0ZWRcIikpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAqIEBpZ25vcmVcblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzJDMoQlNPTlJlZ0V4cCwgW3tcblx0ICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvRXh0ZW5kZWRKU09OKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgICRyZWd1bGFyRXhwcmVzc2lvbjoge1xuXHQgICAgICAgICAgcGF0dGVybjogdGhpcy5wYXR0ZXJuLFxuXHQgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBAaWdub3JlXG5cdCAgICAgKi9cblxuXHQgIH1dLCBbe1xuXHQgICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKGRvYykge1xuXHQgICAgICByZXR1cm4gbmV3IEJTT05SZWdFeHAoZG9jLiRyZWd1bGFyRXhwcmVzc2lvbi5wYXR0ZXJuLCBkb2MuJHJlZ3VsYXJFeHByZXNzaW9uLm9wdGlvbnMuc3BsaXQoJycpLnNvcnQoKS5qb2luKCcnKSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIEJTT05SZWdFeHA7XG5cdH0oKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQlNPTlJlZ0V4cC5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG5cdCAgdmFsdWU6ICdCU09OUmVnRXhwJ1xuXHR9KTtcblx0dmFyIHJlZ2V4cCA9IEJTT05SZWdFeHA7XG5cblx0LyoqXG5cdCAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gU3ltYm9sIHR5cGUuXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayQ0KGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ0KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuXHRmdW5jdGlvbiBfY3JlYXRlQ2xhc3MkNChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDQoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ0KENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cdHZhciBCU09OU3ltYm9sID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgU3ltYm9sIHR5cGVcblx0ICAgKlxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSB0aGUgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3ltYm9sLlxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIEJTT05TeW1ib2wodmFsdWUpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayQ0KHRoaXMsIEJTT05TeW1ib2wpO1xuXG5cdCAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAqIEFjY2VzcyB0aGUgd3JhcHBlZCBzdHJpbmcgdmFsdWUuXG5cdCAgICpcblx0ICAgKiBAbWV0aG9kXG5cdCAgICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSB3cmFwcGVkIHN0cmluZy5cblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzJDQoQlNPTlN5bWJvbCwgW3tcblx0ICAgIGtleTogXCJ2YWx1ZU9mXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWVPZigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvU3RyaW5nXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBAaWdub3JlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJpbnNwZWN0XCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaW5zcGVjdCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgJHN5bWJvbDogdGhpcy52YWx1ZVxuXHQgICAgICB9O1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBAaWdub3JlXG5cdCAgICAgKi9cblxuXHQgIH1dLCBbe1xuXHQgICAga2V5OiBcImZyb21FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRKU09OKGRvYykge1xuXHQgICAgICByZXR1cm4gbmV3IEJTT05TeW1ib2woZG9jLiRzeW1ib2wpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBCU09OU3ltYm9sO1xuXHR9KCk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KEJTT05TeW1ib2wucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuXHQgIHZhbHVlOiAnU3ltYm9sJ1xuXHR9KTtcblx0dmFyIHN5bWJvbCA9IEJTT05TeW1ib2w7XG5cblx0LyoqXG5cdCAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgYSBCU09OIEludDMyIHR5cGUuXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayQ1KGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ1KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuXHRmdW5jdGlvbiBfY3JlYXRlQ2xhc3MkNShDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDUoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ1KENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cdHZhciBJbnQzMiA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKCkge1xuXHQgIC8qKlxuXHQgICAqIENyZWF0ZSBhbiBJbnQzMiB0eXBlXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgdGhlIG51bWJlciB3ZSB3YW50IHRvIHJlcHJlc2VudCBhcyBhbiBpbnQzMi5cblx0ICAgKiBAcmV0dXJuIHtJbnQzMn1cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBJbnQzMih2YWx1ZSkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrJDUodGhpcywgSW50MzIpO1xuXG5cdCAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAqIEFjY2VzcyB0aGUgbnVtYmVyIHZhbHVlLlxuXHQgICAqXG5cdCAgICogQG1ldGhvZFxuXHQgICAqIEByZXR1cm4ge251bWJlcn0gcmV0dXJucyB0aGUgd3JhcHBlZCBpbnQzMiBudW1iZXIuXG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyQ1KEludDMyLCBbe1xuXHQgICAga2V5OiBcInZhbHVlT2ZcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9KU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTihvcHRpb25zKSB7XG5cdCAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCkgcmV0dXJuIHRoaXMudmFsdWU7XG5cdCAgICAgIHJldHVybiB7XG5cdCAgICAgICAgJG51bWJlckludDogdGhpcy52YWx1ZS50b1N0cmluZygpXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jLCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMucmVsYXhlZCA/IHBhcnNlSW50KGRvYy4kbnVtYmVySW50LCAxMCkgOiBuZXcgSW50MzIoZG9jLiRudW1iZXJJbnQpO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBJbnQzMjtcblx0fSgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnQzMi5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG5cdCAgdmFsdWU6ICdJbnQzMidcblx0fSk7XG5cdHZhciBpbnRfMzIgPSBJbnQzMjtcblxuXHQvKipcblx0ICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBDb2RlIHR5cGUuXG5cdCAqL1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayQ2KGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuXHRmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyQ2KHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuXHRmdW5jdGlvbiBfY3JlYXRlQ2xhc3MkNihDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDYoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ2KENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5cdHZhciBDb2RlID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgQ29kZSB0eXBlXG5cdCAgICpcblx0ICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24pfSBjb2RlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLlxuXHQgICAqIEBwYXJhbSB7T2JqZWN0fSBbc2NvcGVdIGFuIG9wdGlvbmFsIHNjb3BlIGZvciB0aGUgZnVuY3Rpb24uXG5cdCAgICogQHJldHVybiB7Q29kZX1cblx0ICAgKi9cblx0ICBmdW5jdGlvbiBDb2RlKGNvZGUsIHNjb3BlKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2skNih0aGlzLCBDb2RlKTtcblxuXHQgICAgdGhpcy5jb2RlID0gY29kZTtcblx0ICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcblx0ICB9XG5cdCAgLyoqXG5cdCAgICogQGlnbm9yZVxuXHQgICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MkNihDb2RlLCBbe1xuXHQgICAga2V5OiBcInRvSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICBzY29wZTogdGhpcy5zY29wZSxcblx0ICAgICAgICBjb2RlOiB0aGlzLmNvZGVcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcblx0ICAgICAgaWYgKHRoaXMuc2NvcGUpIHtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgJGNvZGU6IHRoaXMuY29kZSxcblx0ICAgICAgICAgICRzY29wZTogdGhpcy5zY29wZVxuXHQgICAgICAgIH07XG5cdCAgICAgIH1cblxuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgICRjb2RlOiB0aGlzLmNvZGVcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9XSwgW3tcblx0ICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBDb2RlKGRvYy4kY29kZSwgZG9jLiRzY29wZSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIENvZGU7XG5cdH0oKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29kZS5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG5cdCAgdmFsdWU6ICdDb2RlJ1xuXHR9KTtcblx0dmFyIGNvZGUgPSBDb2RlO1xuXG5cdHZhciBCdWZmZXIkMiA9IGJ1ZmZlci5CdWZmZXI7XG5cdHZhciBQQVJTRV9TVFJJTkdfUkVHRVhQID0gL14oXFwrfC0pPyhcXGQrfChcXGQqXFwuXFxkKikpPyhFfGUpPyhbLStdKT8oXFxkKyk/JC87XG5cdHZhciBQQVJTRV9JTkZfUkVHRVhQID0gL14oXFwrfC0pPyhJbmZpbml0eXxpbmYpJC9pO1xuXHR2YXIgUEFSU0VfTkFOX1JFR0VYUCA9IC9eKFxcK3wtKT9OYU4kL2k7XG5cdHZhciBFWFBPTkVOVF9NQVggPSA2MTExO1xuXHR2YXIgRVhQT05FTlRfTUlOID0gLTYxNzY7XG5cdHZhciBFWFBPTkVOVF9CSUFTID0gNjE3Njtcblx0dmFyIE1BWF9ESUdJVFMgPSAzNDsgLy8gTmFuIHZhbHVlIGJpdHMgYXMgMzIgYml0IHZhbHVlcyAoZHVlIHRvIGxhY2sgb2YgbG9uZ3MpXG5cblx0dmFyIE5BTl9CVUZGRVIgPSBbMHg3YywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0ucmV2ZXJzZSgpOyAvLyBJbmZpbml0eSB2YWx1ZSBiaXRzIDMyIGJpdCB2YWx1ZXMgKGR1ZSB0byBsYWNrIG9mIGxvbmdzKVxuXG5cdHZhciBJTkZfTkVHQVRJVkVfQlVGRkVSID0gWzB4ZjgsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdLnJldmVyc2UoKTtcblx0dmFyIElORl9QT1NJVElWRV9CVUZGRVIgPSBbMHg3OCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF0ucmV2ZXJzZSgpO1xuXHR2YXIgRVhQT05FTlRfUkVHRVggPSAvXihbLStdKT8oXFxkKyk/JC87IC8vIERldGVjdCBpZiB0aGUgdmFsdWUgaXMgYSBkaWdpdFxuXG5cdGZ1bmN0aW9uIGlzRGlnaXQodmFsdWUpIHtcblx0ICByZXR1cm4gIWlzTmFOKHBhcnNlSW50KHZhbHVlLCAxMCkpO1xuXHR9IC8vIERpdmlkZSB0d28gdWludDEyOCB2YWx1ZXNcblxuXG5cdGZ1bmN0aW9uIGRpdmlkZXUxMjgodmFsdWUpIHtcblx0ICB2YXIgRElWSVNPUiA9IGxvbmdfMS5mcm9tTnVtYmVyKDEwMDAgKiAxMDAwICogMTAwMCk7XG5cblx0ICB2YXIgX3JlbSA9IGxvbmdfMS5mcm9tTnVtYmVyKDApO1xuXG5cdCAgaWYgKCF2YWx1ZS5wYXJ0c1swXSAmJiAhdmFsdWUucGFydHNbMV0gJiYgIXZhbHVlLnBhcnRzWzJdICYmICF2YWx1ZS5wYXJ0c1szXSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgcXVvdGllbnQ6IHZhbHVlLFxuXHQgICAgICByZW06IF9yZW1cblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPD0gMzsgaSsrKSB7XG5cdCAgICAvLyBBZGp1c3QgcmVtYWluZGVyIHRvIG1hdGNoIHZhbHVlIG9mIG5leHQgZGl2aWRlbmRcblx0ICAgIF9yZW0gPSBfcmVtLnNoaWZ0TGVmdCgzMik7IC8vIEFkZCB0aGUgZGl2aWRlZCB0byBfcmVtXG5cblx0ICAgIF9yZW0gPSBfcmVtLmFkZChuZXcgbG9uZ18xKHZhbHVlLnBhcnRzW2ldLCAwKSk7XG5cdCAgICB2YWx1ZS5wYXJ0c1tpXSA9IF9yZW0uZGl2KERJVklTT1IpLmxvdztcblx0ICAgIF9yZW0gPSBfcmVtLm1vZHVsbyhESVZJU09SKTtcblx0ICB9XG5cblx0ICByZXR1cm4ge1xuXHQgICAgcXVvdGllbnQ6IHZhbHVlLFxuXHQgICAgcmVtOiBfcmVtXG5cdCAgfTtcblx0fSAvLyBNdWx0aXBseSB0d28gTG9uZyB2YWx1ZXMgYW5kIHJldHVybiB0aGUgMTI4IGJpdCB2YWx1ZVxuXG5cblx0ZnVuY3Rpb24gbXVsdGlwbHk2NHgyKGxlZnQsIHJpZ2h0KSB7XG5cdCAgaWYgKCFsZWZ0ICYmICFyaWdodCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgaGlnaDogbG9uZ18xLmZyb21OdW1iZXIoMCksXG5cdCAgICAgIGxvdzogbG9uZ18xLmZyb21OdW1iZXIoMClcblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgdmFyIGxlZnRIaWdoID0gbGVmdC5zaGlmdFJpZ2h0VW5zaWduZWQoMzIpO1xuXHQgIHZhciBsZWZ0TG93ID0gbmV3IGxvbmdfMShsZWZ0LmdldExvd0JpdHMoKSwgMCk7XG5cdCAgdmFyIHJpZ2h0SGlnaCA9IHJpZ2h0LnNoaWZ0UmlnaHRVbnNpZ25lZCgzMik7XG5cdCAgdmFyIHJpZ2h0TG93ID0gbmV3IGxvbmdfMShyaWdodC5nZXRMb3dCaXRzKCksIDApO1xuXHQgIHZhciBwcm9kdWN0SGlnaCA9IGxlZnRIaWdoLm11bHRpcGx5KHJpZ2h0SGlnaCk7XG5cdCAgdmFyIHByb2R1Y3RNaWQgPSBsZWZ0SGlnaC5tdWx0aXBseShyaWdodExvdyk7XG5cdCAgdmFyIHByb2R1Y3RNaWQyID0gbGVmdExvdy5tdWx0aXBseShyaWdodEhpZ2gpO1xuXHQgIHZhciBwcm9kdWN0TG93ID0gbGVmdExvdy5tdWx0aXBseShyaWdodExvdyk7XG5cdCAgcHJvZHVjdEhpZ2ggPSBwcm9kdWN0SGlnaC5hZGQocHJvZHVjdE1pZC5zaGlmdFJpZ2h0VW5zaWduZWQoMzIpKTtcblx0ICBwcm9kdWN0TWlkID0gbmV3IGxvbmdfMShwcm9kdWN0TWlkLmdldExvd0JpdHMoKSwgMCkuYWRkKHByb2R1Y3RNaWQyKS5hZGQocHJvZHVjdExvdy5zaGlmdFJpZ2h0VW5zaWduZWQoMzIpKTtcblx0ICBwcm9kdWN0SGlnaCA9IHByb2R1Y3RIaWdoLmFkZChwcm9kdWN0TWlkLnNoaWZ0UmlnaHRVbnNpZ25lZCgzMikpO1xuXHQgIHByb2R1Y3RMb3cgPSBwcm9kdWN0TWlkLnNoaWZ0TGVmdCgzMikuYWRkKG5ldyBsb25nXzEocHJvZHVjdExvdy5nZXRMb3dCaXRzKCksIDApKTsgLy8gUmV0dXJuIHRoZSAxMjggYml0IHJlc3VsdFxuXG5cdCAgcmV0dXJuIHtcblx0ICAgIGhpZ2g6IHByb2R1Y3RIaWdoLFxuXHQgICAgbG93OiBwcm9kdWN0TG93XG5cdCAgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxlc3NUaGFuKGxlZnQsIHJpZ2h0KSB7XG5cdCAgLy8gTWFrZSB2YWx1ZXMgdW5zaWduZWRcblx0ICB2YXIgdWhsZWZ0ID0gbGVmdC5oaWdoID4+PiAwO1xuXHQgIHZhciB1aHJpZ2h0ID0gcmlnaHQuaGlnaCA+Pj4gMDsgLy8gQ29tcGFyZSBoaWdoIGJpdHMgZmlyc3RcblxuXHQgIGlmICh1aGxlZnQgPCB1aHJpZ2h0KSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9IGVsc2UgaWYgKHVobGVmdCA9PT0gdWhyaWdodCkge1xuXHQgICAgdmFyIHVsbGVmdCA9IGxlZnQubG93ID4+PiAwO1xuXHQgICAgdmFyIHVscmlnaHQgPSByaWdodC5sb3cgPj4+IDA7XG5cdCAgICBpZiAodWxsZWZ0IDwgdWxyaWdodCkgcmV0dXJuIHRydWU7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gaW52YWxpZEVycihzdHJpbmcsIG1lc3NhZ2UpIHtcblx0ICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiXFxcIlwiLmNvbmNhdChzdHJpbmcsIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBEZWNpbWFsMTI4IHN0cmluZyAtIFwiKS5jb25jYXQobWVzc2FnZSkpO1xuXHR9XG5cdC8qKlxuXHQgKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIERlY2ltYWwxMjggdHlwZS5cblx0ICpcblx0ICogQGNsYXNzXG5cdCAqIEBwYXJhbSB7QnVmZmVyfSBieXRlcyBhIGJ1ZmZlciBjb250YWluaW5nIHRoZSByYXcgRGVjaW1hbDEyOCBieXRlcy5cblx0ICogQHJldHVybiB7RG91YmxlfVxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIERlY2ltYWwxMjgoYnl0ZXMpIHtcblx0ICB0aGlzLmJ5dGVzID0gYnl0ZXM7XG5cdH1cblx0LyoqXG5cdCAqIENyZWF0ZSBhIERlY2ltYWwxMjggaW5zdGFuY2UgZnJvbSBhIHN0cmluZyByZXByZXNlbnRhdGlvblxuXHQgKlxuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgYSBudW1lcmljIHN0cmluZyByZXByZXNlbnRhdGlvbi5cblx0ICogQHJldHVybiB7RGVjaW1hbDEyOH0gcmV0dXJucyBhIERlY2ltYWwxMjggaW5zdGFuY2UuXG5cdCAqL1xuXG5cblx0RGVjaW1hbDEyOC5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKHN0cmluZykge1xuXHQgIC8vIFBhcnNlIHN0YXRlIHRyYWNraW5nXG5cdCAgdmFyIGlzTmVnYXRpdmUgPSBmYWxzZTtcblx0ICB2YXIgc2F3UmFkaXggPSBmYWxzZTtcblx0ICB2YXIgZm91bmROb25aZXJvID0gZmFsc2U7IC8vIFRvdGFsIG51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHMgKG5vIGxlYWRpbmcgb3IgdHJhaWxpbmcgemVybylcblxuXHQgIHZhciBzaWduaWZpY2FudERpZ2l0cyA9IDA7IC8vIFRvdGFsIG51bWJlciBvZiBzaWduaWZpY2FuZCBkaWdpdHMgcmVhZFxuXG5cdCAgdmFyIG5EaWdpdHNSZWFkID0gMDsgLy8gVG90YWwgbnVtYmVyIG9mIGRpZ2l0cyAobm8gbGVhZGluZyB6ZXJvcylcblxuXHQgIHZhciBuRGlnaXRzID0gMDsgLy8gVGhlIG51bWJlciBvZiB0aGUgZGlnaXRzIGFmdGVyIHJhZGl4XG5cblx0ICB2YXIgcmFkaXhQb3NpdGlvbiA9IDA7IC8vIFRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgbm9uLXplcm8gaW4gKnN0cipcblxuXHQgIHZhciBmaXJzdE5vblplcm8gPSAwOyAvLyBEaWdpdHMgQXJyYXlcblxuXHQgIHZhciBkaWdpdHMgPSBbMF07IC8vIFRoZSBudW1iZXIgb2YgZGlnaXRzIGluIGRpZ2l0c1xuXG5cdCAgdmFyIG5EaWdpdHNTdG9yZWQgPSAwOyAvLyBJbnNlcnRpb24gcG9pbnRlciBmb3IgZGlnaXRzXG5cblx0ICB2YXIgZGlnaXRzSW5zZXJ0ID0gMDsgLy8gVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBub24temVybyBkaWdpdFxuXG5cdCAgdmFyIGZpcnN0RGlnaXQgPSAwOyAvLyBUaGUgaW5kZXggb2YgdGhlIGxhc3QgZGlnaXRcblxuXHQgIHZhciBsYXN0RGlnaXQgPSAwOyAvLyBFeHBvbmVudFxuXG5cdCAgdmFyIGV4cG9uZW50ID0gMDsgLy8gbG9vcCBpbmRleCBvdmVyIGFycmF5XG5cblx0ICB2YXIgaSA9IDA7IC8vIFRoZSBoaWdoIDE3IGRpZ2l0cyBvZiB0aGUgc2lnbmlmaWNhbmRcblxuXHQgIHZhciBzaWduaWZpY2FuZEhpZ2ggPSBbMCwgMF07IC8vIFRoZSBsb3cgMTcgZGlnaXRzIG9mIHRoZSBzaWduaWZpY2FuZFxuXG5cdCAgdmFyIHNpZ25pZmljYW5kTG93ID0gWzAsIDBdOyAvLyBUaGUgYmlhc2VkIGV4cG9uZW50XG5cblx0ICB2YXIgYmlhc2VkRXhwb25lbnQgPSAwOyAvLyBSZWFkIGluZGV4XG5cblx0ICB2YXIgaW5kZXggPSAwOyAvLyBOYWl2ZWx5IHByZXZlbnQgYWdhaW5zdCBSRURPUyBhdHRhY2tzLlxuXHQgIC8vIFRPRE86IGltcGxlbWVudGluZyBhIGN1c3RvbSBwYXJzaW5nIGZvciB0aGlzLCBvciByZWZhY3RvcmluZyB0aGUgcmVnZXggd291bGQgeWllbGRcblx0ICAvLyAgICAgICBmdXJ0aGVyIGdhaW5zLlxuXG5cdCAgaWYgKHN0cmluZy5sZW5ndGggPj0gNzAwMCkge1xuXHQgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignJyArIHN0cmluZyArICcgbm90IGEgdmFsaWQgRGVjaW1hbDEyOCBzdHJpbmcnKTtcblx0ICB9IC8vIFJlc3VsdHNcblxuXG5cdCAgdmFyIHN0cmluZ01hdGNoID0gc3RyaW5nLm1hdGNoKFBBUlNFX1NUUklOR19SRUdFWFApO1xuXHQgIHZhciBpbmZNYXRjaCA9IHN0cmluZy5tYXRjaChQQVJTRV9JTkZfUkVHRVhQKTtcblx0ICB2YXIgbmFuTWF0Y2ggPSBzdHJpbmcubWF0Y2goUEFSU0VfTkFOX1JFR0VYUCk7IC8vIFZhbGlkYXRlIHRoZSBzdHJpbmdcblxuXHQgIGlmICghc3RyaW5nTWF0Y2ggJiYgIWluZk1hdGNoICYmICFuYW5NYXRjaCB8fCBzdHJpbmcubGVuZ3RoID09PSAwKSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcnICsgc3RyaW5nICsgJyBub3QgYSB2YWxpZCBEZWNpbWFsMTI4IHN0cmluZycpO1xuXHQgIH1cblxuXHQgIGlmIChzdHJpbmdNYXRjaCkge1xuXHQgICAgLy8gZnVsbF9tYXRjaCA9IHN0cmluZ01hdGNoWzBdXG5cdCAgICAvLyBzaWduID0gc3RyaW5nTWF0Y2hbMV1cblx0ICAgIHZhciB1bnNpZ25lZE51bWJlciA9IHN0cmluZ01hdGNoWzJdOyAvLyBzdHJpbmdNYXRjaFszXSBpcyB1bmRlZmluZWQgaWYgYSB3aG9sZSBudW1iZXIgKGV4IFwiMVwiLCAxMlwiKVxuXHQgICAgLy8gYnV0IGRlZmluZWQgaWYgYSBudW1iZXIgdy8gZGVjaW1hbCBpbiBpdCAoZXggXCIxLjAsIDEyLjJcIilcblxuXHQgICAgdmFyIGUgPSBzdHJpbmdNYXRjaFs0XTtcblx0ICAgIHZhciBleHBTaWduID0gc3RyaW5nTWF0Y2hbNV07XG5cdCAgICB2YXIgZXhwTnVtYmVyID0gc3RyaW5nTWF0Y2hbNl07IC8vIHRoZXkgcHJvdmlkZWQgZSwgYnV0IGRpZG4ndCBnaXZlIGFuIGV4cG9uZW50IG51bWJlci4gZm9yIGV4IFwiMWVcIlxuXG5cdCAgICBpZiAoZSAmJiBleHBOdW1iZXIgPT09IHVuZGVmaW5lZCkgaW52YWxpZEVycihzdHJpbmcsICdtaXNzaW5nIGV4cG9uZW50IHBvd2VyJyk7IC8vIHRoZXkgcHJvdmlkZWQgZSwgYnV0IGRpZG4ndCBnaXZlIGEgbnVtYmVyIGJlZm9yZSBpdC4gZm9yIGV4IFwiZTFcIlxuXG5cdCAgICBpZiAoZSAmJiB1bnNpZ25lZE51bWJlciA9PT0gdW5kZWZpbmVkKSBpbnZhbGlkRXJyKHN0cmluZywgJ21pc3NpbmcgZXhwb25lbnQgYmFzZScpO1xuXG5cdCAgICBpZiAoZSA9PT0gdW5kZWZpbmVkICYmIChleHBTaWduIHx8IGV4cE51bWJlcikpIHtcblx0ICAgICAgaW52YWxpZEVycihzdHJpbmcsICdtaXNzaW5nIGUgYmVmb3JlIGV4cG9uZW50Jyk7XG5cdCAgICB9XG5cdCAgfSAvLyBHZXQgdGhlIG5lZ2F0aXZlIG9yIHBvc2l0aXZlIHNpZ25cblxuXG5cdCAgaWYgKHN0cmluZ1tpbmRleF0gPT09ICcrJyB8fCBzdHJpbmdbaW5kZXhdID09PSAnLScpIHtcblx0ICAgIGlzTmVnYXRpdmUgPSBzdHJpbmdbaW5kZXgrK10gPT09ICctJztcblx0ICB9IC8vIENoZWNrIGlmIHVzZXIgcGFzc2VkIEluZmluaXR5IG9yIE5hTlxuXG5cblx0ICBpZiAoIWlzRGlnaXQoc3RyaW5nW2luZGV4XSkgJiYgc3RyaW5nW2luZGV4XSAhPT0gJy4nKSB7XG5cdCAgICBpZiAoc3RyaW5nW2luZGV4XSA9PT0gJ2knIHx8IHN0cmluZ1tpbmRleF0gPT09ICdJJykge1xuXHQgICAgICByZXR1cm4gbmV3IERlY2ltYWwxMjgoQnVmZmVyJDIuZnJvbShpc05lZ2F0aXZlID8gSU5GX05FR0FUSVZFX0JVRkZFUiA6IElORl9QT1NJVElWRV9CVUZGRVIpKTtcblx0ICAgIH0gZWxzZSBpZiAoc3RyaW5nW2luZGV4XSA9PT0gJ04nKSB7XG5cdCAgICAgIHJldHVybiBuZXcgRGVjaW1hbDEyOChCdWZmZXIkMi5mcm9tKE5BTl9CVUZGRVIpKTtcblx0ICAgIH1cblx0ICB9IC8vIFJlYWQgYWxsIHRoZSBkaWdpdHNcblxuXG5cdCAgd2hpbGUgKGlzRGlnaXQoc3RyaW5nW2luZGV4XSkgfHwgc3RyaW5nW2luZGV4XSA9PT0gJy4nKSB7XG5cdCAgICBpZiAoc3RyaW5nW2luZGV4XSA9PT0gJy4nKSB7XG5cdCAgICAgIGlmIChzYXdSYWRpeCkgaW52YWxpZEVycihzdHJpbmcsICdjb250YWlucyBtdWx0aXBsZSBwZXJpb2RzJyk7XG5cdCAgICAgIHNhd1JhZGl4ID0gdHJ1ZTtcblx0ICAgICAgaW5kZXggPSBpbmRleCArIDE7XG5cdCAgICAgIGNvbnRpbnVlO1xuXHQgICAgfVxuXG5cdCAgICBpZiAobkRpZ2l0c1N0b3JlZCA8IDM0KSB7XG5cdCAgICAgIGlmIChzdHJpbmdbaW5kZXhdICE9PSAnMCcgfHwgZm91bmROb25aZXJvKSB7XG5cdCAgICAgICAgaWYgKCFmb3VuZE5vblplcm8pIHtcblx0ICAgICAgICAgIGZpcnN0Tm9uWmVybyA9IG5EaWdpdHNSZWFkO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvdW5kTm9uWmVybyA9IHRydWU7IC8vIE9ubHkgc3RvcmUgMzQgZGlnaXRzXG5cblx0ICAgICAgICBkaWdpdHNbZGlnaXRzSW5zZXJ0KytdID0gcGFyc2VJbnQoc3RyaW5nW2luZGV4XSwgMTApO1xuXHQgICAgICAgIG5EaWdpdHNTdG9yZWQgPSBuRGlnaXRzU3RvcmVkICsgMTtcblx0ICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBpZiAoZm91bmROb25aZXJvKSBuRGlnaXRzID0gbkRpZ2l0cyArIDE7XG5cdCAgICBpZiAoc2F3UmFkaXgpIHJhZGl4UG9zaXRpb24gPSByYWRpeFBvc2l0aW9uICsgMTtcblx0ICAgIG5EaWdpdHNSZWFkID0gbkRpZ2l0c1JlYWQgKyAxO1xuXHQgICAgaW5kZXggPSBpbmRleCArIDE7XG5cdCAgfVxuXG5cdCAgaWYgKHNhd1JhZGl4ICYmICFuRGlnaXRzUmVhZCkgdGhyb3cgbmV3IFR5cGVFcnJvcignJyArIHN0cmluZyArICcgbm90IGEgdmFsaWQgRGVjaW1hbDEyOCBzdHJpbmcnKTsgLy8gUmVhZCBleHBvbmVudCBpZiBleGlzdHNcblxuXHQgIGlmIChzdHJpbmdbaW5kZXhdID09PSAnZScgfHwgc3RyaW5nW2luZGV4XSA9PT0gJ0UnKSB7XG5cdCAgICAvLyBSZWFkIGV4cG9uZW50IGRpZ2l0c1xuXHQgICAgdmFyIG1hdGNoID0gc3RyaW5nLnN1YnN0cigrK2luZGV4KS5tYXRjaChFWFBPTkVOVF9SRUdFWCk7IC8vIE5vIGRpZ2l0cyByZWFkXG5cblx0ICAgIGlmICghbWF0Y2ggfHwgIW1hdGNoWzJdKSByZXR1cm4gbmV3IERlY2ltYWwxMjgoQnVmZmVyJDIuZnJvbShOQU5fQlVGRkVSKSk7IC8vIEdldCBleHBvbmVudFxuXG5cdCAgICBleHBvbmVudCA9IHBhcnNlSW50KG1hdGNoWzBdLCAxMCk7IC8vIEFkanVzdCB0aGUgaW5kZXhcblxuXHQgICAgaW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcblx0ICB9IC8vIFJldHVybiBub3QgYSBudW1iZXJcblxuXG5cdCAgaWYgKHN0cmluZ1tpbmRleF0pIHJldHVybiBuZXcgRGVjaW1hbDEyOChCdWZmZXIkMi5mcm9tKE5BTl9CVUZGRVIpKTsgLy8gRG9uZSByZWFkaW5nIGlucHV0XG5cdCAgLy8gRmluZCBmaXJzdCBub24temVybyBkaWdpdCBpbiBkaWdpdHNcblxuXHQgIGZpcnN0RGlnaXQgPSAwO1xuXG5cdCAgaWYgKCFuRGlnaXRzU3RvcmVkKSB7XG5cdCAgICBmaXJzdERpZ2l0ID0gMDtcblx0ICAgIGxhc3REaWdpdCA9IDA7XG5cdCAgICBkaWdpdHNbMF0gPSAwO1xuXHQgICAgbkRpZ2l0cyA9IDE7XG5cdCAgICBuRGlnaXRzU3RvcmVkID0gMTtcblx0ICAgIHNpZ25pZmljYW50RGlnaXRzID0gMDtcblx0ICB9IGVsc2Uge1xuXHQgICAgbGFzdERpZ2l0ID0gbkRpZ2l0c1N0b3JlZCAtIDE7XG5cdCAgICBzaWduaWZpY2FudERpZ2l0cyA9IG5EaWdpdHM7XG5cblx0ICAgIGlmIChzaWduaWZpY2FudERpZ2l0cyAhPT0gMSkge1xuXHQgICAgICB3aGlsZSAoc3RyaW5nW2ZpcnN0Tm9uWmVybyArIHNpZ25pZmljYW50RGlnaXRzIC0gMV0gPT09ICcwJykge1xuXHQgICAgICAgIHNpZ25pZmljYW50RGlnaXRzID0gc2lnbmlmaWNhbnREaWdpdHMgLSAxO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSAvLyBOb3JtYWxpemF0aW9uIG9mIGV4cG9uZW50XG5cdCAgLy8gQ29ycmVjdCBleHBvbmVudCBiYXNlZCBvbiByYWRpeCBwb3NpdGlvbiwgYW5kIHNoaWZ0IHNpZ25pZmljYW5kIGFzIG5lZWRlZFxuXHQgIC8vIHRvIHJlcHJlc2VudCB1c2VyIGlucHV0XG5cdCAgLy8gT3ZlcmZsb3cgcHJldmVudGlvblxuXG5cblx0ICBpZiAoZXhwb25lbnQgPD0gcmFkaXhQb3NpdGlvbiAmJiByYWRpeFBvc2l0aW9uIC0gZXhwb25lbnQgPiAxIDw8IDE0KSB7XG5cdCAgICBleHBvbmVudCA9IEVYUE9ORU5UX01JTjtcblx0ICB9IGVsc2Uge1xuXHQgICAgZXhwb25lbnQgPSBleHBvbmVudCAtIHJhZGl4UG9zaXRpb247XG5cdCAgfSAvLyBBdHRlbXB0IHRvIG5vcm1hbGl6ZSB0aGUgZXhwb25lbnRcblxuXG5cdCAgd2hpbGUgKGV4cG9uZW50ID4gRVhQT05FTlRfTUFYKSB7XG5cdCAgICAvLyBTaGlmdCBleHBvbmVudCB0byBzaWduaWZpY2FuZCBhbmQgZGVjcmVhc2Vcblx0ICAgIGxhc3REaWdpdCA9IGxhc3REaWdpdCArIDE7XG5cblx0ICAgIGlmIChsYXN0RGlnaXQgLSBmaXJzdERpZ2l0ID4gTUFYX0RJR0lUUykge1xuXHQgICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgemVybyB0aGVuIGp1c3QgaGFyZCBjbGFtcCwgb3RoZXJ3aXNlIGZhaWxcblx0ICAgICAgdmFyIGRpZ2l0c1N0cmluZyA9IGRpZ2l0cy5qb2luKCcnKTtcblxuXHQgICAgICBpZiAoZGlnaXRzU3RyaW5nLm1hdGNoKC9eMCskLykpIHtcblx0ICAgICAgICBleHBvbmVudCA9IEVYUE9ORU5UX01BWDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXG5cdCAgICAgIGludmFsaWRFcnIoc3RyaW5nLCAnb3ZlcmZsb3cnKTtcblx0ICAgIH1cblxuXHQgICAgZXhwb25lbnQgPSBleHBvbmVudCAtIDE7XG5cdCAgfVxuXG5cdCAgd2hpbGUgKGV4cG9uZW50IDwgRVhQT05FTlRfTUlOIHx8IG5EaWdpdHNTdG9yZWQgPCBuRGlnaXRzKSB7XG5cdCAgICAvLyBTaGlmdCBsYXN0IGRpZ2l0LiBjYW4gb25seSBkbyB0aGlzIGlmIDwgc2lnbmlmaWNhbnQgZGlnaXRzIHRoYW4gIyBzdG9yZWQuXG5cdCAgICBpZiAobGFzdERpZ2l0ID09PSAwICYmIHNpZ25pZmljYW50RGlnaXRzIDwgbkRpZ2l0c1N0b3JlZCkge1xuXHQgICAgICBleHBvbmVudCA9IEVYUE9ORU5UX01JTjtcblx0ICAgICAgc2lnbmlmaWNhbnREaWdpdHMgPSAwO1xuXHQgICAgICBicmVhaztcblx0ICAgIH1cblxuXHQgICAgaWYgKG5EaWdpdHNTdG9yZWQgPCBuRGlnaXRzKSB7XG5cdCAgICAgIC8vIGFkanVzdCB0byBtYXRjaCBkaWdpdHMgbm90IHN0b3JlZFxuXHQgICAgICBuRGlnaXRzID0gbkRpZ2l0cyAtIDE7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBhZGp1c3QgdG8gcm91bmRcblx0ICAgICAgbGFzdERpZ2l0ID0gbGFzdERpZ2l0IC0gMTtcblx0ICAgIH1cblxuXHQgICAgaWYgKGV4cG9uZW50IDwgRVhQT05FTlRfTUFYKSB7XG5cdCAgICAgIGV4cG9uZW50ID0gZXhwb25lbnQgKyAxO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhIHplcm8gdGhlbiBqdXN0IGhhcmQgY2xhbXAsIG90aGVyd2lzZSBmYWlsXG5cdCAgICAgIHZhciBfZGlnaXRzU3RyaW5nID0gZGlnaXRzLmpvaW4oJycpO1xuXG5cdCAgICAgIGlmIChfZGlnaXRzU3RyaW5nLm1hdGNoKC9eMCskLykpIHtcblx0ICAgICAgICBleHBvbmVudCA9IEVYUE9ORU5UX01BWDtcblx0ICAgICAgICBicmVhaztcblx0ICAgICAgfVxuXG5cdCAgICAgIGludmFsaWRFcnIoc3RyaW5nLCAnb3ZlcmZsb3cnKTtcblx0ICAgIH1cblx0ICB9IC8vIFJvdW5kXG5cdCAgLy8gV2UndmUgbm9ybWFsaXplZCB0aGUgZXhwb25lbnQsIGJ1dCBtaWdodCBzdGlsbCBuZWVkIHRvIHJvdW5kLlxuXG5cblx0ICBpZiAobGFzdERpZ2l0IC0gZmlyc3REaWdpdCArIDEgPCBzaWduaWZpY2FudERpZ2l0cykge1xuXHQgICAgdmFyIGVuZE9mU3RyaW5nID0gbkRpZ2l0c1JlYWQ7IC8vIElmIHdlIGhhdmUgc2VlbiBhIHJhZGl4IHBvaW50LCAnc3RyaW5nJyBpcyAxIGxvbmdlciB0aGFuIHdlIGhhdmVcblx0ICAgIC8vIGRvY3VtZW50ZWQgd2l0aCBuZGlnaXRzX3JlYWQsIHNvIGluYyB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IG5vbnplcm9cblx0ICAgIC8vIGRpZ2l0IGFuZCB0aGUgcG9zaXRpb24gdGhhdCBkaWdpdHMgYXJlIHJlYWQgdG8uXG5cblx0ICAgIGlmIChzYXdSYWRpeCkge1xuXHQgICAgICBmaXJzdE5vblplcm8gPSBmaXJzdE5vblplcm8gKyAxO1xuXHQgICAgICBlbmRPZlN0cmluZyA9IGVuZE9mU3RyaW5nICsgMTtcblx0ICAgIH0gLy8gaWYgbmVnYXRpdmUsIHdlIG5lZWQgdG8gaW5jcmVtZW50IGFnYWluIHRvIGFjY291bnQgZm9yIC0gc2lnbiBhdCBzdGFydC5cblxuXG5cdCAgICBpZiAoaXNOZWdhdGl2ZSkge1xuXHQgICAgICBmaXJzdE5vblplcm8gPSBmaXJzdE5vblplcm8gKyAxO1xuXHQgICAgICBlbmRPZlN0cmluZyA9IGVuZE9mU3RyaW5nICsgMTtcblx0ICAgIH1cblxuXHQgICAgdmFyIHJvdW5kRGlnaXQgPSBwYXJzZUludChzdHJpbmdbZmlyc3ROb25aZXJvICsgbGFzdERpZ2l0ICsgMV0sIDEwKTtcblx0ICAgIHZhciByb3VuZEJpdCA9IDA7XG5cblx0ICAgIGlmIChyb3VuZERpZ2l0ID49IDUpIHtcblx0ICAgICAgcm91bmRCaXQgPSAxO1xuXG5cdCAgICAgIGlmIChyb3VuZERpZ2l0ID09PSA1KSB7XG5cdCAgICAgICAgcm91bmRCaXQgPSBkaWdpdHNbbGFzdERpZ2l0XSAlIDIgPT09IDE7XG5cblx0ICAgICAgICBmb3IgKGkgPSBmaXJzdE5vblplcm8gKyBsYXN0RGlnaXQgKyAyOyBpIDwgZW5kT2ZTdHJpbmc7IGkrKykge1xuXHQgICAgICAgICAgaWYgKHBhcnNlSW50KHN0cmluZ1tpXSwgMTApKSB7XG5cdCAgICAgICAgICAgIHJvdW5kQml0ID0gMTtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmIChyb3VuZEJpdCkge1xuXHQgICAgICB2YXIgZElkeCA9IGxhc3REaWdpdDtcblxuXHQgICAgICBmb3IgKDsgZElkeCA+PSAwOyBkSWR4LS0pIHtcblx0ICAgICAgICBpZiAoKytkaWdpdHNbZElkeF0gPiA5KSB7XG5cdCAgICAgICAgICBkaWdpdHNbZElkeF0gPSAwOyAvLyBvdmVyZmxvd2VkIG1vc3Qgc2lnbmlmaWNhbnQgZGlnaXRcblxuXHQgICAgICAgICAgaWYgKGRJZHggPT09IDApIHtcblx0ICAgICAgICAgICAgaWYgKGV4cG9uZW50IDwgRVhQT05FTlRfTUFYKSB7XG5cdCAgICAgICAgICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIDE7XG5cdCAgICAgICAgICAgICAgZGlnaXRzW2RJZHhdID0gMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gbmV3IERlY2ltYWwxMjgoQnVmZmVyJDIuZnJvbShpc05lZ2F0aXZlID8gSU5GX05FR0FUSVZFX0JVRkZFUiA6IElORl9QT1NJVElWRV9CVUZGRVIpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gLy8gRW5jb2RlIHNpZ25pZmljYW5kXG5cdCAgLy8gVGhlIGhpZ2ggMTcgZGlnaXRzIG9mIHRoZSBzaWduaWZpY2FuZFxuXG5cblx0ICBzaWduaWZpY2FuZEhpZ2ggPSBsb25nXzEuZnJvbU51bWJlcigwKTsgLy8gVGhlIGxvdyAxNyBkaWdpdHMgb2YgdGhlIHNpZ25pZmljYW5kXG5cblx0ICBzaWduaWZpY2FuZExvdyA9IGxvbmdfMS5mcm9tTnVtYmVyKDApOyAvLyByZWFkIGEgemVyb1xuXG5cdCAgaWYgKHNpZ25pZmljYW50RGlnaXRzID09PSAwKSB7XG5cdCAgICBzaWduaWZpY2FuZEhpZ2ggPSBsb25nXzEuZnJvbU51bWJlcigwKTtcblx0ICAgIHNpZ25pZmljYW5kTG93ID0gbG9uZ18xLmZyb21OdW1iZXIoMCk7XG5cdCAgfSBlbHNlIGlmIChsYXN0RGlnaXQgLSBmaXJzdERpZ2l0IDwgMTcpIHtcblx0ICAgIHZhciBfZElkeCA9IGZpcnN0RGlnaXQ7XG5cdCAgICBzaWduaWZpY2FuZExvdyA9IGxvbmdfMS5mcm9tTnVtYmVyKGRpZ2l0c1tfZElkeCsrXSk7XG5cdCAgICBzaWduaWZpY2FuZEhpZ2ggPSBuZXcgbG9uZ18xKDAsIDApO1xuXG5cdCAgICBmb3IgKDsgX2RJZHggPD0gbGFzdERpZ2l0OyBfZElkeCsrKSB7XG5cdCAgICAgIHNpZ25pZmljYW5kTG93ID0gc2lnbmlmaWNhbmRMb3cubXVsdGlwbHkobG9uZ18xLmZyb21OdW1iZXIoMTApKTtcblx0ICAgICAgc2lnbmlmaWNhbmRMb3cgPSBzaWduaWZpY2FuZExvdy5hZGQobG9uZ18xLmZyb21OdW1iZXIoZGlnaXRzW19kSWR4XSkpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgX2RJZHgyID0gZmlyc3REaWdpdDtcblx0ICAgIHNpZ25pZmljYW5kSGlnaCA9IGxvbmdfMS5mcm9tTnVtYmVyKGRpZ2l0c1tfZElkeDIrK10pO1xuXG5cdCAgICBmb3IgKDsgX2RJZHgyIDw9IGxhc3REaWdpdCAtIDE3OyBfZElkeDIrKykge1xuXHQgICAgICBzaWduaWZpY2FuZEhpZ2ggPSBzaWduaWZpY2FuZEhpZ2gubXVsdGlwbHkobG9uZ18xLmZyb21OdW1iZXIoMTApKTtcblx0ICAgICAgc2lnbmlmaWNhbmRIaWdoID0gc2lnbmlmaWNhbmRIaWdoLmFkZChsb25nXzEuZnJvbU51bWJlcihkaWdpdHNbX2RJZHgyXSkpO1xuXHQgICAgfVxuXG5cdCAgICBzaWduaWZpY2FuZExvdyA9IGxvbmdfMS5mcm9tTnVtYmVyKGRpZ2l0c1tfZElkeDIrK10pO1xuXG5cdCAgICBmb3IgKDsgX2RJZHgyIDw9IGxhc3REaWdpdDsgX2RJZHgyKyspIHtcblx0ICAgICAgc2lnbmlmaWNhbmRMb3cgPSBzaWduaWZpY2FuZExvdy5tdWx0aXBseShsb25nXzEuZnJvbU51bWJlcigxMCkpO1xuXHQgICAgICBzaWduaWZpY2FuZExvdyA9IHNpZ25pZmljYW5kTG93LmFkZChsb25nXzEuZnJvbU51bWJlcihkaWdpdHNbX2RJZHgyXSkpO1xuXHQgICAgfVxuXHQgIH1cblxuXHQgIHZhciBzaWduaWZpY2FuZCA9IG11bHRpcGx5NjR4MihzaWduaWZpY2FuZEhpZ2gsIGxvbmdfMS5mcm9tU3RyaW5nKCcxMDAwMDAwMDAwMDAwMDAwMDAnKSk7XG5cdCAgc2lnbmlmaWNhbmQubG93ID0gc2lnbmlmaWNhbmQubG93LmFkZChzaWduaWZpY2FuZExvdyk7XG5cblx0ICBpZiAobGVzc1RoYW4oc2lnbmlmaWNhbmQubG93LCBzaWduaWZpY2FuZExvdykpIHtcblx0ICAgIHNpZ25pZmljYW5kLmhpZ2ggPSBzaWduaWZpY2FuZC5oaWdoLmFkZChsb25nXzEuZnJvbU51bWJlcigxKSk7XG5cdCAgfSAvLyBCaWFzZWQgZXhwb25lbnRcblxuXG5cdCAgYmlhc2VkRXhwb25lbnQgPSBleHBvbmVudCArIEVYUE9ORU5UX0JJQVM7XG5cdCAgdmFyIGRlYyA9IHtcblx0ICAgIGxvdzogbG9uZ18xLmZyb21OdW1iZXIoMCksXG5cdCAgICBoaWdoOiBsb25nXzEuZnJvbU51bWJlcigwKVxuXHQgIH07IC8vIEVuY29kZSBjb21iaW5hdGlvbiwgZXhwb25lbnQsIGFuZCBzaWduaWZpY2FuZC5cblxuXHQgIGlmIChzaWduaWZpY2FuZC5oaWdoLnNoaWZ0UmlnaHRVbnNpZ25lZCg0OSkuYW5kKGxvbmdfMS5mcm9tTnVtYmVyKDEpKS5lcXVhbHMobG9uZ18xLmZyb21OdW1iZXIoMSkpKSB7XG5cdCAgICAvLyBFbmNvZGUgJzExJyBpbnRvIGJpdHMgMSB0byAzXG5cdCAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tTnVtYmVyKDB4Mykuc2hpZnRMZWZ0KDYxKSk7XG5cdCAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tTnVtYmVyKGJpYXNlZEV4cG9uZW50KS5hbmQobG9uZ18xLmZyb21OdW1iZXIoMHgzZmZmKS5zaGlmdExlZnQoNDcpKSk7XG5cdCAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKHNpZ25pZmljYW5kLmhpZ2guYW5kKGxvbmdfMS5mcm9tTnVtYmVyKDB4N2ZmZmZmZmZmZmZmKSkpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBkZWMuaGlnaCA9IGRlYy5oaWdoLm9yKGxvbmdfMS5mcm9tTnVtYmVyKGJpYXNlZEV4cG9uZW50ICYgMHgzZmZmKS5zaGlmdExlZnQoNDkpKTtcblx0ICAgIGRlYy5oaWdoID0gZGVjLmhpZ2gub3Ioc2lnbmlmaWNhbmQuaGlnaC5hbmQobG9uZ18xLmZyb21OdW1iZXIoMHgxZmZmZmZmZmZmZmZmKSkpO1xuXHQgIH1cblxuXHQgIGRlYy5sb3cgPSBzaWduaWZpY2FuZC5sb3c7IC8vIEVuY29kZSBzaWduXG5cblx0ICBpZiAoaXNOZWdhdGl2ZSkge1xuXHQgICAgZGVjLmhpZ2ggPSBkZWMuaGlnaC5vcihsb25nXzEuZnJvbVN0cmluZygnOTIyMzM3MjAzNjg1NDc3NTgwOCcpKTtcblx0ICB9IC8vIEVuY29kZSBpbnRvIGEgYnVmZmVyXG5cblxuXHQgIHZhciBidWZmZXIkJDEgPSBCdWZmZXIkMi5hbGxvYygxNik7XG5cdCAgaW5kZXggPSAwOyAvLyBFbmNvZGUgdGhlIGxvdyA2NCBiaXRzIG9mIHRoZSBkZWNpbWFsXG5cdCAgLy8gRW5jb2RlIGxvdyBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmxvdyAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5sb3cgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5sb3cgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5sb3cubG93ID4+IDI0ICYgMHhmZjsgLy8gRW5jb2RlIGhpZ2ggYml0c1xuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5oaWdoICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmhpZ2ggPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmxvdy5oaWdoID4+IDE2ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMubG93LmhpZ2ggPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgdGhlIGhpZ2ggNjQgYml0cyBvZiB0aGUgZGVjaW1hbFxuXHQgIC8vIEVuY29kZSBsb3cgYml0c1xuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmhpZ2gubG93ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5sb3cgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gZGVjLmhpZ2gubG93ID4+IDE2ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5sb3cgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5oaWdoICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBkZWMuaGlnaC5oaWdoID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5oaWdoLmhpZ2ggPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGRlYy5oaWdoLmhpZ2ggPj4gMjQgJiAweGZmOyAvLyBSZXR1cm4gdGhlIG5ldyBEZWNpbWFsMTI4XG5cblx0ICByZXR1cm4gbmV3IERlY2ltYWwxMjgoYnVmZmVyJCQxKTtcblx0fTsgLy8gRXh0cmFjdCBsZWFzdCBzaWduaWZpY2FudCA1IGJpdHNcblxuXG5cdHZhciBDT01CSU5BVElPTl9NQVNLID0gMHgxZjsgLy8gRXh0cmFjdCBsZWFzdCBzaWduaWZpY2FudCAxNCBiaXRzXG5cblx0dmFyIEVYUE9ORU5UX01BU0sgPSAweDNmZmY7IC8vIFZhbHVlIG9mIGNvbWJpbmF0aW9uIGZpZWxkIGZvciBJbmZcblxuXHR2YXIgQ09NQklOQVRJT05fSU5GSU5JVFkgPSAzMDsgLy8gVmFsdWUgb2YgY29tYmluYXRpb24gZmllbGQgZm9yIE5hTlxuXG5cdHZhciBDT01CSU5BVElPTl9OQU4gPSAzMTtcblx0LyoqXG5cdCAqIENyZWF0ZSBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmF3IERlY2ltYWwxMjggdmFsdWVcblx0ICpcblx0ICogQG1ldGhvZFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IHJldHVybnMgYSBEZWNpbWFsMTI4IHN0cmluZyByZXByZXNlbnRhdGlvbi5cblx0ICovXG5cblx0RGVjaW1hbDEyOC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLy8gTm90ZTogYml0cyBpbiB0aGlzIHJvdXRpbmUgYXJlIHJlZmVycmVkIHRvIHN0YXJ0aW5nIGF0IDAsXG5cdCAgLy8gZnJvbSB0aGUgc2lnbiBiaXQsIHRvd2FyZHMgdGhlIGNvZWZmaWNpZW50LlxuXHQgIC8vIGJpdHMgMCAtIDMxXG5cdCAgdmFyIGhpZ2g7IC8vIGJpdHMgMzIgLSA2M1xuXG5cdCAgdmFyIG1pZGg7IC8vIGJpdHMgNjQgLSA5NVxuXG5cdCAgdmFyIG1pZGw7IC8vIGJpdHMgOTYgLSAxMjdcblxuXHQgIHZhciBsb3c7IC8vIGJpdHMgMSAtIDVcblxuXHQgIHZhciBjb21iaW5hdGlvbjsgLy8gZGVjb2RlZCBiaWFzZWQgZXhwb25lbnQgKDE0IGJpdHMpXG5cblx0ICB2YXIgYmlhc2VkX2V4cG9uZW50OyAvLyB0aGUgbnVtYmVyIG9mIHNpZ25pZmljYW5kIGRpZ2l0c1xuXG5cdCAgdmFyIHNpZ25pZmljYW5kX2RpZ2l0cyA9IDA7IC8vIHRoZSBiYXNlLTEwIGRpZ2l0cyBpbiB0aGUgc2lnbmlmaWNhbmRcblxuXHQgIHZhciBzaWduaWZpY2FuZCA9IG5ldyBBcnJheSgzNik7XG5cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ25pZmljYW5kLmxlbmd0aDsgaSsrKSB7XG5cdCAgICBzaWduaWZpY2FuZFtpXSA9IDA7XG5cdCAgfSAvLyByZWFkIHBvaW50ZXIgaW50byBzaWduaWZpY2FuZFxuXG5cblx0ICB2YXIgaW5kZXggPSAwOyAvLyB1bmJpYXNlZCBleHBvbmVudFxuXG5cdCAgdmFyIGV4cG9uZW50OyAvLyB0aGUgZXhwb25lbnQgaWYgc2NpZW50aWZpYyBub3RhdGlvbiBpcyB1c2VkXG5cblx0ICB2YXIgc2NpZW50aWZpY19leHBvbmVudDsgLy8gdHJ1ZSBpZiB0aGUgbnVtYmVyIGlzIHplcm9cblxuXHQgIHZhciBpc196ZXJvID0gZmFsc2U7IC8vIHRoZSBtb3N0IHNpZ25pZmNhbnQgc2lnbmlmaWNhbmQgYml0cyAoNTAtNDYpXG5cblx0ICB2YXIgc2lnbmlmaWNhbmRfbXNiOyAvLyB0ZW1wb3Jhcnkgc3RvcmFnZSBmb3Igc2lnbmlmaWNhbmQgZGVjb2RpbmdcblxuXHQgIHZhciBzaWduaWZpY2FuZDEyOCA9IHtcblx0ICAgIHBhcnRzOiBuZXcgQXJyYXkoNClcblx0ICB9OyAvLyBpbmRleGluZyB2YXJpYWJsZXNcblxuXHQgIHZhciBqLCBrOyAvLyBPdXRwdXQgc3RyaW5nXG5cblx0ICB2YXIgc3RyaW5nID0gW107IC8vIFVucGFjayBpbmRleFxuXG5cdCAgaW5kZXggPSAwOyAvLyBCdWZmZXIgcmVmZXJlbmNlXG5cblx0ICB2YXIgYnVmZmVyJCQxID0gdGhpcy5ieXRlczsgLy8gVW5wYWNrIHRoZSBsb3cgNjRiaXRzIGludG8gYSBsb25nXG5cblx0ICBsb3cgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblx0ICBtaWRsID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIFVucGFjayB0aGUgaGlnaCA2NGJpdHMgaW50byBhIGxvbmdcblxuXHQgIG1pZGggPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblx0ICBoaWdoID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIFVucGFjayBpbmRleFxuXG5cdCAgaW5kZXggPSAwOyAvLyBDcmVhdGUgdGhlIHN0YXRlIG9mIHRoZSBkZWNpbWFsXG5cblx0ICB2YXIgZGVjID0ge1xuXHQgICAgbG93OiBuZXcgbG9uZ18xKGxvdywgbWlkbCksXG5cdCAgICBoaWdoOiBuZXcgbG9uZ18xKG1pZGgsIGhpZ2gpXG5cdCAgfTtcblxuXHQgIGlmIChkZWMuaGlnaC5sZXNzVGhhbihsb25nXzEuWkVSTykpIHtcblx0ICAgIHN0cmluZy5wdXNoKCctJyk7XG5cdCAgfSAvLyBEZWNvZGUgY29tYmluYXRpb24gZmllbGQgYW5kIGV4cG9uZW50XG5cblxuXHQgIGNvbWJpbmF0aW9uID0gaGlnaCA+PiAyNiAmIENPTUJJTkFUSU9OX01BU0s7XG5cblx0ICBpZiAoY29tYmluYXRpb24gPj4gMyA9PT0gMykge1xuXHQgICAgLy8gQ2hlY2sgZm9yICdzcGVjaWFsJyB2YWx1ZXNcblx0ICAgIGlmIChjb21iaW5hdGlvbiA9PT0gQ09NQklOQVRJT05fSU5GSU5JVFkpIHtcblx0ICAgICAgcmV0dXJuIHN0cmluZy5qb2luKCcnKSArICdJbmZpbml0eSc7XG5cdCAgICB9IGVsc2UgaWYgKGNvbWJpbmF0aW9uID09PSBDT01CSU5BVElPTl9OQU4pIHtcblx0ICAgICAgcmV0dXJuICdOYU4nO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgYmlhc2VkX2V4cG9uZW50ID0gaGlnaCA+PiAxNSAmIEVYUE9ORU5UX01BU0s7XG5cdCAgICAgIHNpZ25pZmljYW5kX21zYiA9IDB4MDggKyAoaGlnaCA+PiAxNCAmIDB4MDEpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICBzaWduaWZpY2FuZF9tc2IgPSBoaWdoID4+IDE0ICYgMHgwNztcblx0ICAgIGJpYXNlZF9leHBvbmVudCA9IGhpZ2ggPj4gMTcgJiBFWFBPTkVOVF9NQVNLO1xuXHQgIH1cblxuXHQgIGV4cG9uZW50ID0gYmlhc2VkX2V4cG9uZW50IC0gRVhQT05FTlRfQklBUzsgLy8gQ3JlYXRlIHN0cmluZyBvZiBzaWduaWZpY2FuZCBkaWdpdHNcblx0ICAvLyBDb252ZXJ0IHRoZSAxMTQtYml0IGJpbmFyeSBudW1iZXIgcmVwcmVzZW50ZWQgYnlcblx0ICAvLyAoc2lnbmlmaWNhbmRfaGlnaCwgc2lnbmlmaWNhbmRfbG93KSB0byBhdCBtb3N0IDM0IGRlY2ltYWxcblx0ICAvLyBkaWdpdHMgdGhyb3VnaCBtb2R1bG8gYW5kIGRpdmlzaW9uLlxuXG5cdCAgc2lnbmlmaWNhbmQxMjgucGFydHNbMF0gPSAoaGlnaCAmIDB4M2ZmZikgKyAoKHNpZ25pZmljYW5kX21zYiAmIDB4ZikgPDwgMTQpO1xuXHQgIHNpZ25pZmljYW5kMTI4LnBhcnRzWzFdID0gbWlkaDtcblx0ICBzaWduaWZpY2FuZDEyOC5wYXJ0c1syXSA9IG1pZGw7XG5cdCAgc2lnbmlmaWNhbmQxMjgucGFydHNbM10gPSBsb3c7XG5cblx0ICBpZiAoc2lnbmlmaWNhbmQxMjgucGFydHNbMF0gPT09IDAgJiYgc2lnbmlmaWNhbmQxMjgucGFydHNbMV0gPT09IDAgJiYgc2lnbmlmaWNhbmQxMjgucGFydHNbMl0gPT09IDAgJiYgc2lnbmlmaWNhbmQxMjgucGFydHNbM10gPT09IDApIHtcblx0ICAgIGlzX3plcm8gPSB0cnVlO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBmb3IgKGsgPSAzOyBrID49IDA7IGstLSkge1xuXHQgICAgICB2YXIgbGVhc3RfZGlnaXRzID0gMDsgLy8gUGVmb3JtIHRoZSBkaXZpZGVcblxuXHQgICAgICB2YXIgcmVzdWx0ID0gZGl2aWRldTEyOChzaWduaWZpY2FuZDEyOCk7XG5cdCAgICAgIHNpZ25pZmljYW5kMTI4ID0gcmVzdWx0LnF1b3RpZW50O1xuXHQgICAgICBsZWFzdF9kaWdpdHMgPSByZXN1bHQucmVtLmxvdzsgLy8gV2Ugbm93IGhhdmUgdGhlIDkgbGVhc3Qgc2lnbmlmaWNhbnQgZGlnaXRzIChpbiBiYXNlIDIpLlxuXHQgICAgICAvLyBDb252ZXJ0IGFuZCBvdXRwdXQgdG8gc3RyaW5nLlxuXG5cdCAgICAgIGlmICghbGVhc3RfZGlnaXRzKSBjb250aW51ZTtcblxuXHQgICAgICBmb3IgKGogPSA4OyBqID49IDA7IGotLSkge1xuXHQgICAgICAgIC8vIHNpZ25pZmljYW5kW2sgKiA5ICsgal0gPSBNYXRoLnJvdW5kKGxlYXN0X2RpZ2l0cyAlIDEwKTtcblx0ICAgICAgICBzaWduaWZpY2FuZFtrICogOSArIGpdID0gbGVhc3RfZGlnaXRzICUgMTA7IC8vIGxlYXN0X2RpZ2l0cyA9IE1hdGgucm91bmQobGVhc3RfZGlnaXRzIC8gMTApO1xuXG5cdCAgICAgICAgbGVhc3RfZGlnaXRzID0gTWF0aC5mbG9vcihsZWFzdF9kaWdpdHMgLyAxMCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IC8vIE91dHB1dCBmb3JtYXQgb3B0aW9uczpcblx0ICAvLyBTY2llbnRpZmljIC0gWy1dZC5kZGRFKCsvLSlkZCBvciBbLV1kRSgrLy0pZGRcblx0ICAvLyBSZWd1bGFyICAgIC0gZGRkLmRkZFxuXG5cblx0ICBpZiAoaXNfemVybykge1xuXHQgICAgc2lnbmlmaWNhbmRfZGlnaXRzID0gMTtcblx0ICAgIHNpZ25pZmljYW5kW2luZGV4XSA9IDA7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHNpZ25pZmljYW5kX2RpZ2l0cyA9IDM2O1xuXG5cdCAgICB3aGlsZSAoIXNpZ25pZmljYW5kW2luZGV4XSkge1xuXHQgICAgICBzaWduaWZpY2FuZF9kaWdpdHMgPSBzaWduaWZpY2FuZF9kaWdpdHMgLSAxO1xuXHQgICAgICBpbmRleCA9IGluZGV4ICsgMTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICBzY2llbnRpZmljX2V4cG9uZW50ID0gc2lnbmlmaWNhbmRfZGlnaXRzIC0gMSArIGV4cG9uZW50OyAvLyBUaGUgc2NpZW50aWZpYyBleHBvbmVudCBjaGVja3MgYXJlIGRpY3RhdGVkIGJ5IHRoZSBzdHJpbmcgY29udmVyc2lvblxuXHQgIC8vIHNwZWNpZmljYXRpb24gYW5kIGFyZSBzb21ld2hhdCBhcmJpdHJhcnkgY3V0b2Zmcy5cblx0ICAvL1xuXHQgIC8vIFdlIG11c3QgY2hlY2sgZXhwb25lbnQgPiAwLCBiZWNhdXNlIGlmIHRoaXMgaXMgdGhlIGNhc2UsIHRoZSBudW1iZXJcblx0ICAvLyBoYXMgdHJhaWxpbmcgemVyb3MuICBIb3dldmVyLCB3ZSAqY2Fubm90KiBvdXRwdXQgdGhlc2UgdHJhaWxpbmcgemVyb3MsXG5cdCAgLy8gYmVjYXVzZSBkb2luZyBzbyB3b3VsZCBjaGFuZ2UgdGhlIHByZWNpc2lvbiBvZiB0aGUgdmFsdWUsIGFuZCB3b3VsZFxuXHQgIC8vIGNoYW5nZSBzdG9yZWQgZGF0YSBpZiB0aGUgc3RyaW5nIGNvbnZlcnRlZCBudW1iZXIgaXMgcm91bmQgdHJpcHBlZC5cblxuXHQgIGlmIChzY2llbnRpZmljX2V4cG9uZW50ID49IDM0IHx8IHNjaWVudGlmaWNfZXhwb25lbnQgPD0gLTcgfHwgZXhwb25lbnQgPiAwKSB7XG5cdCAgICAvLyBTY2llbnRpZmljIGZvcm1hdFxuXHQgICAgLy8gaWYgdGhlcmUgYXJlIHRvbyBtYW55IHNpZ25pZmljYW50IGRpZ2l0cywgd2Ugc2hvdWxkIGp1c3QgYmUgdHJlYXRpbmcgbnVtYmVyc1xuXHQgICAgLy8gYXMgKyBvciAtIDAgYW5kIHVzaW5nIHRoZSBub24tc2NpZW50aWZpYyBleHBvbmVudCAodGhpcyBpcyBmb3IgdGhlIFwiaW52YWxpZFxuXHQgICAgLy8gcmVwcmVzZW50YXRpb24gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgMC8tMFwiIHNwZWMgY2FzZXMgaW4gZGVjaW1hbDEyOC0xLmpzb24pXG5cdCAgICBpZiAoc2lnbmlmaWNhbmRfZGlnaXRzID4gMzQpIHtcblx0ICAgICAgc3RyaW5nLnB1c2goMCk7XG5cdCAgICAgIGlmIChleHBvbmVudCA+IDApIHN0cmluZy5wdXNoKCdFKycgKyBleHBvbmVudCk7ZWxzZSBpZiAoZXhwb25lbnQgPCAwKSBzdHJpbmcucHVzaCgnRScgKyBleHBvbmVudCk7XG5cdCAgICAgIHJldHVybiBzdHJpbmcuam9pbignJyk7XG5cdCAgICB9XG5cblx0ICAgIHN0cmluZy5wdXNoKHNpZ25pZmljYW5kW2luZGV4KytdKTtcblx0ICAgIHNpZ25pZmljYW5kX2RpZ2l0cyA9IHNpZ25pZmljYW5kX2RpZ2l0cyAtIDE7XG5cblx0ICAgIGlmIChzaWduaWZpY2FuZF9kaWdpdHMpIHtcblx0ICAgICAgc3RyaW5nLnB1c2goJy4nKTtcblx0ICAgIH1cblxuXHQgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNpZ25pZmljYW5kX2RpZ2l0czsgX2krKykge1xuXHQgICAgICBzdHJpbmcucHVzaChzaWduaWZpY2FuZFtpbmRleCsrXSk7XG5cdCAgICB9IC8vIEV4cG9uZW50XG5cblxuXHQgICAgc3RyaW5nLnB1c2goJ0UnKTtcblxuXHQgICAgaWYgKHNjaWVudGlmaWNfZXhwb25lbnQgPiAwKSB7XG5cdCAgICAgIHN0cmluZy5wdXNoKCcrJyArIHNjaWVudGlmaWNfZXhwb25lbnQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc3RyaW5nLnB1c2goc2NpZW50aWZpY19leHBvbmVudCk7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIFJlZ3VsYXIgZm9ybWF0IHdpdGggbm8gZGVjaW1hbCBwbGFjZVxuXHQgICAgaWYgKGV4cG9uZW50ID49IDApIHtcblx0ICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc2lnbmlmaWNhbmRfZGlnaXRzOyBfaTIrKykge1xuXHQgICAgICAgIHN0cmluZy5wdXNoKHNpZ25pZmljYW5kW2luZGV4KytdKTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFyIHJhZGl4X3Bvc2l0aW9uID0gc2lnbmlmaWNhbmRfZGlnaXRzICsgZXhwb25lbnQ7IC8vIG5vbi16ZXJvIGRpZ2l0cyBiZWZvcmUgcmFkaXhcblxuXHQgICAgICBpZiAocmFkaXhfcG9zaXRpb24gPiAwKSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgcmFkaXhfcG9zaXRpb247IF9pMysrKSB7XG5cdCAgICAgICAgICBzdHJpbmcucHVzaChzaWduaWZpY2FuZFtpbmRleCsrXSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHN0cmluZy5wdXNoKCcwJyk7XG5cdCAgICAgIH1cblxuXHQgICAgICBzdHJpbmcucHVzaCgnLicpOyAvLyBhZGQgbGVhZGluZyB6ZXJvcyBhZnRlciByYWRpeFxuXG5cdCAgICAgIHdoaWxlIChyYWRpeF9wb3NpdGlvbisrIDwgMCkge1xuXHQgICAgICAgIHN0cmluZy5wdXNoKCcwJyk7XG5cdCAgICAgIH1cblxuXHQgICAgICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBzaWduaWZpY2FuZF9kaWdpdHMgLSBNYXRoLm1heChyYWRpeF9wb3NpdGlvbiAtIDEsIDApOyBfaTQrKykge1xuXHQgICAgICAgIHN0cmluZy5wdXNoKHNpZ25pZmljYW5kW2luZGV4KytdKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBzdHJpbmcuam9pbignJyk7XG5cdH07XG5cblx0RGVjaW1hbDEyOC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXHQgIHJldHVybiB7XG5cdCAgICAkbnVtYmVyRGVjaW1hbDogdGhpcy50b1N0cmluZygpXG5cdCAgfTtcblx0fTtcblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHREZWNpbWFsMTI4LnByb3RvdHlwZS50b0V4dGVuZGVkSlNPTiA9IGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4ge1xuXHQgICAgJG51bWJlckRlY2ltYWw6IHRoaXMudG9TdHJpbmcoKVxuXHQgIH07XG5cdH07XG5cdC8qKlxuXHQgKiBAaWdub3JlXG5cdCAqL1xuXG5cblx0RGVjaW1hbDEyOC5mcm9tRXh0ZW5kZWRKU09OID0gZnVuY3Rpb24gKGRvYykge1xuXHQgIHJldHVybiBEZWNpbWFsMTI4LmZyb21TdHJpbmcoZG9jLiRudW1iZXJEZWNpbWFsKTtcblx0fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVjaW1hbDEyOC5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG5cdCAgdmFsdWU6ICdEZWNpbWFsMTI4J1xuXHR9KTtcblx0dmFyIGRlY2ltYWwxMjggPSBEZWNpbWFsMTI4O1xuXG5cdC8qKlxuXHQgKiBBIGNsYXNzIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBCU09OIE1pbktleSB0eXBlLlxuXHQgKi9cblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2skNyhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMkNyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cblx0ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJDcoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyQ3KENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkNyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXHR2YXIgTWluS2V5ID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgTWluS2V5IHR5cGVcblx0ICAgKlxuXHQgICAqIEByZXR1cm4ge01pbktleX0gQSBNaW5LZXkgaW5zdGFuY2Vcblx0ICAgKi9cblx0ICBmdW5jdGlvbiBNaW5LZXkoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2skNyh0aGlzLCBNaW5LZXkpO1xuXHQgIH1cblx0ICAvKipcblx0ICAgKiBAaWdub3JlXG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyQ3KE1pbktleSwgW3tcblx0ICAgIGtleTogXCJ0b0V4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvRXh0ZW5kZWRKU09OKCkge1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgICRtaW5LZXk6IDFcblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9XSwgW3tcblx0ICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTigpIHtcblx0ICAgICAgcmV0dXJuIG5ldyBNaW5LZXkoKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gTWluS2V5O1xuXHR9KCk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KE1pbktleS5wcm90b3R5cGUsICdfYnNvbnR5cGUnLCB7XG5cdCAgdmFsdWU6ICdNaW5LZXknXG5cdH0pO1xuXHR2YXIgbWluX2tleSA9IE1pbktleTtcblxuXHQvKipcblx0ICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBNYXhLZXkgdHlwZS5cblx0ICovXG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDgoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDgodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQ4KENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkOChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDgoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblx0dmFyIE1heEtleSA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKCkge1xuXHQgIC8qKlxuXHQgICAqIENyZWF0ZSBhIE1heEtleSB0eXBlXG5cdCAgICpcblx0ICAgKiBAcmV0dXJuIHtNYXhLZXl9IEEgTWF4S2V5IGluc3RhbmNlXG5cdCAgICovXG5cdCAgZnVuY3Rpb24gTWF4S2V5KCkge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrJDgodGhpcywgTWF4S2V5KTtcblx0ICB9XG5cdCAgLyoqXG5cdCAgICogQGlnbm9yZVxuXHQgICAqL1xuXG5cblx0ICBfY3JlYXRlQ2xhc3MkOChNYXhLZXksIFt7XG5cdCAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcblx0ICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAkbWF4S2V5OiAxXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oKSB7XG5cdCAgICAgIHJldHVybiBuZXcgTWF4S2V5KCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIE1heEtleTtcblx0fSgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXhLZXkucHJvdG90eXBlLCAnX2Jzb250eXBlJywge1xuXHQgIHZhbHVlOiAnTWF4S2V5J1xuXHR9KTtcblx0dmFyIG1heF9rZXkgPSBNYXhLZXk7XG5cblx0LyoqXG5cdCAqIEEgY2xhc3MgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJTT04gREJSZWYgdHlwZS5cblx0ICovXG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrJDkoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzJDkodGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5cdGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyQ5KENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMkOShDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzJDkoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblx0dmFyIERCUmVmID1cblx0LyojX19QVVJFX18qL1xuXHRmdW5jdGlvbiAoKSB7XG5cdCAgLyoqXG5cdCAgICogQ3JlYXRlIGEgREJSZWYgdHlwZVxuXHQgICAqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb24gdGhlIGNvbGxlY3Rpb24gbmFtZS5cblx0ICAgKiBAcGFyYW0ge09iamVjdElkfSBvaWQgdGhlIHJlZmVyZW5jZSBPYmplY3RJZC5cblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gW2RiXSBvcHRpb25hbCBkYiBuYW1lLCBpZiBvbWl0dGVkIHRoZSByZWZlcmVuY2UgaXMgbG9jYWwgdG8gdGhlIGN1cnJlbnQgZGIuXG5cdCAgICogQHJldHVybiB7REJSZWZ9XG5cdCAgICovXG5cdCAgZnVuY3Rpb24gREJSZWYoY29sbGVjdGlvbiwgb2lkLCBkYiwgZmllbGRzKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2skOSh0aGlzLCBEQlJlZik7XG5cblx0ICAgIC8vIGNoZWNrIGlmIG5hbWVzcGFjZSBoYXMgYmVlbiBwcm92aWRlZFxuXHQgICAgdmFyIHBhcnRzID0gY29sbGVjdGlvbi5zcGxpdCgnLicpO1xuXG5cdCAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG5cdCAgICAgIGRiID0gcGFydHMuc2hpZnQoKTtcblx0ICAgICAgY29sbGVjdGlvbiA9IHBhcnRzLnNoaWZ0KCk7XG5cdCAgICB9XG5cblx0ICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG5cdCAgICB0aGlzLm9pZCA9IG9pZDtcblx0ICAgIHRoaXMuZGIgPSBkYjtcblx0ICAgIHRoaXMuZmllbGRzID0gZmllbGRzIHx8IHt9O1xuXHQgIH1cblx0ICAvKipcblx0ICAgKiBAaWdub3JlXG5cdCAgICogQGFwaSBwcml2YXRlXG5cdCAgICovXG5cblxuXHQgIF9jcmVhdGVDbGFzcyQ5KERCUmVmLCBbe1xuXHQgICAga2V5OiBcInRvSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcblx0ICAgICAgdmFyIG8gPSBPYmplY3QuYXNzaWduKHtcblx0ICAgICAgICAkcmVmOiB0aGlzLmNvbGxlY3Rpb24sXG5cdCAgICAgICAgJGlkOiB0aGlzLm9pZFxuXHQgICAgICB9LCB0aGlzLmZpZWxkcyk7XG5cdCAgICAgIGlmICh0aGlzLmRiICE9IG51bGwpIG8uJGRiID0gdGhpcy5kYjtcblx0ICAgICAgcmV0dXJuIG87XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInRvRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9FeHRlbmRlZEpTT04oKSB7XG5cdCAgICAgIHZhciBvID0ge1xuXHQgICAgICAgICRyZWY6IHRoaXMuY29sbGVjdGlvbixcblx0ICAgICAgICAkaWQ6IHRoaXMub2lkXG5cdCAgICAgIH07XG5cdCAgICAgIGlmICh0aGlzLmRiKSBvLiRkYiA9IHRoaXMuZGI7XG5cdCAgICAgIG8gPSBPYmplY3QuYXNzaWduKG8sIHRoaXMuZmllbGRzKTtcblx0ICAgICAgcmV0dXJuIG87XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIEBpZ25vcmVcblx0ICAgICAqL1xuXG5cdCAgfV0sIFt7XG5cdCAgICBrZXk6IFwiZnJvbUV4dGVuZGVkSlNPTlwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21FeHRlbmRlZEpTT04oZG9jKSB7XG5cdCAgICAgIHZhciBjb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgZG9jKTtcblx0ICAgICAgWyckcmVmJywgJyRpZCcsICckZGInXS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdCAgICAgICAgcmV0dXJuIGRlbGV0ZSBjb3B5W2tdO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIG5ldyBEQlJlZihkb2MuJHJlZiwgZG9jLiRpZCwgZG9jLiRkYiwgY29weSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIERCUmVmO1xuXHR9KCk7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KERCUmVmLnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcblx0ICB2YWx1ZTogJ0RCUmVmJ1xuXHR9KTsgLy8gdGhlIDEueCBwYXJzZXIgdXNlZCBhIFwibmFtZXNwYWNlXCIgcHJvcGVydHksIHdoaWxlIDQueCB1c2VzIFwiY29sbGVjdGlvblwiLiBUbyBlbnN1cmUgYmFja3dhcmRzXG5cdC8vIGNvbXBhdGliaWxpdHksIGxldCdzIGV4cG9zZSBcIm5hbWVzcGFjZVwiXG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KERCUmVmLnByb3RvdHlwZSwgJ25hbWVzcGFjZScsIHtcblx0ICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb247XG5cdCAgfSxcblx0ICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcblx0ICAgIHRoaXMuY29sbGVjdGlvbiA9IHZhbDtcblx0ICB9LFxuXHQgIGNvbmZpZ3VyYWJsZTogZmFsc2Vcblx0fSk7XG5cdHZhciBkYl9yZWYgPSBEQlJlZjtcblxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2skYShpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cblx0ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXMkYSh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cblx0ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzJGEoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyRhKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMkYShDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXHR2YXIgQnVmZmVyJDMgPSBidWZmZXIuQnVmZmVyO1xuXHQvKipcblx0ICogQSBjbGFzcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQlNPTiBCaW5hcnkgdHlwZS5cblx0ICovXG5cblx0dmFyIEJpbmFyeSA9XG5cdC8qI19fUFVSRV9fKi9cblx0ZnVuY3Rpb24gKCkge1xuXHQgIC8qKlxuXHQgICAqIENyZWF0ZSBhIEJpbmFyeSB0eXBlXG5cdCAgICpcblx0ICAgKiBTdWIgdHlwZXNcblx0ICAgKiAgLSAqKkJTT04uQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUKiosIGRlZmF1bHQgQlNPTiB0eXBlLlxuXHQgICAqICAtICoqQlNPTi5CU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OKiosIEJTT04gZnVuY3Rpb24gdHlwZS5cblx0ICAgKiAgLSAqKkJTT04uQlNPTl9CSU5BUllfU1VCVFlQRV9CWVRFX0FSUkFZKiosIEJTT04gYnl0ZSBhcnJheSB0eXBlLlxuXHQgICAqICAtICoqQlNPTi5CU09OX0JJTkFSWV9TVUJUWVBFX1VVSUQqKiwgQlNPTiB1dWlkIHR5cGUuXG5cdCAgICogIC0gKipCU09OLkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1KiosIEJTT04gbWQ1IHR5cGUuXG5cdCAgICogIC0gKipCU09OLkJTT05fQklOQVJZX1NVQlRZUEVfVVNFUl9ERUZJTkVEKiosIEJTT04gdXNlciBkZWZpbmVkIHR5cGUuXG5cdCAgICpcblx0ICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIGEgYnVmZmVyIG9iamVjdCBjb250YWluaW5nIHRoZSBiaW5hcnkgZGF0YS5cblx0ICAgKiBAcGFyYW0ge051bWJlcn0gW3N1YlR5cGVdIHRoZSBvcHRpb24gYmluYXJ5IHR5cGUuXG5cdCAgICogQHJldHVybiB7QmluYXJ5fVxuXHQgICAqL1xuXHQgIGZ1bmN0aW9uIEJpbmFyeShidWZmZXIkJDEsIHN1YlR5cGUpIHtcblx0ICAgIF9jbGFzc0NhbGxDaGVjayRhKHRoaXMsIEJpbmFyeSk7XG5cblx0ICAgIGlmIChidWZmZXIkJDEgIT0gbnVsbCAmJiAhKHR5cGVvZiBidWZmZXIkJDEgPT09ICdzdHJpbmcnKSAmJiAhQnVmZmVyJDMuaXNCdWZmZXIoYnVmZmVyJCQxKSAmJiAhKGJ1ZmZlciQkMSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpICYmICFBcnJheS5pc0FycmF5KGJ1ZmZlciQkMSkpIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb25seSBTdHJpbmcsIEJ1ZmZlciwgVWludDhBcnJheSBvciBBcnJheSBhY2NlcHRlZCcpO1xuXHQgICAgfVxuXG5cdCAgICB0aGlzLnN1Yl90eXBlID0gc3ViVHlwZSA9PSBudWxsID8gQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUIDogc3ViVHlwZTtcblx0ICAgIHRoaXMucG9zaXRpb24gPSAwO1xuXG5cdCAgICBpZiAoYnVmZmVyJCQxICE9IG51bGwgJiYgIShidWZmZXIkJDEgaW5zdGFuY2VvZiBOdW1iZXIpKSB7XG5cdCAgICAgIC8vIE9ubHkgYWNjZXB0IEJ1ZmZlciwgVWludDhBcnJheSBvciBBcnJheXNcblx0ICAgICAgaWYgKHR5cGVvZiBidWZmZXIkJDEgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgLy8gRGlmZmVyZW50IHdheXMgb2Ygd3JpdGluZyB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgZm9yIHRoZSBkaWZmZXJlbnQgdHlwZXNcblx0ICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIkMy5mcm9tKGJ1ZmZlciQkMSk7XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgfHwgQXJyYXkuaXNBcnJheShidWZmZXIkJDEpKSB7XG5cdCAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHdyaXRlU3RyaW5nVG9BcnJheShidWZmZXIkJDEpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvbmx5IFN0cmluZywgQnVmZmVyLCBVaW50OEFycmF5IG9yIEFycmF5IGFjY2VwdGVkJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyJCQxO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5wb3NpdGlvbiA9IGJ1ZmZlciQkMS5sZW5ndGg7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpZiAodHlwZW9mIEJ1ZmZlciQzICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyJDMuYWxsb2MoQmluYXJ5LkJVRkZFUl9TSVpFKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcihCaW5hcnkuQlVGRkVSX1NJWkUpKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheShCaW5hcnkuQlVGRkVSX1NJWkUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8qKlxuXHQgICAqIFVwZGF0ZXMgdGhpcyBiaW5hcnkgd2l0aCBieXRlX3ZhbHVlLlxuXHQgICAqXG5cdCAgICogQG1ldGhvZFxuXHQgICAqIEBwYXJhbSB7c3RyaW5nfSBieXRlX3ZhbHVlIGEgc2luZ2xlIGJ5dGUgd2Ugd2lzaCB0byB3cml0ZS5cblx0ICAgKi9cblxuXG5cdCAgX2NyZWF0ZUNsYXNzJGEoQmluYXJ5LCBbe1xuXHQgICAga2V5OiBcInB1dFwiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHB1dChieXRlX3ZhbHVlKSB7XG5cdCAgICAgIC8vIElmIGl0J3MgYSBzdHJpbmcgYW5kIGEgaGFzIG1vcmUgdGhhbiBvbmUgY2hhcmFjdGVyIHRocm93IGFuIGVycm9yXG5cdCAgICAgIGlmIChieXRlX3ZhbHVlWydsZW5ndGgnXSAhPSBudWxsICYmIHR5cGVvZiBieXRlX3ZhbHVlICE9PSAnbnVtYmVyJyAmJiBieXRlX3ZhbHVlLmxlbmd0aCAhPT0gMSkgdGhyb3cgbmV3IFR5cGVFcnJvcignb25seSBhY2NlcHRzIHNpbmdsZSBjaGFyYWN0ZXIgU3RyaW5nLCBVaW50OEFycmF5IG9yIEFycmF5Jyk7XG5cdCAgICAgIGlmICh0eXBlb2YgYnl0ZV92YWx1ZSAhPT0gJ251bWJlcicgJiYgYnl0ZV92YWx1ZSA8IDAgfHwgYnl0ZV92YWx1ZSA+IDI1NSkgdGhyb3cgbmV3IFR5cGVFcnJvcignb25seSBhY2NlcHRzIG51bWJlciBpbiBhIHZhbGlkIHVuc2lnbmVkIGJ5dGUgcmFuZ2UgMC0yNTUnKTsgLy8gRGVjb2RlIHRoZSBieXRlIHZhbHVlIG9uY2VcblxuXHQgICAgICB2YXIgZGVjb2RlZF9ieXRlID0gbnVsbDtcblxuXHQgICAgICBpZiAodHlwZW9mIGJ5dGVfdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZGVjb2RlZF9ieXRlID0gYnl0ZV92YWx1ZS5jaGFyQ29kZUF0KDApO1xuXHQgICAgICB9IGVsc2UgaWYgKGJ5dGVfdmFsdWVbJ2xlbmd0aCddICE9IG51bGwpIHtcblx0ICAgICAgICBkZWNvZGVkX2J5dGUgPSBieXRlX3ZhbHVlWzBdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGRlY29kZWRfYnl0ZSA9IGJ5dGVfdmFsdWU7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID4gdGhpcy5wb3NpdGlvbikge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyW3RoaXMucG9zaXRpb24rK10gPSBkZWNvZGVkX2J5dGU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIkMyAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpKSB7XG5cdCAgICAgICAgICAvLyBDcmVhdGUgYWRkaXRpb25hbCBvdmVyZmxvdyBidWZmZXJcblx0ICAgICAgICAgIHZhciBidWZmZXIkJDEgPSBCdWZmZXIkMy5hbGxvYyhCaW5hcnkuQlVGRkVSX1NJWkUgKyB0aGlzLmJ1ZmZlci5sZW5ndGgpOyAvLyBDb21iaW5lIHRoZSB0d28gYnVmZmVycyB0b2dldGhlclxuXG5cdCAgICAgICAgICB0aGlzLmJ1ZmZlci5jb3B5KGJ1ZmZlciQkMSwgMCwgMCwgdGhpcy5idWZmZXIubGVuZ3RoKTtcblx0ICAgICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyJCQxO1xuXHQgICAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5wb3NpdGlvbisrXSA9IGRlY29kZWRfYnl0ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFyIF9idWZmZXIgPSBudWxsOyAvLyBDcmVhdGUgYSBuZXcgYnVmZmVyICh0eXBlZCBvciBub3JtYWwgYXJyYXkpXG5cblx0ICAgICAgICAgIGlmIChpc1VpbnQ4QXJyYXkodGhpcy5idWZmZXIpKSB7XG5cdCAgICAgICAgICAgIF9idWZmZXIgPSBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoQmluYXJ5LkJVRkZFUl9TSVpFICsgdGhpcy5idWZmZXIubGVuZ3RoKSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBfYnVmZmVyID0gbmV3IEFycmF5KEJpbmFyeS5CVUZGRVJfU0laRSArIHRoaXMuYnVmZmVyLmxlbmd0aCk7XG5cdCAgICAgICAgICB9IC8vIFdlIG5lZWQgdG8gY29weSBhbGwgdGhlIGNvbnRlbnQgdG8gdGhlIG5ldyBhcnJheVxuXG5cblx0ICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5idWZmZXIubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgX2J1ZmZlcltpXSA9IHRoaXMuYnVmZmVyW2ldO1xuXHQgICAgICAgICAgfSAvLyBSZWFzc2lnbiB0aGUgYnVmZmVyXG5cblxuXHQgICAgICAgICAgdGhpcy5idWZmZXIgPSBfYnVmZmVyOyAvLyBXcml0ZSB0aGUgYnl0ZVxuXG5cdCAgICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLnBvc2l0aW9uKytdID0gZGVjb2RlZF9ieXRlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBXcml0ZXMgYSBidWZmZXIgb3Igc3RyaW5nIHRvIHRoZSBiaW5hcnkuXG5cdCAgICAgKlxuXHQgICAgICogQG1ldGhvZFxuXHQgICAgICogQHBhcmFtIHsoQnVmZmVyfHN0cmluZyl9IHN0cmluZyBhIHN0cmluZyBvciBidWZmZXIgdG8gYmUgd3JpdHRlbiB0byB0aGUgQmluYXJ5IEJTT04gb2JqZWN0LlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBzcGVjaWZ5IHRoZSBiaW5hcnkgb2Ygd2hlcmUgdG8gd3JpdGUgdGhlIGNvbnRlbnQuXG5cdCAgICAgKiBAcmV0dXJuIHtudWxsfVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwid3JpdGVcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB3cml0ZShzdHJpbmcsIG9mZnNldCkge1xuXHQgICAgICBvZmZzZXQgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJyA/IG9mZnNldCA6IHRoaXMucG9zaXRpb247IC8vIElmIHRoZSBidWZmZXIgaXMgdG8gc21hbGwgbGV0J3MgZXh0ZW5kIHRoZSBidWZmZXJcblxuXHQgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDwgb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aCkge1xuXHQgICAgICAgIHZhciBidWZmZXIkJDEgPSBudWxsOyAvLyBJZiB3ZSBhcmUgaW4gbm9kZS5qc1xuXG5cdCAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIkMyAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpKSB7XG5cdCAgICAgICAgICBidWZmZXIkJDEgPSBCdWZmZXIkMy5hbGxvYyh0aGlzLmJ1ZmZlci5sZW5ndGggKyBzdHJpbmcubGVuZ3RoKTtcblx0ICAgICAgICAgIHRoaXMuYnVmZmVyLmNvcHkoYnVmZmVyJCQxLCAwLCAwLCB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoaXNVaW50OEFycmF5KHRoaXMuYnVmZmVyKSkge1xuXHQgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJ1ZmZlclxuXHQgICAgICAgICAgYnVmZmVyJCQxID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKHRoaXMuYnVmZmVyLmxlbmd0aCArIHN0cmluZy5sZW5ndGgpKTsgLy8gQ29weSB0aGUgY29udGVudFxuXG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9zaXRpb247IGkrKykge1xuXHQgICAgICAgICAgICBidWZmZXIkJDFbaV0gPSB0aGlzLmJ1ZmZlcltpXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IC8vIEFzc2lnbiB0aGUgbmV3IGJ1ZmZlclxuXG5cblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlciQkMTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0eXBlb2YgQnVmZmVyJDMgIT09ICd1bmRlZmluZWQnICYmIEJ1ZmZlciQzLmlzQnVmZmVyKHN0cmluZykgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpKSB7XG5cdCAgICAgICAgc3RyaW5nLmNvcHkodGhpcy5idWZmZXIsIG9mZnNldCwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cdCAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCArIHN0cmluZy5sZW5ndGggPiB0aGlzLnBvc2l0aW9uID8gb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aCA6IHRoaXMucG9zaXRpb247IC8vIG9mZnNldCA9IHN0cmluZy5sZW5ndGhcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQnVmZmVyJDMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIEJ1ZmZlciQzLmlzQnVmZmVyKHRoaXMuYnVmZmVyKSkge1xuXHQgICAgICAgIHRoaXMuYnVmZmVyLndyaXRlKHN0cmluZywgb2Zmc2V0LCAnYmluYXJ5Jyk7XG5cdCAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCArIHN0cmluZy5sZW5ndGggPiB0aGlzLnBvc2l0aW9uID8gb2Zmc2V0ICsgc3RyaW5nLmxlbmd0aCA6IHRoaXMucG9zaXRpb247IC8vIG9mZnNldCA9IHN0cmluZy5sZW5ndGg7XG5cdCAgICAgIH0gZWxzZSBpZiAoaXNVaW50OEFycmF5KHN0cmluZykgfHwgQXJyYXkuaXNBcnJheShzdHJpbmcpICYmIHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHN0cmluZy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgIHRoaXMuYnVmZmVyW29mZnNldCsrXSA9IHN0cmluZ1tfaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCA+IHRoaXMucG9zaXRpb24gPyBvZmZzZXQgOiB0aGlzLnBvc2l0aW9uO1xuXHQgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc3RyaW5nLmxlbmd0aDsgX2kyKyspIHtcblx0ICAgICAgICAgIHRoaXMuYnVmZmVyW29mZnNldCsrXSA9IHN0cmluZy5jaGFyQ29kZUF0KF9pMik7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG9mZnNldCA+IHRoaXMucG9zaXRpb24gPyBvZmZzZXQgOiB0aGlzLnBvc2l0aW9uO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIFJlYWRzICoqbGVuZ3RoKiogYnl0ZXMgc3RhcnRpbmcgYXQgKipwb3NpdGlvbioqLlxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvbiByZWFkIGZyb20gdGhlIGdpdmVuIHBvc2l0aW9uIGluIHRoZSBCaW5hcnkuXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZC5cblx0ICAgICAqIEByZXR1cm4ge0J1ZmZlcn1cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInJlYWRcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKHBvc2l0aW9uLCBsZW5ndGgpIHtcblx0ICAgICAgbGVuZ3RoID0gbGVuZ3RoICYmIGxlbmd0aCA+IDAgPyBsZW5ndGggOiB0aGlzLnBvc2l0aW9uOyAvLyBMZXQncyByZXR1cm4gdGhlIGRhdGEgYmFzZWQgb24gdGhlIHR5cGUgd2UgaGF2ZVxuXG5cdCAgICAgIGlmICh0aGlzLmJ1ZmZlclsnc2xpY2UnXSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBsZW5ndGgpO1xuXHQgICAgICB9IC8vIENyZWF0ZSBhIGJ1ZmZlciB0byBrZWVwIHRoZSByZXN1bHRcblxuXG5cdCAgICAgIHZhciBidWZmZXIkJDEgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIobGVuZ3RoKSkgOiBuZXcgQXJyYXkobGVuZ3RoKTtcblxuXHQgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgYnVmZmVyJCQxW2ldID0gdGhpcy5idWZmZXJbcG9zaXRpb24rK107XG5cdCAgICAgIH0gLy8gUmV0dXJuIHRoZSBidWZmZXJcblxuXG5cdCAgICAgIHJldHVybiBidWZmZXIkJDE7XG5cdCAgICB9XG5cdCAgICAvKipcblx0ICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoaXMgYmluYXJ5IGFzIGEgc3RyaW5nLlxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEByZXR1cm4ge3N0cmluZ31cblx0ICAgICAqL1xuXG5cdCAgfSwge1xuXHQgICAga2V5OiBcInZhbHVlXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoYXNSYXcpIHtcblx0ICAgICAgYXNSYXcgPSBhc1JhdyA9PSBudWxsID8gZmFsc2UgOiBhc1JhdzsgLy8gT3B0aW1pemUgdG8gc2VyaWFsaXplIGZvciB0aGUgc2l0dWF0aW9uIHdoZXJlIHRoZSBkYXRhID09IHNpemUgb2YgYnVmZmVyXG5cblx0ICAgICAgaWYgKGFzUmF3ICYmIHR5cGVvZiBCdWZmZXIkMyAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gdGhpcy5wb3NpdGlvbikgcmV0dXJuIHRoaXMuYnVmZmVyOyAvLyBJZiBpdCdzIGEgbm9kZS5qcyBidWZmZXIgb2JqZWN0XG5cblx0ICAgICAgaWYgKHR5cGVvZiBCdWZmZXIkMyAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyJDMuaXNCdWZmZXIodGhpcy5idWZmZXIpKSB7XG5cdCAgICAgICAgcmV0dXJuIGFzUmF3ID8gdGhpcy5idWZmZXIuc2xpY2UoMCwgdGhpcy5wb3NpdGlvbikgOiB0aGlzLmJ1ZmZlci50b1N0cmluZygnYmluYXJ5JywgMCwgdGhpcy5wb3NpdGlvbik7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYgKGFzUmF3KSB7XG5cdCAgICAgICAgICAvLyB3ZSBzdXBwb3J0IHRoZSBzbGljZSBjb21tYW5kIHVzZSBpdFxuXHQgICAgICAgICAgaWYgKHRoaXMuYnVmZmVyWydzbGljZSddICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMucG9zaXRpb24pO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGJ1ZmZlciB0byBjb3B5IGNvbnRlbnQgdG9cblx0ICAgICAgICAgICAgdmFyIG5ld0J1ZmZlciA9IGlzVWludDhBcnJheSh0aGlzLmJ1ZmZlcikgPyBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIodGhpcy5wb3NpdGlvbikpIDogbmV3IEFycmF5KHRoaXMucG9zaXRpb24pOyAvLyBDb3B5IGNvbnRlbnRcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucG9zaXRpb247IGkrKykge1xuXHQgICAgICAgICAgICAgIG5ld0J1ZmZlcltpXSA9IHRoaXMuYnVmZmVyW2ldO1xuXHQgICAgICAgICAgICB9IC8vIFJldHVybiB0aGUgYnVmZmVyXG5cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3QnVmZmVyO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gY29udmVydEFycmF5dG9VdGY4QmluYXJ5U3RyaW5nKHRoaXMuYnVmZmVyLCAwLCB0aGlzLnBvc2l0aW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogTGVuZ3RoLlxuXHQgICAgICpcblx0ICAgICAqIEBtZXRob2Rcblx0ICAgICAqIEByZXR1cm4ge251bWJlcn0gdGhlIGxlbmd0aCBvZiB0aGUgYmluYXJ5LlxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwibGVuZ3RoXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbGVuZ3RoKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5wb3NpdGlvbjtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9KU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5idWZmZXIgIT0gbnVsbCA/IHRoaXMuYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKSA6ICcnO1xuXHQgICAgfVxuXHQgICAgLyoqXG5cdCAgICAgKiBAaWdub3JlXG5cdCAgICAgKi9cblxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKGZvcm1hdCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5idWZmZXIgIT0gbnVsbCA/IHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMucG9zaXRpb24pLnRvU3RyaW5nKGZvcm1hdCkgOiAnJztcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwidG9FeHRlbmRlZEpTT05cIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB0b0V4dGVuZGVkSlNPTigpIHtcblx0ICAgICAgdmFyIGJhc2U2NFN0cmluZyA9IEJ1ZmZlciQzLmlzQnVmZmVyKHRoaXMuYnVmZmVyKSA/IHRoaXMuYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKSA6IEJ1ZmZlciQzLmZyb20odGhpcy5idWZmZXIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0ICAgICAgdmFyIHN1YlR5cGUgPSBOdW1iZXIodGhpcy5zdWJfdHlwZSkudG9TdHJpbmcoMTYpO1xuXHQgICAgICByZXR1cm4ge1xuXHQgICAgICAgICRiaW5hcnk6IHtcblx0ICAgICAgICAgIGJhc2U2NDogYmFzZTY0U3RyaW5nLFxuXHQgICAgICAgICAgc3ViVHlwZTogc3ViVHlwZS5sZW5ndGggPT09IDEgPyAnMCcgKyBzdWJUeXBlIDogc3ViVHlwZVxuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblx0ICAgIH1cblx0ICAgIC8qKlxuXHQgICAgICogQGlnbm9yZVxuXHQgICAgICovXG5cblx0ICB9XSwgW3tcblx0ICAgIGtleTogXCJmcm9tRXh0ZW5kZWRKU09OXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbUV4dGVuZGVkSlNPTihkb2MpIHtcblx0ICAgICAgdmFyIHR5cGUgPSBkb2MuJGJpbmFyeS5zdWJUeXBlID8gcGFyc2VJbnQoZG9jLiRiaW5hcnkuc3ViVHlwZSwgMTYpIDogMDtcblx0ICAgICAgdmFyIGRhdGEgPSBCdWZmZXIkMy5mcm9tKGRvYy4kYmluYXJ5LmJhc2U2NCwgJ2Jhc2U2NCcpO1xuXHQgICAgICByZXR1cm4gbmV3IEJpbmFyeShkYXRhLCB0eXBlKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cblx0ICByZXR1cm4gQmluYXJ5O1xuXHR9KCk7XG5cdC8qKlxuXHQgKiBCaW5hcnkgZGVmYXVsdCBzdWJ0eXBlXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHR2YXIgQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUID0gMDtcblxuXHRmdW5jdGlvbiBpc1VpbnQ4QXJyYXkob2JqKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBVaW50OEFycmF5XSc7XG5cdH1cblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHRmdW5jdGlvbiB3cml0ZVN0cmluZ1RvQXJyYXkoZGF0YSkge1xuXHQgIC8vIENyZWF0ZSBhIGJ1ZmZlclxuXHQgIHZhciBidWZmZXIkJDEgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoZGF0YS5sZW5ndGgpKSA6IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7IC8vIFdyaXRlIHRoZSBjb250ZW50IHRvIHRoZSBidWZmZXJcblxuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuXHQgICAgYnVmZmVyJCQxW2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuXHQgIH0gLy8gV3JpdGUgdGhlIHN0cmluZyB0byB0aGUgYnVmZmVyXG5cblxuXHQgIHJldHVybiBidWZmZXIkJDE7XG5cdH1cblx0LyoqXG5cdCAqIENvbnZlcnQgQXJyYXkgb3QgVWludDhBcnJheSB0byBCaW5hcnkgU3RyaW5nXG5cdCAqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cblxuXHRmdW5jdGlvbiBjb252ZXJ0QXJyYXl0b1V0ZjhCaW5hcnlTdHJpbmcoYnl0ZUFycmF5LCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuXHQgIHZhciByZXN1bHQgPSAnJztcblxuXHQgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuXHQgICAgcmVzdWx0ID0gcmVzdWx0ICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlQXJyYXlbaV0pO1xuXHQgIH1cblxuXHQgIHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRCaW5hcnkuQlVGRkVSX1NJWkUgPSAyNTY7XG5cdC8qKlxuXHQgKiBEZWZhdWx0IEJTT04gdHlwZVxuXHQgKlxuXHQgKiBAY2xhc3Njb25zdGFudCBTVUJUWVBFX0RFRkFVTFRcblx0ICoqL1xuXG5cdEJpbmFyeS5TVUJUWVBFX0RFRkFVTFQgPSAwO1xuXHQvKipcblx0ICogRnVuY3Rpb24gQlNPTiB0eXBlXG5cdCAqXG5cdCAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuXHQgKiovXG5cblx0QmluYXJ5LlNVQlRZUEVfRlVOQ1RJT04gPSAxO1xuXHQvKipcblx0ICogQnl0ZSBBcnJheSBCU09OIHR5cGVcblx0ICpcblx0ICogQGNsYXNzY29uc3RhbnQgU1VCVFlQRV9ERUZBVUxUXG5cdCAqKi9cblxuXHRCaW5hcnkuU1VCVFlQRV9CWVRFX0FSUkFZID0gMjtcblx0LyoqXG5cdCAqIE9MRCBVVUlEIEJTT04gdHlwZVxuXHQgKlxuXHQgKiBAY2xhc3Njb25zdGFudCBTVUJUWVBFX0RFRkFVTFRcblx0ICoqL1xuXG5cdEJpbmFyeS5TVUJUWVBFX1VVSURfT0xEID0gMztcblx0LyoqXG5cdCAqIFVVSUQgQlNPTiB0eXBlXG5cdCAqXG5cdCAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuXHQgKiovXG5cblx0QmluYXJ5LlNVQlRZUEVfVVVJRCA9IDQ7XG5cdC8qKlxuXHQgKiBNRDUgQlNPTiB0eXBlXG5cdCAqXG5cdCAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuXHQgKiovXG5cblx0QmluYXJ5LlNVQlRZUEVfTUQ1ID0gNTtcblx0LyoqXG5cdCAqIFVzZXIgQlNPTiB0eXBlXG5cdCAqXG5cdCAqIEBjbGFzc2NvbnN0YW50IFNVQlRZUEVfREVGQVVMVFxuXHQgKiovXG5cblx0QmluYXJ5LlNVQlRZUEVfVVNFUl9ERUZJTkVEID0gMTI4O1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQmluYXJ5LnByb3RvdHlwZSwgJ19ic29udHlwZScsIHtcblx0ICB2YWx1ZTogJ0JpbmFyeSdcblx0fSk7XG5cdHZhciBiaW5hcnkgPSBCaW5hcnk7XG5cblx0dmFyIGNvbnN0YW50cyA9IHtcblx0ICAvLyBCU09OIE1BWCBWQUxVRVNcblx0ICBCU09OX0lOVDMyX01BWDogMHg3ZmZmZmZmZixcblx0ICBCU09OX0lOVDMyX01JTjogLTB4ODAwMDAwMDAsXG5cdCAgQlNPTl9JTlQ2NF9NQVg6IE1hdGgucG93KDIsIDYzKSAtIDEsXG5cdCAgQlNPTl9JTlQ2NF9NSU46IC1NYXRoLnBvdygyLCA2MyksXG5cdCAgLy8gSlMgTUFYIFBSRUNJU0UgVkFMVUVTXG5cdCAgSlNfSU5UX01BWDogMHgyMDAwMDAwMDAwMDAwMCxcblx0ICAvLyBBbnkgaW50ZWdlciB1cCB0byAyXjUzIGNhbiBiZSBwcmVjaXNlbHkgcmVwcmVzZW50ZWQgYnkgYSBkb3VibGUuXG5cdCAgSlNfSU5UX01JTjogLTB4MjAwMDAwMDAwMDAwMDAsXG5cdCAgLy8gQW55IGludGVnZXIgZG93biB0byAtMl41MyBjYW4gYmUgcHJlY2lzZWx5IHJlcHJlc2VudGVkIGJ5IGEgZG91YmxlLlxuXG5cdCAgLyoqXG5cdCAgICogTnVtYmVyIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX05VTUJFUlxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfTlVNQkVSOiAxLFxuXG5cdCAgLyoqXG5cdCAgICogU3RyaW5nIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX1NUUklOR1xuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfU1RSSU5HOiAyLFxuXG5cdCAgLyoqXG5cdCAgICogT2JqZWN0IEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX09CSkVDVFxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfT0JKRUNUOiAzLFxuXG5cdCAgLyoqXG5cdCAgICogQXJyYXkgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfQVJSQVlcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX0FSUkFZOiA0LFxuXG5cdCAgLyoqXG5cdCAgICogQmluYXJ5IEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX0JJTkFSWVxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfQklOQVJZOiA1LFxuXG5cdCAgLyoqXG5cdCAgICogQmluYXJ5IEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX1VOREVGSU5FRFxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfVU5ERUZJTkVEOiA2LFxuXG5cdCAgLyoqXG5cdCAgICogT2JqZWN0SWQgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfT0lEXG5cdCAgICoqL1xuXHQgIEJTT05fREFUQV9PSUQ6IDcsXG5cblx0ICAvKipcblx0ICAgKiBCb29sZWFuIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX0JPT0xFQU5cblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX0JPT0xFQU46IDgsXG5cblx0ICAvKipcblx0ICAgKiBEYXRlIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX0RBVEVcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX0RBVEU6IDksXG5cblx0ICAvKipcblx0ICAgKiBudWxsIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX05VTExcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX05VTEw6IDEwLFxuXG5cdCAgLyoqXG5cdCAgICogUmVnRXhwIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX1JFR0VYUFxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfUkVHRVhQOiAxMSxcblxuXHQgIC8qKlxuXHQgICAqIENvZGUgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfREJQT0lOVEVSXG5cdCAgICoqL1xuXHQgIEJTT05fREFUQV9EQlBPSU5URVI6IDEyLFxuXG5cdCAgLyoqXG5cdCAgICogQ29kZSBCU09OIFR5cGVcblx0ICAgKlxuXHQgICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9DT0RFXG5cdCAgICoqL1xuXHQgIEJTT05fREFUQV9DT0RFOiAxMyxcblxuXHQgIC8qKlxuXHQgICAqIFN5bWJvbCBCU09OIFR5cGVcblx0ICAgKlxuXHQgICAqIEBjbGFzc2NvbnN0YW50IEJTT05fREFUQV9TWU1CT0xcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX1NZTUJPTDogMTQsXG5cblx0ICAvKipcblx0ICAgKiBDb2RlIHdpdGggU2NvcGUgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfQ09ERV9XX1NDT1BFXG5cdCAgICoqL1xuXHQgIEJTT05fREFUQV9DT0RFX1dfU0NPUEU6IDE1LFxuXG5cdCAgLyoqXG5cdCAgICogMzIgYml0IEludGVnZXIgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfSU5UXG5cdCAgICoqL1xuXHQgIEJTT05fREFUQV9JTlQ6IDE2LFxuXG5cdCAgLyoqXG5cdCAgICogVGltZXN0YW1wIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX1RJTUVTVEFNUFxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfVElNRVNUQU1QOiAxNyxcblxuXHQgIC8qKlxuXHQgICAqIExvbmcgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfTE9OR1xuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfTE9ORzogMTgsXG5cblx0ICAvKipcblx0ICAgKiBMb25nIEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX0RFQ0lNQUwxMjhcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX0RFQ0lNQUwxMjg6IDE5LFxuXG5cdCAgLyoqXG5cdCAgICogTWluS2V5IEJTT04gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9EQVRBX01JTl9LRVlcblx0ICAgKiovXG5cdCAgQlNPTl9EQVRBX01JTl9LRVk6IDB4ZmYsXG5cblx0ICAvKipcblx0ICAgKiBNYXhLZXkgQlNPTiBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0RBVEFfTUFYX0tFWVxuXHQgICAqKi9cblx0ICBCU09OX0RBVEFfTUFYX0tFWTogMHg3ZixcblxuXHQgIC8qKlxuXHQgICAqIEJpbmFyeSBEZWZhdWx0IFR5cGVcblx0ICAgKlxuXHQgICAqIEBjbGFzc2NvbnN0YW50IEJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVFxuXHQgICAqKi9cblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQ6IDAsXG5cblx0ICAvKipcblx0ICAgKiBCaW5hcnkgRnVuY3Rpb24gVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTlxuXHQgICAqKi9cblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OOiAxLFxuXG5cdCAgLyoqXG5cdCAgICogQmluYXJ5IEJ5dGUgQXJyYXkgVHlwZVxuXHQgICAqXG5cdCAgICogQGNsYXNzY29uc3RhbnQgQlNPTl9CSU5BUllfU1VCVFlQRV9CWVRFX0FSUkFZXG5cdCAgICoqL1xuXHQgIEJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWTogMixcblxuXHQgIC8qKlxuXHQgICAqIEJpbmFyeSBVVUlEIFR5cGVcblx0ICAgKlxuXHQgICAqIEBjbGFzc2NvbnN0YW50IEJTT05fQklOQVJZX1NVQlRZUEVfVVVJRFxuXHQgICAqKi9cblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX1VVSUQ6IDMsXG5cblx0ICAvKipcblx0ICAgKiBCaW5hcnkgTUQ1IFR5cGVcblx0ICAgKlxuXHQgICAqIEBjbGFzc2NvbnN0YW50IEJTT05fQklOQVJZX1NVQlRZUEVfTUQ1XG5cdCAgICoqL1xuXHQgIEJTT05fQklOQVJZX1NVQlRZUEVfTUQ1OiA0LFxuXG5cdCAgLyoqXG5cdCAgICogQmluYXJ5IFVzZXIgRGVmaW5lZCBUeXBlXG5cdCAgICpcblx0ICAgKiBAY2xhc3Njb25zdGFudCBCU09OX0JJTkFSWV9TVUJUWVBFX1VTRVJfREVGSU5FRFxuXHQgICAqKi9cblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX1VTRVJfREVGSU5FRDogMTI4XG5cdH07XG5cblx0ZnVuY3Rpb24gX3R5cGVvZiQyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQyID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDIob2JqKTsgfVxuXHQvLyBjb25zdCBNYXAgPSByZXF1aXJlKCcuL21hcCcpO1xuXG5cdC8qKlxuXHQgKiBAbmFtZXNwYWNlIEVKU09OXG5cdCAqL1xuXHQvLyBhbGwgdGhlIHR5cGVzIHdoZXJlIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55IHNwZWNpYWwgcHJvY2Vzc2luZyBhbmQgY2FuIGp1c3QgcGFzcyB0aGUgRUpTT05cblx0Ly9zdHJhaWdodCB0byB0eXBlLmZyb21FeHRlbmRlZEpTT05cblxuXG5cdHZhciBrZXlzVG9Db2RlY3MgPSB7XG5cdCAgJG9pZDogb2JqZWN0aWQsXG5cdCAgJGJpbmFyeTogYmluYXJ5LFxuXHQgICRzeW1ib2w6IHN5bWJvbCxcblx0ICAkbnVtYmVySW50OiBpbnRfMzIsXG5cdCAgJG51bWJlckRlY2ltYWw6IGRlY2ltYWwxMjgsXG5cdCAgJG51bWJlckRvdWJsZTogZG91YmxlXzEsXG5cdCAgJG51bWJlckxvbmc6IGxvbmdfMSxcblx0ICAkbWluS2V5OiBtaW5fa2V5LFxuXHQgICRtYXhLZXk6IG1heF9rZXksXG5cdCAgJHJlZ3VsYXJFeHByZXNzaW9uOiByZWdleHAsXG5cdCAgJHRpbWVzdGFtcDogdGltZXN0YW1wXG5cdH07XG5cblx0ZnVuY3Rpb24gZGVzZXJpYWxpemVWYWx1ZShzZWxmLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcblx0ICAgIGlmIChvcHRpb25zLnJlbGF4ZWQpIHtcblx0ICAgICAgcmV0dXJuIHZhbHVlO1xuXHQgICAgfSAvLyBpZiBpdCdzIGFuIGludGVnZXIsIHNob3VsZCBpbnRlcnByZXQgYXMgc21hbGxlc3QgQlNPTiBpbnRlZ2VyXG5cdCAgICAvLyB0aGF0IGNhbiByZXByZXNlbnQgaXQgZXhhY3RseS4gKGlmIG91dCBvZiByYW5nZSwgaW50ZXJwcmV0IGFzIGRvdWJsZS4pXG5cblxuXHQgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSkge1xuXHQgICAgICBpZiAodmFsdWUgPj0gQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gQlNPTl9JTlQzMl9NQVgpIHJldHVybiBuZXcgaW50XzMyKHZhbHVlKTtcblx0ICAgICAgaWYgKHZhbHVlID49IEJTT05fSU5UNjRfTUlOICYmIHZhbHVlIDw9IEJTT05fSU5UNjRfTUFYKSByZXR1cm4gbmV3IGxvbmdfMS5mcm9tTnVtYmVyKHZhbHVlKTtcblx0ICAgIH0gLy8gSWYgdGhlIG51bWJlciBpcyBhIG5vbi1pbnRlZ2VyIG9yIG91dCBvZiBpbnRlZ2VyIHJhbmdlLCBzaG91bGQgaW50ZXJwcmV0IGFzIEJTT04gRG91YmxlLlxuXG5cblx0ICAgIHJldHVybiBuZXcgZG91YmxlXzEodmFsdWUpO1xuXHQgIH0gLy8gZnJvbSBoZXJlIG9uIG91dCB3ZSdyZSBsb29raW5nIGZvciBic29uIHR5cGVzLCBzbyBiYWlsIGlmIGl0cyBub3QgYW4gb2JqZWN0XG5cblxuXHQgIGlmICh2YWx1ZSA9PSBudWxsIHx8IF90eXBlb2YkMih2YWx1ZSkgIT09ICdvYmplY3QnKSByZXR1cm4gdmFsdWU7IC8vIHVwZ3JhZGUgZGVwcmVjYXRlZCB1bmRlZmluZWQgdG8gbnVsbFxuXG5cdCAgaWYgKHZhbHVlLiR1bmRlZmluZWQpIHJldHVybiBudWxsO1xuXHQgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuXHQgICAgcmV0dXJuIGsuc3RhcnRzV2l0aCgnJCcpICYmIHZhbHVlW2tdICE9IG51bGw7XG5cdCAgfSk7XG5cblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgIHZhciBjID0ga2V5c1RvQ29kZWNzW2tleXNbaV1dO1xuXHQgICAgaWYgKGMpIHJldHVybiBjLmZyb21FeHRlbmRlZEpTT04odmFsdWUsIG9wdGlvbnMpO1xuXHQgIH1cblxuXHQgIGlmICh2YWx1ZS4kZGF0ZSAhPSBudWxsKSB7XG5cdCAgICB2YXIgZCA9IHZhbHVlLiRkYXRlO1xuXHQgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuXHQgICAgaWYgKHR5cGVvZiBkID09PSAnc3RyaW5nJykgZGF0ZS5zZXRUaW1lKERhdGUucGFyc2UoZCkpO2Vsc2UgaWYgKGxvbmdfMS5pc0xvbmcoZCkpIGRhdGUuc2V0VGltZShkLnRvTnVtYmVyKCkpO2Vsc2UgaWYgKHR5cGVvZiBkID09PSAnbnVtYmVyJyAmJiBvcHRpb25zLnJlbGF4ZWQpIGRhdGUuc2V0VGltZShkKTtcblx0ICAgIHJldHVybiBkYXRlO1xuXHQgIH1cblxuXHQgIGlmICh2YWx1ZS4kY29kZSAhPSBudWxsKSB7XG5cdCAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKTtcblxuXHQgICAgaWYgKHZhbHVlLiRzY29wZSkge1xuXHQgICAgICBjb3B5LiRzY29wZSA9IGRlc2VyaWFsaXplVmFsdWUoc2VsZiwgbnVsbCwgdmFsdWUuJHNjb3BlKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGNvZGUuZnJvbUV4dGVuZGVkSlNPTih2YWx1ZSk7XG5cdCAgfVxuXG5cdCAgaWYgKHZhbHVlLiRyZWYgIT0gbnVsbCB8fCB2YWx1ZS4kZGJQb2ludGVyICE9IG51bGwpIHtcblx0ICAgIHZhciB2ID0gdmFsdWUuJHJlZiA/IHZhbHVlIDogdmFsdWUuJGRiUG9pbnRlcjsgLy8gd2UgcnVuIGludG8gdGhpcyBpbiBhIFwiZGVnZW5lcmF0ZSBFSlNPTlwiIGNhc2UgKHdpdGggJGlkIGFuZCAkcmVmIG9yZGVyIGZsaXBwZWQpXG5cdCAgICAvLyBiZWNhdXNlIG9mIHRoZSBvcmRlciBKU09OLnBhcnNlIGdvZXMgdGhyb3VnaCB0aGUgZG9jdW1lbnRcblxuXHQgICAgaWYgKHYgaW5zdGFuY2VvZiBkYl9yZWYpIHJldHVybiB2O1xuXHQgICAgdmFyIGRvbGxhcktleXMgPSBPYmplY3Qua2V5cyh2KS5maWx0ZXIoZnVuY3Rpb24gKGspIHtcblx0ICAgICAgcmV0dXJuIGsuc3RhcnRzV2l0aCgnJCcpO1xuXHQgICAgfSk7XG5cdCAgICB2YXIgdmFsaWQgPSB0cnVlO1xuXHQgICAgZG9sbGFyS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdCAgICAgIGlmIChbJyRyZWYnLCAnJGlkJywgJyRkYiddLmluZGV4T2YoaykgPT09IC0xKSB2YWxpZCA9IGZhbHNlO1xuXHQgICAgfSk7IC8vIG9ubHkgbWFrZSBEQlJlZiBpZiAkIGtleXMgYXJlIGFsbCB2YWxpZFxuXG5cdCAgICBpZiAodmFsaWQpIHJldHVybiBkYl9yZWYuZnJvbUV4dGVuZGVkSlNPTih2KTtcblx0ICB9XG5cblx0ICByZXR1cm4gdmFsdWU7XG5cdH1cblx0LyoqXG5cdCAqIFBhcnNlIGFuIEV4dGVuZGVkIEpTT04gc3RyaW5nLCBjb25zdHJ1Y3RpbmcgdGhlIEphdmFTY3JpcHQgdmFsdWUgb3Igb2JqZWN0IGRlc2NyaWJlZCBieSB0aGF0XG5cdCAqIHN0cmluZy5cblx0ICpcblx0ICogQG1lbWJlcm9mIEVKU09OXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3Ncblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWxheGVkPXRydWVdIEF0dGVtcHQgdG8gcmV0dXJuIG5hdGl2ZSBKUyB0eXBlcyB3aGVyZSBwb3NzaWJsZSwgcmF0aGVyIHRoYW4gQlNPTiB0eXBlcyAoaWYgdHJ1ZSlcblx0ICogQHJldHVybiB7b2JqZWN0fVxuXHQgKlxuXHQgKiBAZXhhbXBsZVxuXHQgKiBjb25zdCB7IEVKU09OIH0gPSByZXF1aXJlKCdic29uJyk7XG5cdCAqIGNvbnN0IHRleHQgPSAneyBcImludDMyXCI6IHsgXCIkbnVtYmVySW50XCI6IFwiMTBcIiB9IH0nO1xuXHQgKlxuXHQgKiAvLyBwcmludHMgeyBpbnQzMjogeyBbU3RyaW5nOiAnMTAnXSBfYnNvbnR5cGU6ICdJbnQzMicsIHZhbHVlOiAnMTAnIH0gfVxuXHQgKiBjb25zb2xlLmxvZyhFSlNPTi5wYXJzZSh0ZXh0LCB7IHJlbGF4ZWQ6IGZhbHNlIH0pKTtcblx0ICpcblx0ICogLy8gcHJpbnRzIHsgaW50MzI6IDEwIH1cblx0ICogY29uc29sZS5sb2coRUpTT04ucGFyc2UodGV4dCkpO1xuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIHBhcnNlKHRleHQsIG9wdGlvbnMpIHtcblx0ICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtcblx0ICAgIHJlbGF4ZWQ6IHRydWVcblx0ICB9LCBvcHRpb25zKTsgLy8gcmVsYXhlZCBpbXBsaWVzIG5vdCBzdHJpY3RcblxuXHQgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWxheGVkID09PSAnYm9vbGVhbicpIG9wdGlvbnMuc3RyaWN0ID0gIW9wdGlvbnMucmVsYXhlZDtcblx0ICBpZiAodHlwZW9mIG9wdGlvbnMuc3RyaWN0ID09PSAnYm9vbGVhbicpIG9wdGlvbnMucmVsYXhlZCA9ICFvcHRpb25zLnN0cmljdDtcblx0ICByZXR1cm4gSlNPTi5wYXJzZSh0ZXh0LCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgICAgcmV0dXJuIGRlc2VyaWFsaXplVmFsdWUoX3RoaXMsIGtleSwgdmFsdWUsIG9wdGlvbnMpO1xuXHQgIH0pO1xuXHR9IC8vXG5cdC8vIFNlcmlhbGl6ZXJcblx0Ly9cblx0Ly8gTUFYIElOVDMyIGJvdW5kYXJpZXNcblxuXG5cdHZhciBCU09OX0lOVDMyX01BWCA9IDB4N2ZmZmZmZmYsXG5cdCAgICBCU09OX0lOVDMyX01JTiA9IC0weDgwMDAwMDAwLFxuXHQgICAgQlNPTl9JTlQ2NF9NQVggPSAweDdmZmZmZmZmZmZmZmZmZmYsXG5cdCAgICBCU09OX0lOVDY0X01JTiA9IC0weDgwMDAwMDAwMDAwMDAwMDA7XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIEJTT04gZG9jdW1lbnQgdG8gYW4gRXh0ZW5kZWQgSlNPTiBzdHJpbmcsIG9wdGlvbmFsbHkgcmVwbGFjaW5nIHZhbHVlcyBpZiBhIHJlcGxhY2VyXG5cdCAqIGZ1bmN0aW9uIGlzIHNwZWNpZmllZCBvciBvcHRpb25hbGx5IGluY2x1ZGluZyBvbmx5IHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcyBpZiBhIHJlcGxhY2VyIGFycmF5XG5cdCAqIGlzIHNwZWNpZmllZC5cblx0ICpcblx0ICogQG1lbWJlcm9mIEVKU09OXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBleHRlbmRlZCBKU09OXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb258YXJyYXl9IFtyZXBsYWNlcl0gQSBmdW5jdGlvbiB0aGF0IGFsdGVycyB0aGUgYmVoYXZpb3Igb2YgdGhlIHN0cmluZ2lmaWNhdGlvbiBwcm9jZXNzLCBvciBhbiBhcnJheSBvZiBTdHJpbmcgYW5kIE51bWJlciBvYmplY3RzIHRoYXQgc2VydmUgYXMgYSB3aGl0ZWxpc3QgZm9yIHNlbGVjdGluZy9maWx0ZXJpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZhbHVlIG9iamVjdCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgSlNPTiBzdHJpbmcuIElmIHRoaXMgdmFsdWUgaXMgbnVsbCBvciBub3QgcHJvdmlkZWQsIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgYXJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgSlNPTiBzdHJpbmdcblx0ICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBbc3BhY2VdIEEgU3RyaW5nIG9yIE51bWJlciBvYmplY3QgdGhhdCdzIHVzZWQgdG8gaW5zZXJ0IHdoaXRlIHNwYWNlIGludG8gdGhlIG91dHB1dCBKU09OIHN0cmluZyBmb3IgcmVhZGFiaWxpdHkgcHVycG9zZXMuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgc2V0dGluZ3Ncblx0ICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZWxheGVkPXRydWVdIEVuYWJsZWQgRXh0ZW5kZWQgSlNPTidzIGByZWxheGVkYCBtb2RlXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdCAqXG5cdCAqIEBleGFtcGxlXG5cdCAqIGNvbnN0IHsgRUpTT04gfSA9IHJlcXVpcmUoJ2Jzb24nKTtcblx0ICogY29uc3QgSW50MzIgPSByZXF1aXJlKCdtb25nb2RiJykuSW50MzI7XG5cdCAqIGNvbnN0IGRvYyA9IHsgaW50MzI6IG5ldyBJbnQzMigxMCkgfTtcblx0ICpcblx0ICogLy8gcHJpbnRzICd7XCJpbnQzMlwiOntcIiRudW1iZXJJbnRcIjpcIjEwXCJ9fSdcblx0ICogY29uc29sZS5sb2coRUpTT04uc3RyaW5naWZ5KGRvYywgeyByZWxheGVkOiBmYWxzZSB9KSk7XG5cdCAqXG5cdCAqIC8vIHByaW50cyAne1wiaW50MzJcIjoxMH0nXG5cdCAqIGNvbnNvbGUubG9nKEVKU09OLnN0cmluZ2lmeShkb2MpKTtcblx0ICovXG5cblx0ZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlLCByZXBsYWNlciwgc3BhY2UsIG9wdGlvbnMpIHtcblx0ICBpZiAoc3BhY2UgIT0gbnVsbCAmJiBfdHlwZW9mJDIoc3BhY2UpID09PSAnb2JqZWN0Jykge1xuXHQgICAgb3B0aW9ucyA9IHNwYWNlO1xuXHQgICAgc3BhY2UgPSAwO1xuXHQgIH1cblxuXHQgIGlmIChyZXBsYWNlciAhPSBudWxsICYmIF90eXBlb2YkMihyZXBsYWNlcikgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuXHQgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuXHQgICAgcmVwbGFjZXIgPSBudWxsO1xuXHQgICAgc3BhY2UgPSAwO1xuXHQgIH1cblxuXHQgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG5cdCAgICByZWxheGVkOiB0cnVlXG5cdCAgfSwgb3B0aW9ucyk7XG5cdCAgdmFyIGRvYyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gc2VyaWFsaXplQXJyYXkodmFsdWUsIG9wdGlvbnMpIDogc2VyaWFsaXplRG9jdW1lbnQodmFsdWUsIG9wdGlvbnMpO1xuXHQgIHJldHVybiBKU09OLnN0cmluZ2lmeShkb2MsIHJlcGxhY2VyLCBzcGFjZSk7XG5cdH1cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgYW4gb2JqZWN0IHRvIGFuIEV4dGVuZGVkIEpTT04gc3RyaW5nLCBhbmQgcmVwYXJzZSBpdCBhcyBhIEphdmFTY3JpcHQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAbWVtYmVyb2YgRUpTT05cblx0ICogQHBhcmFtIHtvYmplY3R9IGJzb24gVGhlIG9iamVjdCB0byBzZXJpYWxpemVcblx0ICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBPcHRpb25hbCBzZXR0aW5ncyBwYXNzZWQgdG8gdGhlIGBzdHJpbmdpZnlgIGZ1bmN0aW9uXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICovXG5cblxuXHRmdW5jdGlvbiBzZXJpYWxpemUoYnNvbiwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIHJldHVybiBKU09OLnBhcnNlKHN0cmluZ2lmeShic29uLCBvcHRpb25zKSk7XG5cdH1cblx0LyoqXG5cdCAqIERlc2VyaWFsaXplcyBhbiBFeHRlbmRlZCBKU09OIG9iamVjdCBpbnRvIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCBuYXRpdmUvQlNPTiB0eXBlc1xuXHQgKlxuXHQgKiBAbWVtYmVyb2YgRUpTT05cblx0ICogQHBhcmFtIHtvYmplY3R9IGVqc29uIFRoZSBFeHRlbmRlZCBKU09OIG9iamVjdCB0byBkZXNlcmlhbGl6ZVxuXHQgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIHNldHRpbmdzIHBhc3NlZCB0byB0aGUgcGFyc2UgbWV0aG9kXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICovXG5cblxuXHRmdW5jdGlvbiBkZXNlcmlhbGl6ZShlanNvbiwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgIHJldHVybiBwYXJzZShKU09OLnN0cmluZ2lmeShlanNvbiksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplQXJyYXkoYXJyYXksIG9wdGlvbnMpIHtcblx0ICByZXR1cm4gYXJyYXkubWFwKGZ1bmN0aW9uICh2KSB7XG5cdCAgICByZXR1cm4gc2VyaWFsaXplVmFsdWUodiwgb3B0aW9ucyk7XG5cdCAgfSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJU09TdHJpbmcoZGF0ZSkge1xuXHQgIHZhciBpc29TdHIgPSBkYXRlLnRvSVNPU3RyaW5nKCk7IC8vIHdlIHNob3VsZCBvbmx5IHNob3cgbWlsbGlzZWNvbmRzIGluIHRpbWVzdGFtcCBpZiB0aGV5J3JlIG5vbi16ZXJvXG5cblx0ICByZXR1cm4gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSAhPT0gMCA/IGlzb1N0ciA6IGlzb1N0ci5zbGljZSgwLCAtNSkgKyAnWic7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgb3B0aW9ucykge1xuXHQgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHNlcmlhbGl6ZUFycmF5KHZhbHVlLCBvcHRpb25zKTtcblx0ICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG5cblx0ICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG5cdCAgICB2YXIgZGF0ZU51bSA9IHZhbHVlLmdldFRpbWUoKSxcblx0ICAgICAgICAvLyBpcyBpdCBpbiB5ZWFyIHJhbmdlIDE5NzAtOTk5OT9cblx0ICAgIGluUmFuZ2UgPSBkYXRlTnVtID4gLTEgJiYgZGF0ZU51bSA8IDI1MzQwMjMxODgwMDAwMDtcblx0ICAgIHJldHVybiBvcHRpb25zLnJlbGF4ZWQgJiYgaW5SYW5nZSA/IHtcblx0ICAgICAgJGRhdGU6IGdldElTT1N0cmluZyh2YWx1ZSlcblx0ICAgIH0gOiB7XG5cdCAgICAgICRkYXRlOiB7XG5cdCAgICAgICAgJG51bWJlckxvbmc6IHZhbHVlLmdldFRpbWUoKS50b1N0cmluZygpXG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfVxuXG5cdCAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIW9wdGlvbnMucmVsYXhlZCkge1xuXHQgICAgLy8gaXQncyBhbiBpbnRlZ2VyXG5cdCAgICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlKSB7XG5cdCAgICAgIHZhciBpbnQzMlJhbmdlID0gdmFsdWUgPj0gQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gQlNPTl9JTlQzMl9NQVgsXG5cdCAgICAgICAgICBpbnQ2NFJhbmdlID0gdmFsdWUgPj0gQlNPTl9JTlQ2NF9NSU4gJiYgdmFsdWUgPD0gQlNPTl9JTlQ2NF9NQVg7IC8vIGludGVycHJldCBhcyBiZWluZyBvZiB0aGUgc21hbGxlc3QgQlNPTiBpbnRlZ2VyIHR5cGUgdGhhdCBjYW4gcmVwcmVzZW50IHRoZSBudW1iZXIgZXhhY3RseVxuXG5cdCAgICAgIGlmIChpbnQzMlJhbmdlKSByZXR1cm4ge1xuXHQgICAgICAgICRudW1iZXJJbnQ6IHZhbHVlLnRvU3RyaW5nKClcblx0ICAgICAgfTtcblx0ICAgICAgaWYgKGludDY0UmFuZ2UpIHJldHVybiB7XG5cdCAgICAgICAgJG51bWJlckxvbmc6IHZhbHVlLnRvU3RyaW5nKClcblx0ICAgICAgfTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgJG51bWJlckRvdWJsZTogdmFsdWUudG9TdHJpbmcoKVxuXHQgICAgfTtcblx0ICB9XG5cblx0ICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0ICAgIHZhciBmbGFncyA9IHZhbHVlLmZsYWdzO1xuXG5cdCAgICBpZiAoZmxhZ3MgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBmbGFncyA9IHZhbHVlLnRvU3RyaW5nKCkubWF0Y2goL1tnaW11eV0qJC8pWzBdO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgcnggPSBuZXcgcmVnZXhwKHZhbHVlLnNvdXJjZSwgZmxhZ3MpO1xuXHQgICAgcmV0dXJuIHJ4LnRvRXh0ZW5kZWRKU09OKCk7XG5cdCAgfVxuXG5cdCAgaWYgKHZhbHVlICE9IG51bGwgJiYgX3R5cGVvZiQyKHZhbHVlKSA9PT0gJ29iamVjdCcpIHJldHVybiBzZXJpYWxpemVEb2N1bWVudCh2YWx1ZSwgb3B0aW9ucyk7XG5cdCAgcmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0dmFyIEJTT05fVFlQRV9NQVBQSU5HUyA9IHtcblx0ICBCaW5hcnk6IGZ1bmN0aW9uIEJpbmFyeShvKSB7XG5cdCAgICByZXR1cm4gbmV3IGJpbmFyeShvLnZhbHVlKCksIG8uc3VidHlwZSk7XG5cdCAgfSxcblx0ICBDb2RlOiBmdW5jdGlvbiBDb2RlKG8pIHtcblx0ICAgIHJldHVybiBuZXcgY29kZShvLmNvZGUsIG8uc2NvcGUpO1xuXHQgIH0sXG5cdCAgREJSZWY6IGZ1bmN0aW9uIERCUmVmKG8pIHtcblx0ICAgIHJldHVybiBuZXcgZGJfcmVmKG8uY29sbGVjdGlvbiB8fCBvLm5hbWVzcGFjZSwgby5vaWQsIG8uZGIsIG8uZmllbGRzKTtcblx0ICB9LFxuXHQgIC8vIFwibmFtZXNwYWNlXCIgZm9yIDEueCBsaWJyYXJ5IGJhY2t3YXJkcyBjb21wYXRcblx0ICBEZWNpbWFsMTI4OiBmdW5jdGlvbiBEZWNpbWFsMTI4KG8pIHtcblx0ICAgIHJldHVybiBuZXcgZGVjaW1hbDEyOChvLmJ5dGVzKTtcblx0ICB9LFxuXHQgIERvdWJsZTogZnVuY3Rpb24gRG91YmxlKG8pIHtcblx0ICAgIHJldHVybiBuZXcgZG91YmxlXzEoby52YWx1ZSk7XG5cdCAgfSxcblx0ICBJbnQzMjogZnVuY3Rpb24gSW50MzIobykge1xuXHQgICAgcmV0dXJuIG5ldyBpbnRfMzIoby52YWx1ZSk7XG5cdCAgfSxcblx0ICBMb25nOiBmdW5jdGlvbiBMb25nKG8pIHtcblx0ICAgIHJldHVybiBsb25nXzEuZnJvbUJpdHMoIC8vIHVuZGVyc2NvcmUgdmFyaWFudHMgZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHQgICAgby5sb3cgIT0gbnVsbCA/IG8ubG93IDogby5sb3dfLCBvLmxvdyAhPSBudWxsID8gby5oaWdoIDogby5oaWdoXywgby5sb3cgIT0gbnVsbCA/IG8udW5zaWduZWQgOiBvLnVuc2lnbmVkXyk7XG5cdCAgfSxcblx0ICBNYXhLZXk6IGZ1bmN0aW9uIE1heEtleSgpIHtcblx0ICAgIHJldHVybiBuZXcgbWF4X2tleSgpO1xuXHQgIH0sXG5cdCAgTWluS2V5OiBmdW5jdGlvbiBNaW5LZXkoKSB7XG5cdCAgICByZXR1cm4gbmV3IG1pbl9rZXkoKTtcblx0ICB9LFxuXHQgIE9iamVjdElEOiBmdW5jdGlvbiBPYmplY3RJRChvKSB7XG5cdCAgICByZXR1cm4gbmV3IG9iamVjdGlkKG8pO1xuXHQgIH0sXG5cdCAgT2JqZWN0SWQ6IGZ1bmN0aW9uIE9iamVjdElkKG8pIHtcblx0ICAgIHJldHVybiBuZXcgb2JqZWN0aWQobyk7XG5cdCAgfSxcblx0ICAvLyBzdXBwb3J0IDQuMC4wLzQuMC4xIGJlZm9yZSBfYnNvbnR5cGUgd2FzIHJldmVydGVkIGJhY2sgdG8gT2JqZWN0SURcblx0ICBCU09OUmVnRXhwOiBmdW5jdGlvbiBCU09OUmVnRXhwKG8pIHtcblx0ICAgIHJldHVybiBuZXcgcmVnZXhwKG8ucGF0dGVybiwgby5vcHRpb25zKTtcblx0ICB9LFxuXHQgIFN5bWJvbDogZnVuY3Rpb24gU3ltYm9sKG8pIHtcblx0ICAgIHJldHVybiBuZXcgc3ltYm9sKG8udmFsdWUpO1xuXHQgIH0sXG5cdCAgVGltZXN0YW1wOiBmdW5jdGlvbiBUaW1lc3RhbXAobykge1xuXHQgICAgcmV0dXJuIHRpbWVzdGFtcC5mcm9tQml0cyhvLmxvdywgby5oaWdoKTtcblx0ICB9XG5cdH07XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplRG9jdW1lbnQoZG9jLCBvcHRpb25zKSB7XG5cdCAgaWYgKGRvYyA9PSBudWxsIHx8IF90eXBlb2YkMihkb2MpICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IEVycm9yKCdub3QgYW4gb2JqZWN0IGluc3RhbmNlJyk7XG5cdCAgdmFyIGJzb250eXBlID0gZG9jLl9ic29udHlwZTtcblxuXHQgIGlmICh0eXBlb2YgYnNvbnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAvLyBJdCdzIGEgcmVndWxhciBvYmplY3QuIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBpdHMgcHJvcGVydHkgdmFsdWVzLlxuXHQgICAgdmFyIF9kb2MgPSB7fTtcblxuXHQgICAgZm9yICh2YXIgbmFtZSBpbiBkb2MpIHtcblx0ICAgICAgX2RvY1tuYW1lXSA9IHNlcmlhbGl6ZVZhbHVlKGRvY1tuYW1lXSwgb3B0aW9ucyk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBfZG9jO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGJzb250eXBlID09PSAnc3RyaW5nJykge1xuXHQgICAgLy8gdGhlIFwiZG9jdW1lbnRcIiBpcyByZWFsbHkganVzdCBhIEJTT04gdHlwZSBvYmplY3Rcblx0ICAgIHZhciBfZG9jMiA9IGRvYztcblxuXHQgICAgaWYgKHR5cGVvZiBfZG9jMi50b0V4dGVuZGVkSlNPTiAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAvLyBUaGVyZSdzIG5vIEVKU09OIHNlcmlhbGl6YXRpb24gZnVuY3Rpb24gb24gdGhlIG9iamVjdC4gSXQncyBwcm9iYWJseSBhblxuXHQgICAgICAvLyBvYmplY3QgY3JlYXRlZCBieSBhIHByZXZpb3VzIHZlcnNpb24gb2YgdGhpcyBsaWJyYXJ5IChvciBhbm90aGVyIGxpYnJhcnkpXG5cdCAgICAgIC8vIHRoYXQncyBkdWNrLXR5cGluZyBvYmplY3RzIHRvIGxvb2sgbGlrZSB0aGV5IHdlcmUgZ2VuZXJhdGVkIGJ5IHRoaXMgbGlicmFyeSkuXG5cdCAgICAgIC8vIENvcHkgdGhlIG9iamVjdCBpbnRvIHRoaXMgbGlicmFyeSdzIHZlcnNpb24gb2YgdGhhdCB0eXBlLlxuXHQgICAgICB2YXIgbWFwcGVyID0gQlNPTl9UWVBFX01BUFBJTkdTW2Jzb250eXBlXTtcblxuXHQgICAgICBpZiAoIW1hcHBlcikge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBvciBpbnZhbGlkIF9ic29udHlwZTogJyArIGJzb250eXBlKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIF9kb2MyID0gbWFwcGVyKF9kb2MyKTtcblx0ICAgIH0gLy8gVHdvIEJTT04gdHlwZXMgbWF5IGhhdmUgbmVzdGVkIG9iamVjdHMgdGhhdCBtYXkgbmVlZCB0byBiZSBzZXJpYWxpemVkIHRvb1xuXG5cblx0ICAgIGlmIChic29udHlwZSA9PT0gJ0NvZGUnICYmIF9kb2MyLnNjb3BlKSB7XG5cdCAgICAgIF9kb2MyID0gbmV3IGNvZGUoX2RvYzIuY29kZSwgc2VyaWFsaXplVmFsdWUoX2RvYzIuc2NvcGUsIG9wdGlvbnMpKTtcblx0ICAgIH0gZWxzZSBpZiAoYnNvbnR5cGUgPT09ICdEQlJlZicgJiYgX2RvYzIub2lkKSB7XG5cdCAgICAgIF9kb2MyID0gbmV3IGRiX3JlZihfZG9jMi5jb2xsZWN0aW9uLCBzZXJpYWxpemVWYWx1ZShfZG9jMi5vaWQsIG9wdGlvbnMpLCBfZG9jMi5kYiwgX2RvYzIuZmllbGRzKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIF9kb2MyLnRvRXh0ZW5kZWRKU09OKG9wdGlvbnMpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoJ19ic29udHlwZSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgd2FzOiAnICsgX3R5cGVvZiQyKGJzb250eXBlKSk7XG5cdCAgfVxuXHR9XG5cblx0dmFyIGV4dGVuZGVkX2pzb24gPSB7XG5cdCAgcGFyc2U6IHBhcnNlLFxuXHQgIGRlc2VyaWFsaXplOiBkZXNlcmlhbGl6ZSxcblx0ICBzZXJpYWxpemU6IHNlcmlhbGl6ZSxcblx0ICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxuXHR9O1xuXG5cdHZhciBGSVJTVF9CSVQgPSAweDgwO1xuXHR2YXIgRklSU1RfVFdPX0JJVFMgPSAweGMwO1xuXHR2YXIgRklSU1RfVEhSRUVfQklUUyA9IDB4ZTA7XG5cdHZhciBGSVJTVF9GT1VSX0JJVFMgPSAweGYwO1xuXHR2YXIgRklSU1RfRklWRV9CSVRTID0gMHhmODtcblx0dmFyIFRXT19CSVRfQ0hBUiA9IDB4YzA7XG5cdHZhciBUSFJFRV9CSVRfQ0hBUiA9IDB4ZTA7XG5cdHZhciBGT1VSX0JJVF9DSEFSID0gMHhmMDtcblx0dmFyIENPTlRJTlVJTkdfQ0hBUiA9IDB4ODA7XG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBwYXNzZWQgaW4gYnl0ZXMgYXJlIHZhbGlkIHV0Zjhcblx0ICogQHBhcmFtIHtCdWZmZXJ8VWludDhBcnJheX0gYnl0ZXMgQW4gYXJyYXkgb2YgOC1iaXQgYnl0ZXMuIE11c3QgYmUgaW5kZXhhYmxlIGFuZCBoYXZlIGxlbmd0aCBwcm9wZXJ0eVxuXHQgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgVGhlIGluZGV4IHRvIHN0YXJ0IHZhbGlkYXRpbmdcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGVuZCBUaGUgaW5kZXggdG8gZW5kIHZhbGlkYXRpbmdcblx0ICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsaWQgdXRmOFxuXHQgKi9cblxuXHRmdW5jdGlvbiB2YWxpZGF0ZVV0ZjgoYnl0ZXMsIHN0YXJ0LCBlbmQpIHtcblx0ICB2YXIgY29udGludWF0aW9uID0gMDtcblxuXHQgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAxKSB7XG5cdCAgICB2YXIgYnl0ZSA9IGJ5dGVzW2ldO1xuXG5cdCAgICBpZiAoY29udGludWF0aW9uKSB7XG5cdCAgICAgIGlmICgoYnl0ZSAmIEZJUlNUX1RXT19CSVRTKSAhPT0gQ09OVElOVUlOR19DSEFSKSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cblx0ICAgICAgY29udGludWF0aW9uIC09IDE7XG5cdCAgICB9IGVsc2UgaWYgKGJ5dGUgJiBGSVJTVF9CSVQpIHtcblx0ICAgICAgaWYgKChieXRlICYgRklSU1RfVEhSRUVfQklUUykgPT09IFRXT19CSVRfQ0hBUikge1xuXHQgICAgICAgIGNvbnRpbnVhdGlvbiA9IDE7XG5cdCAgICAgIH0gZWxzZSBpZiAoKGJ5dGUgJiBGSVJTVF9GT1VSX0JJVFMpID09PSBUSFJFRV9CSVRfQ0hBUikge1xuXHQgICAgICAgIGNvbnRpbnVhdGlvbiA9IDI7XG5cdCAgICAgIH0gZWxzZSBpZiAoKGJ5dGUgJiBGSVJTVF9GSVZFX0JJVFMpID09PSBGT1VSX0JJVF9DSEFSKSB7XG5cdCAgICAgICAgY29udGludWF0aW9uID0gMztcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gIWNvbnRpbnVhdGlvbjtcblx0fVxuXG5cdHZhciB2YWxpZGF0ZVV0ZjhfMSA9IHZhbGlkYXRlVXRmODtcblx0dmFyIHZhbGlkYXRlX3V0ZjggPSB7XG5cdCAgdmFsaWRhdGVVdGY4OiB2YWxpZGF0ZVV0ZjhfMVxuXHR9O1xuXG5cdHZhciBCdWZmZXIkNCA9IGJ1ZmZlci5CdWZmZXI7XG5cdHZhciB2YWxpZGF0ZVV0ZjgkMSA9IHZhbGlkYXRlX3V0ZjgudmFsaWRhdGVVdGY4OyAvLyBJbnRlcm5hbCBsb25nIHZlcnNpb25zXG5cblx0dmFyIEpTX0lOVF9NQVhfTE9ORyA9IGxvbmdfMS5mcm9tTnVtYmVyKGNvbnN0YW50cy5KU19JTlRfTUFYKTtcblx0dmFyIEpTX0lOVF9NSU5fTE9ORyA9IGxvbmdfMS5mcm9tTnVtYmVyKGNvbnN0YW50cy5KU19JTlRfTUlOKTtcblx0dmFyIGZ1bmN0aW9uQ2FjaGUgPSB7fTtcblxuXHRmdW5jdGlvbiBkZXNlcmlhbGl6ZSQxKGJ1ZmZlciQkMSwgb3B0aW9ucywgaXNBcnJheSkge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zID09IG51bGwgPyB7fSA6IG9wdGlvbnM7XG5cdCAgdmFyIGluZGV4ID0gb3B0aW9ucyAmJiBvcHRpb25zLmluZGV4ID8gb3B0aW9ucy5pbmRleCA6IDA7IC8vIFJlYWQgdGhlIGRvY3VtZW50IHNpemVcblxuXHQgIHZhciBzaXplID0gYnVmZmVyJCQxW2luZGV4XSB8IGJ1ZmZlciQkMVtpbmRleCArIDFdIDw8IDggfCBidWZmZXIkJDFbaW5kZXggKyAyXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCArIDNdIDw8IDI0O1xuXG5cdCAgaWYgKHNpemUgPCA1KSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJic29uIHNpemUgbXVzdCBiZSA+PSA1LCBpcyBcIi5jb25jYXQoc2l6ZSkpO1xuXHQgIH1cblxuXHQgIGlmIChvcHRpb25zLmFsbG93T2JqZWN0U21hbGxlclRoYW5CdWZmZXJTaXplICYmIGJ1ZmZlciQkMS5sZW5ndGggPCBzaXplKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoXCJidWZmZXIgbGVuZ3RoIFwiLmNvbmNhdChidWZmZXIkJDEubGVuZ3RoLCBcIiBtdXN0IGJlID49IGJzb24gc2l6ZSBcIikuY29uY2F0KHNpemUpKTtcblx0ICB9XG5cblx0ICBpZiAoIW9wdGlvbnMuYWxsb3dPYmplY3RTbWFsbGVyVGhhbkJ1ZmZlclNpemUgJiYgYnVmZmVyJCQxLmxlbmd0aCAhPT0gc2l6ZSkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKFwiYnVmZmVyIGxlbmd0aCBcIi5jb25jYXQoYnVmZmVyJCQxLmxlbmd0aCwgXCIgbXVzdCA9PT0gYnNvbiBzaXplIFwiKS5jb25jYXQoc2l6ZSkpO1xuXHQgIH1cblxuXHQgIGlmIChzaXplICsgaW5kZXggPiBidWZmZXIkJDEubGVuZ3RoKSB7XG5cdCAgICB0aHJvdyBuZXcgRXJyb3IoXCIoYnNvbiBzaXplIFwiLmNvbmNhdChzaXplLCBcIiArIG9wdGlvbnMuaW5kZXggXCIpLmNvbmNhdChpbmRleCwgXCIgbXVzdCBiZSA8PSBidWZmZXIgbGVuZ3RoIFwiKS5jb25jYXQoQnVmZmVyJDQuYnl0ZUxlbmd0aChidWZmZXIkJDEpLCBcIilcIikpO1xuXHQgIH0gLy8gSWxsZWdhbCBlbmQgdmFsdWVcblxuXG5cdCAgaWYgKGJ1ZmZlciQkMVtpbmRleCArIHNpemUgLSAxXSAhPT0gMCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKFwiT25lIG9iamVjdCwgc2l6ZWQgY29ycmVjdGx5LCB3aXRoIGEgc3BvdCBmb3IgYW4gRU9PLCBidXQgdGhlIEVPTyBpc24ndCAweDAwXCIpO1xuXHQgIH0gLy8gU3RhcnQgZGVzZXJpYWxpenRpb25cblxuXG5cdCAgcmV0dXJuIGRlc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwgaW5kZXgsIG9wdGlvbnMsIGlzQXJyYXkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBpbmRleCwgb3B0aW9ucywgaXNBcnJheSkge1xuXHQgIHZhciBldmFsRnVuY3Rpb25zID0gb3B0aW9uc1snZXZhbEZ1bmN0aW9ucyddID09IG51bGwgPyBmYWxzZSA6IG9wdGlvbnNbJ2V2YWxGdW5jdGlvbnMnXTtcblx0ICB2YXIgY2FjaGVGdW5jdGlvbnMgPSBvcHRpb25zWydjYWNoZUZ1bmN0aW9ucyddID09IG51bGwgPyBmYWxzZSA6IG9wdGlvbnNbJ2NhY2hlRnVuY3Rpb25zJ107XG5cdCAgdmFyIGNhY2hlRnVuY3Rpb25zQ3JjMzIgPSBvcHRpb25zWydjYWNoZUZ1bmN0aW9uc0NyYzMyJ10gPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9uc1snY2FjaGVGdW5jdGlvbnNDcmMzMiddO1xuXHQgIGlmICghY2FjaGVGdW5jdGlvbnNDcmMzMikgdmFyIGNyYzMyID0gbnVsbDtcblx0ICB2YXIgZmllbGRzQXNSYXcgPSBvcHRpb25zWydmaWVsZHNBc1JhdyddID09IG51bGwgPyBudWxsIDogb3B0aW9uc1snZmllbGRzQXNSYXcnXTsgLy8gUmV0dXJuIHJhdyBic29uIGJ1ZmZlciBpbnN0ZWFkIG9mIHBhcnNpbmcgaXRcblxuXHQgIHZhciByYXcgPSBvcHRpb25zWydyYXcnXSA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zWydyYXcnXTsgLy8gUmV0dXJuIEJTT05SZWdFeHAgb2JqZWN0cyBpbnN0ZWFkIG9mIG5hdGl2ZSByZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0ICB2YXIgYnNvblJlZ0V4cCA9IHR5cGVvZiBvcHRpb25zWydic29uUmVnRXhwJ10gPT09ICdib29sZWFuJyA/IG9wdGlvbnNbJ2Jzb25SZWdFeHAnXSA6IGZhbHNlOyAvLyBDb250cm9scyB0aGUgcHJvbW90aW9uIG9mIHZhbHVlcyB2cyB3cmFwcGVyIGNsYXNzZXNcblxuXHQgIHZhciBwcm9tb3RlQnVmZmVycyA9IG9wdGlvbnNbJ3Byb21vdGVCdWZmZXJzJ10gPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9uc1sncHJvbW90ZUJ1ZmZlcnMnXTtcblx0ICB2YXIgcHJvbW90ZUxvbmdzID0gb3B0aW9uc1sncHJvbW90ZUxvbmdzJ10gPT0gbnVsbCA/IHRydWUgOiBvcHRpb25zWydwcm9tb3RlTG9uZ3MnXTtcblx0ICB2YXIgcHJvbW90ZVZhbHVlcyA9IG9wdGlvbnNbJ3Byb21vdGVWYWx1ZXMnXSA9PSBudWxsID8gdHJ1ZSA6IG9wdGlvbnNbJ3Byb21vdGVWYWx1ZXMnXTsgLy8gU2V0IHRoZSBzdGFydCBpbmRleFxuXG5cdCAgdmFyIHN0YXJ0SW5kZXggPSBpbmRleDsgLy8gVmFsaWRhdGUgdGhhdCB3ZSBoYXZlIGF0IGxlYXN0IDQgYnl0ZXMgb2YgYnVmZmVyXG5cblx0ICBpZiAoYnVmZmVyJCQxLmxlbmd0aCA8IDUpIHRocm93IG5ldyBFcnJvcignY29ycnVwdCBic29uIG1lc3NhZ2UgPCA1IGJ5dGVzIGxvbmcnKTsgLy8gUmVhZCB0aGUgZG9jdW1lbnQgc2l6ZVxuXG5cdCAgdmFyIHNpemUgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDsgLy8gRW5zdXJlIGJ1ZmZlciBpcyB2YWxpZCBzaXplXG5cblx0ICBpZiAoc2l6ZSA8IDUgfHwgc2l6ZSA+IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignY29ycnVwdCBic29uIG1lc3NhZ2UnKTsgLy8gQ3JlYXRlIGhvbGRpbmcgb2JqZWN0XG5cblx0ICB2YXIgb2JqZWN0ID0gaXNBcnJheSA/IFtdIDoge307IC8vIFVzZWQgZm9yIGFycmF5cyB0byBza2lwIGhhdmluZyB0byBwZXJmb3JtIHV0ZjggZGVjb2RpbmdcblxuXHQgIHZhciBhcnJheUluZGV4ID0gMDtcblx0ICB2YXIgZG9uZSA9IGZhbHNlOyAvLyBXaGlsZSB3ZSBoYXZlIG1vcmUgbGVmdCBkYXRhIGxlZnQga2VlcCBwYXJzaW5nXG5cblx0ICB3aGlsZSAoIWRvbmUpIHtcblx0ICAgIC8vIFJlYWQgdGhlIHR5cGVcblx0ICAgIHZhciBlbGVtZW50VHlwZSA9IGJ1ZmZlciQkMVtpbmRleCsrXTsgLy8gSWYgd2UgZ2V0IGEgemVybyBpdCdzIHRoZSBsYXN0IGJ5dGUsIGV4aXRcblxuXHQgICAgaWYgKGVsZW1lbnRUeXBlID09PSAwKSBicmVhazsgLy8gR2V0IHRoZSBzdGFydCBzZWFyY2ggaW5kZXhcblxuXHQgICAgdmFyIGkgPSBpbmRleDsgLy8gTG9jYXRlIHRoZSBlbmQgb2YgdGhlIGMgc3RyaW5nXG5cblx0ICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcblx0ICAgICAgaSsrO1xuXHQgICAgfSAvLyBJZiBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBkb2N1bWVudFxuXG5cblx0ICAgIGlmIChpID49IEJ1ZmZlciQ0LmJ5dGVMZW5ndGgoYnVmZmVyJCQxKSkgdGhyb3cgbmV3IEVycm9yKCdCYWQgQlNPTiBEb2N1bWVudDogaWxsZWdhbCBDU3RyaW5nJyk7XG5cdCAgICB2YXIgbmFtZSA9IGlzQXJyYXkgPyBhcnJheUluZGV4KysgOiBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaSk7XG5cdCAgICBpbmRleCA9IGkgKyAxO1xuXG5cdCAgICBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfU1RSSU5HKSB7XG5cdCAgICAgIHZhciBzdHJpbmdTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cdCAgICAgIGlmIChzdHJpbmdTaXplIDw9IDAgfHwgc3RyaW5nU2l6ZSA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCB8fCBidWZmZXIkJDFbaW5kZXggKyBzdHJpbmdTaXplIC0gMV0gIT09IDApIHRocm93IG5ldyBFcnJvcignYmFkIHN0cmluZyBsZW5ndGggaW4gYnNvbicpO1xuXG5cdCAgICAgIGlmICghdmFsaWRhdGVVdGY4JDEoYnVmZmVyJCQxLCBpbmRleCwgaW5kZXggKyBzdHJpbmdTaXplIC0gMSkpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVVRGLTggc3RyaW5nIGluIEJTT04gZG9jdW1lbnQnKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBzID0gYnVmZmVyJCQxLnRvU3RyaW5nKCd1dGY4JywgaW5kZXgsIGluZGV4ICsgc3RyaW5nU2l6ZSAtIDEpO1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBzO1xuXHQgICAgICBpbmRleCA9IGluZGV4ICsgc3RyaW5nU2l6ZTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfT0lEKSB7XG5cdCAgICAgIHZhciBvaWQgPSBCdWZmZXIkNC5hbGxvYygxMik7XG5cdCAgICAgIGJ1ZmZlciQkMS5jb3B5KG9pZCwgMCwgaW5kZXgsIGluZGV4ICsgMTIpO1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgb2JqZWN0aWQob2lkKTtcblx0ICAgICAgaW5kZXggPSBpbmRleCArIDEyO1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9JTlQgJiYgcHJvbW90ZVZhbHVlcyA9PT0gZmFsc2UpIHtcblx0ICAgICAgb2JqZWN0W25hbWVdID0gbmV3IGludF8zMihidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNCk7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX0lOVCkge1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfTlVNQkVSICYmIHByb21vdGVWYWx1ZXMgPT09IGZhbHNlKSB7XG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBkb3VibGVfMShidWZmZXIkJDEucmVhZERvdWJsZUxFKGluZGV4KSk7XG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyA4O1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVIpIHtcblx0ICAgICAgb2JqZWN0W25hbWVdID0gYnVmZmVyJCQxLnJlYWREb3VibGVMRShpbmRleCk7XG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyA4O1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9EQVRFKSB7XG5cdCAgICAgIHZhciBsb3dCaXRzID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cdCAgICAgIHZhciBoaWdoQml0cyA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgRGF0ZShuZXcgbG9uZ18xKGxvd0JpdHMsIGhpZ2hCaXRzKS50b051bWJlcigpKTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQk9PTEVBTikge1xuXHQgICAgICBpZiAoYnVmZmVyJCQxW2luZGV4XSAhPT0gMCAmJiBidWZmZXIkJDFbaW5kZXhdICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ2lsbGVnYWwgYm9vbGVhbiB0eXBlIHZhbHVlJyk7XG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IGJ1ZmZlciQkMVtpbmRleCsrXSA9PT0gMTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfT0JKRUNUKSB7XG5cdCAgICAgIHZhciBfaW5kZXggPSBpbmRleDtcblx0ICAgICAgdmFyIG9iamVjdFNpemUgPSBidWZmZXIkJDFbaW5kZXhdIHwgYnVmZmVyJCQxW2luZGV4ICsgMV0gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCArIDJdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4ICsgM10gPDwgMjQ7XG5cdCAgICAgIGlmIChvYmplY3RTaXplIDw9IDAgfHwgb2JqZWN0U2l6ZSA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCkgdGhyb3cgbmV3IEVycm9yKCdiYWQgZW1iZWRkZWQgZG9jdW1lbnQgbGVuZ3RoIGluIGJzb24nKTsgLy8gV2UgaGF2ZSBhIHJhdyB2YWx1ZVxuXG5cdCAgICAgIGlmIChyYXcpIHtcblx0ICAgICAgICBvYmplY3RbbmFtZV0gPSBidWZmZXIkJDEuc2xpY2UoaW5kZXgsIGluZGV4ICsgb2JqZWN0U2l6ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgb2JqZWN0W25hbWVdID0gZGVzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBfaW5kZXgsIG9wdGlvbnMsIGZhbHNlKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyBvYmplY3RTaXplO1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9BUlJBWSkge1xuXHQgICAgICB2YXIgX2luZGV4MiA9IGluZGV4O1xuXG5cdCAgICAgIHZhciBfb2JqZWN0U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleF0gfCBidWZmZXIkJDFbaW5kZXggKyAxXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4ICsgMl0gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXggKyAzXSA8PCAyNDtcblxuXHQgICAgICB2YXIgYXJyYXlPcHRpb25zID0gb3B0aW9uczsgLy8gU3RvcCBpbmRleFxuXG5cdCAgICAgIHZhciBzdG9wSW5kZXggPSBpbmRleCArIF9vYmplY3RTaXplOyAvLyBBbGwgZWxlbWVudHMgb2YgYXJyYXkgdG8gYmUgcmV0dXJuZWQgYXMgcmF3IGJzb25cblxuXHQgICAgICBpZiAoZmllbGRzQXNSYXcgJiYgZmllbGRzQXNSYXdbbmFtZV0pIHtcblx0ICAgICAgICBhcnJheU9wdGlvbnMgPSB7fTtcblxuXHQgICAgICAgIGZvciAodmFyIG4gaW4gb3B0aW9ucykge1xuXHQgICAgICAgICAgYXJyYXlPcHRpb25zW25dID0gb3B0aW9uc1tuXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBhcnJheU9wdGlvbnNbJ3JhdyddID0gdHJ1ZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IGRlc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwgX2luZGV4MiwgYXJyYXlPcHRpb25zLCB0cnVlKTtcblx0ICAgICAgaW5kZXggPSBpbmRleCArIF9vYmplY3RTaXplO1xuXHQgICAgICBpZiAoYnVmZmVyJCQxW2luZGV4IC0gMV0gIT09IDApIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhcnJheSB0ZXJtaW5hdG9yIGJ5dGUnKTtcblx0ICAgICAgaWYgKGluZGV4ICE9PSBzdG9wSW5kZXgpIHRocm93IG5ldyBFcnJvcignY29ycnVwdGVkIGFycmF5IGJzb24nKTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfVU5ERUZJTkVEKSB7XG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IHVuZGVmaW5lZDtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfTlVMTCkge1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBudWxsO1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9MT05HKSB7XG5cdCAgICAgIC8vIFVucGFjayB0aGUgbG93IGFuZCBoaWdoIGJpdHNcblx0ICAgICAgdmFyIF9sb3dCaXRzID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cblx0ICAgICAgdmFyIF9oaWdoQml0cyA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuXG5cdCAgICAgIHZhciBsb25nJCQxID0gbmV3IGxvbmdfMShfbG93Qml0cywgX2hpZ2hCaXRzKTsgLy8gUHJvbW90ZSB0aGUgbG9uZyBpZiBwb3NzaWJsZVxuXG5cdCAgICAgIGlmIChwcm9tb3RlTG9uZ3MgJiYgcHJvbW90ZVZhbHVlcyA9PT0gdHJ1ZSkge1xuXHQgICAgICAgIG9iamVjdFtuYW1lXSA9IGxvbmckJDEubGVzc1RoYW5PckVxdWFsKEpTX0lOVF9NQVhfTE9ORykgJiYgbG9uZyQkMS5ncmVhdGVyVGhhbk9yRXF1YWwoSlNfSU5UX01JTl9MT05HKSA/IGxvbmckJDEudG9OdW1iZXIoKSA6IGxvbmckJDE7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgb2JqZWN0W25hbWVdID0gbG9uZyQkMTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9ERUNJTUFMMTI4KSB7XG5cdCAgICAgIC8vIEJ1ZmZlciB0byBjb250YWluIHRoZSBkZWNpbWFsIGJ5dGVzXG5cdCAgICAgIHZhciBieXRlcyA9IEJ1ZmZlciQ0LmFsbG9jKDE2KTsgLy8gQ29weSB0aGUgbmV4dCAxNiBieXRlcyBpbnRvIHRoZSBieXRlcyBidWZmZXJcblxuXHQgICAgICBidWZmZXIkJDEuY29weShieXRlcywgMCwgaW5kZXgsIGluZGV4ICsgMTYpOyAvLyBVcGRhdGUgaW5kZXhcblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgMTY7IC8vIEFzc2lnbiB0aGUgbmV3IERlY2ltYWwxMjggdmFsdWVcblxuXHQgICAgICB2YXIgZGVjaW1hbDEyOCQkMSA9IG5ldyBkZWNpbWFsMTI4KGJ5dGVzKTsgLy8gSWYgd2UgaGF2ZSBhbiBhbHRlcm5hdGl2ZSBtYXBwZXIgdXNlIHRoYXRcblxuXHQgICAgICBvYmplY3RbbmFtZV0gPSBkZWNpbWFsMTI4JCQxLnRvT2JqZWN0ID8gZGVjaW1hbDEyOCQkMS50b09iamVjdCgpIDogZGVjaW1hbDEyOCQkMTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfQklOQVJZKSB7XG5cdCAgICAgIHZhciBiaW5hcnlTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cdCAgICAgIHZhciB0b3RhbEJpbmFyeVNpemUgPSBiaW5hcnlTaXplO1xuXHQgICAgICB2YXIgc3ViVHlwZSA9IGJ1ZmZlciQkMVtpbmRleCsrXTsgLy8gRGlkIHdlIGhhdmUgYSBuZWdhdGl2ZSBiaW5hcnkgc2l6ZSwgdGhyb3dcblxuXHQgICAgICBpZiAoYmluYXJ5U2l6ZSA8IDApIHRocm93IG5ldyBFcnJvcignTmVnYXRpdmUgYmluYXJ5IHR5cGUgZWxlbWVudCBzaXplIGZvdW5kJyk7IC8vIElzIHRoZSBsZW5ndGggbG9uZ2VyIHRoYW4gdGhlIGRvY3VtZW50XG5cblx0ICAgICAgaWYgKGJpbmFyeVNpemUgPiBCdWZmZXIkNC5ieXRlTGVuZ3RoKGJ1ZmZlciQkMSkpIHRocm93IG5ldyBFcnJvcignQmluYXJ5IHR5cGUgc2l6ZSBsYXJnZXIgdGhhbiBkb2N1bWVudCBzaXplJyk7IC8vIERlY29kZSBhcyByYXcgQnVmZmVyIG9iamVjdCBpZiBvcHRpb25zIHNwZWNpZmllcyBpdFxuXG5cdCAgICAgIGlmIChidWZmZXIkJDFbJ3NsaWNlJ10gIT0gbnVsbCkge1xuXHQgICAgICAgIC8vIElmIHdlIGhhdmUgc3VidHlwZSAyIHNraXAgdGhlIDQgYnl0ZXMgZm9yIHRoZSBzaXplXG5cdCAgICAgICAgaWYgKHN1YlR5cGUgPT09IGJpbmFyeS5TVUJUWVBFX0JZVEVfQVJSQVkpIHtcblx0ICAgICAgICAgIGJpbmFyeVNpemUgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblx0ICAgICAgICAgIGlmIChiaW5hcnlTaXplIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSBiaW5hcnkgdHlwZSBlbGVtZW50IHNpemUgZm91bmQgZm9yIHN1YnR5cGUgMHgwMicpO1xuXHQgICAgICAgICAgaWYgKGJpbmFyeVNpemUgPiB0b3RhbEJpbmFyeVNpemUgLSA0KSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSB0eXBlIHdpdGggc3VidHlwZSAweDAyIGNvbnRhaW5zIHRvIGxvbmcgYmluYXJ5IHNpemUnKTtcblx0ICAgICAgICAgIGlmIChiaW5hcnlTaXplIDwgdG90YWxCaW5hcnlTaXplIC0gNCkgdGhyb3cgbmV3IEVycm9yKCdCaW5hcnkgdHlwZSB3aXRoIHN1YnR5cGUgMHgwMiBjb250YWlucyB0byBzaG9ydCBiaW5hcnkgc2l6ZScpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChwcm9tb3RlQnVmZmVycyAmJiBwcm9tb3RlVmFsdWVzKSB7XG5cdCAgICAgICAgICBvYmplY3RbbmFtZV0gPSBidWZmZXIkJDEuc2xpY2UoaW5kZXgsIGluZGV4ICsgYmluYXJ5U2l6ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBiaW5hcnkoYnVmZmVyJCQxLnNsaWNlKGluZGV4LCBpbmRleCArIGJpbmFyeVNpemUpLCBzdWJUeXBlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIF9idWZmZXIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIoYmluYXJ5U2l6ZSkpIDogbmV3IEFycmF5KGJpbmFyeVNpemUpOyAvLyBJZiB3ZSBoYXZlIHN1YnR5cGUgMiBza2lwIHRoZSA0IGJ5dGVzIGZvciB0aGUgc2l6ZVxuXG5cblx0ICAgICAgICBpZiAoc3ViVHlwZSA9PT0gYmluYXJ5LlNVQlRZUEVfQllURV9BUlJBWSkge1xuXHQgICAgICAgICAgYmluYXJ5U2l6ZSA9IGJ1ZmZlciQkMVtpbmRleCsrXSB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCA4IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDE2IHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDI0O1xuXHQgICAgICAgICAgaWYgKGJpbmFyeVNpemUgPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ05lZ2F0aXZlIGJpbmFyeSB0eXBlIGVsZW1lbnQgc2l6ZSBmb3VuZCBmb3Igc3VidHlwZSAweDAyJyk7XG5cdCAgICAgICAgICBpZiAoYmluYXJ5U2l6ZSA+IHRvdGFsQmluYXJ5U2l6ZSAtIDQpIHRocm93IG5ldyBFcnJvcignQmluYXJ5IHR5cGUgd2l0aCBzdWJ0eXBlIDB4MDIgY29udGFpbnMgdG8gbG9uZyBiaW5hcnkgc2l6ZScpO1xuXHQgICAgICAgICAgaWYgKGJpbmFyeVNpemUgPCB0b3RhbEJpbmFyeVNpemUgLSA0KSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmFyeSB0eXBlIHdpdGggc3VidHlwZSAweDAyIGNvbnRhaW5zIHRvIHNob3J0IGJpbmFyeSBzaXplJyk7XG5cdCAgICAgICAgfSAvLyBDb3B5IHRoZSBkYXRhXG5cblxuXHQgICAgICAgIGZvciAoaSA9IDA7IGkgPCBiaW5hcnlTaXplOyBpKyspIHtcblx0ICAgICAgICAgIF9idWZmZXJbaV0gPSBidWZmZXIkJDFbaW5kZXggKyBpXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAocHJvbW90ZUJ1ZmZlcnMgJiYgcHJvbW90ZVZhbHVlcykge1xuXHQgICAgICAgICAgb2JqZWN0W25hbWVdID0gX2J1ZmZlcjtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb2JqZWN0W25hbWVdID0gbmV3IGJpbmFyeShfYnVmZmVyLCBzdWJUeXBlKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gLy8gVXBkYXRlIHRoZSBpbmRleFxuXG5cblx0ICAgICAgaW5kZXggPSBpbmRleCArIGJpbmFyeVNpemU7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX1JFR0VYUCAmJiBic29uUmVnRXhwID09PSBmYWxzZSkge1xuXHQgICAgICAvLyBHZXQgdGhlIHN0YXJ0IHNlYXJjaCBpbmRleFxuXHQgICAgICBpID0gaW5kZXg7IC8vIExvY2F0ZSB0aGUgZW5kIG9mIHRoZSBjIHN0cmluZ1xuXG5cdCAgICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcblx0ICAgICAgICBpKys7XG5cdCAgICAgIH0gLy8gSWYgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgZG9jdW1lbnRcblxuXG5cdCAgICAgIGlmIChpID49IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQmFkIEJTT04gRG9jdW1lbnQ6IGlsbGVnYWwgQ1N0cmluZycpOyAvLyBSZXR1cm4gdGhlIEMgc3RyaW5nXG5cblx0ICAgICAgdmFyIHNvdXJjZSA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpKTsgLy8gQ3JlYXRlIHRoZSByZWdleHBcblxuXHQgICAgICBpbmRleCA9IGkgKyAxOyAvLyBHZXQgdGhlIHN0YXJ0IHNlYXJjaCBpbmRleFxuXG5cdCAgICAgIGkgPSBpbmRleDsgLy8gTG9jYXRlIHRoZSBlbmQgb2YgdGhlIGMgc3RyaW5nXG5cblx0ICAgICAgd2hpbGUgKGJ1ZmZlciQkMVtpXSAhPT0gMHgwMCAmJiBpIDwgYnVmZmVyJCQxLmxlbmd0aCkge1xuXHQgICAgICAgIGkrKztcblx0ICAgICAgfSAvLyBJZiBhcmUgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBkb2N1bWVudFxuXG5cblx0ICAgICAgaWYgKGkgPj0gYnVmZmVyJCQxLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdCYWQgQlNPTiBEb2N1bWVudDogaWxsZWdhbCBDU3RyaW5nJyk7IC8vIFJldHVybiB0aGUgQyBzdHJpbmdcblxuXHQgICAgICB2YXIgcmVnRXhwT3B0aW9ucyA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpKTtcblx0ICAgICAgaW5kZXggPSBpICsgMTsgLy8gRm9yIGVhY2ggb3B0aW9uIGFkZCB0aGUgY29ycmVzcG9uZGluZyBvbmUgZm9yIGphdmFzY3JpcHRcblxuXHQgICAgICB2YXIgb3B0aW9uc0FycmF5ID0gbmV3IEFycmF5KHJlZ0V4cE9wdGlvbnMubGVuZ3RoKTsgLy8gUGFyc2Ugb3B0aW9uc1xuXG5cdCAgICAgIGZvciAoaSA9IDA7IGkgPCByZWdFeHBPcHRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgc3dpdGNoIChyZWdFeHBPcHRpb25zW2ldKSB7XG5cdCAgICAgICAgICBjYXNlICdtJzpcblx0ICAgICAgICAgICAgb3B0aW9uc0FycmF5W2ldID0gJ20nO1xuXHQgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgY2FzZSAncyc6XG5cdCAgICAgICAgICAgIG9wdGlvbnNBcnJheVtpXSA9ICdnJztcblx0ICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgIGNhc2UgJ2knOlxuXHQgICAgICAgICAgICBvcHRpb25zQXJyYXlbaV0gPSAnaSc7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBSZWdFeHAoc291cmNlLCBvcHRpb25zQXJyYXkuam9pbignJykpO1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9SRUdFWFAgJiYgYnNvblJlZ0V4cCA9PT0gdHJ1ZSkge1xuXHQgICAgICAvLyBHZXQgdGhlIHN0YXJ0IHNlYXJjaCBpbmRleFxuXHQgICAgICBpID0gaW5kZXg7IC8vIExvY2F0ZSB0aGUgZW5kIG9mIHRoZSBjIHN0cmluZ1xuXG5cdCAgICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcblx0ICAgICAgICBpKys7XG5cdCAgICAgIH0gLy8gSWYgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgZG9jdW1lbnRcblxuXG5cdCAgICAgIGlmIChpID49IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQmFkIEJTT04gRG9jdW1lbnQ6IGlsbGVnYWwgQ1N0cmluZycpOyAvLyBSZXR1cm4gdGhlIEMgc3RyaW5nXG5cblx0ICAgICAgdmFyIF9zb3VyY2UgPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaSk7XG5cblx0ICAgICAgaW5kZXggPSBpICsgMTsgLy8gR2V0IHRoZSBzdGFydCBzZWFyY2ggaW5kZXhcblxuXHQgICAgICBpID0gaW5kZXg7IC8vIExvY2F0ZSB0aGUgZW5kIG9mIHRoZSBjIHN0cmluZ1xuXG5cdCAgICAgIHdoaWxlIChidWZmZXIkJDFbaV0gIT09IDB4MDAgJiYgaSA8IGJ1ZmZlciQkMS5sZW5ndGgpIHtcblx0ICAgICAgICBpKys7XG5cdCAgICAgIH0gLy8gSWYgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgZG9jdW1lbnRcblxuXG5cdCAgICAgIGlmIChpID49IGJ1ZmZlciQkMS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQmFkIEJTT04gRG9jdW1lbnQ6IGlsbGVnYWwgQ1N0cmluZycpOyAvLyBSZXR1cm4gdGhlIEMgc3RyaW5nXG5cblx0ICAgICAgdmFyIF9yZWdFeHBPcHRpb25zID0gYnVmZmVyJCQxLnRvU3RyaW5nKCd1dGY4JywgaW5kZXgsIGkpO1xuXG5cdCAgICAgIGluZGV4ID0gaSArIDE7IC8vIFNldCB0aGUgb2JqZWN0XG5cblx0ICAgICAgb2JqZWN0W25hbWVdID0gbmV3IHJlZ2V4cChfc291cmNlLCBfcmVnRXhwT3B0aW9ucyk7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX1NZTUJPTCkge1xuXHQgICAgICB2YXIgX3N0cmluZ1NpemUgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblxuXHQgICAgICBpZiAoX3N0cmluZ1NpemUgPD0gMCB8fCBfc3RyaW5nU2l6ZSA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCB8fCBidWZmZXIkJDFbaW5kZXggKyBfc3RyaW5nU2l6ZSAtIDFdICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzdHJpbmcgbGVuZ3RoIGluIGJzb24nKTsgLy8gc3ltYm9sIGlzIGRlcHJlY2F0ZWQgLSB1cGdyYWRlIHRvIHN0cmluZy5cblxuXHQgICAgICBvYmplY3RbbmFtZV0gPSBidWZmZXIkJDEudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaW5kZXggKyBfc3RyaW5nU2l6ZSAtIDEpO1xuXHQgICAgICBpbmRleCA9IGluZGV4ICsgX3N0cmluZ1NpemU7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX1RJTUVTVEFNUCkge1xuXHQgICAgICB2YXIgX2xvd0JpdHMyID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7XG5cblx0ICAgICAgdmFyIF9oaWdoQml0czIgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblxuXHQgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgdGltZXN0YW1wKF9sb3dCaXRzMiwgX2hpZ2hCaXRzMik7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVkpIHtcblx0ICAgICAgb2JqZWN0W25hbWVdID0gbmV3IG1pbl9rZXkoKTtcblx0ICAgIH0gZWxzZSBpZiAoZWxlbWVudFR5cGUgPT09IGNvbnN0YW50cy5CU09OX0RBVEFfTUFYX0tFWSkge1xuXHQgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgbWF4X2tleSgpO1xuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9DT0RFKSB7XG5cdCAgICAgIHZhciBfc3RyaW5nU2l6ZTIgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDtcblxuXHQgICAgICBpZiAoX3N0cmluZ1NpemUyIDw9IDAgfHwgX3N0cmluZ1NpemUyID4gYnVmZmVyJCQxLmxlbmd0aCAtIGluZGV4IHx8IGJ1ZmZlciQkMVtpbmRleCArIF9zdHJpbmdTaXplMiAtIDFdICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzdHJpbmcgbGVuZ3RoIGluIGJzb24nKTtcblx0ICAgICAgdmFyIGZ1bmN0aW9uU3RyaW5nID0gYnVmZmVyJCQxLnRvU3RyaW5nKCd1dGY4JywgaW5kZXgsIGluZGV4ICsgX3N0cmluZ1NpemUyIC0gMSk7IC8vIElmIHdlIGFyZSBldmFsdWF0aW5nIHRoZSBmdW5jdGlvbnNcblxuXHQgICAgICBpZiAoZXZhbEZ1bmN0aW9ucykge1xuXHQgICAgICAgIC8vIElmIHdlIGhhdmUgY2FjaGUgZW5hYmxlZCBsZXQncyBsb29rIGZvciB0aGUgbWQ1IG9mIHRoZSBmdW5jdGlvbiBpbiB0aGUgY2FjaGVcblx0ICAgICAgICBpZiAoY2FjaGVGdW5jdGlvbnMpIHtcblx0ICAgICAgICAgIHZhciBoYXNoID0gY2FjaGVGdW5jdGlvbnNDcmMzMiA/IGNyYzMyKGZ1bmN0aW9uU3RyaW5nKSA6IGZ1bmN0aW9uU3RyaW5nOyAvLyBHb3QgdG8gZG8gdGhpcyB0byBhdm9pZCBWOCBkZW9wdGltaXppbmcgdGhlIGNhbGwgZHVlIHRvIGZpbmRpbmcgZXZhbFxuXG5cdCAgICAgICAgICBvYmplY3RbbmFtZV0gPSBpc29sYXRlRXZhbFdpdGhIYXNoKGZ1bmN0aW9uQ2FjaGUsIGhhc2gsIGZ1bmN0aW9uU3RyaW5nLCBvYmplY3QpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvYmplY3RbbmFtZV0gPSBpc29sYXRlRXZhbChmdW5jdGlvblN0cmluZyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBjb2RlKGZ1bmN0aW9uU3RyaW5nKTtcblx0ICAgICAgfSAvLyBVcGRhdGUgcGFyc2UgaW5kZXggcG9zaXRpb25cblxuXG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyBfc3RyaW5nU2l6ZTI7XG5cdCAgICB9IGVsc2UgaWYgKGVsZW1lbnRUeXBlID09PSBjb25zdGFudHMuQlNPTl9EQVRBX0NPREVfV19TQ09QRSkge1xuXHQgICAgICB2YXIgdG90YWxTaXplID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIEVsZW1lbnQgY2Fubm90IGJlIHNob3J0ZXIgdGhhbiB0b3RhbFNpemUgKyBzdHJpbmdTaXplICsgZG9jdW1lbnRTaXplICsgdGVybWluYXRvclxuXG5cdCAgICAgIGlmICh0b3RhbFNpemUgPCA0ICsgNCArIDQgKyAxKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb2RlX3dfc2NvcGUgdG90YWwgc2l6ZSBzaG9ydGVyIG1pbmltdW0gZXhwZWN0ZWQgbGVuZ3RoJyk7XG5cdCAgICAgIH0gLy8gR2V0IHRoZSBjb2RlIHN0cmluZyBzaXplXG5cblxuXHQgICAgICB2YXIgX3N0cmluZ1NpemUzID0gYnVmZmVyJCQxW2luZGV4KytdIHwgYnVmZmVyJCQxW2luZGV4KytdIDw8IDggfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMTYgfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgMjQ7IC8vIENoZWNrIGlmIHdlIGhhdmUgYSB2YWxpZCBzdHJpbmdcblxuXG5cdCAgICAgIGlmIChfc3RyaW5nU2l6ZTMgPD0gMCB8fCBfc3RyaW5nU2l6ZTMgPiBidWZmZXIkJDEubGVuZ3RoIC0gaW5kZXggfHwgYnVmZmVyJCQxW2luZGV4ICsgX3N0cmluZ1NpemUzIC0gMV0gIT09IDApIHRocm93IG5ldyBFcnJvcignYmFkIHN0cmluZyBsZW5ndGggaW4gYnNvbicpOyAvLyBKYXZhc2NyaXB0IGZ1bmN0aW9uXG5cblx0ICAgICAgdmFyIF9mdW5jdGlvblN0cmluZyA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpbmRleCArIF9zdHJpbmdTaXplMyAtIDEpOyAvLyBVcGRhdGUgcGFyc2UgaW5kZXggcG9zaXRpb25cblxuXG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyBfc3RyaW5nU2l6ZTM7IC8vIFBhcnNlIHRoZSBlbGVtZW50XG5cblx0ICAgICAgdmFyIF9pbmRleDMgPSBpbmRleDsgLy8gRGVjb2RlIHRoZSBzaXplIG9mIHRoZSBvYmplY3QgZG9jdW1lbnRcblxuXHQgICAgICB2YXIgX29iamVjdFNpemUyID0gYnVmZmVyJCQxW2luZGV4XSB8IGJ1ZmZlciQkMVtpbmRleCArIDFdIDw8IDggfCBidWZmZXIkJDFbaW5kZXggKyAyXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCArIDNdIDw8IDI0OyAvLyBEZWNvZGUgdGhlIHNjb3BlIG9iamVjdFxuXG5cblx0ICAgICAgdmFyIHNjb3BlT2JqZWN0ID0gZGVzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBfaW5kZXgzLCBvcHRpb25zLCBmYWxzZSk7IC8vIEFkanVzdCB0aGUgaW5kZXhcblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgX29iamVjdFNpemUyOyAvLyBDaGVjayBpZiBmaWVsZCBsZW5ndGggaXMgdG8gc2hvcnRcblxuXHQgICAgICBpZiAodG90YWxTaXplIDwgNCArIDQgKyBfb2JqZWN0U2l6ZTIgKyBfc3RyaW5nU2l6ZTMpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvZGVfd19zY29wZSB0b3RhbCBzaXplIGlzIHRvIHNob3J0LCB0cnVuY2F0aW5nIHNjb3BlJyk7XG5cdCAgICAgIH0gLy8gQ2hlY2sgaWYgdG90YWxTaXplIGZpZWxkIGlzIHRvIGxvbmdcblxuXG5cdCAgICAgIGlmICh0b3RhbFNpemUgPiA0ICsgNCArIF9vYmplY3RTaXplMiArIF9zdHJpbmdTaXplMykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignY29kZV93X3Njb3BlIHRvdGFsIHNpemUgaXMgdG8gbG9uZywgY2xpcHMgb3V0ZXIgZG9jdW1lbnQnKTtcblx0ICAgICAgfSAvLyBJZiB3ZSBhcmUgZXZhbHVhdGluZyB0aGUgZnVuY3Rpb25zXG5cblxuXHQgICAgICBpZiAoZXZhbEZ1bmN0aW9ucykge1xuXHQgICAgICAgIC8vIElmIHdlIGhhdmUgY2FjaGUgZW5hYmxlZCBsZXQncyBsb29rIGZvciB0aGUgbWQ1IG9mIHRoZSBmdW5jdGlvbiBpbiB0aGUgY2FjaGVcblx0ICAgICAgICBpZiAoY2FjaGVGdW5jdGlvbnMpIHtcblx0ICAgICAgICAgIHZhciBfaGFzaCA9IGNhY2hlRnVuY3Rpb25zQ3JjMzIgPyBjcmMzMihfZnVuY3Rpb25TdHJpbmcpIDogX2Z1bmN0aW9uU3RyaW5nOyAvLyBHb3QgdG8gZG8gdGhpcyB0byBhdm9pZCBWOCBkZW9wdGltaXppbmcgdGhlIGNhbGwgZHVlIHRvIGZpbmRpbmcgZXZhbFxuXG5cblx0ICAgICAgICAgIG9iamVjdFtuYW1lXSA9IGlzb2xhdGVFdmFsV2l0aEhhc2goZnVuY3Rpb25DYWNoZSwgX2hhc2gsIF9mdW5jdGlvblN0cmluZywgb2JqZWN0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb2JqZWN0W25hbWVdID0gaXNvbGF0ZUV2YWwoX2Z1bmN0aW9uU3RyaW5nKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBvYmplY3RbbmFtZV0uc2NvcGUgPSBzY29wZU9iamVjdDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBvYmplY3RbbmFtZV0gPSBuZXcgY29kZShfZnVuY3Rpb25TdHJpbmcsIHNjb3BlT2JqZWN0KTtcblx0ICAgICAgfVxuXHQgICAgfSBlbHNlIGlmIChlbGVtZW50VHlwZSA9PT0gY29uc3RhbnRzLkJTT05fREFUQV9EQlBPSU5URVIpIHtcblx0ICAgICAgLy8gR2V0IHRoZSBjb2RlIHN0cmluZyBzaXplXG5cdCAgICAgIHZhciBfc3RyaW5nU2l6ZTQgPSBidWZmZXIkJDFbaW5kZXgrK10gfCBidWZmZXIkJDFbaW5kZXgrK10gPDwgOCB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAxNiB8IGJ1ZmZlciQkMVtpbmRleCsrXSA8PCAyNDsgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhIHZhbGlkIHN0cmluZ1xuXG5cblx0ICAgICAgaWYgKF9zdHJpbmdTaXplNCA8PSAwIHx8IF9zdHJpbmdTaXplNCA+IGJ1ZmZlciQkMS5sZW5ndGggLSBpbmRleCB8fCBidWZmZXIkJDFbaW5kZXggKyBfc3RyaW5nU2l6ZTQgLSAxXSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdiYWQgc3RyaW5nIGxlbmd0aCBpbiBic29uJyk7IC8vIE5hbWVzcGFjZVxuXG5cdCAgICAgIGlmICghdmFsaWRhdGVVdGY4JDEoYnVmZmVyJCQxLCBpbmRleCwgaW5kZXggKyBfc3RyaW5nU2l6ZTQgLSAxKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBVVEYtOCBzdHJpbmcgaW4gQlNPTiBkb2N1bWVudCcpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIG5hbWVzcGFjZSA9IGJ1ZmZlciQkMS50b1N0cmluZygndXRmOCcsIGluZGV4LCBpbmRleCArIF9zdHJpbmdTaXplNCAtIDEpOyAvLyBVcGRhdGUgcGFyc2UgaW5kZXggcG9zaXRpb25cblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgX3N0cmluZ1NpemU0OyAvLyBSZWFkIHRoZSBvaWRcblxuXHQgICAgICB2YXIgb2lkQnVmZmVyID0gQnVmZmVyJDQuYWxsb2MoMTIpO1xuXHQgICAgICBidWZmZXIkJDEuY29weShvaWRCdWZmZXIsIDAsIGluZGV4LCBpbmRleCArIDEyKTtcblxuXHQgICAgICB2YXIgX29pZCA9IG5ldyBvYmplY3RpZChvaWRCdWZmZXIpOyAvLyBVcGRhdGUgdGhlIGluZGV4XG5cblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgMTI7IC8vIFVwZ3JhZGUgdG8gREJSZWYgdHlwZVxuXG5cdCAgICAgIG9iamVjdFtuYW1lXSA9IG5ldyBkYl9yZWYobmFtZXNwYWNlLCBfb2lkKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHRocm93IG5ldyBFcnJvcignRGV0ZWN0ZWQgdW5rbm93biBCU09OIHR5cGUgJyArIGVsZW1lbnRUeXBlLnRvU3RyaW5nKDE2KSArICcgZm9yIGZpZWxkbmFtZSBcIicgKyBuYW1lICsgJ1wiLCBhcmUgeW91IHVzaW5nIHRoZSBsYXRlc3QgQlNPTiBwYXJzZXI/Jyk7XG5cdCAgICB9XG5cdCAgfSAvLyBDaGVjayBpZiB0aGUgZGVzZXJpYWxpemF0aW9uIHdhcyBhZ2FpbnN0IGEgdmFsaWQgYXJyYXkvb2JqZWN0XG5cblxuXHQgIGlmIChzaXplICE9PSBpbmRleCAtIHN0YXJ0SW5kZXgpIHtcblx0ICAgIGlmIChpc0FycmF5KSB0aHJvdyBuZXcgRXJyb3IoJ2NvcnJ1cHQgYXJyYXkgYnNvbicpO1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdjb3JydXB0IG9iamVjdCBic29uJyk7XG5cdCAgfSAvLyBjaGVjayBpZiBvYmplY3QncyAkIGtleXMgYXJlIHRob3NlIG9mIGEgREJSZWZcblxuXG5cdCAgdmFyIGRvbGxhcktleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuXHQgICAgcmV0dXJuIGsuc3RhcnRzV2l0aCgnJCcpO1xuXHQgIH0pO1xuXHQgIHZhciB2YWxpZCA9IHRydWU7XG5cdCAgZG9sbGFyS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG5cdCAgICBpZiAoWyckcmVmJywgJyRpZCcsICckZGInXS5pbmRleE9mKGspID09PSAtMSkgdmFsaWQgPSBmYWxzZTtcblx0ICB9KTsgLy8gaWYgYSAka2V5IG5vdCBpbiBcIiRyZWZcIiwgXCIkaWRcIiwgXCIkZGJcIiwgZG9uJ3QgbWFrZSBhIERCUmVmXG5cblx0ICBpZiAoIXZhbGlkKSByZXR1cm4gb2JqZWN0O1xuXG5cdCAgaWYgKG9iamVjdFsnJGlkJ10gIT0gbnVsbCAmJiBvYmplY3RbJyRyZWYnXSAhPSBudWxsKSB7XG5cdCAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIG9iamVjdCk7XG5cdCAgICBkZWxldGUgY29weS4kcmVmO1xuXHQgICAgZGVsZXRlIGNvcHkuJGlkO1xuXHQgICAgZGVsZXRlIGNvcHkuJGRiO1xuXHQgICAgcmV0dXJuIG5ldyBkYl9yZWYob2JqZWN0LiRyZWYsIG9iamVjdC4kaWQsIG9iamVjdC4kZGIgfHwgbnVsbCwgY29weSk7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fVxuXHQvKipcblx0ICogRW5zdXJlIGV2YWwgaXMgaXNvbGF0ZWQuXG5cdCAqXG5cdCAqIEBpZ25vcmVcblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXG5cblx0ZnVuY3Rpb24gaXNvbGF0ZUV2YWxXaXRoSGFzaChmdW5jdGlvbkNhY2hlLCBoYXNoLCBmdW5jdGlvblN0cmluZywgb2JqZWN0KSB7XG5cdCAgLy8gQ29udGFpbnMgdGhlIHZhbHVlIHdlIGFyZSBnb2luZyB0byBzZXRcblx0ICB2YXIgdmFsdWUgPSBudWxsOyAvLyBDaGVjayBmb3IgY2FjaGUgaGl0LCBldmFsIGlmIG1pc3NpbmcgYW5kIHJldHVybiBjYWNoZWQgZnVuY3Rpb25cblxuXHQgIGlmIChmdW5jdGlvbkNhY2hlW2hhc2hdID09IG51bGwpIHtcblx0ICAgIGV2YWwoJ3ZhbHVlID0gJyArIGZ1bmN0aW9uU3RyaW5nKTtcblx0ICAgIGZ1bmN0aW9uQ2FjaGVbaGFzaF0gPSB2YWx1ZTtcblx0ICB9IC8vIFNldCB0aGUgb2JqZWN0XG5cblxuXHQgIHJldHVybiBmdW5jdGlvbkNhY2hlW2hhc2hdLmJpbmQob2JqZWN0KTtcblx0fVxuXHQvKipcblx0ICogRW5zdXJlIGV2YWwgaXMgaXNvbGF0ZWQuXG5cdCAqXG5cdCAqIEBpZ25vcmVcblx0ICogQGFwaSBwcml2YXRlXG5cdCAqL1xuXG5cblx0ZnVuY3Rpb24gaXNvbGF0ZUV2YWwoZnVuY3Rpb25TdHJpbmcpIHtcblx0ICAvLyBDb250YWlucyB0aGUgdmFsdWUgd2UgYXJlIGdvaW5nIHRvIHNldFxuXHQgIHZhciB2YWx1ZSA9IG51bGw7IC8vIEV2YWwgdGhlIGZ1bmN0aW9uXG5cblx0ICBldmFsKCd2YWx1ZSA9ICcgKyBmdW5jdGlvblN0cmluZyk7XG5cdCAgcmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0dmFyIGRlc2VyaWFsaXplciA9IGRlc2VyaWFsaXplJDE7XG5cblx0Ly8gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblx0Ly9cblx0Ly8gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG5cdC8vIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXHQvL1xuXHQvLyAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG5cdC8vICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdC8vXG5cdC8vICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcblx0Ly8gICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuXHQvLyAgICBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblx0Ly9cblx0Ly8gICogTmVpdGhlciB0aGUgbmFtZSBvZiBGYWlyIE9ha3MgTGFicywgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcblx0Ly8gICAgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG5cdC8vICAgIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXHQvL1xuXHQvLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuXHQvLyBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG5cdC8vIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG5cdC8vIEFSRSBESVNDTEFJTUVELiAgSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBPV05FUiBPUiBDT05UUklCVVRPUlMgQkVcblx0Ly8gTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuXHQvLyBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuXHQvLyBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1Ncblx0Ly8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cblx0Ly8gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcblx0Ly8gQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcblx0Ly8gUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdC8vXG5cdC8vXG5cdC8vIE1vZGlmaWNhdGlvbnMgdG8gd3JpdGVJRUVFNzU0IHRvIHN1cHBvcnQgbmVnYXRpdmUgemVyb2VzIG1hZGUgYnkgQnJpYW4gV2hpdGVcblxuXHRmdW5jdGlvbiByZWFkSUVFRTc1NChidWZmZXIkJDEsIG9mZnNldCwgZW5kaWFuLCBtTGVuLCBuQnl0ZXMpIHtcblx0ICB2YXIgZSxcblx0ICAgICAgbSxcblx0ICAgICAgYkJFID0gZW5kaWFuID09PSAnYmlnJyxcblx0ICAgICAgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMSxcblx0ICAgICAgZU1heCA9ICgxIDw8IGVMZW4pIC0gMSxcblx0ICAgICAgZUJpYXMgPSBlTWF4ID4+IDEsXG5cdCAgICAgIG5CaXRzID0gLTcsXG5cdCAgICAgIGkgPSBiQkUgPyAwIDogbkJ5dGVzIC0gMSxcblx0ICAgICAgZCA9IGJCRSA/IDEgOiAtMSxcblx0ICAgICAgcyA9IGJ1ZmZlciQkMVtvZmZzZXQgKyBpXTtcblx0ICBpICs9IGQ7XG5cdCAgZSA9IHMgJiAoMSA8PCAtbkJpdHMpIC0gMTtcblx0ICBzID4+PSAtbkJpdHM7XG5cdCAgbkJpdHMgKz0gZUxlbjtcblxuXHQgIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyJCQxW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHtcblx0ICB9XG5cblx0ICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuXHQgIGUgPj49IC1uQml0cztcblx0ICBuQml0cyArPSBtTGVuO1xuXG5cdCAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXIkJDFbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge1xuXHQgIH1cblxuXHQgIGlmIChlID09PSAwKSB7XG5cdCAgICBlID0gMSAtIGVCaWFzO1xuXHQgIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuXHQgICAgcmV0dXJuIG0gPyBOYU4gOiAocyA/IC0xIDogMSkgKiBJbmZpbml0eTtcblx0ICB9IGVsc2Uge1xuXHQgICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKTtcblx0ICAgIGUgPSBlIC0gZUJpYXM7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbik7XG5cdH1cblxuXHRmdW5jdGlvbiB3cml0ZUlFRUU3NTQoYnVmZmVyJCQxLCB2YWx1ZSwgb2Zmc2V0LCBlbmRpYW4sIG1MZW4sIG5CeXRlcykge1xuXHQgIHZhciBlLFxuXHQgICAgICBtLFxuXHQgICAgICBjLFxuXHQgICAgICBiQkUgPSBlbmRpYW4gPT09ICdiaWcnLFxuXHQgICAgICBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxLFxuXHQgICAgICBlTWF4ID0gKDEgPDwgZUxlbikgLSAxLFxuXHQgICAgICBlQmlhcyA9IGVNYXggPj4gMSxcblx0ICAgICAgcnQgPSBtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMCxcblx0ICAgICAgaSA9IGJCRSA/IG5CeXRlcyAtIDEgOiAwLFxuXHQgICAgICBkID0gYkJFID8gLTEgOiAxLFxuXHQgICAgICBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcblx0ICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcblxuXHQgIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG5cdCAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDA7XG5cdCAgICBlID0gZU1heDtcblx0ICB9IGVsc2Uge1xuXHQgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpO1xuXG5cdCAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG5cdCAgICAgIGUtLTtcblx0ICAgICAgYyAqPSAyO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcblx0ICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcblx0ICAgICAgZSsrO1xuXHQgICAgICBjIC89IDI7XG5cdCAgICB9XG5cblx0ICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuXHQgICAgICBtID0gMDtcblx0ICAgICAgZSA9IGVNYXg7XG5cdCAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG5cdCAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcblx0ICAgICAgZSA9IGUgKyBlQmlhcztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKTtcblx0ICAgICAgZSA9IDA7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgaWYgKGlzTmFOKHZhbHVlKSkgbSA9IDA7XG5cblx0ICB3aGlsZSAobUxlbiA+PSA4KSB7XG5cdCAgICBidWZmZXIkJDFbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZjtcblx0ICAgIGkgKz0gZDtcblx0ICAgIG0gLz0gMjU2O1xuXHQgICAgbUxlbiAtPSA4O1xuXHQgIH1cblxuXHQgIGUgPSBlIDw8IG1MZW4gfCBtO1xuXHQgIGlmIChpc05hTih2YWx1ZSkpIGUgKz0gODtcblx0ICBlTGVuICs9IG1MZW47XG5cblx0ICB3aGlsZSAoZUxlbiA+IDApIHtcblx0ICAgIGJ1ZmZlciQkMVtvZmZzZXQgKyBpXSA9IGUgJiAweGZmO1xuXHQgICAgaSArPSBkO1xuXHQgICAgZSAvPSAyNTY7XG5cdCAgICBlTGVuIC09IDg7XG5cdCAgfVxuXG5cdCAgYnVmZmVyJCQxW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4O1xuXHR9XG5cblx0dmFyIGZsb2F0X3BhcnNlciA9IHtcblx0ICByZWFkSUVFRTc1NDogcmVhZElFRUU3NTQsXG5cdCAgd3JpdGVJRUVFNzU0OiB3cml0ZUlFRUU3NTRcblx0fTtcblxuXHRmdW5jdGlvbiBfdHlwZW9mJDMob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDMgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQzID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMyhvYmopOyB9XG5cblx0dmFyIEJ1ZmZlciQ1ID0gYnVmZmVyLkJ1ZmZlcjtcblx0dmFyIHdyaXRlSUVFRTc1NCQxID0gZmxvYXRfcGFyc2VyLndyaXRlSUVFRTc1NDtcblx0dmFyIG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQxID0gdXRpbHMubm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nO1xuXHR2YXIgcmVnZXhwJDEgPSAvXFx4MDAvOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxuXHR2YXIgaWdub3JlS2V5cyA9IG5ldyBTZXQoWyckZGInLCAnJHJlZicsICckaWQnLCAnJGNsdXN0ZXJUaW1lJ10pOyAvLyBUbyBlbnN1cmUgdGhhdCAwLjQgb2Ygbm9kZSB3b3JrcyBjb3JyZWN0bHlcblxuXHR2YXIgaXNEYXRlJDEgPSBmdW5jdGlvbiBpc0RhdGUoZCkge1xuXHQgIHJldHVybiBfdHlwZW9mJDMoZCkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xuXHR9O1xuXG5cdHZhciBpc1JlZ0V4cCQxID0gZnVuY3Rpb24gaXNSZWdFeHAoZCkge1xuXHQgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZVN0cmluZyhidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG5cdCAgLy8gRW5jb2RlIFN0cmluZyB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9TVFJJTkc7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcyArIDE7XG5cdCAgYnVmZmVyJCQxW2luZGV4IC0gMV0gPSAwOyAvLyBXcml0ZSB0aGUgc3RyaW5nXG5cblx0ICB2YXIgc2l6ZSA9IGJ1ZmZlciQkMS53cml0ZSh2YWx1ZSwgaW5kZXggKyA0LCAndXRmOCcpOyAvLyBXcml0ZSB0aGUgc2l6ZSBvZiB0aGUgc3RyaW5nIHRvIGJ1ZmZlclxuXG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgM10gPSBzaXplICsgMSA+PiAyNCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgMl0gPSBzaXplICsgMSA+PiAxNiAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgMV0gPSBzaXplICsgMSA+PiA4ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXhdID0gc2l6ZSArIDEgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuXHQgIGluZGV4ID0gaW5kZXggKyA0ICsgc2l6ZTsgLy8gV3JpdGUgemVyb1xuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcblx0ICByZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVOdW1iZXIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdlIGhhdmUgYW4gaW50ZWdlciB2YWx1ZVxuXHQgIGlmIChNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWUgJiYgdmFsdWUgPj0gY29uc3RhbnRzLkpTX0lOVF9NSU4gJiYgdmFsdWUgPD0gY29uc3RhbnRzLkpTX0lOVF9NQVgpIHtcblx0ICAgIC8vIElmIHRoZSB2YWx1ZSBmaXRzIGluIDMyIGJpdHMgZW5jb2RlIGFzIGludCwgaWYgaXQgZml0cyBpbiBhIGRvdWJsZVxuXHQgICAgLy8gZW5jb2RlIGl0IGFzIGEgZG91YmxlLCBvdGhlcndpc2UgbG9uZ1xuXHQgICAgaWYgKHZhbHVlID49IGNvbnN0YW50cy5CU09OX0lOVDMyX01JTiAmJiB2YWx1ZSA8PSBjb25zdGFudHMuQlNPTl9JTlQzMl9NQVgpIHtcblx0ICAgICAgLy8gU2V0IGludCB0eXBlIDMyIGJpdHMgb3IgbGVzc1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0lOVDsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuXHQgICAgICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIFdyaXRlIHRoZSBpbnQgdmFsdWVcblxuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSAmIDB4ZmY7XG5cdCAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDggJiAweGZmO1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDI0ICYgMHhmZjtcblx0ICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gY29uc3RhbnRzLkpTX0lOVF9NSU4gJiYgdmFsdWUgPD0gY29uc3RhbnRzLkpTX0lOVF9NQVgpIHtcblx0ICAgICAgLy8gRW5jb2RlIGFzIGRvdWJsZVxuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX05VTUJFUjsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuXHQgICAgICB2YXIgX251bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblxuXHQgICAgICBpbmRleCA9IGluZGV4ICsgX251bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSBmbG9hdFxuXG5cdCAgICAgIHdyaXRlSUVFRTc1NCQxKGJ1ZmZlciQkMSwgdmFsdWUsIGluZGV4LCAnbGl0dGxlJywgNTIsIDgpOyAvLyBBanVzdCBpbmRleFxuXG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyA4O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgLy8gU2V0IGxvbmcgdHlwZVxuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0xPTkc7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICAgICAgdmFyIF9udW1iZXJPZldyaXR0ZW5CeXRlczIgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXG5cdCAgICAgIGluZGV4ID0gaW5kZXggKyBfbnVtYmVyT2ZXcml0dGVuQnl0ZXMyO1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuXHQgICAgICB2YXIgbG9uZ1ZhbCA9IGxvbmdfMS5mcm9tTnVtYmVyKHZhbHVlKTtcblx0ICAgICAgdmFyIGxvd0JpdHMgPSBsb25nVmFsLmdldExvd0JpdHMoKTtcblx0ICAgICAgdmFyIGhpZ2hCaXRzID0gbG9uZ1ZhbC5nZXRIaWdoQml0cygpOyAvLyBFbmNvZGUgbG93IGJpdHNcblxuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gbG93Qml0cyA+PiA4ICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gbG93Qml0cyA+PiAxNiAmIDB4ZmY7XG5cdCAgICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cblx0ICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgJiAweGZmO1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyA+PiA4ICYgMHhmZjtcblx0ICAgICAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMTYgJiAweGZmO1xuXHQgICAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyA+PiAyNCAmIDB4ZmY7XG5cdCAgICB9XG5cdCAgfSBlbHNlIHtcblx0ICAgIC8vIEVuY29kZSBhcyBkb3VibGVcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfTlVNQkVSOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgICB2YXIgX251bWJlck9mV3JpdHRlbkJ5dGVzMyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cblx0ICAgIGluZGV4ID0gaW5kZXggKyBfbnVtYmVyT2ZXcml0dGVuQnl0ZXMzO1xuXHQgICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgZmxvYXRcblxuXHQgICAgd3JpdGVJRUVFNzU0JDEoYnVmZmVyJCQxLCB2YWx1ZSwgaW5kZXgsICdsaXR0bGUnLCA1MiwgOCk7IC8vIEFqdXN0IGluZGV4XG5cblx0ICAgIGluZGV4ID0gaW5kZXggKyA4O1xuXHQgIH1cblxuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFNldCBsb25nIHR5cGVcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX05VTEw7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZUJvb2xlYW4oYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdyaXRlIHRoZSB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9CT09MRUFOOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblx0ICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gRW5jb2RlIHRoZSBib29sZWFuIHZhbHVlXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSA/IDEgOiAwO1xuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdyaXRlIHRoZSB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9EQVRFOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblx0ICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIGRhdGVcblxuXHQgIHZhciBkYXRlSW5NaWxpcyA9IGxvbmdfMS5mcm9tTnVtYmVyKHZhbHVlLmdldFRpbWUoKSk7XG5cdCAgdmFyIGxvd0JpdHMgPSBkYXRlSW5NaWxpcy5nZXRMb3dCaXRzKCk7XG5cdCAgdmFyIGhpZ2hCaXRzID0gZGF0ZUluTWlsaXMuZ2V0SGlnaEJpdHMoKTsgLy8gRW5jb2RlIGxvdyBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzID4+IDI0ICYgMHhmZjtcblx0ICByZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVSZWdFeHAoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdyaXRlIHRoZSB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9SRUdFWFA7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuXG5cdCAgaWYgKHZhbHVlLnNvdXJjZSAmJiB2YWx1ZS5zb3VyY2UubWF0Y2gocmVnZXhwJDEpICE9IG51bGwpIHtcblx0ICAgIHRocm93IEVycm9yKCd2YWx1ZSAnICsgdmFsdWUuc291cmNlICsgJyBtdXN0IG5vdCBjb250YWluIG51bGwgYnl0ZXMnKTtcblx0ICB9IC8vIEFkanVzdCB0aGUgaW5kZXhcblxuXG5cdCAgaW5kZXggPSBpbmRleCArIGJ1ZmZlciQkMS53cml0ZSh2YWx1ZS5zb3VyY2UsIGluZGV4LCAndXRmOCcpOyAvLyBXcml0ZSB6ZXJvXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwOyAvLyBXcml0ZSB0aGUgcGFyYW1ldGVyc1xuXG5cdCAgaWYgKHZhbHVlLmlnbm9yZUNhc2UpIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4Njk7IC8vIGlcblxuXHQgIGlmICh2YWx1ZS5nbG9iYWwpIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4NzM7IC8vIHNcblxuXHQgIGlmICh2YWx1ZS5tdWx0aWxpbmUpIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4NmQ7IC8vIG1cblx0ICAvLyBBZGQgZW5kaW5nIHplcm9cblxuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDB4MDA7XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplQlNPTlJlZ0V4cChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG5cdCAgLy8gV3JpdGUgdGhlIHR5cGVcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX1JFR0VYUDsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuXHQgIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cdCAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIENoZWNrIHRoZSBwYXR0ZXJuIGZvciAwIGJ5dGVzXG5cblx0ICBpZiAodmFsdWUucGF0dGVybi5tYXRjaChyZWdleHAkMSkgIT0gbnVsbCkge1xuXHQgICAgLy8gVGhlIEJTT04gc3BlYyBkb2Vzbid0IGFsbG93IGtleXMgd2l0aCBudWxsIGJ5dGVzIGJlY2F1c2Uga2V5cyBhcmVcblx0ICAgIC8vIG51bGwtdGVybWluYXRlZC5cblx0ICAgIHRocm93IEVycm9yKCdwYXR0ZXJuICcgKyB2YWx1ZS5wYXR0ZXJuICsgJyBtdXN0IG5vdCBjb250YWluIG51bGwgYnl0ZXMnKTtcblx0ICB9IC8vIEFkanVzdCB0aGUgaW5kZXhcblxuXG5cdCAgaW5kZXggPSBpbmRleCArIGJ1ZmZlciQkMS53cml0ZSh2YWx1ZS5wYXR0ZXJuLCBpbmRleCwgJ3V0ZjgnKTsgLy8gV3JpdGUgemVyb1xuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMHgwMDsgLy8gV3JpdGUgdGhlIG9wdGlvbnNcblxuXHQgIGluZGV4ID0gaW5kZXggKyBidWZmZXIkJDEud3JpdGUodmFsdWUub3B0aW9ucy5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpLCBpbmRleCwgJ3V0ZjgnKTsgLy8gQWRkIGVuZGluZyB6ZXJvXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwO1xuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZU1pbk1heChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG5cdCAgLy8gV3JpdGUgdGhlIHR5cGUgb2YgZWl0aGVyIG1pbiBvciBtYXgga2V5XG5cdCAgaWYgKHZhbHVlID09PSBudWxsKSB7XG5cdCAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX05VTEw7XG5cdCAgfSBlbHNlIGlmICh2YWx1ZS5fYnNvbnR5cGUgPT09ICdNaW5LZXknKSB7XG5cdCAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfTUFYX0tFWTtcblx0ICB9IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblxuXHQgIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cdCAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0SWQoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdyaXRlIHRoZSB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9PSUQ7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSB0aGUgb2JqZWN0SWQgaW50byB0aGUgc2hhcmVkIGJ1ZmZlclxuXG5cdCAgaWYgKHR5cGVvZiB2YWx1ZS5pZCA9PT0gJ3N0cmluZycpIHtcblx0ICAgIGJ1ZmZlciQkMS53cml0ZSh2YWx1ZS5pZCwgaW5kZXgsICdiaW5hcnknKTtcblx0ICB9IGVsc2UgaWYgKHZhbHVlLmlkICYmIHZhbHVlLmlkLmNvcHkpIHtcblx0ICAgIHZhbHVlLmlkLmNvcHkoYnVmZmVyJCQxLCBpbmRleCwgMCwgMTIpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvYmplY3QgWycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnXSBpcyBub3QgYSB2YWxpZCBPYmplY3RJZCcpO1xuXHQgIH0gLy8gQWp1c3QgaW5kZXhcblxuXG5cdCAgcmV0dXJuIGluZGV4ICsgMTI7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVCdWZmZXIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgaXNBcnJheSkge1xuXHQgIC8vIFdyaXRlIHRoZSB0eXBlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9CSU5BUlk7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBHZXQgc2l6ZSBvZiB0aGUgYnVmZmVyIChjdXJyZW50IHdyaXRlIHBvaW50KVxuXG5cdCAgdmFyIHNpemUgPSB2YWx1ZS5sZW5ndGg7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBXcml0ZSB0aGUgZGVmYXVsdCBzdWJ0eXBlXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9CSU5BUllfU1VCVFlQRV9ERUZBVUxUOyAvLyBDb3B5IHRoZSBjb250ZW50IGZvcm0gdGhlIGJpbmFyeSBmaWVsZCB0byB0aGUgYnVmZmVyXG5cblx0ICB2YWx1ZS5jb3B5KGJ1ZmZlciQkMSwgaW5kZXgsIDAsIHNpemUpOyAvLyBBZGp1c3QgdGhlIGluZGV4XG5cblx0ICBpbmRleCA9IGluZGV4ICsgc2l6ZTtcblx0ICByZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQsIGlzQXJyYXksIHBhdGgpIHtcblx0ICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcblx0ICAgIGlmIChwYXRoW2ldID09PSB2YWx1ZSkgdGhyb3cgbmV3IEVycm9yKCdjeWNsaWMgZGVwZW5kZW5jeSBkZXRlY3RlZCcpO1xuXHQgIH0gLy8gUHVzaCB2YWx1ZSB0byBzdGFja1xuXG5cblx0ICBwYXRoLnB1c2godmFsdWUpOyAvLyBXcml0ZSB0aGUgdHlwZVxuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBjb25zdGFudHMuQlNPTl9EQVRBX0FSUkFZIDogY29uc3RhbnRzLkJTT05fREFUQV9PQkpFQ1Q7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuXHQgIHZhciBlbmRJbmRleCA9IHNlcmlhbGl6ZUludG8oYnVmZmVyJCQxLCB2YWx1ZSwgY2hlY2tLZXlzLCBpbmRleCwgZGVwdGggKyAxLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgcGF0aCk7IC8vIFBvcCBzdGFja1xuXG5cdCAgcGF0aC5wb3AoKTtcblx0ICByZXR1cm4gZW5kSW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVEZWNpbWFsMTI4KGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0RFQ0lNQUwxMjg7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSB0aGUgZGF0YSBmcm9tIHRoZSB2YWx1ZVxuXG5cdCAgdmFsdWUuYnl0ZXMuY29weShidWZmZXIkJDEsIGluZGV4LCAwLCAxNik7XG5cdCAgcmV0dXJuIGluZGV4ICsgMTY7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVMb25nKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcblx0ICAvLyBXcml0ZSB0aGUgdHlwZVxuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlLl9ic29udHlwZSA9PT0gJ0xvbmcnID8gY29uc3RhbnRzLkJTT05fREFUQV9MT05HIDogY29uc3RhbnRzLkJTT05fREFUQV9USU1FU1RBTVA7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSB0aGUgZGF0ZVxuXG5cdCAgdmFyIGxvd0JpdHMgPSB2YWx1ZS5nZXRMb3dCaXRzKCk7XG5cdCAgdmFyIGhpZ2hCaXRzID0gdmFsdWUuZ2V0SGlnaEJpdHMoKTsgLy8gRW5jb2RlIGxvdyBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBsb3dCaXRzID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGxvd0JpdHMgPj4gMjQgJiAweGZmOyAvLyBFbmNvZGUgaGlnaCBiaXRzXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBoaWdoQml0cyAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gaGlnaEJpdHMgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGhpZ2hCaXRzID4+IDI0ICYgMHhmZjtcblx0ICByZXR1cm4gaW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVJbnQzMihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG5cdCAgLy8gU2V0IGludCB0eXBlIDMyIGJpdHMgb3IgbGVzc1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfSU5UOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblx0ICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIGludCB2YWx1ZVxuXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gdmFsdWUgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHZhbHVlID4+IDE2ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZSA+PiAyNCAmIDB4ZmY7XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplRG91YmxlKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcblx0ICAvLyBFbmNvZGUgYXMgZG91YmxlXG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVI7IC8vIE51bWJlciBvZiB3cml0dGVuIGJ5dGVzXG5cblx0ICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgIGluZGV4ID0gaW5kZXggKyBudW1iZXJPZldyaXR0ZW5CeXRlcztcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAwOyAvLyBXcml0ZSBmbG9hdFxuXG5cdCAgd3JpdGVJRUVFNzU0JDEoYnVmZmVyJCQxLCB2YWx1ZS52YWx1ZSwgaW5kZXgsICdsaXR0bGUnLCA1MiwgOCk7IC8vIEFkanVzdCBpbmRleFxuXG5cdCAgaW5kZXggPSBpbmRleCArIDg7XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplRnVuY3Rpb24oYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgaXNBcnJheSkge1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERTsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuXHQgIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cdCAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIEZ1bmN0aW9uIHN0cmluZ1xuXG5cdCAgdmFyIGZ1bmN0aW9uU3RyaW5nID0gbm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nJDEodmFsdWUpOyAvLyBXcml0ZSB0aGUgc3RyaW5nXG5cblx0ICB2YXIgc2l6ZSA9IGJ1ZmZlciQkMS53cml0ZShmdW5jdGlvblN0cmluZywgaW5kZXggKyA0LCAndXRmOCcpICsgMTsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIHN0cmluZyB0byBidWZmZXJcblxuXHQgIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXggKyAxXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgMl0gPSBzaXplID4+IDE2ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuXHQgIGluZGV4ID0gaW5kZXggKyA0ICsgc2l6ZSAtIDE7IC8vIFdyaXRlIHplcm9cblxuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplQ29kZShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgaXNBcnJheSkge1xuXHQgIGlmICh2YWx1ZS5zY29wZSAmJiBfdHlwZW9mJDModmFsdWUuc2NvcGUpID09PSAnb2JqZWN0Jykge1xuXHQgICAgLy8gV3JpdGUgdGhlIHR5cGVcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfQ09ERV9XX1NDT1BFOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgICB2YXIgbnVtYmVyT2ZXcml0dGVuQnl0ZXMgPSAhaXNBcnJheSA/IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAndXRmOCcpIDogYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICdhc2NpaScpOyAvLyBFbmNvZGUgdGhlIG5hbWVcblxuXHQgICAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gU3RhcnRpbmcgaW5kZXhcblxuXHQgICAgdmFyIHN0YXJ0SW5kZXggPSBpbmRleDsgLy8gU2VyaWFsaXplIHRoZSBmdW5jdGlvblxuXHQgICAgLy8gR2V0IHRoZSBmdW5jdGlvbiBzdHJpbmdcblxuXHQgICAgdmFyIGZ1bmN0aW9uU3RyaW5nID0gdHlwZW9mIHZhbHVlLmNvZGUgPT09ICdzdHJpbmcnID8gdmFsdWUuY29kZSA6IHZhbHVlLmNvZGUudG9TdHJpbmcoKTsgLy8gSW5kZXggYWRqdXN0bWVudFxuXG5cdCAgICBpbmRleCA9IGluZGV4ICsgNDsgLy8gV3JpdGUgc3RyaW5nIGludG8gYnVmZmVyXG5cblx0ICAgIHZhciBjb2RlU2l6ZSA9IGJ1ZmZlciQkMS53cml0ZShmdW5jdGlvblN0cmluZywgaW5kZXggKyA0LCAndXRmOCcpICsgMTsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIHN0cmluZyB0byBidWZmZXJcblxuXHQgICAgYnVmZmVyJCQxW2luZGV4XSA9IGNvZGVTaXplICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCArIDFdID0gY29kZVNpemUgPj4gOCAmIDB4ZmY7XG5cdCAgICBidWZmZXIkJDFbaW5kZXggKyAyXSA9IGNvZGVTaXplID4+IDE2ICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCArIDNdID0gY29kZVNpemUgPj4gMjQgJiAweGZmOyAvLyBXcml0ZSBlbmQgMFxuXG5cdCAgICBidWZmZXIkJDFbaW5kZXggKyA0ICsgY29kZVNpemUgLSAxXSA9IDA7IC8vIFdyaXRlIHRoZVxuXG5cdCAgICBpbmRleCA9IGluZGV4ICsgY29kZVNpemUgKyA0OyAvL1xuXHQgICAgLy8gU2VyaWFsaXplIHRoZSBzY29wZSB2YWx1ZVxuXG5cdCAgICB2YXIgZW5kSW5kZXggPSBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgdmFsdWUuc2NvcGUsIGNoZWNrS2V5cywgaW5kZXgsIGRlcHRoICsgMSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuXHQgICAgaW5kZXggPSBlbmRJbmRleCAtIDE7IC8vIFdyaXQgdGhlIHRvdGFsXG5cblx0ICAgIHZhciB0b3RhbFNpemUgPSBlbmRJbmRleCAtIHN0YXJ0SW5kZXg7IC8vIFdyaXRlIHRoZSB0b3RhbCBzaXplIG9mIHRoZSBvYmplY3RcblxuXHQgICAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSB0b3RhbFNpemUgJiAweGZmO1xuXHQgICAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSB0b3RhbFNpemUgPj4gOCAmIDB4ZmY7XG5cdCAgICBidWZmZXIkJDFbc3RhcnRJbmRleCsrXSA9IHRvdGFsU2l6ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgICBidWZmZXIkJDFbc3RhcnRJbmRleCsrXSA9IHRvdGFsU2l6ZSA+PiAyNCAmIDB4ZmY7IC8vIFdyaXRlIHRyYWlsaW5nIHplcm9cblxuXHQgICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcblx0ICB9IGVsc2Uge1xuXHQgICAgYnVmZmVyJCQxW2luZGV4KytdID0gY29uc3RhbnRzLkJTT05fREFUQV9DT0RFOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgICB2YXIgX251bWJlck9mV3JpdHRlbkJ5dGVzNCA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cblx0ICAgIGluZGV4ID0gaW5kZXggKyBfbnVtYmVyT2ZXcml0dGVuQnl0ZXM0O1xuXHQgICAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gRnVuY3Rpb24gc3RyaW5nXG5cblx0ICAgIHZhciBfZnVuY3Rpb25TdHJpbmcgPSB2YWx1ZS5jb2RlLnRvU3RyaW5nKCk7IC8vIFdyaXRlIHRoZSBzdHJpbmdcblxuXG5cdCAgICB2YXIgc2l6ZSA9IGJ1ZmZlciQkMS53cml0ZShfZnVuY3Rpb25TdHJpbmcsIGluZGV4ICsgNCwgJ3V0ZjgnKSArIDE7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cblx0ICAgIGJ1ZmZlciQkMVtpbmRleF0gPSBzaXplICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCArIDFdID0gc2l6ZSA+PiA4ICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCArIDJdID0gc2l6ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgICBidWZmZXIkJDFbaW5kZXggKyAzXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBVcGRhdGUgaW5kZXhcblxuXHQgICAgaW5kZXggPSBpbmRleCArIDQgKyBzaXplIC0gMTsgLy8gV3JpdGUgemVyb1xuXG5cdCAgICBidWZmZXIkJDFbaW5kZXgrK10gPSAwO1xuXHQgIH1cblxuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZUJpbmFyeShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBpc0FycmF5KSB7XG5cdCAgLy8gV3JpdGUgdGhlIHR5cGVcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBjb25zdGFudHMuQlNPTl9EQVRBX0JJTkFSWTsgLy8gTnVtYmVyIG9mIHdyaXR0ZW4gYnl0ZXNcblxuXHQgIHZhciBudW1iZXJPZldyaXR0ZW5CeXRlcyA9ICFpc0FycmF5ID8gYnVmZmVyJCQxLndyaXRlKGtleSwgaW5kZXgsICd1dGY4JykgOiBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ2FzY2lpJyk7IC8vIEVuY29kZSB0aGUgbmFtZVxuXG5cdCAgaW5kZXggPSBpbmRleCArIG51bWJlck9mV3JpdHRlbkJ5dGVzO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IDA7IC8vIEV4dHJhY3QgdGhlIGJ1ZmZlclxuXG5cdCAgdmFyIGRhdGEgPSB2YWx1ZS52YWx1ZSh0cnVlKTsgLy8gQ2FsY3VsYXRlIHNpemVcblxuXHQgIHZhciBzaXplID0gdmFsdWUucG9zaXRpb247IC8vIEFkZCB0aGUgZGVwcmVjYXRlZCAwMiB0eXBlIDQgYnl0ZXMgb2Ygc2l6ZSB0byB0b3RhbFxuXG5cdCAgaWYgKHZhbHVlLnN1Yl90eXBlID09PSBiaW5hcnkuU1VCVFlQRV9CWVRFX0FSUkFZKSBzaXplID0gc2l6ZSArIDQ7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplICYgMHhmZjtcblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMTYgJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMjQgJiAweGZmOyAvLyBXcml0ZSB0aGUgc3VidHlwZSB0byB0aGUgYnVmZmVyXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSB2YWx1ZS5zdWJfdHlwZTsgLy8gSWYgd2UgaGF2ZSBiaW5hcnkgdHlwZSAyIHRoZSA0IGZpcnN0IGJ5dGVzIGFyZSB0aGUgc2l6ZVxuXG5cdCAgaWYgKHZhbHVlLnN1Yl90eXBlID09PSBiaW5hcnkuU1VCVFlQRV9CWVRFX0FSUkFZKSB7XG5cdCAgICBzaXplID0gc2l6ZSAtIDQ7XG5cdCAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG5cdCAgICBidWZmZXIkJDFbaW5kZXgrK10gPSBzaXplID4+IDE2ICYgMHhmZjtcblx0ICAgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IHNpemUgPj4gMjQgJiAweGZmO1xuXHQgIH0gLy8gV3JpdGUgdGhlIGRhdGEgdG8gdGhlIG9iamVjdFxuXG5cblx0ICBkYXRhLmNvcHkoYnVmZmVyJCQxLCBpbmRleCwgMCwgdmFsdWUucG9zaXRpb24pOyAvLyBBZGp1c3QgdGhlIGluZGV4XG5cblx0ICBpbmRleCA9IGluZGV4ICsgdmFsdWUucG9zaXRpb247XG5cdCAgcmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gc2VyaWFsaXplU3ltYm9sKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGlzQXJyYXkpIHtcblx0ICAvLyBXcml0ZSB0aGUgdHlwZVxuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfU1lNQk9MOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblx0ICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDsgLy8gV3JpdGUgdGhlIHN0cmluZ1xuXG5cdCAgdmFyIHNpemUgPSBidWZmZXIkJDEud3JpdGUodmFsdWUudmFsdWUsIGluZGV4ICsgNCwgJ3V0ZjgnKSArIDE7IC8vIFdyaXRlIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgdG8gYnVmZmVyXG5cblx0ICBidWZmZXIkJDFbaW5kZXhdID0gc2l6ZSAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgMV0gPSBzaXplID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtpbmRleCArIDJdID0gc2l6ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW2luZGV4ICsgM10gPSBzaXplID4+IDI0ICYgMHhmZjsgLy8gVXBkYXRlIGluZGV4XG5cblx0ICBpbmRleCA9IGluZGV4ICsgNCArIHNpemUgLSAxOyAvLyBXcml0ZSB6ZXJvXG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwO1xuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZURCUmVmKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlzQXJyYXkpIHtcblx0ICAvLyBXcml0ZSB0aGUgdHlwZVxuXHQgIGJ1ZmZlciQkMVtpbmRleCsrXSA9IGNvbnN0YW50cy5CU09OX0RBVEFfT0JKRUNUOyAvLyBOdW1iZXIgb2Ygd3JpdHRlbiBieXRlc1xuXG5cdCAgdmFyIG51bWJlck9mV3JpdHRlbkJ5dGVzID0gIWlzQXJyYXkgPyBidWZmZXIkJDEud3JpdGUoa2V5LCBpbmRleCwgJ3V0ZjgnKSA6IGJ1ZmZlciQkMS53cml0ZShrZXksIGluZGV4LCAnYXNjaWknKTsgLy8gRW5jb2RlIHRoZSBuYW1lXG5cblx0ICBpbmRleCA9IGluZGV4ICsgbnVtYmVyT2ZXcml0dGVuQnl0ZXM7XG5cdCAgYnVmZmVyJCQxW2luZGV4KytdID0gMDtcblx0ICB2YXIgc3RhcnRJbmRleCA9IGluZGV4O1xuXHQgIHZhciBlbmRJbmRleDtcblx0ICB2YXIgb3V0cHV0ID0ge1xuXHQgICAgJHJlZjogdmFsdWUuY29sbGVjdGlvbiB8fCB2YWx1ZS5uYW1lc3BhY2UsXG5cdCAgICAvLyBcIm5hbWVzcGFjZVwiIHdhcyB3aGF0IGxpYnJhcnkgMS54IGNhbGxlZCBcImNvbGxlY3Rpb25cIlxuXHQgICAgJGlkOiB2YWx1ZS5vaWRcblx0ICB9O1xuXHQgIGlmICh2YWx1ZS5kYiAhPSBudWxsKSBvdXRwdXQuJGRiID0gdmFsdWUuZGI7XG5cdCAgb3V0cHV0ID0gT2JqZWN0LmFzc2lnbihvdXRwdXQsIHZhbHVlLmZpZWxkcyk7XG5cdCAgZW5kSW5kZXggPSBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgb3V0cHV0LCBmYWxzZSwgaW5kZXgsIGRlcHRoICsgMSwgc2VyaWFsaXplRnVuY3Rpb25zKTsgLy8gQ2FsY3VsYXRlIG9iamVjdCBzaXplXG5cblx0ICB2YXIgc2l6ZSA9IGVuZEluZGV4IC0gc3RhcnRJbmRleDsgLy8gV3JpdGUgdGhlIHNpemVcblxuXHQgIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gc2l6ZSAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSBzaXplID4+IDggJiAweGZmO1xuXHQgIGJ1ZmZlciQkMVtzdGFydEluZGV4KytdID0gc2l6ZSA+PiAxNiAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW3N0YXJ0SW5kZXgrK10gPSBzaXplID4+IDI0ICYgMHhmZjsgLy8gU2V0IGluZGV4XG5cblx0ICByZXR1cm4gZW5kSW5kZXg7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVJbnRvKGJ1ZmZlciQkMSwgb2JqZWN0LCBjaGVja0tleXMsIHN0YXJ0aW5nSW5kZXgsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgcGF0aCkge1xuXHQgIHN0YXJ0aW5nSW5kZXggPSBzdGFydGluZ0luZGV4IHx8IDA7XG5cdCAgcGF0aCA9IHBhdGggfHwgW107IC8vIFB1c2ggdGhlIG9iamVjdCB0byB0aGUgcGF0aFxuXG5cdCAgcGF0aC5wdXNoKG9iamVjdCk7IC8vIFN0YXJ0IHBsYWNlIHRvIHNlcmlhbGl6ZSBpbnRvXG5cblx0ICB2YXIgaW5kZXggPSBzdGFydGluZ0luZGV4ICsgNDsgLy8gU3BlY2lhbCBjYXNlIGlzQXJyYXlcblxuXHQgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcblx0ICAgIC8vIEdldCBvYmplY3Qga2V5c1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGtleSA9ICcnICsgaTtcblx0ICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2ldOyAvLyBJcyB0aGVyZSBhbiBvdmVycmlkZSB2YWx1ZVxuXG5cdCAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0JTT04pIHtcblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnRvQlNPTiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9CU09OIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdCAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0JTT04oKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciB0eXBlID0gX3R5cGVvZiQzKHZhbHVlKTtcblxuXHQgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN0cmluZyhidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTnVtYmVyKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdib29sZWFuJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplQm9vbGVhbihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgaXNEYXRlJDEodmFsdWUpKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEYXRlKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU51bGwoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnT2JqZWN0SWQnIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElEJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplT2JqZWN0SWQoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoQnVmZmVyJDUuaXNCdWZmZXIodmFsdWUpKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCdWZmZXIoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgaXNSZWdFeHAkMSh2YWx1ZSkpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVJlZ0V4cChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZVsnX2Jzb250eXBlJ10gPT0gbnVsbCkge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplT2JqZWN0KGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCB0cnVlLCBwYXRoKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEZWNpbWFsMTI4Jykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGVjaW1hbDEyOChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdMb25nJyB8fCB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdUaW1lc3RhbXAnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVMb25nKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RvdWJsZScpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZURvdWJsZShidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgc2VyaWFsaXplRnVuY3Rpb25zKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVGdW5jdGlvbihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIHRydWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0NvZGUnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVDb2RlKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdCaW5hcnknKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCaW5hcnkoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnU3ltYm9sJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplU3ltYm9sKGJ1ZmZlciQkMSwga2V5LCB2YWx1ZSwgaW5kZXgsIHRydWUpO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RCUmVmJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplREJSZWYoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnQlNPTlJlZ0V4cCcpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUJTT05SZWdFeHAoYnVmZmVyJCQxLCBrZXksIHZhbHVlLCBpbmRleCwgdHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnSW50MzInKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVJbnQzMihidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdNaW5LZXknIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ01heEtleScpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU1pbk1heChidWZmZXIkJDEsIGtleSwgdmFsdWUsIGluZGV4LCB0cnVlKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVbJ19ic29udHlwZSddICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBvciBpbnZhbGlkIF9ic29udHlwZTogJyArIHZhbHVlWydfYnNvbnR5cGUnXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIG1hcCkge1xuXHQgICAgdmFyIGl0ZXJhdG9yID0gb2JqZWN0LmVudHJpZXMoKTtcblx0ICAgIHZhciBkb25lID0gZmFsc2U7XG5cblx0ICAgIHdoaWxlICghZG9uZSkge1xuXHQgICAgICAvLyBVbnBhY2sgdGhlIG5leHQgZW50cnlcblx0ICAgICAgdmFyIGVudHJ5ID0gaXRlcmF0b3IubmV4dCgpO1xuXHQgICAgICBkb25lID0gZW50cnkuZG9uZTsgLy8gQXJlIHdlIGRvbmUsIHRoZW4gc2tpcCBhbmQgdGVybWluYXRlXG5cblx0ICAgICAgaWYgKGRvbmUpIGNvbnRpbnVlOyAvLyBHZXQgdGhlIGVudHJ5IHZhbHVlc1xuXG5cdCAgICAgIHZhciBfa2V5ID0gZW50cnkudmFsdWVbMF07XG5cdCAgICAgIHZhciBfdmFsdWUgPSBlbnRyeS52YWx1ZVsxXTsgLy8gQ2hlY2sgdGhlIHR5cGUgb2YgdGhlIHZhbHVlXG5cblx0ICAgICAgdmFyIF90eXBlID0gX3R5cGVvZiQzKF92YWx1ZSk7IC8vIENoZWNrIHRoZSBrZXkgYW5kIHRocm93IGVycm9yIGlmIGl0J3MgaWxsZWdhbFxuXG5cblx0ICAgICAgaWYgKHR5cGVvZiBfa2V5ID09PSAnc3RyaW5nJyAmJiAhaWdub3JlS2V5cy5oYXMoX2tleSkpIHtcblx0ICAgICAgICBpZiAoX2tleS5tYXRjaChyZWdleHAkMSkgIT0gbnVsbCkge1xuXHQgICAgICAgICAgLy8gVGhlIEJTT04gc3BlYyBkb2Vzbid0IGFsbG93IGtleXMgd2l0aCBudWxsIGJ5dGVzIGJlY2F1c2Uga2V5cyBhcmVcblx0ICAgICAgICAgIC8vIG51bGwtdGVybWluYXRlZC5cblx0ICAgICAgICAgIHRocm93IEVycm9yKCdrZXkgJyArIF9rZXkgKyAnIG11c3Qgbm90IGNvbnRhaW4gbnVsbCBieXRlcycpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChjaGVja0tleXMpIHtcblx0ICAgICAgICAgIGlmICgnJCcgPT09IF9rZXlbMF0pIHtcblx0ICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2tleSAnICsgX2tleSArIFwiIG11c3Qgbm90IHN0YXJ0IHdpdGggJyQnXCIpO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICh+X2tleS5pbmRleE9mKCcuJykpIHtcblx0ICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2tleSAnICsgX2tleSArIFwiIG11c3Qgbm90IGNvbnRhaW4gJy4nXCIpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChfdHlwZSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN0cmluZyhidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF90eXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTnVtYmVyKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT09ICdib29sZWFuJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplQm9vbGVhbihidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgaXNEYXRlJDEoX3ZhbHVlKSkge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGF0ZShidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZSA9PT0gbnVsbCB8fCBfdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBpZ25vcmVVbmRlZmluZWQgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVOdWxsKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElkJyB8fCBfdmFsdWVbJ19ic29udHlwZSddID09PSAnT2JqZWN0SUQnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVPYmplY3RJZChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKEJ1ZmZlciQ1LmlzQnVmZmVyKF92YWx1ZSkpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUJ1ZmZlcihidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCB8fCBpc1JlZ0V4cCQxKF92YWx1ZSkpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVJlZ0V4cChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF90eXBlID09PSAnb2JqZWN0JyAmJiBfdmFsdWVbJ19ic29udHlwZSddID09IG51bGwpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU9iamVjdChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBmYWxzZSwgcGF0aCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3R5cGUgPT09ICdvYmplY3QnICYmIF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEZWNpbWFsMTI4Jykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGVjaW1hbDEyOChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdMb25nJyB8fCBfdmFsdWVbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTG9uZyhidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEb3VibGUnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEb3VibGUoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnQ29kZScpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUNvZGUoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF92YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXJpYWxpemVGdW5jdGlvbnMpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUZ1bmN0aW9uKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCwgY2hlY2tLZXlzLCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zKTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnQmluYXJ5Jykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplQmluYXJ5KGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ1N5bWJvbCcpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN5bWJvbChidWZmZXIkJDEsIF9rZXksIF92YWx1ZSwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEQlJlZicpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZURCUmVmKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCwgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucyk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0JTT05SZWdFeHAnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCU09OUmVnRXhwKGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0ludDMyJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplSW50MzIoYnVmZmVyJCQxLCBfa2V5LCBfdmFsdWUsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWVbJ19ic29udHlwZSddID09PSAnTWluS2V5JyB8fCBfdmFsdWVbJ19ic29udHlwZSddID09PSAnTWF4S2V5Jykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTWluTWF4KGJ1ZmZlciQkMSwgX2tleSwgX3ZhbHVlLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF92YWx1ZVsnX2Jzb250eXBlJ10gIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5yZWNvZ25pemVkIG9yIGludmFsaWQgX2Jzb250eXBlOiAnICsgX3ZhbHVlWydfYnNvbnR5cGUnXSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gRGlkIHdlIHByb3ZpZGUgYSBjdXN0b20gc2VyaWFsaXphdGlvbiBtZXRob2Rcblx0ICAgIGlmIChvYmplY3QudG9CU09OKSB7XG5cdCAgICAgIGlmICh0eXBlb2Ygb2JqZWN0LnRvQlNPTiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9CU09OIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdCAgICAgIG9iamVjdCA9IG9iamVjdC50b0JTT04oKTtcblx0ICAgICAgaWYgKG9iamVjdCAhPSBudWxsICYmIF90eXBlb2YkMyhvYmplY3QpICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IFR5cGVFcnJvcigndG9CU09OIGZ1bmN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuXHQgICAgfSAvLyBJdGVyYXRlIG92ZXIgYWxsIHRoZSBrZXlzXG5cblxuXHQgICAgZm9yICh2YXIgX2tleTIgaW4gb2JqZWN0KSB7XG5cdCAgICAgIHZhciBfdmFsdWUyID0gb2JqZWN0W19rZXkyXTsgLy8gSXMgdGhlcmUgYW4gb3ZlcnJpZGUgdmFsdWVcblxuXHQgICAgICBpZiAoX3ZhbHVlMiAmJiBfdmFsdWUyLnRvQlNPTikge1xuXHQgICAgICAgIGlmICh0eXBlb2YgX3ZhbHVlMi50b0JTT04gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvQlNPTiBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHQgICAgICAgIF92YWx1ZTIgPSBfdmFsdWUyLnRvQlNPTigpO1xuXHQgICAgICB9IC8vIENoZWNrIHRoZSB0eXBlIG9mIHRoZSB2YWx1ZVxuXG5cblx0ICAgICAgdmFyIF90eXBlMiA9IF90eXBlb2YkMyhfdmFsdWUyKTsgLy8gQ2hlY2sgdGhlIGtleSBhbmQgdGhyb3cgZXJyb3IgaWYgaXQncyBpbGxlZ2FsXG5cblxuXHQgICAgICBpZiAodHlwZW9mIF9rZXkyID09PSAnc3RyaW5nJyAmJiAhaWdub3JlS2V5cy5oYXMoX2tleTIpKSB7XG5cdCAgICAgICAgaWYgKF9rZXkyLm1hdGNoKHJlZ2V4cCQxKSAhPSBudWxsKSB7XG5cdCAgICAgICAgICAvLyBUaGUgQlNPTiBzcGVjIGRvZXNuJ3QgYWxsb3cga2V5cyB3aXRoIG51bGwgYnl0ZXMgYmVjYXVzZSBrZXlzIGFyZVxuXHQgICAgICAgICAgLy8gbnVsbC10ZXJtaW5hdGVkLlxuXHQgICAgICAgICAgdGhyb3cgRXJyb3IoJ2tleSAnICsgX2tleTIgKyAnIG11c3Qgbm90IGNvbnRhaW4gbnVsbCBieXRlcycpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChjaGVja0tleXMpIHtcblx0ICAgICAgICAgIGlmICgnJCcgPT09IF9rZXkyWzBdKSB7XG5cdCAgICAgICAgICAgIHRocm93IEVycm9yKCdrZXkgJyArIF9rZXkyICsgXCIgbXVzdCBub3Qgc3RhcnQgd2l0aCAnJCdcIik7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKH5fa2V5Mi5pbmRleE9mKCcuJykpIHtcblx0ICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ2tleSAnICsgX2tleTIgKyBcIiBtdXN0IG5vdCBjb250YWluICcuJ1wiKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoX3R5cGUyID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplU3RyaW5nKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdHlwZTIgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVOdW1iZXIoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF90eXBlMiA9PT0gJ2Jvb2xlYW4nKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCb29sZWFuKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyIGluc3RhbmNlb2YgRGF0ZSB8fCBpc0RhdGUkMShfdmFsdWUyKSkge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplRGF0ZShidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMiA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgaWYgKGlnbm9yZVVuZGVmaW5lZCA9PT0gZmFsc2UpIGluZGV4ID0gc2VyaWFsaXplTnVsbChidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMiA9PT0gbnVsbCkge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTnVsbChidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdPYmplY3RJZCcgfHwgX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdPYmplY3RJRCcpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU9iamVjdElkKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChCdWZmZXIkNS5pc0J1ZmZlcihfdmFsdWUyKSkge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplQnVmZmVyKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyIGluc3RhbmNlb2YgUmVnRXhwIHx8IGlzUmVnRXhwJDEoX3ZhbHVlMikpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVJlZ0V4cChidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3R5cGUyID09PSAnb2JqZWN0JyAmJiBfdmFsdWUyWydfYnNvbnR5cGUnXSA9PSBudWxsKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVPYmplY3QoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBmYWxzZSwgcGF0aCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3R5cGUyID09PSAnb2JqZWN0JyAmJiBfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0RlY2ltYWwxMjgnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEZWNpbWFsMTI4KGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0xvbmcnIHx8IF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplTG9uZyhidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdEb3VibGUnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVEb3VibGUoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnQ29kZScpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUNvZGUoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgsIGNoZWNrS2V5cywgZGVwdGgsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkKTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3ZhbHVlMiA9PT0gJ2Z1bmN0aW9uJyAmJiBzZXJpYWxpemVGdW5jdGlvbnMpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZUZ1bmN0aW9uKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4LCBjaGVja0tleXMsIGRlcHRoLCBzZXJpYWxpemVGdW5jdGlvbnMpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnQmluYXJ5Jykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplQmluYXJ5KGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ1N5bWJvbCcpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZVN5bWJvbChidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAoX3ZhbHVlMlsnX2Jzb250eXBlJ10gPT09ICdEQlJlZicpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZURCUmVmKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4LCBkZXB0aCwgc2VyaWFsaXplRnVuY3Rpb25zKTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0JTT05SZWdFeHAnKSB7XG5cdCAgICAgICAgaW5kZXggPSBzZXJpYWxpemVCU09OUmVnRXhwKGJ1ZmZlciQkMSwgX2tleTIsIF92YWx1ZTIsIGluZGV4KTtcblx0ICAgICAgfSBlbHNlIGlmIChfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ0ludDMyJykge1xuXHQgICAgICAgIGluZGV4ID0gc2VyaWFsaXplSW50MzIoYnVmZmVyJCQxLCBfa2V5MiwgX3ZhbHVlMiwgaW5kZXgpO1xuXHQgICAgICB9IGVsc2UgaWYgKF92YWx1ZTJbJ19ic29udHlwZSddID09PSAnTWluS2V5JyB8fCBfdmFsdWUyWydfYnNvbnR5cGUnXSA9PT0gJ01heEtleScpIHtcblx0ICAgICAgICBpbmRleCA9IHNlcmlhbGl6ZU1pbk1heChidWZmZXIkJDEsIF9rZXkyLCBfdmFsdWUyLCBpbmRleCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF92YWx1ZTJbJ19ic29udHlwZSddICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBvciBpbnZhbGlkIF9ic29udHlwZTogJyArIF92YWx1ZTJbJ19ic29udHlwZSddKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0gLy8gUmVtb3ZlIHRoZSBwYXRoXG5cblxuXHQgIHBhdGgucG9wKCk7IC8vIEZpbmFsIHBhZGRpbmcgYnl0ZSBmb3Igb2JqZWN0XG5cblx0ICBidWZmZXIkJDFbaW5kZXgrK10gPSAweDAwOyAvLyBGaW5hbCBzaXplXG5cblx0ICB2YXIgc2l6ZSA9IGluZGV4IC0gc3RhcnRpbmdJbmRleDsgLy8gV3JpdGUgdGhlIHNpemUgb2YgdGhlIG9iamVjdFxuXG5cdCAgYnVmZmVyJCQxW3N0YXJ0aW5nSW5kZXgrK10gPSBzaXplICYgMHhmZjtcblx0ICBidWZmZXIkJDFbc3RhcnRpbmdJbmRleCsrXSA9IHNpemUgPj4gOCAmIDB4ZmY7XG5cdCAgYnVmZmVyJCQxW3N0YXJ0aW5nSW5kZXgrK10gPSBzaXplID4+IDE2ICYgMHhmZjtcblx0ICBidWZmZXIkJDFbc3RhcnRpbmdJbmRleCsrXSA9IHNpemUgPj4gMjQgJiAweGZmO1xuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdHZhciBzZXJpYWxpemVyID0gc2VyaWFsaXplSW50bztcblxuXHRmdW5jdGlvbiBfdHlwZW9mJDQob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDQgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ0ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNChvYmopOyB9XG5cblx0dmFyIEJ1ZmZlciQ2ID0gYnVmZmVyLkJ1ZmZlcjtcblx0dmFyIG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQyID0gdXRpbHMubm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nOyAvLyBUbyBlbnN1cmUgdGhhdCAwLjQgb2Ygbm9kZSB3b3JrcyBjb3JyZWN0bHlcblxuXHRmdW5jdGlvbiBpc0RhdGUkMihkKSB7XG5cdCAgcmV0dXJuIF90eXBlb2YkNChkKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG5cdH1cblxuXHRmdW5jdGlvbiBjYWxjdWxhdGVPYmplY3RTaXplKG9iamVjdCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpIHtcblx0ICB2YXIgdG90YWxMZW5ndGggPSA0ICsgMTtcblxuXHQgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHRvdGFsTGVuZ3RoICs9IGNhbGN1bGF0ZUVsZW1lbnQoaS50b1N0cmluZygpLCBvYmplY3RbaV0sIHNlcmlhbGl6ZUZ1bmN0aW9ucywgdHJ1ZSwgaWdub3JlVW5kZWZpbmVkKTtcblx0ICAgIH1cblx0ICB9IGVsc2Uge1xuXHQgICAgLy8gSWYgd2UgaGF2ZSB0b0JTT04gZGVmaW5lZCwgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgb2JqZWN0XG5cdCAgICBpZiAob2JqZWN0LnRvQlNPTikge1xuXHQgICAgICBvYmplY3QgPSBvYmplY3QudG9CU09OKCk7XG5cdCAgICB9IC8vIENhbGN1bGF0ZSBzaXplXG5cblxuXHQgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuXHQgICAgICB0b3RhbExlbmd0aCArPSBjYWxjdWxhdGVFbGVtZW50KGtleSwgb2JqZWN0W2tleV0sIHNlcmlhbGl6ZUZ1bmN0aW9ucywgZmFsc2UsIGlnbm9yZVVuZGVmaW5lZCk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcmV0dXJuIHRvdGFsTGVuZ3RoO1xuXHR9XG5cdC8qKlxuXHQgKiBAaWdub3JlXG5cdCAqIEBhcGkgcHJpdmF0ZVxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIGNhbGN1bGF0ZUVsZW1lbnQobmFtZSwgdmFsdWUsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaXNBcnJheSwgaWdub3JlVW5kZWZpbmVkKSB7XG5cdCAgLy8gSWYgd2UgaGF2ZSB0b0JTT04gZGVmaW5lZCwgb3ZlcnJpZGUgdGhlIGN1cnJlbnQgb2JqZWN0XG5cdCAgaWYgKHZhbHVlICYmIHZhbHVlLnRvQlNPTikge1xuXHQgICAgdmFsdWUgPSB2YWx1ZS50b0JTT04oKTtcblx0ICB9XG5cblx0ICBzd2l0Y2ggKF90eXBlb2YkNCh2YWx1ZSkpIHtcblx0ICAgIGNhc2UgJ3N0cmluZyc6XG5cdCAgICAgIHJldHVybiAxICsgQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSArIDQgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLCAndXRmOCcpICsgMTtcblxuXHQgICAgY2FzZSAnbnVtYmVyJzpcblx0ICAgICAgaWYgKE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSAmJiB2YWx1ZSA+PSBjb25zdGFudHMuSlNfSU5UX01JTiAmJiB2YWx1ZSA8PSBjb25zdGFudHMuSlNfSU5UX01BWCkge1xuXHQgICAgICAgIGlmICh2YWx1ZSA+PSBjb25zdGFudHMuQlNPTl9JTlQzMl9NSU4gJiYgdmFsdWUgPD0gY29uc3RhbnRzLkJTT05fSU5UMzJfTUFYKSB7XG5cdCAgICAgICAgICAvLyAzMiBiaXRcblx0ICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDQgKyAxKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAoOCArIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAvLyA2NCBiaXRcblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICg4ICsgMSk7XG5cdCAgICAgIH1cblxuXHQgICAgY2FzZSAndW5kZWZpbmVkJzpcblx0ICAgICAgaWYgKGlzQXJyYXkgfHwgIWlnbm9yZVVuZGVmaW5lZCkgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAxO1xuXHQgICAgICByZXR1cm4gMDtcblxuXHQgICAgY2FzZSAnYm9vbGVhbic6XG5cdCAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDEgKyAxKTtcblxuXHQgICAgY2FzZSAnb2JqZWN0Jzpcblx0ICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWVbJ19ic29udHlwZSddID09PSAnTWluS2V5JyB8fCB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdNYXhLZXknKSB7XG5cdCAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ09iamVjdElkJyB8fCB2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdPYmplY3RJRCcpIHtcblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICgxMiArIDEpO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBpc0RhdGUkMih2YWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICg4ICsgMSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEJ1ZmZlciQ2ICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIkNi5pc0J1ZmZlcih2YWx1ZSkpIHtcblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArICgxICsgNCArIDEpICsgdmFsdWUubGVuZ3RoO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0xvbmcnIHx8IHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RvdWJsZScgfHwgdmFsdWVbJ19ic29udHlwZSddID09PSAnVGltZXN0YW1wJykge1xuXHQgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDggKyAxKTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdEZWNpbWFsMTI4Jykge1xuXHQgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgKDE2ICsgMSk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWVbJ19ic29udHlwZSddID09PSAnQ29kZScpIHtcblx0ICAgICAgICAvLyBDYWxjdWxhdGUgc2l6ZSBkZXBlbmRpbmcgb24gdGhlIGF2YWlsYWJpbGl0eSBvZiBhIHNjb3BlXG5cdCAgICAgICAgaWYgKHZhbHVlLnNjb3BlICE9IG51bGwgJiYgT2JqZWN0LmtleXModmFsdWUuc2NvcGUpLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIDQgKyA0ICsgQnVmZmVyJDYuYnl0ZUxlbmd0aCh2YWx1ZS5jb2RlLnRvU3RyaW5nKCksICd1dGY4JykgKyAxICsgY2FsY3VsYXRlT2JqZWN0U2l6ZSh2YWx1ZS5zY29wZSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyA0ICsgQnVmZmVyJDYuYnl0ZUxlbmd0aCh2YWx1ZS5jb2RlLnRvU3RyaW5nKCksICd1dGY4JykgKyAxO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdCaW5hcnknKSB7XG5cdCAgICAgICAgLy8gQ2hlY2sgd2hhdCBraW5kIG9mIHN1YnR5cGUgd2UgaGF2ZVxuXHQgICAgICAgIGlmICh2YWx1ZS5zdWJfdHlwZSA9PT0gYmluYXJ5LlNVQlRZUEVfQllURV9BUlJBWSkge1xuXHQgICAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAodmFsdWUucG9zaXRpb24gKyAxICsgNCArIDEgKyA0KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAodmFsdWUucG9zaXRpb24gKyAxICsgNCArIDEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdTeW1ib2wnKSB7XG5cdCAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLnZhbHVlLCAndXRmOCcpICsgNCArIDEgKyAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHZhbHVlWydfYnNvbnR5cGUnXSA9PT0gJ0RCUmVmJykge1xuXHQgICAgICAgIC8vIFNldCB1cCBjb3JyZWN0IG9iamVjdCBmb3Igc2VyaWFsaXphdGlvblxuXHQgICAgICAgIHZhciBvcmRlcmVkX3ZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe1xuXHQgICAgICAgICAgJHJlZjogdmFsdWUuY29sbGVjdGlvbixcblx0ICAgICAgICAgICRpZDogdmFsdWUub2lkXG5cdCAgICAgICAgfSwgdmFsdWUuZmllbGRzKTsgLy8gQWRkIGRiIHJlZmVyZW5jZSBpZiBpdCBleGlzdHNcblxuXHQgICAgICAgIGlmICh2YWx1ZS5kYiAhPSBudWxsKSB7XG5cdCAgICAgICAgICBvcmRlcmVkX3ZhbHVlc1snJGRiJ10gPSB2YWx1ZS5kYjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyBjYWxjdWxhdGVPYmplY3RTaXplKG9yZGVyZWRfdmFsdWVzLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcblx0ICAgICAgICByZXR1cm4gKG5hbWUgIT0gbnVsbCA/IEJ1ZmZlciQ2LmJ5dGVMZW5ndGgobmFtZSwgJ3V0ZjgnKSArIDEgOiAwKSArIDEgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLnNvdXJjZSwgJ3V0ZjgnKSArIDEgKyAodmFsdWUuZ2xvYmFsID8gMSA6IDApICsgKHZhbHVlLmlnbm9yZUNhc2UgPyAxIDogMCkgKyAodmFsdWUubXVsdGlsaW5lID8gMSA6IDApICsgMTtcblx0ICAgICAgfSBlbHNlIGlmICh2YWx1ZVsnX2Jzb250eXBlJ10gPT09ICdCU09OUmVnRXhwJykge1xuXHQgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIEJ1ZmZlciQ2LmJ5dGVMZW5ndGgodmFsdWUucGF0dGVybiwgJ3V0ZjgnKSArIDEgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKHZhbHVlLm9wdGlvbnMsICd1dGY4JykgKyAxO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgY2FsY3VsYXRlT2JqZWN0U2l6ZSh2YWx1ZSwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpICsgMTtcblx0ICAgICAgfVxuXG5cdCAgICBjYXNlICdmdW5jdGlvbic6XG5cdCAgICAgIC8vIFdURiBmb3IgMC40Llggd2hlcmUgdHlwZW9mIC9zb21lcmVnZXhwLyA9PT0gJ2Z1bmN0aW9uJ1xuXHQgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScgfHwgU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJykge1xuXHQgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIEJ1ZmZlciQ2LmJ5dGVMZW5ndGgodmFsdWUuc291cmNlLCAndXRmOCcpICsgMSArICh2YWx1ZS5nbG9iYWwgPyAxIDogMCkgKyAodmFsdWUuaWdub3JlQ2FzZSA/IDEgOiAwKSArICh2YWx1ZS5tdWx0aWxpbmUgPyAxIDogMCkgKyAxO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmIChzZXJpYWxpemVGdW5jdGlvbnMgJiYgdmFsdWUuc2NvcGUgIT0gbnVsbCAmJiBPYmplY3Qua2V5cyh2YWx1ZS5zY29wZSkubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgcmV0dXJuIChuYW1lICE9IG51bGwgPyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5hbWUsICd1dGY4JykgKyAxIDogMCkgKyAxICsgNCArIDQgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQyKHZhbHVlKSwgJ3V0ZjgnKSArIDEgKyBjYWxjdWxhdGVPYmplY3RTaXplKHZhbHVlLnNjb3BlLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCk7XG5cdCAgICAgICAgfSBlbHNlIGlmIChzZXJpYWxpemVGdW5jdGlvbnMpIHtcblx0ICAgICAgICAgIHJldHVybiAobmFtZSAhPSBudWxsID8gQnVmZmVyJDYuYnl0ZUxlbmd0aChuYW1lLCAndXRmOCcpICsgMSA6IDApICsgMSArIDQgKyBCdWZmZXIkNi5ieXRlTGVuZ3RoKG5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQyKHZhbHVlKSwgJ3V0ZjgnKSArIDE7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICB9XG5cblx0ICByZXR1cm4gMDtcblx0fVxuXG5cdHZhciBjYWxjdWxhdGVfc2l6ZSA9IGNhbGN1bGF0ZU9iamVjdFNpemU7XG5cblx0dmFyIEJ1ZmZlciQ3ID0gYnVmZmVyLkJ1ZmZlcjtcblx0LyoqXG5cdCAqIE1ha2VzIHN1cmUgdGhhdCwgaWYgYSBVaW50OEFycmF5IGlzIHBhc3NlZCBpbiwgaXQgaXMgd3JhcHBlZCBpbiBhIEJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJ8VWludDhBcnJheX0gcG90ZW50aWFsQnVmZmVyIFRoZSBwb3RlbnRpYWwgYnVmZmVyXG5cdCAqIEByZXR1cm5zIHtCdWZmZXJ9IHRoZSBpbnB1dCBpZiBwb3RlbnRpYWxCdWZmZXIgaXMgYSBidWZmZXIsIG9yIGEgYnVmZmVyIHRoYXRcblx0ICogd3JhcHMgYSBwYXNzZWQgaW4gVWludDhBcnJheVxuXHQgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGFueXRoaW5nIG90aGVyIHRoYW4gYSBCdWZmZXIgb3IgVWludDhBcnJheSBpcyBwYXNzZWQgaW5cblx0ICovXG5cblx0dmFyIGVuc3VyZV9idWZmZXIgPSBmdW5jdGlvbiBlbnN1cmVCdWZmZXIocG90ZW50aWFsQnVmZmVyKSB7XG5cdCAgaWYgKHBvdGVudGlhbEJ1ZmZlciBpbnN0YW5jZW9mIEJ1ZmZlciQ3KSB7XG5cdCAgICByZXR1cm4gcG90ZW50aWFsQnVmZmVyO1xuXHQgIH1cblxuXHQgIGlmIChwb3RlbnRpYWxCdWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG5cdCAgICByZXR1cm4gQnVmZmVyJDcuZnJvbShwb3RlbnRpYWxCdWZmZXIuYnVmZmVyKTtcblx0ICB9XG5cblx0ICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNdXN0IHVzZSBlaXRoZXIgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKTtcblx0fTtcblxuXHR2YXIgQnVmZmVyJDggPSBidWZmZXIuQnVmZmVyOyAvLyBQYXJ0cyBvZiB0aGUgcGFyc2VyXG5cblx0LyoqXG5cdCAqIEBpZ25vcmVcblx0ICovXG5cdC8vIERlZmF1bHQgTWF4IFNpemVcblxuXHR2YXIgTUFYU0laRSA9IDEwMjQgKiAxMDI0ICogMTc7IC8vIEN1cnJlbnQgSW50ZXJuYWwgVGVtcG9yYXJ5IFNlcmlhbGl6YXRpb24gQnVmZmVyXG5cblx0dmFyIGJ1ZmZlciQxID0gQnVmZmVyJDguYWxsb2MoTUFYU0laRSk7XG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzaXplIG9mIHRoZSBpbnRlcm5hbCBzZXJpYWxpemF0aW9uIGJ1ZmZlci5cblx0ICpcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBUaGUgZGVzaXJlZCBzaXplIGZvciB0aGUgaW50ZXJuYWwgc2VyaWFsaXphdGlvbiBidWZmZXJcblx0ICovXG5cblx0ZnVuY3Rpb24gc2V0SW50ZXJuYWxCdWZmZXJTaXplKHNpemUpIHtcblx0ICAvLyBSZXNpemUgdGhlIGludGVybmFsIHNlcmlhbGl6YXRpb24gYnVmZmVyIGlmIG5lZWRlZFxuXHQgIGlmIChidWZmZXIkMS5sZW5ndGggPCBzaXplKSB7XG5cdCAgICBidWZmZXIkMSA9IEJ1ZmZlciQ4LmFsbG9jKHNpemUpO1xuXHQgIH1cblx0fVxuXHQvKipcblx0ICogU2VyaWFsaXplIGEgSmF2YXNjcmlwdCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdGhlIEphdmFzY3JpcHQgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5jaGVja0tleXNdIHRoZSBzZXJpYWxpemVyIHdpbGwgY2hlY2sgaWYga2V5cyBhcmUgdmFsaWQuXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zPWZhbHNlXSBzZXJpYWxpemUgdGhlIGphdmFzY3JpcHQgZnVuY3Rpb25zICoqKGRlZmF1bHQ6ZmFsc2UpKiouXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaWdub3JlVW5kZWZpbmVkPXRydWVdIGlnbm9yZSB1bmRlZmluZWQgZmllbGRzICoqKGRlZmF1bHQ6dHJ1ZSkqKi5cblx0ICogQHJldHVybiB7QnVmZmVyfSByZXR1cm5zIHRoZSBCdWZmZXIgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgb2JqZWN0LlxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIHNlcmlhbGl6ZSQxKG9iamVjdCwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBVbnBhY2sgdGhlIG9wdGlvbnNcblxuXHQgIHZhciBjaGVja0tleXMgPSB0eXBlb2Ygb3B0aW9ucy5jaGVja0tleXMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuY2hlY2tLZXlzIDogZmFsc2U7XG5cdCAgdmFyIHNlcmlhbGl6ZUZ1bmN0aW9ucyA9IHR5cGVvZiBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMgOiBmYWxzZTtcblx0ICB2YXIgaWdub3JlVW5kZWZpbmVkID0gdHlwZW9mIG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA6IHRydWU7XG5cdCAgdmFyIG1pbkludGVybmFsQnVmZmVyU2l6ZSA9IHR5cGVvZiBvcHRpb25zLm1pbkludGVybmFsQnVmZmVyU2l6ZSA9PT0gJ251bWJlcicgPyBvcHRpb25zLm1pbkludGVybmFsQnVmZmVyU2l6ZSA6IE1BWFNJWkU7IC8vIFJlc2l6ZSB0aGUgaW50ZXJuYWwgc2VyaWFsaXphdGlvbiBidWZmZXIgaWYgbmVlZGVkXG5cblx0ICBpZiAoYnVmZmVyJDEubGVuZ3RoIDwgbWluSW50ZXJuYWxCdWZmZXJTaXplKSB7XG5cdCAgICBidWZmZXIkMSA9IEJ1ZmZlciQ4LmFsbG9jKG1pbkludGVybmFsQnVmZmVyU2l6ZSk7XG5cdCAgfSAvLyBBdHRlbXB0IHRvIHNlcmlhbGl6ZVxuXG5cblx0ICB2YXIgc2VyaWFsaXphdGlvbkluZGV4ID0gc2VyaWFsaXplcihidWZmZXIkMSwgb2JqZWN0LCBjaGVja0tleXMsIDAsIDAsIHNlcmlhbGl6ZUZ1bmN0aW9ucywgaWdub3JlVW5kZWZpbmVkLCBbXSk7IC8vIENyZWF0ZSB0aGUgZmluYWwgYnVmZmVyXG5cblx0ICB2YXIgZmluaXNoZWRCdWZmZXIgPSBCdWZmZXIkOC5hbGxvYyhzZXJpYWxpemF0aW9uSW5kZXgpOyAvLyBDb3B5IGludG8gdGhlIGZpbmlzaGVkIGJ1ZmZlclxuXG5cdCAgYnVmZmVyJDEuY29weShmaW5pc2hlZEJ1ZmZlciwgMCwgMCwgZmluaXNoZWRCdWZmZXIubGVuZ3RoKTsgLy8gUmV0dXJuIHRoZSBidWZmZXJcblxuXHQgIHJldHVybiBmaW5pc2hlZEJ1ZmZlcjtcblx0fVxuXHQvKipcblx0ICogU2VyaWFsaXplIGEgSmF2YXNjcmlwdCBvYmplY3QgdXNpbmcgYSBwcmVkZWZpbmVkIEJ1ZmZlciBhbmQgaW5kZXggaW50byB0aGUgYnVmZmVyLCB1c2VmdWwgd2hlbiBwcmUtYWxsb2NhdGluZyB0aGUgc3BhY2UgZm9yIHNlcmlhbGl6YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdGhlIEphdmFzY3JpcHQgb2JqZWN0IHRvIHNlcmlhbGl6ZS5cblx0ICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciB0aGUgQnVmZmVyIHlvdSBwcmUtYWxsb2NhdGVkIHRvIHN0b3JlIHRoZSBzZXJpYWxpemVkIEJTT04gb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmNoZWNrS2V5c10gdGhlIHNlcmlhbGl6ZXIgd2lsbCBjaGVjayBpZiBrZXlzIGFyZSB2YWxpZC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnM9ZmFsc2VdIHNlcmlhbGl6ZSB0aGUgamF2YXNjcmlwdCBmdW5jdGlvbnMgKiooZGVmYXVsdDpmYWxzZSkqKi5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ9dHJ1ZV0gaWdub3JlIHVuZGVmaW5lZCBmaWVsZHMgKiooZGVmYXVsdDp0cnVlKSoqLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuaW5kZXhdIHRoZSBpbmRleCBpbiB0aGUgYnVmZmVyIHdoZXJlIHdlIHdpc2ggdG8gc3RhcnQgc2VyaWFsaXppbmcgaW50by5cblx0ICogQHJldHVybiB7TnVtYmVyfSByZXR1cm5zIHRoZSBpbmRleCBwb2ludGluZyB0byB0aGUgbGFzdCB3cml0dGVuIGJ5dGUgaW4gdGhlIGJ1ZmZlci5cblx0ICovXG5cblxuXHRmdW5jdGlvbiBzZXJpYWxpemVXaXRoQnVmZmVyQW5kSW5kZXgob2JqZWN0LCBmaW5hbEJ1ZmZlciwgb3B0aW9ucykge1xuXHQgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBVbnBhY2sgdGhlIG9wdGlvbnNcblxuXHQgIHZhciBjaGVja0tleXMgPSB0eXBlb2Ygb3B0aW9ucy5jaGVja0tleXMgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuY2hlY2tLZXlzIDogZmFsc2U7XG5cdCAgdmFyIHNlcmlhbGl6ZUZ1bmN0aW9ucyA9IHR5cGVvZiBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnMgOiBmYWxzZTtcblx0ICB2YXIgaWdub3JlVW5kZWZpbmVkID0gdHlwZW9mIG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkID09PSAnYm9vbGVhbicgPyBvcHRpb25zLmlnbm9yZVVuZGVmaW5lZCA6IHRydWU7XG5cdCAgdmFyIHN0YXJ0SW5kZXggPSB0eXBlb2Ygb3B0aW9ucy5pbmRleCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmluZGV4IDogMDsgLy8gQXR0ZW1wdCB0byBzZXJpYWxpemVcblxuXHQgIHZhciBzZXJpYWxpemF0aW9uSW5kZXggPSBzZXJpYWxpemVyKGJ1ZmZlciQxLCBvYmplY3QsIGNoZWNrS2V5cywgMCwgMCwgc2VyaWFsaXplRnVuY3Rpb25zLCBpZ25vcmVVbmRlZmluZWQpO1xuXHQgIGJ1ZmZlciQxLmNvcHkoZmluYWxCdWZmZXIsIHN0YXJ0SW5kZXgsIDAsIHNlcmlhbGl6YXRpb25JbmRleCk7IC8vIFJldHVybiB0aGUgaW5kZXhcblxuXHQgIHJldHVybiBzdGFydEluZGV4ICsgc2VyaWFsaXphdGlvbkluZGV4IC0gMTtcblx0fVxuXHQvKipcblx0ICogRGVzZXJpYWxpemUgZGF0YSBhcyBCU09OLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIHRoZSBidWZmZXIgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCBzZXQgb2YgQlNPTiBkb2N1bWVudHMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5ldmFsRnVuY3Rpb25zPWZhbHNlXSBldmFsdWF0ZSBmdW5jdGlvbnMgaW4gdGhlIEJTT04gZG9jdW1lbnQgc2NvcGVkIHRvIHRoZSBvYmplY3QgZGVzZXJpYWxpemVkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuY2FjaGVGdW5jdGlvbnM9ZmFsc2VdIGNhY2hlIGV2YWx1YXRlZCBmdW5jdGlvbnMgZm9yIHJldXNlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuY2FjaGVGdW5jdGlvbnNDcmMzMj1mYWxzZV0gdXNlIGEgY3JjMzIgY29kZSBmb3IgY2FjaGluZywgb3RoZXJ3aXNlIHVzZSB0aGUgc3RyaW5nIG9mIHRoZSBmdW5jdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnByb21vdGVMb25ncz10cnVlXSB3aGVuIGRlc2VyaWFsaXppbmcgYSBMb25nIHdpbGwgZml0IGl0IGludG8gYSBOdW1iZXIgaWYgaXQncyBzbWFsbGVyIHRoYW4gNTMgYml0c1xuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucHJvbW90ZUJ1ZmZlcnM9ZmFsc2VdIHdoZW4gZGVzZXJpYWxpemluZyBhIEJpbmFyeSB3aWxsIHJldHVybiBpdCBhcyBhIG5vZGUuanMgQnVmZmVyIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucHJvbW90ZVZhbHVlcz1mYWxzZV0gd2hlbiBkZXNlcmlhbGl6aW5nIHdpbGwgcHJvbW90ZSBCU09OIHZhbHVlcyB0byB0aGVpciBOb2RlLmpzIGNsb3Nlc3QgZXF1aXZhbGVudCB0eXBlcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmZpZWxkc0FzUmF3PW51bGxdIGFsbG93IHRvIHNwZWNpZnkgaWYgdGhlcmUgd2hhdCBmaWVsZHMgd2Ugd2lzaCB0byByZXR1cm4gYXMgdW5zZXJpYWxpemVkIHJhdyBidWZmZXIuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5ic29uUmVnRXhwPWZhbHNlXSByZXR1cm4gQlNPTiByZWd1bGFyIGV4cHJlc3Npb25zIGFzIEJTT05SZWdFeHAgaW5zdGFuY2VzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFsbG93T2JqZWN0U21hbGxlclRoYW5CdWZmZXJTaXplPWZhbHNlXSBhbGxvd3MgdGhlIGJ1ZmZlciB0byBiZSBsYXJnZXIgdGhhbiB0aGUgcGFyc2VkIEJTT04gb2JqZWN0XG5cdCAqIEByZXR1cm4ge09iamVjdH0gcmV0dXJucyB0aGUgZGVzZXJpYWxpemVkIEphdmFzY3JpcHQgT2JqZWN0LlxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIGRlc2VyaWFsaXplJDIoYnVmZmVyJCQxLCBvcHRpb25zKSB7XG5cdCAgYnVmZmVyJCQxID0gZW5zdXJlX2J1ZmZlcihidWZmZXIkJDEpO1xuXHQgIHJldHVybiBkZXNlcmlhbGl6ZXIoYnVmZmVyJCQxLCBvcHRpb25zKTtcblx0fVxuXHQvKipcblx0ICogQ2FsY3VsYXRlIHRoZSBic29uIHNpemUgZm9yIGEgcGFzc2VkIGluIEphdmFzY3JpcHQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRoZSBKYXZhc2NyaXB0IG9iamVjdCB0byBjYWxjdWxhdGUgdGhlIEJTT04gYnl0ZSBzaXplIGZvci5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zZXJpYWxpemVGdW5jdGlvbnM9ZmFsc2VdIHNlcmlhbGl6ZSB0aGUgamF2YXNjcmlwdCBmdW5jdGlvbnMgKiooZGVmYXVsdDpmYWxzZSkqKi5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQ9dHJ1ZV0gaWdub3JlIHVuZGVmaW5lZCBmaWVsZHMgKiooZGVmYXVsdDp0cnVlKSoqLlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IHJldHVybnMgdGhlIG51bWJlciBvZiBieXRlcyB0aGUgQlNPTiBvYmplY3Qgd2lsbCB0YWtlIHVwLlxuXHQgKi9cblxuXG5cdGZ1bmN0aW9uIGNhbGN1bGF0ZU9iamVjdFNpemUkMShvYmplY3QsIG9wdGlvbnMpIHtcblx0ICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICB2YXIgc2VyaWFsaXplRnVuY3Rpb25zID0gdHlwZW9mIG9wdGlvbnMuc2VyaWFsaXplRnVuY3Rpb25zID09PSAnYm9vbGVhbicgPyBvcHRpb25zLnNlcmlhbGl6ZUZ1bmN0aW9ucyA6IGZhbHNlO1xuXHQgIHZhciBpZ25vcmVVbmRlZmluZWQgPSB0eXBlb2Ygb3B0aW9ucy5pZ25vcmVVbmRlZmluZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkIDogdHJ1ZTtcblx0ICByZXR1cm4gY2FsY3VsYXRlX3NpemUob2JqZWN0LCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCk7XG5cdH1cblx0LyoqXG5cdCAqIERlc2VyaWFsaXplIHN0cmVhbSBkYXRhIGFzIEJTT04gZG9jdW1lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlcn0gZGF0YSB0aGUgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgc2V0IG9mIEJTT04gZG9jdW1lbnRzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRJbmRleCB0aGUgc3RhcnQgaW5kZXggaW4gdGhlIGRhdGEgQnVmZmVyIHdoZXJlIHRoZSBkZXNlcmlhbGl6YXRpb24gaXMgdG8gc3RhcnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXJPZkRvY3VtZW50cyBudW1iZXIgb2YgZG9jdW1lbnRzIHRvIGRlc2VyaWFsaXplLlxuXHQgKiBAcGFyYW0ge0FycmF5fSBkb2N1bWVudHMgYW4gYXJyYXkgd2hlcmUgdG8gc3RvcmUgdGhlIGRlc2VyaWFsaXplZCBkb2N1bWVudHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkb2NTdGFydEluZGV4IHRoZSBpbmRleCBpbiB0aGUgZG9jdW1lbnRzIGFycmF5IGZyb20gd2hlcmUgdG8gc3RhcnQgaW5zZXJ0aW5nIGRvY3VtZW50cy5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBhZGRpdGlvbmFsIG9wdGlvbnMgdXNlZCBmb3IgdGhlIGRlc2VyaWFsaXphdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmV2YWxGdW5jdGlvbnM9ZmFsc2VdIGV2YWx1YXRlIGZ1bmN0aW9ucyBpbiB0aGUgQlNPTiBkb2N1bWVudCBzY29wZWQgdG8gdGhlIG9iamVjdCBkZXNlcmlhbGl6ZWQuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5jYWNoZUZ1bmN0aW9ucz1mYWxzZV0gY2FjaGUgZXZhbHVhdGVkIGZ1bmN0aW9ucyBmb3IgcmV1c2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5jYWNoZUZ1bmN0aW9uc0NyYzMyPWZhbHNlXSB1c2UgYSBjcmMzMiBjb2RlIGZvciBjYWNoaW5nLCBvdGhlcndpc2UgdXNlIHRoZSBzdHJpbmcgb2YgdGhlIGZ1bmN0aW9uLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMucHJvbW90ZUxvbmdzPXRydWVdIHdoZW4gZGVzZXJpYWxpemluZyBhIExvbmcgd2lsbCBmaXQgaXQgaW50byBhIE51bWJlciBpZiBpdCdzIHNtYWxsZXIgdGhhbiA1MyBiaXRzXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5wcm9tb3RlQnVmZmVycz1mYWxzZV0gd2hlbiBkZXNlcmlhbGl6aW5nIGEgQmluYXJ5IHdpbGwgcmV0dXJuIGl0IGFzIGEgbm9kZS5qcyBCdWZmZXIgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5wcm9tb3RlVmFsdWVzPWZhbHNlXSB3aGVuIGRlc2VyaWFsaXppbmcgd2lsbCBwcm9tb3RlIEJTT04gdmFsdWVzIHRvIHRoZWlyIE5vZGUuanMgY2xvc2VzdCBlcXVpdmFsZW50IHR5cGVzLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZmllbGRzQXNSYXc9bnVsbF0gYWxsb3cgdG8gc3BlY2lmeSBpZiB0aGVyZSB3aGF0IGZpZWxkcyB3ZSB3aXNoIHRvIHJldHVybiBhcyB1bnNlcmlhbGl6ZWQgcmF3IGJ1ZmZlci5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmJzb25SZWdFeHA9ZmFsc2VdIHJldHVybiBCU09OIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXMgQlNPTlJlZ0V4cCBpbnN0YW5jZXMuXG5cdCAqIEByZXR1cm4ge051bWJlcn0gcmV0dXJucyB0aGUgbmV4dCBpbmRleCBpbiB0aGUgYnVmZmVyIGFmdGVyIGRlc2VyaWFsaXphdGlvbiAqKngqKiBudW1iZXJzIG9mIGRvY3VtZW50cy5cblx0ICovXG5cblxuXHRmdW5jdGlvbiBkZXNlcmlhbGl6ZVN0cmVhbShkYXRhLCBzdGFydEluZGV4LCBudW1iZXJPZkRvY3VtZW50cywgZG9jdW1lbnRzLCBkb2NTdGFydEluZGV4LCBvcHRpb25zKSB7XG5cdCAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuXHQgICAgYWxsb3dPYmplY3RTbWFsbGVyVGhhbkJ1ZmZlclNpemU6IHRydWVcblx0ICB9LCBvcHRpb25zKTtcblx0ICBkYXRhID0gZW5zdXJlX2J1ZmZlcihkYXRhKTtcblx0ICB2YXIgaW5kZXggPSBzdGFydEluZGV4OyAvLyBMb29wIG92ZXIgYWxsIGRvY3VtZW50c1xuXG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkRvY3VtZW50czsgaSsrKSB7XG5cdCAgICAvLyBGaW5kIHNpemUgb2YgdGhlIGRvY3VtZW50XG5cdCAgICB2YXIgc2l6ZSA9IGRhdGFbaW5kZXhdIHwgZGF0YVtpbmRleCArIDFdIDw8IDggfCBkYXRhW2luZGV4ICsgMl0gPDwgMTYgfCBkYXRhW2luZGV4ICsgM10gPDwgMjQ7IC8vIFVwZGF0ZSBvcHRpb25zIHdpdGggaW5kZXhcblxuXHQgICAgb3B0aW9ucy5pbmRleCA9IGluZGV4OyAvLyBQYXJzZSB0aGUgZG9jdW1lbnQgYXQgdGhpcyBwb2ludFxuXG5cdCAgICBkb2N1bWVudHNbZG9jU3RhcnRJbmRleCArIGldID0gZGVzZXJpYWxpemVyKGRhdGEsIG9wdGlvbnMpOyAvLyBBZGp1c3QgaW5kZXggYnkgdGhlIGRvY3VtZW50IHNpemVcblxuXHQgICAgaW5kZXggPSBpbmRleCArIHNpemU7XG5cdCAgfSAvLyBSZXR1cm4gb2JqZWN0IGNvbnRhaW5pbmcgZW5kIGluZGV4IG9mIHBhcnNpbmcgYW5kIGxpc3Qgb2YgZG9jdW1lbnRzXG5cblxuXHQgIHJldHVybiBpbmRleDtcblx0fVxuXG5cdHZhciBic29uID0ge1xuXHQgIC8vIGNvbnN0YW50c1xuXHQgIC8vIE5PVEU6IHRoaXMgaXMgZG9uZSB0aGlzIHdheSBiZWNhdXNlIHJvbGx1cCBjYW4ndCByZXNvbHZlIGFuIGBPYmplY3QuYXNzaWduYGVkIGV4cG9ydFxuXHQgIEJTT05fSU5UMzJfTUFYOiBjb25zdGFudHMuQlNPTl9JTlQzMl9NQVgsXG5cdCAgQlNPTl9JTlQzMl9NSU46IGNvbnN0YW50cy5CU09OX0lOVDMyX01JTixcblx0ICBCU09OX0lOVDY0X01BWDogY29uc3RhbnRzLkJTT05fSU5UNjRfTUFYLFxuXHQgIEJTT05fSU5UNjRfTUlOOiBjb25zdGFudHMuQlNPTl9JTlQ2NF9NSU4sXG5cdCAgSlNfSU5UX01BWDogY29uc3RhbnRzLkpTX0lOVF9NQVgsXG5cdCAgSlNfSU5UX01JTjogY29uc3RhbnRzLkpTX0lOVF9NSU4sXG5cdCAgQlNPTl9EQVRBX05VTUJFUjogY29uc3RhbnRzLkJTT05fREFUQV9OVU1CRVIsXG5cdCAgQlNPTl9EQVRBX1NUUklORzogY29uc3RhbnRzLkJTT05fREFUQV9TVFJJTkcsXG5cdCAgQlNPTl9EQVRBX09CSkVDVDogY29uc3RhbnRzLkJTT05fREFUQV9PQkpFQ1QsXG5cdCAgQlNPTl9EQVRBX0FSUkFZOiBjb25zdGFudHMuQlNPTl9EQVRBX0FSUkFZLFxuXHQgIEJTT05fREFUQV9CSU5BUlk6IGNvbnN0YW50cy5CU09OX0RBVEFfQklOQVJZLFxuXHQgIEJTT05fREFUQV9VTkRFRklORUQ6IGNvbnN0YW50cy5CU09OX0RBVEFfVU5ERUZJTkVELFxuXHQgIEJTT05fREFUQV9PSUQ6IGNvbnN0YW50cy5CU09OX0RBVEFfT0lELFxuXHQgIEJTT05fREFUQV9CT09MRUFOOiBjb25zdGFudHMuQlNPTl9EQVRBX0JPT0xFQU4sXG5cdCAgQlNPTl9EQVRBX0RBVEU6IGNvbnN0YW50cy5CU09OX0RBVEFfREFURSxcblx0ICBCU09OX0RBVEFfTlVMTDogY29uc3RhbnRzLkJTT05fREFUQV9OVUxMLFxuXHQgIEJTT05fREFUQV9SRUdFWFA6IGNvbnN0YW50cy5CU09OX0RBVEFfUkVHRVhQLFxuXHQgIEJTT05fREFUQV9EQlBPSU5URVI6IGNvbnN0YW50cy5CU09OX0RBVEFfREJQT0lOVEVSLFxuXHQgIEJTT05fREFUQV9DT0RFOiBjb25zdGFudHMuQlNPTl9EQVRBX0NPREUsXG5cdCAgQlNPTl9EQVRBX1NZTUJPTDogY29uc3RhbnRzLkJTT05fREFUQV9TWU1CT0wsXG5cdCAgQlNPTl9EQVRBX0NPREVfV19TQ09QRTogY29uc3RhbnRzLkJTT05fREFUQV9DT0RFX1dfU0NPUEUsXG5cdCAgQlNPTl9EQVRBX0lOVDogY29uc3RhbnRzLkJTT05fREFUQV9JTlQsXG5cdCAgQlNPTl9EQVRBX1RJTUVTVEFNUDogY29uc3RhbnRzLkJTT05fREFUQV9USU1FU1RBTVAsXG5cdCAgQlNPTl9EQVRBX0xPTkc6IGNvbnN0YW50cy5CU09OX0RBVEFfTE9ORyxcblx0ICBCU09OX0RBVEFfREVDSU1BTDEyODogY29uc3RhbnRzLkJTT05fREFUQV9ERUNJTUFMMTI4LFxuXHQgIEJTT05fREFUQV9NSU5fS0VZOiBjb25zdGFudHMuQlNPTl9EQVRBX01JTl9LRVksXG5cdCAgQlNPTl9EQVRBX01BWF9LRVk6IGNvbnN0YW50cy5CU09OX0RBVEFfTUFYX0tFWSxcblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQ6IGNvbnN0YW50cy5CU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQsXG5cdCAgQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTjogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfRlVOQ1RJT04sXG5cdCAgQlNPTl9CSU5BUllfU1VCVFlQRV9CWVRFX0FSUkFZOiBjb25zdGFudHMuQlNPTl9CSU5BUllfU1VCVFlQRV9CWVRFX0FSUkFZLFxuXHQgIEJTT05fQklOQVJZX1NVQlRZUEVfVVVJRDogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfVVVJRCxcblx0ICBCU09OX0JJTkFSWV9TVUJUWVBFX01ENTogY29uc3RhbnRzLkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1LFxuXHQgIEJTT05fQklOQVJZX1NVQlRZUEVfVVNFUl9ERUZJTkVEOiBjb25zdGFudHMuQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQsXG5cdCAgLy8gd3JhcHBlZCB0eXBlc1xuXHQgIENvZGU6IGNvZGUsXG5cdCAgTWFwOiBtYXAsXG5cdCAgQlNPTlN5bWJvbDogc3ltYm9sLFxuXHQgIERCUmVmOiBkYl9yZWYsXG5cdCAgQmluYXJ5OiBiaW5hcnksXG5cdCAgT2JqZWN0SWQ6IG9iamVjdGlkLFxuXHQgIExvbmc6IGxvbmdfMSxcblx0ICBUaW1lc3RhbXA6IHRpbWVzdGFtcCxcblx0ICBEb3VibGU6IGRvdWJsZV8xLFxuXHQgIEludDMyOiBpbnRfMzIsXG5cdCAgTWluS2V5OiBtaW5fa2V5LFxuXHQgIE1heEtleTogbWF4X2tleSxcblx0ICBCU09OUmVnRXhwOiByZWdleHAsXG5cdCAgRGVjaW1hbDEyODogZGVjaW1hbDEyOCxcblx0ICAvLyBtZXRob2RzXG5cdCAgc2VyaWFsaXplOiBzZXJpYWxpemUkMSxcblx0ICBzZXJpYWxpemVXaXRoQnVmZmVyQW5kSW5kZXg6IHNlcmlhbGl6ZVdpdGhCdWZmZXJBbmRJbmRleCxcblx0ICBkZXNlcmlhbGl6ZTogZGVzZXJpYWxpemUkMixcblx0ICBjYWxjdWxhdGVPYmplY3RTaXplOiBjYWxjdWxhdGVPYmplY3RTaXplJDEsXG5cdCAgZGVzZXJpYWxpemVTdHJlYW06IGRlc2VyaWFsaXplU3RyZWFtLFxuXHQgIHNldEludGVybmFsQnVmZmVyU2l6ZTogc2V0SW50ZXJuYWxCdWZmZXJTaXplLFxuXHQgIC8vIGxlZ2FjeSBzdXBwb3J0XG5cdCAgT2JqZWN0SUQ6IG9iamVjdGlkLFxuXHQgIC8vIEV4dGVuZGVkIEpTT05cblx0ICBFSlNPTjogZXh0ZW5kZWRfanNvblxuXHR9O1xuXHR2YXIgYnNvbl8xID0gYnNvbi5CU09OX0lOVDMyX01BWDtcblx0dmFyIGJzb25fMiA9IGJzb24uQlNPTl9JTlQzMl9NSU47XG5cdHZhciBic29uXzMgPSBic29uLkJTT05fSU5UNjRfTUFYO1xuXHR2YXIgYnNvbl80ID0gYnNvbi5CU09OX0lOVDY0X01JTjtcblx0dmFyIGJzb25fNSA9IGJzb24uSlNfSU5UX01BWDtcblx0dmFyIGJzb25fNiA9IGJzb24uSlNfSU5UX01JTjtcblx0dmFyIGJzb25fNyA9IGJzb24uQlNPTl9EQVRBX05VTUJFUjtcblx0dmFyIGJzb25fOCA9IGJzb24uQlNPTl9EQVRBX1NUUklORztcblx0dmFyIGJzb25fOSA9IGJzb24uQlNPTl9EQVRBX09CSkVDVDtcblx0dmFyIGJzb25fMTAgPSBic29uLkJTT05fREFUQV9BUlJBWTtcblx0dmFyIGJzb25fMTEgPSBic29uLkJTT05fREFUQV9CSU5BUlk7XG5cdHZhciBic29uXzEyID0gYnNvbi5CU09OX0RBVEFfVU5ERUZJTkVEO1xuXHR2YXIgYnNvbl8xMyA9IGJzb24uQlNPTl9EQVRBX09JRDtcblx0dmFyIGJzb25fMTQgPSBic29uLkJTT05fREFUQV9CT09MRUFOO1xuXHR2YXIgYnNvbl8xNSA9IGJzb24uQlNPTl9EQVRBX0RBVEU7XG5cdHZhciBic29uXzE2ID0gYnNvbi5CU09OX0RBVEFfTlVMTDtcblx0dmFyIGJzb25fMTcgPSBic29uLkJTT05fREFUQV9SRUdFWFA7XG5cdHZhciBic29uXzE4ID0gYnNvbi5CU09OX0RBVEFfREJQT0lOVEVSO1xuXHR2YXIgYnNvbl8xOSA9IGJzb24uQlNPTl9EQVRBX0NPREU7XG5cdHZhciBic29uXzIwID0gYnNvbi5CU09OX0RBVEFfU1lNQk9MO1xuXHR2YXIgYnNvbl8yMSA9IGJzb24uQlNPTl9EQVRBX0NPREVfV19TQ09QRTtcblx0dmFyIGJzb25fMjIgPSBic29uLkJTT05fREFUQV9JTlQ7XG5cdHZhciBic29uXzIzID0gYnNvbi5CU09OX0RBVEFfVElNRVNUQU1QO1xuXHR2YXIgYnNvbl8yNCA9IGJzb24uQlNPTl9EQVRBX0xPTkc7XG5cdHZhciBic29uXzI1ID0gYnNvbi5CU09OX0RBVEFfREVDSU1BTDEyODtcblx0dmFyIGJzb25fMjYgPSBic29uLkJTT05fREFUQV9NSU5fS0VZO1xuXHR2YXIgYnNvbl8yNyA9IGJzb24uQlNPTl9EQVRBX01BWF9LRVk7XG5cdHZhciBic29uXzI4ID0gYnNvbi5CU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQ7XG5cdHZhciBic29uXzI5ID0gYnNvbi5CU09OX0JJTkFSWV9TVUJUWVBFX0ZVTkNUSU9OO1xuXHR2YXIgYnNvbl8zMCA9IGJzb24uQlNPTl9CSU5BUllfU1VCVFlQRV9CWVRFX0FSUkFZO1xuXHR2YXIgYnNvbl8zMSA9IGJzb24uQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlEO1xuXHR2YXIgYnNvbl8zMiA9IGJzb24uQlNPTl9CSU5BUllfU1VCVFlQRV9NRDU7XG5cdHZhciBic29uXzMzID0gYnNvbi5CU09OX0JJTkFSWV9TVUJUWVBFX1VTRVJfREVGSU5FRDtcblx0dmFyIGJzb25fMzQgPSBic29uLkNvZGU7XG5cdHZhciBic29uXzM1ID0gYnNvbi5CU09OU3ltYm9sO1xuXHR2YXIgYnNvbl8zNiA9IGJzb24uREJSZWY7XG5cdHZhciBic29uXzM3ID0gYnNvbi5CaW5hcnk7XG5cdHZhciBic29uXzM4ID0gYnNvbi5PYmplY3RJZDtcblx0dmFyIGJzb25fMzkgPSBic29uLkxvbmc7XG5cdHZhciBic29uXzQwID0gYnNvbi5UaW1lc3RhbXA7XG5cdHZhciBic29uXzQxID0gYnNvbi5Eb3VibGU7XG5cdHZhciBic29uXzQyID0gYnNvbi5JbnQzMjtcblx0dmFyIGJzb25fNDMgPSBic29uLk1pbktleTtcblx0dmFyIGJzb25fNDQgPSBic29uLk1heEtleTtcblx0dmFyIGJzb25fNDUgPSBic29uLkJTT05SZWdFeHA7XG5cdHZhciBic29uXzQ2ID0gYnNvbi5EZWNpbWFsMTI4O1xuXHR2YXIgYnNvbl80NyA9IGJzb24uc2VyaWFsaXplO1xuXHR2YXIgYnNvbl80OCA9IGJzb24uc2VyaWFsaXplV2l0aEJ1ZmZlckFuZEluZGV4O1xuXHR2YXIgYnNvbl80OSA9IGJzb24uZGVzZXJpYWxpemU7XG5cdHZhciBic29uXzUwID0gYnNvbi5jYWxjdWxhdGVPYmplY3RTaXplO1xuXHR2YXIgYnNvbl81MSA9IGJzb24uZGVzZXJpYWxpemVTdHJlYW07XG5cdHZhciBic29uXzUyID0gYnNvbi5zZXRJbnRlcm5hbEJ1ZmZlclNpemU7XG5cdHZhciBic29uXzUzID0gYnNvbi5PYmplY3RJRDtcblx0dmFyIGJzb25fNTQgPSBic29uLkVKU09OO1xuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IGJzb247XG5cdGV4cG9ydHMuQlNPTl9JTlQzMl9NQVggPSBic29uXzE7XG5cdGV4cG9ydHMuQlNPTl9JTlQzMl9NSU4gPSBic29uXzI7XG5cdGV4cG9ydHMuQlNPTl9JTlQ2NF9NQVggPSBic29uXzM7XG5cdGV4cG9ydHMuQlNPTl9JTlQ2NF9NSU4gPSBic29uXzQ7XG5cdGV4cG9ydHMuSlNfSU5UX01BWCA9IGJzb25fNTtcblx0ZXhwb3J0cy5KU19JTlRfTUlOID0gYnNvbl82O1xuXHRleHBvcnRzLkJTT05fREFUQV9OVU1CRVIgPSBic29uXzc7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX1NUUklORyA9IGJzb25fODtcblx0ZXhwb3J0cy5CU09OX0RBVEFfT0JKRUNUID0gYnNvbl85O1xuXHRleHBvcnRzLkJTT05fREFUQV9BUlJBWSA9IGJzb25fMTA7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX0JJTkFSWSA9IGJzb25fMTE7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX1VOREVGSU5FRCA9IGJzb25fMTI7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX09JRCA9IGJzb25fMTM7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX0JPT0xFQU4gPSBic29uXzE0O1xuXHRleHBvcnRzLkJTT05fREFUQV9EQVRFID0gYnNvbl8xNTtcblx0ZXhwb3J0cy5CU09OX0RBVEFfTlVMTCA9IGJzb25fMTY7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX1JFR0VYUCA9IGJzb25fMTc7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX0RCUE9JTlRFUiA9IGJzb25fMTg7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX0NPREUgPSBic29uXzE5O1xuXHRleHBvcnRzLkJTT05fREFUQV9TWU1CT0wgPSBic29uXzIwO1xuXHRleHBvcnRzLkJTT05fREFUQV9DT0RFX1dfU0NPUEUgPSBic29uXzIxO1xuXHRleHBvcnRzLkJTT05fREFUQV9JTlQgPSBic29uXzIyO1xuXHRleHBvcnRzLkJTT05fREFUQV9USU1FU1RBTVAgPSBic29uXzIzO1xuXHRleHBvcnRzLkJTT05fREFUQV9MT05HID0gYnNvbl8yNDtcblx0ZXhwb3J0cy5CU09OX0RBVEFfREVDSU1BTDEyOCA9IGJzb25fMjU7XG5cdGV4cG9ydHMuQlNPTl9EQVRBX01JTl9LRVkgPSBic29uXzI2O1xuXHRleHBvcnRzLkJTT05fREFUQV9NQVhfS0VZID0gYnNvbl8yNztcblx0ZXhwb3J0cy5CU09OX0JJTkFSWV9TVUJUWVBFX0RFRkFVTFQgPSBic29uXzI4O1xuXHRleHBvcnRzLkJTT05fQklOQVJZX1NVQlRZUEVfRlVOQ1RJT04gPSBic29uXzI5O1xuXHRleHBvcnRzLkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWSA9IGJzb25fMzA7XG5cdGV4cG9ydHMuQlNPTl9CSU5BUllfU1VCVFlQRV9VVUlEID0gYnNvbl8zMTtcblx0ZXhwb3J0cy5CU09OX0JJTkFSWV9TVUJUWVBFX01ENSA9IGJzb25fMzI7XG5cdGV4cG9ydHMuQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQgPSBic29uXzMzO1xuXHRleHBvcnRzLkNvZGUgPSBic29uXzM0O1xuXHRleHBvcnRzLkJTT05TeW1ib2wgPSBic29uXzM1O1xuXHRleHBvcnRzLkRCUmVmID0gYnNvbl8zNjtcblx0ZXhwb3J0cy5CaW5hcnkgPSBic29uXzM3O1xuXHRleHBvcnRzLk9iamVjdElkID0gYnNvbl8zODtcblx0ZXhwb3J0cy5Mb25nID0gYnNvbl8zOTtcblx0ZXhwb3J0cy5UaW1lc3RhbXAgPSBic29uXzQwO1xuXHRleHBvcnRzLkRvdWJsZSA9IGJzb25fNDE7XG5cdGV4cG9ydHMuSW50MzIgPSBic29uXzQyO1xuXHRleHBvcnRzLk1pbktleSA9IGJzb25fNDM7XG5cdGV4cG9ydHMuTWF4S2V5ID0gYnNvbl80NDtcblx0ZXhwb3J0cy5CU09OUmVnRXhwID0gYnNvbl80NTtcblx0ZXhwb3J0cy5EZWNpbWFsMTI4ID0gYnNvbl80Njtcblx0ZXhwb3J0cy5zZXJpYWxpemUgPSBic29uXzQ3O1xuXHRleHBvcnRzLnNlcmlhbGl6ZVdpdGhCdWZmZXJBbmRJbmRleCA9IGJzb25fNDg7XG5cdGV4cG9ydHMuZGVzZXJpYWxpemUgPSBic29uXzQ5O1xuXHRleHBvcnRzLmNhbGN1bGF0ZU9iamVjdFNpemUgPSBic29uXzUwO1xuXHRleHBvcnRzLmRlc2VyaWFsaXplU3RyZWFtID0gYnNvbl81MTtcblx0ZXhwb3J0cy5zZXRJbnRlcm5hbEJ1ZmZlclNpemUgPSBic29uXzUyO1xuXHRleHBvcnRzLk9iamVjdElEID0gYnNvbl81Mztcblx0ZXhwb3J0cy5FSlNPTiA9IGJzb25fNTQ7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCksIF9fd2VicGFja19yZXF1aXJlX18oMSkuQnVmZmVyKSlcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBMb25nO1xyXG5cclxuLyoqXHJcbiAqIHdhc20gb3B0aW1pemF0aW9ucywgdG8gZG8gbmF0aXZlIGk2NCBtdWx0aXBsaWNhdGlvbiBhbmQgZGl2aWRlXHJcbiAqL1xyXG52YXIgd2FzbSA9IG51bGw7XHJcblxyXG50cnkge1xyXG4gIHdhc20gPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShbXHJcbiAgICAwLCA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDEsIDEzLCAyLCA5NiwgMCwgMSwgMTI3LCA5NiwgNCwgMTI3LCAxMjcsIDEyNywgMTI3LCAxLCAxMjcsIDMsIDcsIDYsIDAsIDEsIDEsIDEsIDEsIDEsIDYsIDYsIDEsIDEyNywgMSwgNjUsIDAsIDExLCA3LCA1MCwgNiwgMywgMTA5LCAxMTcsIDEwOCwgMCwgMSwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNSwgMCwgMiwgNSwgMTAwLCAxMDUsIDExOCwgOTUsIDExNywgMCwgMywgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNSwgMCwgNCwgNSwgMTE0LCAxMDEsIDEwOSwgOTUsIDExNywgMCwgNSwgOCwgMTAzLCAxMDEsIDExNiwgOTUsIDEwNCwgMTA1LCAxMDMsIDEwNCwgMCwgMCwgMTAsIDE5MSwgMSwgNiwgNCwgMCwgMzUsIDAsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjYsIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNywgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTI4LCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjksIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEzMCwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMVxyXG4gIF0pKSwge30pLmV4cG9ydHM7XHJcbn0gY2F0Y2ggKGUpIHtcclxuICAvLyBubyB3YXNtIHN1cHBvcnQgOihcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSA2NCBiaXQgdHdvJ3MtY29tcGxlbWVudCBpbnRlZ2VyLCBnaXZlbiBpdHMgbG93IGFuZCBoaWdoIDMyIGJpdCB2YWx1ZXMgYXMgKnNpZ25lZCogaW50ZWdlcnMuXHJcbiAqICBTZWUgdGhlIGZyb20qIGZ1bmN0aW9ucyBiZWxvdyBmb3IgbW9yZSBjb252ZW5pZW50IHdheXMgb2YgY29uc3RydWN0aW5nIExvbmdzLlxyXG4gKiBAZXhwb3J0cyBMb25nXHJcbiAqIEBjbGFzcyBBIExvbmcgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIgdmFsdWUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAoc2lnbmVkKSAzMiBiaXRzIG9mIHRoZSBsb25nXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIExvbmcobG93LCBoaWdoLCB1bnNpZ25lZCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5sb3cgPSBsb3cgfCAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCB2YWx1ZS5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGlnaCA9IGhpZ2ggfCAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciB1bnNpZ25lZCBvciBub3QuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgdGhpcy51bnNpZ25lZCA9ICEhdW5zaWduZWQ7XHJcbn1cclxuXHJcbi8vIFRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIGxvbmcgaXMgdGhlIHR3byBnaXZlbiBzaWduZWQsIDMyLWJpdCB2YWx1ZXMuXHJcbi8vIFdlIHVzZSAzMi1iaXQgcGllY2VzIGJlY2F1c2UgdGhlc2UgYXJlIHRoZSBzaXplIG9mIGludGVnZXJzIG9uIHdoaWNoXHJcbi8vIEphdmFzY3JpcHQgcGVyZm9ybXMgYml0LW9wZXJhdGlvbnMuICBGb3Igb3BlcmF0aW9ucyBsaWtlIGFkZGl0aW9uIGFuZFxyXG4vLyBtdWx0aXBsaWNhdGlvbiwgd2Ugc3BsaXQgZWFjaCBudW1iZXIgaW50byAxNiBiaXQgcGllY2VzLCB3aGljaCBjYW4gZWFzaWx5IGJlXHJcbi8vIG11bHRpcGxpZWQgd2l0aGluIEphdmFzY3JpcHQncyBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiB3aXRob3V0IG92ZXJmbG93XHJcbi8vIG9yIGNoYW5nZSBpbiBzaWduLlxyXG4vL1xyXG4vLyBJbiB0aGUgYWxnb3JpdGhtcyBiZWxvdywgd2UgZnJlcXVlbnRseSByZWR1Y2UgdGhlIG5lZ2F0aXZlIGNhc2UgdG8gdGhlXHJcbi8vIHBvc2l0aXZlIGNhc2UgYnkgbmVnYXRpbmcgdGhlIGlucHV0KHMpIGFuZCB0aGVuIHBvc3QtcHJvY2Vzc2luZyB0aGUgcmVzdWx0LlxyXG4vLyBOb3RlIHRoYXQgd2UgbXVzdCBBTFdBWVMgY2hlY2sgc3BlY2lhbGx5IHdoZXRoZXIgdGhvc2UgdmFsdWVzIGFyZSBNSU5fVkFMVUVcclxuLy8gKC0yXjYzKSBiZWNhdXNlIC1NSU5fVkFMVUUgPT0gTUlOX1ZBTFVFIChzaW5jZSAyXjYzIGNhbm5vdCBiZSByZXByZXNlbnRlZCBhc1xyXG4vLyBhIHBvc2l0aXZlIG51bWJlciwgaXQgb3ZlcmZsb3dzIGJhY2sgaW50byBhIG5lZ2F0aXZlKS4gIE5vdCBoYW5kbGluZyB0aGlzXHJcbi8vIGNhc2Ugd291bGQgb2Z0ZW4gcmVzdWx0IGluIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuLy9cclxuLy8gQ29tbW9uIGNvbnN0YW50IHZhbHVlcyBaRVJPLCBPTkUsIE5FR19PTkUsIGV0Yy4gYXJlIGRlZmluZWQgYmVsb3cgdGhlIGZyb20qXHJcbi8vIG1ldGhvZHMgb24gd2hpY2ggdGhleSBkZXBlbmQuXHJcblxyXG4vKipcclxuICogQW4gaW5kaWNhdG9yIHVzZWQgdG8gcmVsaWFibHkgZGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIExvbmcgb3Igbm90LlxyXG4gKiBAdHlwZSB7Ym9vbGVhbn1cclxuICogQGNvbnN0XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Mb25nLnByb3RvdHlwZS5fX2lzTG9uZ19fO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KExvbmcucHJvdG90eXBlLCBcIl9faXNMb25nX19cIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGlzTG9uZyhvYmopIHtcclxuICAgIHJldHVybiAob2JqICYmIG9ialtcIl9faXNMb25nX19cIl0pID09PSB0cnVlO1xyXG59XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBvYmplY3QgaXMgYSBMb25nLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHsqfSBvYmogT2JqZWN0XHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZy5pc0xvbmcgPSBpc0xvbmc7XHJcblxyXG4vKipcclxuICogQSBjYWNoZSBvZiB0aGUgTG9uZyByZXByZXNlbnRhdGlvbnMgb2Ygc21hbGwgaW50ZWdlciB2YWx1ZXMuXHJcbiAqIEB0eXBlIHshT2JqZWN0fVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy5cclxuICogQHR5cGUgeyFPYmplY3R9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVJTlRfQ0FDSEUgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21JbnQodmFsdWUsIHVuc2lnbmVkKSB7XHJcbiAgICB2YXIgb2JqLCBjYWNoZWRPYmosIGNhY2hlO1xyXG4gICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgdmFsdWUgPj4+PSAwO1xyXG4gICAgICAgIGlmIChjYWNoZSA9ICgwIDw9IHZhbHVlICYmIHZhbHVlIDwgMjU2KSkge1xyXG4gICAgICAgICAgICBjYWNoZWRPYmogPSBVSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCAodmFsdWUgfCAwKSA8IDAgPyAtMSA6IDAsIHRydWUpO1xyXG4gICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgVUlOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICBpZiAoY2FjaGUgPSAoLTEyOCA8PSB2YWx1ZSAmJiB2YWx1ZSA8IDEyOCkpIHtcclxuICAgICAgICAgICAgY2FjaGVkT2JqID0gSU5UX0NBQ0hFW3ZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZE9iailcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRPYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9iaiA9IGZyb21CaXRzKHZhbHVlLCB2YWx1ZSA8IDAgPyAtMSA6IDAsIGZhbHNlKTtcclxuICAgICAgICBpZiAoY2FjaGUpXHJcbiAgICAgICAgICAgIElOVF9DQUNIRVt2YWx1ZV0gPSBvYmo7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gMzIgYml0IGludGVnZXIgdmFsdWUuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIDMyIGJpdCBpbnRlZ2VyIGluIHF1ZXN0aW9uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21JbnQgPSBmcm9tSW50O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgIGlmIChpc05hTih2YWx1ZSkpXHJcbiAgICAgICAgcmV0dXJuIHVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgaWYgKHVuc2lnbmVkKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICAgICAgcmV0dXJuIFVaRVJPO1xyXG4gICAgICAgIGlmICh2YWx1ZSA+PSBUV09fUFdSXzY0X0RCTClcclxuICAgICAgICAgICAgcmV0dXJuIE1BWF9VTlNJR05FRF9WQUxVRTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbHVlIDw9IC1UV09fUFdSXzYzX0RCTClcclxuICAgICAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgICAgICBpZiAodmFsdWUgKyAxID49IFRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUFYX1ZBTFVFO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlIDwgMClcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcigtdmFsdWUsIHVuc2lnbmVkKS5uZWcoKTtcclxuICAgIHJldHVybiBmcm9tQml0cygodmFsdWUgJSBUV09fUFdSXzMyX0RCTCkgfCAwLCAodmFsdWUgLyBUV09fUFdSXzMyX0RCTCkgfCAwLCB1bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLCBwcm92aWRlZCB0aGF0IGl0IGlzIGEgZmluaXRlIG51bWJlci4gT3RoZXJ3aXNlLCB6ZXJvIGlzIHJldHVybmVkLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBudW1iZXIgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbU51bWJlciA9IGZyb21OdW1iZXI7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHNcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tQml0cyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpIHtcclxuICAgIHJldHVybiBuZXcgTG9uZyhsb3dCaXRzLCBoaWdoQml0cywgdW5zaWduZWQpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSA2NCBiaXQgaW50ZWdlciB0aGF0IGNvbWVzIGJ5IGNvbmNhdGVuYXRpbmcgdGhlIGdpdmVuIGxvdyBhbmQgaGlnaCBiaXRzLiBFYWNoIGlzXHJcbiAqICBhc3N1bWVkIHRvIHVzZSAzMiBiaXRzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0JpdHMgVGhlIGxvdyAzMiBiaXRzXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoQml0cyBUaGUgaGlnaCAzMiBiaXRzXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CaXRzID0gZnJvbUJpdHM7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBleHBvbmVudFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBwb3dfZGJsID0gTWF0aC5wb3c7IC8vIFVzZWQgNCB0aW1lcyAoNCo4IHRvIDE1KzQpXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZFxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4XHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tU3RyaW5nKHN0ciwgdW5zaWduZWQsIHJhZGl4KSB7XHJcbiAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcclxuICAgICAgICB0aHJvdyBFcnJvcignZW1wdHkgc3RyaW5nJyk7XHJcbiAgICBpZiAoc3RyID09PSBcIk5hTlwiIHx8IHN0ciA9PT0gXCJJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCIrSW5maW5pdHlcIiB8fCBzdHIgPT09IFwiLUluZmluaXR5XCIpXHJcbiAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICBpZiAodHlwZW9mIHVuc2lnbmVkID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIC8vIEZvciBnb29nLm1hdGgubG9uZyBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgcmFkaXggPSB1bnNpZ25lZCxcclxuICAgICAgICB1bnNpZ25lZCA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB1bnNpZ25lZCA9ICEhIHVuc2lnbmVkO1xyXG4gICAgfVxyXG4gICAgcmFkaXggPSByYWRpeCB8fCAxMDtcclxuICAgIGlmIChyYWRpeCA8IDIgfHwgMzYgPCByYWRpeClcclxuICAgICAgICB0aHJvdyBSYW5nZUVycm9yKCdyYWRpeCcpO1xyXG5cclxuICAgIHZhciBwO1xyXG4gICAgaWYgKChwID0gc3RyLmluZGV4T2YoJy0nKSkgPiAwKVxyXG4gICAgICAgIHRocm93IEVycm9yKCdpbnRlcmlvciBoeXBoZW4nKTtcclxuICAgIGVsc2UgaWYgKHAgPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnJvbVN0cmluZyhzdHIuc3Vic3RyaW5nKDEpLCB1bnNpZ25lZCwgcmFkaXgpLm5lZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvIHNldmVyYWwgKDgpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgOCkpO1xyXG5cclxuICAgIHZhciByZXN1bHQgPSBaRVJPO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpICs9IDgpIHtcclxuICAgICAgICB2YXIgc2l6ZSA9IE1hdGgubWluKDgsIHN0ci5sZW5ndGggLSBpKSxcclxuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChzdHIuc3Vic3RyaW5nKGksIGkgKyBzaXplKSwgcmFkaXgpO1xyXG4gICAgICAgIGlmIChzaXplIDwgOCkge1xyXG4gICAgICAgICAgICB2YXIgcG93ZXIgPSBmcm9tTnVtYmVyKHBvd19kYmwocmFkaXgsIHNpemUpKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Lm11bChwb3dlcikuYWRkKGZyb21OdW1iZXIodmFsdWUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHJhZGl4VG9Qb3dlcik7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc3VsdC51bnNpZ25lZCA9IHVuc2lnbmVkO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcsIHdyaXR0ZW4gdXNpbmcgdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgVGhlIHRleHR1YWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIExvbmdcclxuICogQHBhcmFtIHsoYm9vbGVhbnxudW1iZXIpPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFRoZSByYWRpeCBpbiB3aGljaCB0aGUgdGV4dCBpcyB3cml0dGVuICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICogQHJldHVybnMgeyFMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd8IXtsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyLCB1bnNpZ25lZDogYm9vbGVhbn19IHZhbFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbVZhbHVlKHZhbCwgdW5zaWduZWQpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJylcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcih2YWwsIHVuc2lnbmVkKTtcclxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJylcclxuICAgICAgICByZXR1cm4gZnJvbVN0cmluZyh2YWwsIHVuc2lnbmVkKTtcclxuICAgIC8vIFRocm93cyBmb3Igbm9uLW9iamVjdHMsIGNvbnZlcnRzIG5vbi1pbnN0YW5jZW9mIExvbmc6XHJcbiAgICByZXR1cm4gZnJvbUJpdHModmFsLmxvdywgdmFsLmhpZ2gsIHR5cGVvZiB1bnNpZ25lZCA9PT0gJ2Jvb2xlYW4nID8gdW5zaWduZWQgOiB2YWwudW5zaWduZWQpO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIHNwZWNpZmllZCB2YWx1ZSB0byBhIExvbmcgdXNpbmcgdGhlIGFwcHJvcHJpYXRlIGZyb20qIGZ1bmN0aW9uIGZvciBpdHMgdHlwZS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsIFZhbHVlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5mcm9tVmFsdWUgPSBmcm9tVmFsdWU7XHJcblxyXG4vLyBOT1RFOiB0aGUgY29tcGlsZXIgc2hvdWxkIGlubGluZSB0aGVzZSBjb25zdGFudCB2YWx1ZXMgYmVsb3cgYW5kIHRoZW4gcmVtb3ZlIHRoZXNlIHZhcmlhYmxlcywgc28gdGhlcmUgc2hvdWxkIGJlXHJcbi8vIG5vIHJ1bnRpbWUgcGVuYWx0eSBmb3IgdGhlc2UuXHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8yNF9EQkwgPSAxIDw8IDI0O1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzMyX0RCTCA9IFRXT19QV1JfMTZfREJMICogVFdPX1BXUl8xNl9EQkw7XHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl82M19EQkwgPSBUV09fUFdSXzY0X0RCTCAvIDI7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8yNCA9IGZyb21JbnQoVFdPX1BXUl8yNF9EQkwpO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgWkVSTyA9IGZyb21JbnQoMCk7XHJcblxyXG4vKipcclxuICogU2lnbmVkIHplcm8uXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuWkVSTyA9IFpFUk87XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBVWkVSTyA9IGZyb21JbnQoMCwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogVW5zaWduZWQgemVyby5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5VWkVSTyA9IFVaRVJPO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgT05FID0gZnJvbUludCgxKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk9ORSA9IE9ORTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVPTkUgPSBmcm9tSW50KDEsIHRydWUpO1xyXG5cclxuLyoqXHJcbiAqIFVuc2lnbmVkIG9uZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5VT05FID0gVU9ORTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE5FR19PTkUgPSBmcm9tSW50KC0xKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgbmVnYXRpdmUgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk5FR19PTkUgPSBORUdfT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTUFYX1ZBTFVFID0gZnJvbUJpdHMoMHhGRkZGRkZGRnwwLCAweDdGRkZGRkZGfDAsIGZhbHNlKTtcclxuXHJcbi8qKlxyXG4gKiBNYXhpbXVtIHNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NQVhfVkFMVUUgPSBNQVhfVkFMVUU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNQVhfVU5TSUdORURfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4RkZGRkZGRkZ8MCwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogTWF4aW11bSB1bnNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NQVhfVU5TSUdORURfVkFMVUUgPSBNQVhfVU5TSUdORURfVkFMVUU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNSU5fVkFMVUUgPSBmcm9tQml0cygwLCAweDgwMDAwMDAwfDAsIGZhbHNlKTtcclxuXHJcbi8qKlxyXG4gKiBNaW5pbXVtIHNpZ25lZCB2YWx1ZS5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5NSU5fVkFMVUUgPSBNSU5fVkFMVUU7XHJcblxyXG4vKipcclxuICogQGFsaWFzIExvbmcucHJvdG90eXBlXHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIExvbmdQcm90b3R5cGUgPSBMb25nLnByb3RvdHlwZTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgTG9uZyB0byBhIDMyIGJpdCBpbnRlZ2VyLCBhc3N1bWluZyBpdCBpcyBhIDMyIGJpdCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b0ludCA9IGZ1bmN0aW9uIHRvSW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyB0aGlzLmxvdyA+Pj4gMCA6IHRoaXMubG93O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgdGhlIG5lYXJlc3QgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZSAoZG91YmxlLCA1MyBiaXQgbWFudGlzc2EpLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKCkge1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuICgodGhpcy5oaWdoID4+PiAwKSAqIFRXT19QV1JfMzJfREJMKSArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoICogVFdPX1BXUl8zMl9EQkwgKyAodGhpcy5sb3cgPj4+IDApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgc3RyaW5nIHdyaXR0ZW4gaW4gdGhlIHNwZWNpZmllZCByYWRpeC5cclxuICogQHBhcmFtIHtudW1iZXI9fSByYWRpeCBSYWRpeCAoMi0zNiksIGRlZmF1bHRzIHRvIDEwXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqIEBvdmVycmlkZVxyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBgcmFkaXhgIGlzIG91dCBvZiByYW5nZVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKHJhZGl4KSB7XHJcbiAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcbiAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gJzAnO1xyXG4gICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7IC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpIHtcclxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGFuZ2UgdGhlIExvbmcgdmFsdWUgYmVmb3JlIGl0IGNhbiBiZSBuZWdhdGVkLCBzbyB3ZSByZW1vdmVcclxuICAgICAgICAgICAgLy8gdGhlIGJvdHRvbS1tb3N0IGRpZ2l0IGluIHRoaXMgYmFzZSBhbmQgdGhlbiByZWN1cnNlIHRvIGRvIHRoZSByZXN0LlxyXG4gICAgICAgICAgICB2YXIgcmFkaXhMb25nID0gZnJvbU51bWJlcihyYWRpeCksXHJcbiAgICAgICAgICAgICAgICBkaXYgPSB0aGlzLmRpdihyYWRpeExvbmcpLFxyXG4gICAgICAgICAgICAgICAgcmVtMSA9IGRpdi5tdWwocmFkaXhMb25nKS5zdWIodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBkaXYudG9TdHJpbmcocmFkaXgpICsgcmVtMS50b0ludCgpLnRvU3RyaW5nKHJhZGl4KTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuICctJyArIHRoaXMubmVnKCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvIHNldmVyYWwgKDYpIGRpZ2l0cyBlYWNoIHRpbWUgdGhyb3VnaCB0aGUgbG9vcCwgc28gYXMgdG9cclxuICAgIC8vIG1pbmltaXplIHRoZSBjYWxscyB0byB0aGUgdmVyeSBleHBlbnNpdmUgZW11bGF0ZWQgZGl2LlxyXG4gICAgdmFyIHJhZGl4VG9Qb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgNiksIHRoaXMudW5zaWduZWQpLFxyXG4gICAgICAgIHJlbSA9IHRoaXM7XHJcbiAgICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciByZW1EaXYgPSByZW0uZGl2KHJhZGl4VG9Qb3dlciksXHJcbiAgICAgICAgICAgIGludHZhbCA9IHJlbS5zdWIocmVtRGl2Lm11bChyYWRpeFRvUG93ZXIpKS50b0ludCgpID4+PiAwLFxyXG4gICAgICAgICAgICBkaWdpdHMgPSBpbnR2YWwudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIHJlbSA9IHJlbURpdjtcclxuICAgICAgICBpZiAocmVtLmlzWmVybygpKVxyXG4gICAgICAgICAgICByZXR1cm4gZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA8IDYpXHJcbiAgICAgICAgICAgICAgICBkaWdpdHMgPSAnMCcgKyBkaWdpdHM7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnICsgZGlnaXRzICsgcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYSBzaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gU2lnbmVkIGhpZ2ggYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRIaWdoQml0cyA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBoaWdoIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgaGlnaCBiaXRzXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRIaWdoQml0c1Vuc2lnbmVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCA+Pj4gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgbG93IGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TG93Qml0cyA9IGZ1bmN0aW9uIGdldExvd0JpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbG93IDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgaW50ZWdlci5cclxuICogQHJldHVybnMge251bWJlcn0gVW5zaWduZWQgbG93IGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TG93Qml0c1Vuc2lnbmVkID0gZnVuY3Rpb24gZ2V0TG93Qml0c1Vuc2lnbmVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubG93ID4+PiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG51bWJlciBvZiBiaXRzIG5lZWRlZCB0byByZXByZXNlbnQgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgTG9uZy5cclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0TnVtQml0c0FicyA9IGZ1bmN0aW9uIGdldE51bUJpdHNBYnMoKSB7XHJcbiAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIC8vIFVuc2lnbmVkIExvbmdzIGFyZSBuZXZlciBuZWdhdGl2ZVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVxKE1JTl9WQUxVRSkgPyA2NCA6IHRoaXMubmVnKCkuZ2V0TnVtQml0c0FicygpO1xyXG4gICAgdmFyIHZhbCA9IHRoaXMuaGlnaCAhPSAwID8gdGhpcy5oaWdoIDogdGhpcy5sb3c7XHJcbiAgICBmb3IgKHZhciBiaXQgPSAzMTsgYml0ID4gMDsgYml0LS0pXHJcbiAgICAgICAgaWYgKCh2YWwgJiAoMSA8PCBiaXQpKSAhPSAwKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggIT0gMCA/IGJpdCArIDMzIDogYml0ICsgMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybygpIHtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IDAgJiYgdGhpcy5sb3cgPT09IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHplcm8uIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjaXNaZXJvfS5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmVxeiA9IExvbmdQcm90b3R5cGUuaXNaZXJvO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIG5lZ2F0aXZlLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNOZWdhdGl2ZSA9IGZ1bmN0aW9uIGlzTmVnYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMudW5zaWduZWQgJiYgdGhpcy5oaWdoIDwgMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBwb3NpdGl2ZS5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmlzUG9zaXRpdmUgPSBmdW5jdGlvbiBpc1Bvc2l0aXZlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudW5zaWduZWQgfHwgdGhpcy5oaWdoID49IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgb2RkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCgpIHtcclxuICAgIHJldHVybiAodGhpcy5sb3cgJiAxKSA9PT0gMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBldmVuLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIGlmICh0aGlzLnVuc2lnbmVkICE9PSBvdGhlci51bnNpZ25lZCAmJiAodGhpcy5oaWdoID4+PiAzMSkgPT09IDEgJiYgKG90aGVyLmhpZ2ggPj4+IDMxKSA9PT0gMSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoID09PSBvdGhlci5oaWdoICYmIHRoaXMubG93ID09PSBvdGhlci5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNlcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXEgPSBMb25nUHJvdG90eXBlLmVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHMgPSBmdW5jdGlvbiBub3RFcXVhbHMob3RoZXIpIHtcclxuICAgIHJldHVybiAhdGhpcy5lcSgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lcSA9IExvbmdQcm90b3R5cGUubm90RXF1YWxzO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbm90RXF1YWxzfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubGVzc1RoYW4gPSBmdW5jdGlvbiBsZXNzVGhhbihvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDwgMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2xlc3NUaGFufS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmx0ID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbjtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA8PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmx0ZSA9IExvbmdQcm90b3R5cGUubGVzc1RoYW5PckVxdWFsO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmxlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiBncmVhdGVyVGhhbihvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID4gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2dyZWF0ZXJUaGFufS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmd0ID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbjtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWwgPSBmdW5jdGlvbiBncmVhdGVyVGhhbk9yRXF1YWwob3RoZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXAoLyogdmFsaWRhdGVzICovIG90aGVyKSA+PSAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmd0ZSA9IExvbmdQcm90b3R5cGUuZ3JlYXRlclRoYW5PckVxdWFsO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW5PckVxdWFsfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgaWYgKHRoaXMuZXEob3RoZXIpKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgdmFyIHRoaXNOZWcgPSB0aGlzLmlzTmVnYXRpdmUoKSxcclxuICAgICAgICBvdGhlck5lZyA9IG90aGVyLmlzTmVnYXRpdmUoKTtcclxuICAgIGlmICh0aGlzTmVnICYmICFvdGhlck5lZylcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICBpZiAoIXRoaXNOZWcgJiYgb3RoZXJOZWcpXHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHRoZSBzaWduIGJpdHMgYXJlIHRoZSBzYW1lXHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViKG90aGVyKS5pc05lZ2F0aXZlKCkgPyAtMSA6IDE7XHJcbiAgICAvLyBCb3RoIGFyZSBwb3NpdGl2ZSBpZiBhdCBsZWFzdCBvbmUgaXMgdW5zaWduZWRcclxuICAgIHJldHVybiAob3RoZXIuaGlnaCA+Pj4gMCkgPiAodGhpcy5oaWdoID4+PiAwKSB8fCAob3RoZXIuaGlnaCA9PT0gdGhpcy5oaWdoICYmIChvdGhlci5sb3cgPj4+IDApID4gKHRoaXMubG93ID4+PiAwKSkgPyAtMSA6IDE7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29tcGFyZXMgdGhpcyBMb25nJ3MgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjY29tcGFyZX0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IDAgaWYgdGhleSBhcmUgdGhlIHNhbWUsIDEgaWYgdGhlIHRoaXMgaXMgZ3JlYXRlciBhbmQgLTFcclxuICogIGlmIHRoZSBnaXZlbiBvbmUgaXMgZ3JlYXRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5jb21wID0gTG9uZ1Byb3RvdHlwZS5jb21wYXJlO1xyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZSgpIHtcclxuICAgIGlmICghdGhpcy51bnNpZ25lZCAmJiB0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIE1JTl9WQUxVRTtcclxuICAgIHJldHVybiB0aGlzLm5vdCgpLmFkZChPTkUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhpcyBMb25nJ3MgdmFsdWUuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbmVnYXRlfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gTmVnYXRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5lZyA9IExvbmdQcm90b3R5cGUubmVnYXRlO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHN1bSBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gYWRkZW5kIEFkZGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFN1bVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoYWRkZW5kKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhhZGRlbmQpKVxyXG4gICAgICAgIGFkZGVuZCA9IGZyb21WYWx1ZShhZGRlbmQpO1xyXG5cclxuICAgIC8vIERpdmlkZSBlYWNoIG51bWJlciBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIHN1bSB0aGUgY2h1bmtzLlxyXG5cclxuICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGI0OCA9IGFkZGVuZC5oaWdoID4+PiAxNjtcclxuICAgIHZhciBiMzIgPSBhZGRlbmQuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBiMTYgPSBhZGRlbmQubG93ID4+PiAxNjtcclxuICAgIHZhciBiMDAgPSBhZGRlbmQubG93ICYgMHhGRkZGO1xyXG5cclxuICAgIHZhciBjNDggPSAwLCBjMzIgPSAwLCBjMTYgPSAwLCBjMDAgPSAwO1xyXG4gICAgYzAwICs9IGEwMCArIGIwMDtcclxuICAgIGMxNiArPSBjMDAgPj4+IDE2O1xyXG4gICAgYzAwICY9IDB4RkZGRjtcclxuICAgIGMxNiArPSBhMTYgKyBiMTY7XHJcbiAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTMyICsgYjMyO1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzQ4ICs9IGE0OCArIGI0ODtcclxuICAgIGM0OCAmPSAweEZGRkY7XHJcbiAgICByZXR1cm4gZnJvbUJpdHMoKGMxNiA8PCAxNikgfCBjMDAsIChjNDggPDwgMTYpIHwgYzMyLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBzdWJ0cmFoZW5kIFN1YnRyYWhlbmRcclxuICogQHJldHVybnMgeyFMb25nfSBEaWZmZXJlbmNlXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3Qoc3VidHJhaGVuZCkge1xyXG4gICAgaWYgKCFpc0xvbmcoc3VidHJhaGVuZCkpXHJcbiAgICAgICAgc3VidHJhaGVuZCA9IGZyb21WYWx1ZShzdWJ0cmFoZW5kKTtcclxuICAgIHJldHVybiB0aGlzLmFkZChzdWJ0cmFoZW5kLm5lZygpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzdWJ0cmFjdH0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc3ViID0gTG9uZ1Byb3RvdHlwZS5zdWJ0cmFjdDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gbXVsdGlwbHkobXVsdGlwbGllcikge1xyXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgcmV0dXJuIFpFUk87XHJcbiAgICBpZiAoIWlzTG9uZyhtdWx0aXBsaWVyKSlcclxuICAgICAgICBtdWx0aXBsaWVyID0gZnJvbVZhbHVlKG11bHRpcGxpZXIpO1xyXG5cclxuICAgIC8vIHVzZSB3YXNtIHN1cHBvcnQgaWYgcHJlc2VudFxyXG4gICAgaWYgKHdhc20pIHtcclxuICAgICAgICB2YXIgbG93ID0gd2FzbS5tdWwodGhpcy5sb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllci5sb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxpZXIuaGlnaCk7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbS5nZXRfaGlnaCgpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobXVsdGlwbGllci5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICh0aGlzLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIG11bHRpcGxpZXIuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcbiAgICBpZiAobXVsdGlwbGllci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzT2RkKCkgPyBNSU5fVkFMVUUgOiBaRVJPO1xyXG5cclxuICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIubmVnKCkpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkubXVsKG11bHRpcGxpZXIpLm5lZygpO1xyXG4gICAgfSBlbHNlIGlmIChtdWx0aXBsaWVyLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICByZXR1cm4gdGhpcy5tdWwobXVsdGlwbGllci5uZWcoKSkubmVnKCk7XHJcblxyXG4gICAgLy8gSWYgYm90aCBsb25ncyBhcmUgc21hbGwsIHVzZSBmbG9hdCBtdWx0aXBsaWNhdGlvblxyXG4gICAgaWYgKHRoaXMubHQoVFdPX1BXUl8yNCkgJiYgbXVsdGlwbGllci5sdChUV09fUFdSXzI0KSlcclxuICAgICAgICByZXR1cm4gZnJvbU51bWJlcih0aGlzLnRvTnVtYmVyKCkgKiBtdWx0aXBsaWVyLnRvTnVtYmVyKCksIHRoaXMudW5zaWduZWQpO1xyXG5cclxuICAgIC8vIERpdmlkZSBlYWNoIGxvbmcgaW50byA0IGNodW5rcyBvZiAxNiBiaXRzLCBhbmQgdGhlbiBhZGQgdXAgNHg0IHByb2R1Y3RzLlxyXG4gICAgLy8gV2UgY2FuIHNraXAgcHJvZHVjdHMgdGhhdCB3b3VsZCBvdmVyZmxvdy5cclxuXHJcbiAgICB2YXIgYTQ4ID0gdGhpcy5oaWdoID4+PiAxNjtcclxuICAgIHZhciBhMzIgPSB0aGlzLmhpZ2ggJiAweEZGRkY7XHJcbiAgICB2YXIgYTE2ID0gdGhpcy5sb3cgPj4+IDE2O1xyXG4gICAgdmFyIGEwMCA9IHRoaXMubG93ICYgMHhGRkZGO1xyXG5cclxuICAgIHZhciBiNDggPSBtdWx0aXBsaWVyLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGIzMiA9IG11bHRpcGxpZXIuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBiMTYgPSBtdWx0aXBsaWVyLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYjAwID0gbXVsdGlwbGllci5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICBjMDAgKz0gYTAwICogYjAwO1xyXG4gICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGExNiAqIGIwMDtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMxNiArPSBhMDAgKiBiMTY7XHJcbiAgICBjMzIgKz0gYzE2ID4+PiAxNjtcclxuICAgIGMxNiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTMyICogYjAwO1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzMyICs9IGExNiAqIGIxNjtcclxuICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgYzMyICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMDAgKiBiMzI7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjNDggKz0gYTQ4ICogYjAwICsgYTMyICogYjE2ICsgYTE2ICogYjMyICsgYTAwICogYjQ4O1xyXG4gICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI211bHRpcGx5fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gbXVsdGlwbGllciBNdWx0aXBsaWVyXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUHJvZHVjdFxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tdWwgPSBMb25nUHJvdG90eXBlLm11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhlIHJlc3VsdCBpcyBzaWduZWQgaWYgdGhpcyBMb25nIGlzIHNpZ25lZCBvclxyXG4gKiAgdW5zaWduZWQgaWYgdGhpcyBMb25nIGlzIHVuc2lnbmVkLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uIGRpdmlkZShkaXZpc29yKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhkaXZpc29yKSlcclxuICAgICAgICBkaXZpc29yID0gZnJvbVZhbHVlKGRpdmlzb3IpO1xyXG4gICAgaWYgKGRpdmlzb3IuaXNaZXJvKCkpXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2RpdmlzaW9uIGJ5IHplcm8nKTtcclxuXHJcbiAgICAvLyB1c2Ugd2FzbSBzdXBwb3J0IGlmIHByZXNlbnRcclxuICAgIGlmICh3YXNtKSB7XHJcbiAgICAgICAgLy8gZ3VhcmQgYWdhaW5zdCBzaWduZWQgZGl2aXNpb24gb3ZlcmZsb3c6IHRoZSBsYXJnZXN0XHJcbiAgICAgICAgLy8gbmVnYXRpdmUgbnVtYmVyIC8gLTEgd291bGQgYmUgMSBsYXJnZXIgdGhhbiB0aGUgbGFyZ2VzdFxyXG4gICAgICAgIC8vIHBvc2l0aXZlIG51bWJlciwgZHVlIHRvIHR3bydzIGNvbXBsZW1lbnQuXHJcbiAgICAgICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmXHJcbiAgICAgICAgICAgIHRoaXMuaGlnaCA9PT0gLTB4ODAwMDAwMDAgJiZcclxuICAgICAgICAgICAgZGl2aXNvci5sb3cgPT09IC0xICYmIGRpdmlzb3IuaGlnaCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgLy8gYmUgY29uc2lzdGVudCB3aXRoIG5vbi13YXNtIGNvZGUgcGF0aFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbS5kaXZfdSA6IHdhc20uZGl2X3MpKFxyXG4gICAgICAgICAgICB0aGlzLmxvdyxcclxuICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyxcclxuICAgICAgICAgICAgZGl2aXNvci5oaWdoXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgdmFyIGFwcHJveCwgcmVtLCByZXM7XHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpIHtcclxuICAgICAgICAvLyBUaGlzIHNlY3Rpb24gaXMgb25seSByZWxldmFudCBmb3Igc2lnbmVkIGxvbmdzIGFuZCBpcyBkZXJpdmVkIGZyb20gdGhlXHJcbiAgICAgICAgLy8gY2xvc3VyZSBsaWJyYXJ5IGFzIGEgd2hvbGUuXHJcbiAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5lcShPTkUpIHx8IGRpdmlzb3IuZXEoTkVHX09ORSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFOyAgLy8gcmVjYWxsIHRoYXQgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUVcclxuICAgICAgICAgICAgZWxzZSBpZiAoZGl2aXNvci5lcShNSU5fVkFMVUUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9ORTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBoYXZlIHxvdGhlcnwgPj0gMiwgc28gfHRoaXMvb3RoZXJ8IDwgfE1JTl9WQUxVRXwuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGFsZlRoaXMgPSB0aGlzLnNocigxKTtcclxuICAgICAgICAgICAgICAgIGFwcHJveCA9IGhhbGZUaGlzLmRpdihkaXZpc29yKS5zaGwoMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwcm94LmVxKFpFUk8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpdmlzb3IuaXNOZWdhdGl2ZSgpID8gT05FIDogTkVHX09ORTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtID0gdGhpcy5zdWIoZGl2aXNvci5tdWwoYXBwcm94KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gYXBwcm94LmFkZChyZW0uZGl2KGRpdmlzb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuc2lnbmVkID8gVVpFUk8gOiBaRVJPO1xyXG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkge1xyXG4gICAgICAgICAgICBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5kaXYoZGl2aXNvci5uZWcoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yKS5uZWcoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kaXYoZGl2aXNvci5uZWcoKSkubmVnKCk7XHJcbiAgICAgICAgcmVzID0gWkVSTztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVGhlIGFsZ29yaXRobSBiZWxvdyBoYXMgbm90IGJlZW4gbWFkZSBmb3IgdW5zaWduZWQgbG9uZ3MuIEl0J3MgdGhlcmVmb3JlXHJcbiAgICAgICAgLy8gcmVxdWlyZWQgdG8gdGFrZSBzcGVjaWFsIGNhcmUgb2YgdGhlIE1TQiBwcmlvciB0byBydW5uaW5nIGl0LlxyXG4gICAgICAgIGlmICghZGl2aXNvci51bnNpZ25lZClcclxuICAgICAgICAgICAgZGl2aXNvciA9IGRpdmlzb3IudG9VbnNpZ25lZCgpO1xyXG4gICAgICAgIGlmIChkaXZpc29yLmd0KHRoaXMpKVxyXG4gICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcy5zaHJ1KDEpKSkgLy8gMTUgPj4+IDEgPSA3IDsgd2l0aCBkaXZpc29yID0gOCA7IHRydWVcclxuICAgICAgICAgICAgcmV0dXJuIFVPTkU7XHJcbiAgICAgICAgcmVzID0gVVpFUk87XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVwZWF0IHRoZSBmb2xsb3dpbmcgdW50aWwgdGhlIHJlbWFpbmRlciBpcyBsZXNzIHRoYW4gb3RoZXI6ICBmaW5kIGFcclxuICAgIC8vIGZsb2F0aW5nLXBvaW50IHRoYXQgYXBwcm94aW1hdGVzIHJlbWFpbmRlciAvIG90aGVyICpmcm9tIGJlbG93KiwgYWRkIHRoaXNcclxuICAgIC8vIGludG8gdGhlIHJlc3VsdCwgYW5kIHN1YnRyYWN0IGl0IGZyb20gdGhlIHJlbWFpbmRlci4gIEl0IGlzIGNyaXRpY2FsIHRoYXRcclxuICAgIC8vIHRoZSBhcHByb3hpbWF0ZSB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHJlYWwgdmFsdWUgc28gdGhhdCB0aGVcclxuICAgIC8vIHJlbWFpbmRlciBuZXZlciBiZWNvbWVzIG5lZ2F0aXZlLlxyXG4gICAgcmVtID0gdGhpcztcclxuICAgIHdoaWxlIChyZW0uZ3RlKGRpdmlzb3IpKSB7XHJcbiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIHJlc3VsdCBvZiBkaXZpc2lvbi4gVGhpcyBtYXkgYmUgYSBsaXR0bGUgZ3JlYXRlciBvclxyXG4gICAgICAgIC8vIHNtYWxsZXIgdGhhbiB0aGUgYWN0dWFsIHZhbHVlLlxyXG4gICAgICAgIGFwcHJveCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IocmVtLnRvTnVtYmVyKCkgLyBkaXZpc29yLnRvTnVtYmVyKCkpKTtcclxuXHJcbiAgICAgICAgLy8gV2Ugd2lsbCB0d2VhayB0aGUgYXBwcm94aW1hdGUgcmVzdWx0IGJ5IGNoYW5naW5nIGl0IGluIHRoZSA0OC10aCBkaWdpdCBvclxyXG4gICAgICAgIC8vIHRoZSBzbWFsbGVzdCBub24tZnJhY3Rpb25hbCBkaWdpdCwgd2hpY2hldmVyIGlzIGxhcmdlci5cclxuICAgICAgICB2YXIgbG9nMiA9IE1hdGguY2VpbChNYXRoLmxvZyhhcHByb3gpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICBkZWx0YSA9IChsb2cyIDw9IDQ4KSA/IDEgOiBwb3dfZGJsKDIsIGxvZzIgLSA0OCksXHJcblxyXG4gICAgICAgIC8vIERlY3JlYXNlIHRoZSBhcHByb3hpbWF0aW9uIHVudGlsIGl0IGlzIHNtYWxsZXIgdGhhbiB0aGUgcmVtYWluZGVyLiAgTm90ZVxyXG4gICAgICAgIC8vIHRoYXQgaWYgaXQgaXMgdG9vIGxhcmdlLCB0aGUgcHJvZHVjdCBvdmVyZmxvd3MgYW5kIGlzIG5lZ2F0aXZlLlxyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCksXHJcbiAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgd2hpbGUgKGFwcHJveFJlbS5pc05lZ2F0aXZlKCkgfHwgYXBwcm94UmVtLmd0KHJlbSkpIHtcclxuICAgICAgICAgICAgYXBwcm94IC09IGRlbHRhO1xyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBmcm9tTnVtYmVyKGFwcHJveCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgICAgIGFwcHJveFJlbSA9IGFwcHJveFJlcy5tdWwoZGl2aXNvcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBrbm93IHRoZSBhbnN3ZXIgY2FuJ3QgYmUgemVyby4uLiBhbmQgYWN0dWFsbHksIHplcm8gd291bGQgY2F1c2VcclxuICAgICAgICAvLyBpbmZpbml0ZSByZWN1cnNpb24gc2luY2Ugd2Ugd291bGQgbWFrZSBubyBwcm9ncmVzcy5cclxuICAgICAgICBpZiAoYXBwcm94UmVzLmlzWmVybygpKVxyXG4gICAgICAgICAgICBhcHByb3hSZXMgPSBPTkU7XHJcblxyXG4gICAgICAgIHJlcyA9IHJlcy5hZGQoYXBwcm94UmVzKTtcclxuICAgICAgICByZW0gPSByZW0uc3ViKGFwcHJveFJlbSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIGRpdmlkZWQgYnkgdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNkaXZpZGV9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBRdW90aWVudFxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5kaXYgPSBMb25nUHJvdG90eXBlLmRpdmlkZTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUubW9kdWxvID0gZnVuY3Rpb24gbW9kdWxvKGRpdmlzb3IpIHtcclxuICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcblxyXG4gICAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XHJcbiAgICBpZiAod2FzbSkge1xyXG4gICAgICAgIHZhciBsb3cgPSAodGhpcy51bnNpZ25lZCA/IHdhc20ucmVtX3UgOiB3YXNtLnJlbV9zKShcclxuICAgICAgICAgICAgdGhpcy5sb3csXHJcbiAgICAgICAgICAgIHRoaXMuaGlnaCxcclxuICAgICAgICAgICAgZGl2aXNvci5sb3csXHJcbiAgICAgICAgICAgIGRpdmlzb3IuaGlnaFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKGxvdywgd2FzbS5nZXRfaGlnaCgpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5zdWIodGhpcy5kaXYoZGl2aXNvcikubXVsKGRpdmlzb3IpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUubW9kID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgbW9kdWxvIHRoZSBzcGVjaWZpZWQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbW9kdWxvfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUmVtYWluZGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnJlbSA9IExvbmdQcm90b3R5cGUubW9kdWxvO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgTk9UIG9mIHRoaXMgTG9uZy5cclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ub3QgPSBmdW5jdGlvbiBub3QoKSB7XHJcbiAgICByZXR1cm4gZnJvbUJpdHMofnRoaXMubG93LCB+dGhpcy5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIEFORCBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZChvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyAmIG90aGVyLmxvdywgdGhpcy5oaWdoICYgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBPUiBvZiB0aGlzIExvbmcgYW5kIHRoZSBzcGVjaWZpZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgTG9uZ1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3Iob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgfCBvdGhlci5sb3csIHRoaXMuaGlnaCB8IG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgWE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIGdpdmVuIG9uZS5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93IF4gb3RoZXIubG93LCB0aGlzLmhpZ2ggXiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgc2hpZnRlZCB0byB0aGUgbGVmdCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQgPSBmdW5jdGlvbiBzaGlmdExlZnQobnVtQml0cykge1xyXG4gICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgaWYgKChudW1CaXRzICY9IDYzKSA9PT0gMClcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIGVsc2UgaWYgKG51bUJpdHMgPCAzMilcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgPDwgbnVtQml0cywgKHRoaXMuaGlnaCA8PCBudW1CaXRzKSB8ICh0aGlzLmxvdyA+Pj4gKDMyIC0gbnVtQml0cykpLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMoMCwgdGhpcy5sb3cgPDwgKG51bUJpdHMgLSAzMiksIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRMZWZ0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNobCA9IExvbmdQcm90b3R5cGUuc2hpZnRMZWZ0O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBhcml0aG1ldGljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0ID0gZnVuY3Rpb24gc2hpZnRSaWdodChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygodGhpcy5sb3cgPj4+IG51bUJpdHMpIHwgKHRoaXMuaGlnaCA8PCAoMzIgLSBudW1CaXRzKSksIHRoaXMuaGlnaCA+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHModGhpcy5oaWdoID4+IChudW1CaXRzIC0gMzIpLCB0aGlzLmhpZ2ggPj0gMCA/IDAgOiAtMSwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodH0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaHIgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQ7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGxvZ2ljYWxseSBzaGlmdGVkIHRvIHRoZSByaWdodCBieSB0aGUgZ2l2ZW4gYW1vdW50LlxyXG4gKiBAcGFyYW0ge251bWJlcnwhTG9uZ30gbnVtQml0cyBOdW1iZXIgb2YgYml0c1xyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNoaWZ0ZWQgTG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0VW5zaWduZWQobnVtQml0cykge1xyXG4gICAgaWYgKGlzTG9uZyhudW1CaXRzKSlcclxuICAgICAgICBudW1CaXRzID0gbnVtQml0cy50b0ludCgpO1xyXG4gICAgbnVtQml0cyAmPSA2MztcclxuICAgIGlmIChudW1CaXRzID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGhpZ2ggPSB0aGlzLmhpZ2g7XHJcbiAgICAgICAgaWYgKG51bUJpdHMgPCAzMikge1xyXG4gICAgICAgICAgICB2YXIgbG93ID0gdGhpcy5sb3c7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tQml0cygobG93ID4+PiBudW1CaXRzKSB8IChoaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgaGlnaCA+Pj4gbnVtQml0cywgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChudW1CaXRzID09PSAzMilcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2gsIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKGhpZ2ggPj4+IChudW1CaXRzIC0gMzIpLCAwLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNocnUgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjc2hpZnRSaWdodFVuc2lnbmVkfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNocl91ID0gTG9uZ1Byb3RvdHlwZS5zaGlmdFJpZ2h0VW5zaWduZWQ7XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIHNpZ25lZC5cclxuICogQHJldHVybnMgeyFMb25nfSBTaWduZWQgbG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1NpZ25lZCA9IGZ1bmN0aW9uIHRvU2lnbmVkKCkge1xyXG4gICAgaWYgKCF0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIGZhbHNlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gdW5zaWduZWQuXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gVW5zaWduZWQgbG9uZ1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS50b1Vuc2lnbmVkID0gZnVuY3Rpb24gdG9VbnNpZ25lZCgpIHtcclxuICAgIGlmICh0aGlzLnVuc2lnbmVkKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93LCB0aGlzLmhpZ2gsIHRydWUpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHtib29sZWFuPX0gbGUgV2hldGhlciBsaXR0bGUgb3IgYmlnIGVuZGlhbiwgZGVmYXVsdHMgdG8gYmlnIGVuZGlhblxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCeXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKGxlKSB7XHJcbiAgICByZXR1cm4gbGUgPyB0aGlzLnRvQnl0ZXNMRSgpIDogdGhpcy50b0J5dGVzQkUoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGxpdHRsZSBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNMRSA9IGZ1bmN0aW9uIHRvQnl0ZXNMRSgpIHtcclxuICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBsbyAgICAgICAgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAgOCAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gMjQgICAgICAgLFxyXG4gICAgICAgIGhpICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGhpID4+PiAyNFxyXG4gICAgXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHJldHVybnMgeyFBcnJheS48bnVtYmVyPn0gQmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvQnl0ZXNCRSA9IGZ1bmN0aW9uIHRvQnl0ZXNCRSgpIHtcclxuICAgIHZhciBoaSA9IHRoaXMuaGlnaCxcclxuICAgICAgICBsbyA9IHRoaXMubG93O1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBoaSA+Pj4gMjQgICAgICAgLFxyXG4gICAgICAgIGhpID4+PiAxNiAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBoaSAgICAgICAgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgbG8gPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGxvICAgICAgICAmIDB4ZmZcclxuICAgIF07XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIExvbmcgZnJvbSBpdHMgYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHshQXJyYXkuPG51bWJlcj59IGJ5dGVzIEJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBsZSBXaGV0aGVyIGxpdHRsZSBvciBiaWcgZW5kaWFuLCBkZWZhdWx0cyB0byBiaWcgZW5kaWFuXHJcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CeXRlcyA9IGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcywgdW5zaWduZWQsIGxlKSB7XHJcbiAgICByZXR1cm4gbGUgPyBMb25nLmZyb21CeXRlc0xFKGJ5dGVzLCB1bnNpZ25lZCkgOiBMb25nLmZyb21CeXRlc0JFKGJ5dGVzLCB1bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIExvbmcgZnJvbSBpdHMgbGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgTGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90LCBkZWZhdWx0cyB0byBzaWduZWRcclxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJ5dGVzTEUgPSBmdW5jdGlvbiBmcm9tQnl0ZXNMRShieXRlcywgdW5zaWduZWQpIHtcclxuICAgIHJldHVybiBuZXcgTG9uZyhcclxuICAgICAgICBieXRlc1swXSAgICAgICB8XHJcbiAgICAgICAgYnl0ZXNbMV0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzJdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1szXSA8PCAyNCxcclxuICAgICAgICBieXRlc1s0XSAgICAgICB8XHJcbiAgICAgICAgYnl0ZXNbNV0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzZdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1s3XSA8PCAyNCxcclxuICAgICAgICB1bnNpZ25lZFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBiaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tQnl0ZXNCRSA9IGZ1bmN0aW9uIGZyb21CeXRlc0JFKGJ5dGVzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKFxyXG4gICAgICAgIGJ5dGVzWzRdIDw8IDI0IHxcclxuICAgICAgICBieXRlc1s1XSA8PCAxNiB8XHJcbiAgICAgICAgYnl0ZXNbNl0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzddLFxyXG4gICAgICAgIGJ5dGVzWzBdIDw8IDI0IHxcclxuICAgICAgICBieXRlc1sxXSA8PCAxNiB8XHJcbiAgICAgICAgYnl0ZXNbMl0gPDwgIDggfFxyXG4gICAgICAgIGJ5dGVzWzNdLFxyXG4gICAgICAgIHVuc2lnbmVkXHJcbiAgICApO1xyXG59O1xyXG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pOyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgQlNPTiBmcm9tICcuLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2Jzb24uY29tbW9uLmpzJztcblxuY29uc3QgYnNvbiA9IEJTT04uYnNvbjtcblxuY2xhc3MgQnNvbiB7XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIGEgSmF2YXNjcmlwdCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IFRoZSBKYXZhc2NyaXB0IG9iamVjdCB0byBzZXJpYWxpemUuXG4gICAgICogQHJldHVybiBUaGUgQnVmZmVyIG9iamVjdCBjb250YWluaW5nIHRoZSBzZXJpYWxpemVkIG9iamVjdC5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2VyaWFsaXplIChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJzb24uc2VyaWFsaXplKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzZXJpYWxpemUgZGF0YSBhcyBCU09OLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlciBUaGUgYnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgc2V0IG9mIEJTT04gZG9jdW1lbnRzLlxuICAgICAqIEByZXR1cm5zIFRoZSBkZXNlcmlhbGl6ZWQgSmF2YXNjcmlwdCBPYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIGRlc2VyaWFsaXplIChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJzb24uZGVzZXJpYWxpemUob2JqZWN0KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJzb24gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRnJhbWVUeXBlIH0gZnJvbSAnLi9lbnVtcy9GcmFtZVR5cGUuanMnO1xuaW1wb3J0ICB7IEJzb24gfSBmcm9tICcuLy4uL3V0aWwvQnNvbi5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsUGFja2V0XG4gKiBAcHJvcGVydHkge251bWJlcn0gRVhUUkFfUEFSQ0VMX0RBVEFfTEVOR1RIXG4gKiBAcHJvcGVydHkge251bWJlcn0gSEVBREVSX1NJWkVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBIRUFERVJfU0laRV9WMVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVOQ1JZUFRJT05fTUFTS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFNFUlZJQ0VfVFlQRV9DT05UUk9MXG4gKiBAcHJvcGVydHkge251bWJlcn0gU0VSVklDRV9UWVBFX1JQQ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IFNFUlZJQ0VfVFlQRV9QQ01cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTRVJWSUNFX1RZUEVfVklERU9cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTRVJWSUNFX1RZUEVfQlVMS19EQVRBXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19IRUFSVF9CRUFUXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX0FDS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUtcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX0VORF9TRVJWSUNFXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19FTkRfU0VSVklDRV9BQ0tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX0VORF9TRVJWSUNFX05BS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVF9BQ0tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRfTkFLXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19UUkFOU1BPUlRfRVZFTlRfVVBEQVRFXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19TRVJWSUNFX0RBVEFfQUNLXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19IRUFSVF9CRUFUX0FDS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fRklOQUxfQ09OTkVTQ1VUSVZFX0ZSQU1FXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19SRVNFUlZFRFxuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRWZXJzaW9uXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRFbmNyeXB0aW9uXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRTZXJ2aWNlVHlwZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0RnJhbWVJbmZvXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRTZXNzaW9uSURcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldE1lc3NhZ2VJRFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0RGF0YVNpemVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHNldFBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldFBheWxvYWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldEVuY3J5cHRpb25CaXRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldEZyYW1lVHlwZVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdG9VaW50OEFycmF5XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSB0b1N0cmluZ1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gY29uc3RydWN0UGFja2V0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBwdXRUYWdcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldFRhZ1xuICovXG5cbmNsYXNzIFNkbFBhY2tldCB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIC0gUHJvdG9jb2wgdmVyc2lvbiB0byB1c2VcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jcnlwdGlvbiAtIFdoZXRoZXIgb3Igbm90IHRoZSBwYXlsb2FkIGluIHRoaXMgcGFja2V0IGlzIGVuY3J5cHRlZFxuICAgICogQHBhcmFtIHtGcmFtZVR5cGV9IGZyYW1lVHlwZSAtIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgcGFja2V0IGZyYW1lIHR5cGVcbiAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIC0gVGhlIHNlcnZpY2UgdGhhdCB0aGlzIHBhY2tldCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcmFtZUluZm8gLSBTcGVjaWZpYyBmcmFtZSBpbmZvIHJlbGF0ZWQgdG8gdGhpcyBwYWNrZXRcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSUQgLSBJRCB0aGlzIHBhY2tldCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhU2l6ZSAtIFNpemUgb2YgdGhlIHBheWxvYWQgdGhhdCB3aWxsIGJlIGFkZGVkXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbWVzc2FnZUlEIC0gSUQgb2YgdGhpcyBzcGVjaWZpYyBwYWNrZXRcbiAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gcGF5bG9hZCAtIFJhdyBkYXRhIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgcGFja2V0IChSUEMgbWVzc2FnZSwgcmF3IGJ5dGVzLCBldGMpXG4gICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gICAgKiBAcGFyYW0ge051bWJlcn0gYnl0ZXNUb1dyaXRlXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAodmVyc2lvbiA9IDEsIGVuY3J5cHRpb24gPSBmYWxzZSwgZnJhbWVUeXBlID0gLTEsIHNlcnZpY2VUeXBlID0gLTEsIGZyYW1lSW5mbyA9IC0xLCBzZXNzaW9uSUQgPSAwLCBkYXRhU2l6ZSA9IDAsIG1lc3NhZ2VJRCA9IDAsIHBheWxvYWQgPSBudWxsLCBvZmZzZXQgPSAwLCBieXRlc1RvV3JpdGUgPSAwKSB7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9lbmNyeXB0aW9uID0gZW5jcnlwdGlvbjtcbiAgICAgICAgdGhpcy5fZnJhbWVUeXBlID0gZnJhbWVUeXBlO1xuICAgICAgICB0aGlzLl9zZXJ2aWNlVHlwZSA9IHNlcnZpY2VUeXBlO1xuICAgICAgICB0aGlzLl9mcmFtZUluZm8gPSBmcmFtZUluZm87XG4gICAgICAgIHRoaXMuX3Nlc3Npb25JRCA9IHNlc3Npb25JRDtcbiAgICAgICAgdGhpcy5fZGF0YVNpemUgPSBkYXRhU2l6ZTtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUlEID0gbWVzc2FnZUlEO1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLl9ieXRlc1RvV3JpdGUgPSBieXRlc1RvV3JpdGU7XG5cbiAgICAgICAgdGhpcy5fYnNvblBheWxvYWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHBheWxvYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSBuZXcgVWludDhBcnJheShwYXlsb2FkLnNsaWNlKG9mZnNldCwgYnl0ZXNUb1dyaXRlICsgb2Zmc2V0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBQcm90b2NvbCB2ZXJzaW9uIHVzZWQgYnkgdGhpcyBwYWNrZXRcbiAgICAqL1xuICAgIGdldFZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlIHBheWxvYWQgaW4gdGhpcyBwYWNrZXQgaXMgZW5jcnlwdGVkXG4gICAgKi9cbiAgICBnZXRFbmNyeXB0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY3J5cHRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTZXJ2aWNlVHlwZX0gLSBUaGUgc2VydmljZSB0aGF0IHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICovXG4gICAgZ2V0U2VydmljZVR5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZVR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gU3BlY2lmaWMgZnJhbWUgaW5mbyByZWxhdGVkIHRvIHRoaXMgcGFja2V0XG4gICAgKi9cbiAgICBnZXRGcmFtZUluZm8gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVJbmZvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfSAtIElEIHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICovXG4gICAgZ2V0U2Vzc2lvbklEICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25JRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBJRCBvZiB0aGlzIHNwZWNpZmljIHBhY2tldFxuICAgICovXG4gICAgZ2V0TWVzc2FnZUlEICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBTaXplIG9mIHRoZSBwYXlsb2FkIHRoYXQgd2lsbCBiZSBhZGRlZFxuICAgICovXG4gICAgZ2V0RGF0YVNpemUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHBheWxvYWRcbiAgICAqIEByZXR1cm4ge1NkbFBhY2tldH1cbiAgICAqL1xuICAgIHNldFBheWxvYWQgKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7VWludDhBcnJheX0gLSBSYXcgZGF0YSB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIHBhY2tldCAoUlBDIG1lc3NhZ2UsIHJhdyBieXRlcywgZXRjKVxuICAgICovXG4gICAgZ2V0UGF5bG9hZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXlsb2FkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY3J5cHRpb25cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gUmV0dXJucyBhIG51bWJlciByZXByZXNlbnRpbmcgYSBieXRlIG1hc2sgZGVwZW5kaW5nIG9uIHRoZSBib29sZWFuIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIGdldEVuY3J5cHRpb25CaXQgKGVuY3J5cHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGVuY3J5cHRpb24gPyBTZGxQYWNrZXQuRU5DUllQVElPTl9NQVNLIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ZyYW1lVHlwZX0gLSBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHBhY2tldCBmcmFtZSB0eXBlXG4gICAgKi9cbiAgICBnZXRGcmFtZVR5cGUgKCkge1xuICAgICAgICBpZiAoRnJhbWVUeXBlLmtleUZvclZhbHVlKHRoaXMuX2ZyYW1lVHlwZSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mcmFtZVR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRnJhbWVUeXBlLlNJTkdMRTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfSAtIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcGFja2V0XG4gICAgKi9cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICAgIGxldCBvdXRwdXQgPSAnKioqKiogU2RsIFBhY2tldCAqKioqKic7XG4gICAgICAgIG91dHB1dCArPSBgXFxuVmVyc2lvbjogJHt0aGlzLl92ZXJzaW9ufWA7XG4gICAgICAgIG91dHB1dCArPSBgXFxuRW5jcnlwdGlvbjogJHt0aGlzLl9lbmNyeXB0aW9ufWA7XG4gICAgICAgIG91dHB1dCArPSBgXFxuRnJhbWVUeXBlOiAke3RoaXMuX2ZyYW1lVHlwZX1gO1xuICAgICAgICBvdXRwdXQgKz0gYFxcblNlcnZpY2VUeXBlOiAke3RoaXMuX3NlcnZpY2VUeXBlfWA7XG4gICAgICAgIG91dHB1dCArPSBgXFxuRnJhbWVJbmZvOiAke3RoaXMuX2ZyYW1lSW5mb31gO1xuICAgICAgICBvdXRwdXQgKz0gYFxcblNlc3Npb25JRDogJHt0aGlzLl9zZXNzaW9uSUR9YDtcbiAgICAgICAgb3V0cHV0ICs9IGBcXG5EYXRhU2l6ZTogJHt0aGlzLl9kYXRhU2l6ZX1gO1xuXG4gICAgICAgIGlmICh0aGlzLl92ZXJzaW9uID4gMSkge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGBcXG5NZXNzYWdlSUQ6ICR7dGhpcy5fbWVzc2FnZUlEfWA7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQgKz0gJ1xcbioqKioqIFNkbCBQYWNrZXQgRW5kICoqKioqJztcblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBUaGlzIG1ldGhvZCB0YWtlcyBpbiB0aGUgdmFyaW91cyBjb21wb25lbnRzIHRvIHRoZSBTREwgcGFja2V0IHN0cnVjdHVyZSBhbmQgY3JlYXRlcyBhIG5ldyBieXRlIGFycmF5IHRoYXQgY2FuIGJlIHNlbnQgdmlhIHRoZSB0cmFuc3BvcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiAtIFByb3RvY29sIHZlcnNpb24gdG8gdXNlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmNyeXB0aW9uIC0gV2hldGhlciBvciBub3QgdGhlIHBheWxvYWQgaW4gdGhpcyBwYWNrZXQgaXMgZW5jcnlwdGVkXG4gICAgICogQHBhcmFtIHtGcmFtZVR5cGV9IGZyYW1lVHlwZSAtIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgcGFja2V0IGZyYW1lIHR5cGVcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSAtIFRoZSBzZXJ2aWNlIHRoYXQgdGhpcyBwYWNrZXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbnRyb2xGcmFtZUluZm8gLSBTcGVjaWZpYyBmcmFtZSBpbmZvIHJlbGF0ZWQgdG8gdGhpcyBwYWNrZXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklEIC0gSUQgdGhpcyBwYWNrZXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGFTaXplIC0gU2l6ZSBvZiB0aGUgcGF5bG9hZCB0aGF0IHdpbGwgYmUgYWRkZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWVzc2FnZUlEIC0gSUQgb2YgdGhpcyBzcGVjaWZpYyBwYWNrZXRcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHBheWxvYWQgLSBSYXcgZGF0YSB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIHBhY2tldCAoUlBDIG1lc3NhZ2UsIHJhdyBieXRlcywgZXRjKVxuXHQgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAtIEEgYnl0ZVtdIHJlcHJlc2VudGF0aW9uIG9mIGFuIFNkbFBhY2tldCBidWlsdCB1c2luZyB0aGUgc3VwcGxpZWQgcGFyYW1zXG5cdCAqL1xuICAgIHN0YXRpYyBjb25zdHJ1Y3RQYWNrZXQgKHZlcnNpb24sIGVuY3J5cHRpb24sIGZyYW1lVHlwZSwgc2VydmljZVR5cGUsIGNvbnRyb2xGcmFtZUluZm8sIHNlc3Npb25JRCwgZGF0YVNpemUsIG1lc3NhZ2VJRCwgcGF5bG9hZCkge1xuICAgICAgICBsZXQgZGF0YVZpZXcgPSBudWxsO1xuICAgICAgICBsZXQgZGF0YVZpZXdJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKHZlcnNpb24gPiAxKSB7XG4gICAgICAgICAgICBkYXRhVmlldyA9IG5ldyBVaW50OEFycmF5KFNkbFBhY2tldC5IRUFERVJfU0laRSArIGRhdGFTaXplKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoU2RsUGFja2V0LkhFQURFUl9TSVpFX1YxICsgZGF0YVNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9ICh2ZXJzaW9uIDw8IDQpICsgU2RsUGFja2V0LmdldEVuY3J5cHRpb25CaXQoZW5jcnlwdGlvbikgKyBmcmFtZVR5cGU7XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSBzZXJ2aWNlVHlwZTtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IGNvbnRyb2xGcmFtZUluZm87XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSBzZXNzaW9uSUQ7XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSAoZGF0YVNpemUgJiAweEZGMDAwMDAwKSA+PiAyNDtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IChkYXRhU2l6ZSAmIDB4MDBGRjAwMDApID4+IDE2O1xuICAgICAgICBkYXRhVmlld1tkYXRhVmlld0luZGV4KytdID0gKGRhdGFTaXplICYgMHgwMDAwRkYwMCkgPj4gODtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IGRhdGFTaXplICYgMHgwMDAwMDBGRjtcblxuICAgICAgICBpZiAodmVyc2lvbiA+IDEpIHtcbiAgICAgICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSAobWVzc2FnZUlEICYgMHhGRjAwMDAwMCkgPj4gMjQ7XG4gICAgICAgICAgICBkYXRhVmlld1tkYXRhVmlld0luZGV4KytdID0gKG1lc3NhZ2VJRCAmIDB4MDBGRjAwMDApID4+IDE2O1xuICAgICAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IChtZXNzYWdlSUQgJiAweDAwMDBGRjAwKSA+PiA4O1xuICAgICAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IG1lc3NhZ2VJRCAmIDB4MDAwMDAwRkY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF5bG9hZCAhPT0gbnVsbCAmJiBwYXlsb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldChwYXlsb2FkLCBkYXRhVmlld0luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhVmlldztcbiAgICB9XG5cbiAgICAvKipcblx0ICogVGhpcyBtZXRob2QgY29udmVydHMgYW4gU2RsUGFja2V0IGluc3RhbmNlIHRvIGEgbmV3IGJ5dGUgYXJyYXkgdGhhdCBjYW4gYmUgc2VudCB2aWEgdGhlIHRyYW5zcG9ydFxuXHQgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAtIEEgYnl0ZVtdIHJlcHJlc2VudGF0aW9uIG9mIGFuIFNkbFBhY2tldCBidWlsdCB1c2luZyB0aGUgc3VwcGxpZWQgcGFyYW1zXG5cdCAqL1xuICAgIHRvUGFja2V0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Jzb25QYXlsb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0gQnNvbi5zZXJpYWxpemUodGhpcy5fYnNvblBheWxvYWQpO1xuICAgICAgICAgICAgdGhpcy5fZGF0YVNpemUgPSB0aGlzLl9wYXlsb2FkLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTZGxQYWNrZXQuY29uc3RydWN0UGFja2V0KHRoaXMuX3ZlcnNpb24sIHRoaXMuX2VuY3J5cHRpb24sIHRoaXMuX2ZyYW1lVHlwZSwgdGhpcy5fc2VydmljZVR5cGUsIHRoaXMuX2ZyYW1lSW5mbywgdGhpcy5fc2Vzc2lvbklELCB0aGlzLl9kYXRhU2l6ZSwgdGhpcy5fbWVzc2FnZUlELCB0aGlzLl9wYXlsb2FkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFnIC0gU3RyaW5nIGtleSB0byBhZGQgYXMgYSBwcm9wZXJ0eSB0byB0aGUgQlNPTiBtYXBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIE9iamVjdCB0byBhZGQgYXMgYSB2YWx1ZSB0byB0aGUgQlNPTiBtYXBcbiAgICAgKi9cbiAgICBwdXRUYWcgKHRhZywgZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuX2Jzb25QYXlsb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl9ic29uUGF5bG9hZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Jzb25QYXlsb2FkW3RhZ10gPSBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0YWcgLSBTdHJpbmcga2V5IHRvIGFkZCBhcyBhIHByb3BlcnR5IHRvIHRoZSBCU09OIG1hcFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gZGF0YSAtIE9iamVjdCBhcyBhIHZhbHVlIGZvdW5kIGZyb20gdGhlIHRoZSBCU09OIG1hcFxuICAgICAqL1xuXG4gICAgZ2V0VGFnICh0YWcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ic29uUGF5bG9hZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXlsb2FkIHx8IHRoaXMuX3BheWxvYWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ic29uUGF5bG9hZCA9IEJzb24uZGVzZXJpYWxpemUodGhpcy5fcGF5bG9hZCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnNvblBheWxvYWRbdGFnXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ic29uUGF5bG9hZFt0YWddO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5TZGxQYWNrZXQuRVhUUkFfUEFSQ0VMX0RBVEFfTEVOR1RIICAgICAgICAgICAgICAgICAgICAgID0gMjQ7XG5TZGxQYWNrZXQuSEVBREVSX1NJWkUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMTI7XG5TZGxQYWNrZXQuSEVBREVSX1NJWkVfVjEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gODtcblxuU2RsUGFja2V0LkVOQ1JZUFRJT05fTUFTSyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDg7XG5cbi8qKlxuICogU2VydmljZSBUeXBlXG4gKi9cblNkbFBhY2tldC5TRVJWSUNFX1RZUEVfQ09OVFJPTCAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDAwO1xuLy8gUkVTRVJWRUQgMHgwMSAtIDB4MDZcblNkbFBhY2tldC5TRVJWSUNFX1RZUEVfUlBDICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA3O1xuLy8gUkVTRVJWRUQgMHgwOCAtIDB4MDlcblNkbFBhY2tldC5TRVJWSUNFX1RZUEVfUENNICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDBBO1xuU2RsUGFja2V0LlNFUlZJQ0VfVFlQRV9WSURFTyAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEI7XG4vLyBSRVNFUlZFRCAweDBDIC0gMHgwRVxuU2RsUGFja2V0LlNFUlZJQ0VfVFlQRV9CVUxLX0RBVEEgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEY7XG4vLyBSRVNFUlZFRCAweDEwIC0gMHhGRlxuXG4vKipcbiAqIEZyYW1lIEluZm9cbiAqL1xuU2RsUGFja2V0LkZSQU1FX0lORk9fSEVBUlRfQkVBVCAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDA7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFICAgICAgICAgICAgICAgICAgICAgID0gMHgwMTtcblNkbFBhY2tldC5GUkFNRV9JTkZPX1NUQVJUX1NFUlZJQ0VfQUNLICAgICAgICAgICAgICAgICAgPSAweDAyO1xuU2RsUGFja2V0LkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUsgICAgICAgICAgICAgICAgICA9IDB4MDM7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19FTkRfU0VSVklDRSAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwNDtcblNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFX0FDSyAgICAgICAgICAgICAgICAgICAgPSAweDA1O1xuU2RsUGFja2V0LkZSQU1FX0lORk9fRU5EX1NFUlZJQ0VfTkFLICAgICAgICAgICAgICAgICAgICA9IDB4MDY7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19SRUdJU1RFUl9TRUNPTkRBUllfVFJBTlNQT1JUICAgICAgID0gMHgwNztcblNkbFBhY2tldC5GUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRfQUNLICAgPSAweDA4O1xuU2RsUGFja2V0LkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVF9OQUsgICA9IDB4MDk7XG4vLyAweDBBLTB4RkMgYXJlIHJlc2VydmVkXG5TZGxQYWNrZXQuRlJBTUVfSU5GT19UUkFOU1BPUlRfRVZFTlRfVVBEQVRFICAgICAgICAgICAgID0gMHhGRDtcblNkbFBhY2tldC5GUkFNRV9JTkZPX1NFUlZJQ0VfREFUQV9BQ0sgICAgICAgICAgICAgICAgICAgPSAweEZFO1xuU2RsUGFja2V0LkZSQU1FX0lORk9fSEVBUlRfQkVBVF9BQ0sgICAgICAgICAgICAgICAgICAgICA9IDB4RkY7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19GSU5BTF9DT05ORVNDVVRJVkVfRlJBTUUgICAgICAgICAgID0gMHgwMDtcblNkbFBhY2tldC5GUkFNRV9JTkZPX1JFU0VSVkVEICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDAwO1xuXG5leHBvcnQgeyBTZGxQYWNrZXQgfTtcbiIsImV4cG9ydCBkZWZhdWx0ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6XG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pO1xuIiwiXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxudmFyIGluaXRlZCA9IGZhbHNlO1xuZnVuY3Rpb24gaW5pdCAoKSB7XG4gIGluaXRlZCA9IHRydWU7XG4gIHZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgbG9va3VwW2ldID0gY29kZVtpXVxuICAgIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxuICB9XG5cbiAgcmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG4gIHJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICBpZiAoIWluaXRlZCkge1xuICAgIGluaXQoKTtcbiAgfVxuICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG4gIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcbiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuICBwbGFjZUhvbGRlcnMgPSBiNjRbbGVuIC0gMl0gPT09ICc9JyA/IDIgOiBiNjRbbGVuIC0gMV0gPT09ICc9JyA/IDEgOiAwXG5cbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIGFyciA9IG5ldyBBcnIobGVuICogMyAvIDQgLSBwbGFjZUhvbGRlcnMpXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICBsID0gcGxhY2VIb2xkZXJzID4gMCA/IGxlbiAtIDQgOiBsZW5cblxuICB2YXIgTCA9IDBcblxuICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGw7IGkgKz0gNCwgaiArPSAzKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkZcbiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHtcbiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKyBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgaWYgKCFpbml0ZWQpIHtcbiAgICBpbml0KCk7XG4gIH1cbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiXG5leHBvcnQgZnVuY3Rpb24gcmVhZCAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZSAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5leHBvcnQgZGVmYXVsdCBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cblxuaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gJy4vYmFzZTY0J1xuaW1wb3J0ICogYXMgaWVlZTc1NCBmcm9tICcuL2llZWU3NTQnXG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXknXG5cbmV4cG9ydCB2YXIgSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHRydWVcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xudmFyIF9rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5leHBvcnQge19rTWF4TGVuZ3RoIGFzIGtNYXhMZW5ndGh9O1xuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICByZXR1cm4gdHJ1ZTtcbiAgLy8gcm9sbHVwIGlzc3Vlc1xuICAvLyB0cnkge1xuICAvLyAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAvLyAgIGFyci5fX3Byb3RvX18gPSB7XG4gIC8vICAgICBfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLFxuICAvLyAgICAgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gIC8vICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gIC8vICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIC8vIH0gY2F0Y2ggKGUpIHtcbiAgLy8gICByZXR1cm4gZmFsc2VcbiAgLy8gfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgIC8vICAgdmFsdWU6IG51bGwsXG4gICAgLy8gICBjb25maWd1cmFibGU6IHRydWVcbiAgICAvLyB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChpbnRlcm5hbElzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuQnVmZmVyLmlzQnVmZmVyID0gaXNCdWZmZXI7XG5mdW5jdGlvbiBpbnRlcm5hbElzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYSkgfHwgIWludGVybmFsSXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghaW50ZXJuYWxJc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBJTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBpbnRlcm5hbElzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG5cbi8vIHRoZSBmb2xsb3dpbmcgaXMgZnJvbSBpcy1idWZmZXIsIGFsc28gYnkgRmVyb3NzIEFib3VraGFkaWplaCBhbmQgd2l0aCBzYW1lIGxpc2VuY2Vcbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmICghIW9iai5faXNCdWZmZXIgfHwgaXNGYXN0QnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikpXG59XG5cbmZ1bmN0aW9uIGlzRmFzdEJ1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzRmFzdEJ1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCJjbGFzcyBUZXh0RW5jb2RlciB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RleHRFbmNvZGVyI1BvbHlmaWxsXG4gICAgc3RhdGljIGVuY29kZSAoc3RyKSB7XG4gICAgICAgIGNvbnN0IExlbiA9IHN0ci5sZW5ndGg7XG4gICAgICAgIGxldCByZXNQb3MgPSAtMTtcbiAgICAgICAgLy8gVGhlIFVpbnQ4QXJyYXkncyBsZW5ndGggbXVzdCBiZSBhdCBsZWFzdCAzeCB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgYmVjYXVzZSBhbiBpbnZhbGlkIFVURi0xNlxuICAgICAgICAvLyAgdGFrZXMgdXAgdGhlIGVxdWl2ZWxlbnQgc3BhY2Ugb2YgMyBVVEYtOCBjaGFyYWN0ZXJzIHRvIGVuY29kZSBpdCBwcm9wZXJseS4gSG93ZXZlciwgQXJyYXknc1xuICAgICAgICAvLyAgaGF2ZSBhbiBhdXRvIGV4cGFuZGluZyBsZW5ndGggYW5kIDEuNXggc2hvdWxkIGJlIGp1c3QgdGhlIHJpZ2h0IGJhbGFuY2UgZm9yIG1vc3QgdXNlcy5cbiAgICAgICAgY29uc3QgcmVzQXJyID0gW107XG4gICAgICAgIGZvciAobGV0IHBvaW50ID0gMCwgbmV4dGNvZGUgPSAwLCBpZHggPSAwOyBpZHggIT09IExlbjspIHtcbiAgICAgICAgICAgIHBvaW50ID0gc3RyLmNoYXJDb2RlQXQoaWR4KSwgaWR4ICs9IDE7XG4gICAgICAgICAgICBpZiAocG9pbnQgPj0gMHhEODAwICYmIHBvaW50IDw9IDB4REJGRikge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPT09IExlbikge1xuICAgICAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gMHhlZjsgXG4gICAgICAgICAgICAgICAgICAgIHJlc0FycltyZXNQb3MgKz0gMV0gPSAweGJmO1xuICAgICAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gMHhiZDsgXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICAgICAgICAgICAgICBuZXh0Y29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCk7XG4gICAgICAgICAgICAgICAgaWYgKG5leHRjb2RlID49IDB4REMwMCAmJiBuZXh0Y29kZSA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQgPSAoKHBvaW50IC0gMHhEODAwKSAqIDB4NDAwKSArIG5leHRjb2RlIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludCA+IDB4ZmZmZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzQXJyW3Jlc1BvcyArPSAxXSA9ICgweDFlIDw8IDMpIHwgKHBvaW50ID4+PiAxOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gKDB4MiA8PCA2KSB8ICgocG9pbnQgPj4+IDEyKSAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzQXJyW3Jlc1BvcyArPSAxXSA9ICgweDIgPDwgNikgfCAoKHBvaW50ID4+PiA2KSAmIDB4M2YpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzQXJyW3Jlc1BvcyArPSAxXSA9ICgweDIgPDwgNikgfCAocG9pbnQgJiAweDNmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzQXJyW3Jlc1BvcyArPSAxXSA9IDB4ZWY7IHJlc0FycltyZXNQb3MgKz0gMV0gPSAweGJmO1xuICAgICAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gMHhiZDsgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvaW50IDw9IDB4MDA3Zikge1xuICAgICAgICAgICAgICAgIHJlc0FycltyZXNQb3MgKz0gMV0gPSAoMHgwIDw8IDcpIHwgcG9pbnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50IDw9IDB4MDdmZikge1xuICAgICAgICAgICAgICAgIHJlc0FycltyZXNQb3MgKz0gMV0gPSAoMHg2IDw8IDUpIHwgKHBvaW50ID4+PiA2KTtcbiAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gKDB4MiA8PCA2KSB8IChwb2ludCAmIDB4M2YpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gKDB4ZSA8PCA0KSB8IChwb2ludCA+Pj4gMTIpO1xuICAgICAgICAgICAgICAgIHJlc0FycltyZXNQb3MgKz0gMV0gPSAoMHgyIDw8IDYpIHwgKChwb2ludCA+Pj4gNikgJiAweDNmKTtcbiAgICAgICAgICAgICAgICByZXNBcnJbcmVzUG9zICs9IDFdID0gKDB4MiA8PCA2KSB8IChwb2ludCAmIDB4M2YpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGVsc2UgLy8gSUUgNi05XG4gICAgICAgIHJlc0Fyci5sZW5ndGggPSByZXNQb3MgKyAxOyAvLyB0cmltIG9mZiBleHRyYSB3ZWlnaHRcbiAgICAgICAgcmV0dXJuIHJlc0FycjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRleHRFbmNvZGVyIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFRleHRFbmNvZGVyIH0gZnJvbSAnLi9UZXh0RW5jb2Rlci5qcyc7XG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ycGMvUnBjU3RydWN0LmpzJztcblxuY2xhc3MgSnNvblJwY01hcnNoYWxsZXIge1xuICAgIC8qKlxuICAgICAqIFRha2VzIGFuIFJQQyBtZXNzYWdlIGFuZCBjb252ZXJ0cyBpdFxuICAgICAqIGludG8gYSBieXRlIGFycmF5IHRoYXQgY2FuIGJlIGFkZGVkXG4gICAgICogYXMgcGFydCBvZiB0aGUgU2RsUGFja2V0LlxuICAgICAqIEBwYXJhbSB7UnBjU3RydWN0fSBycGNTdHJ1Y3QgLSBUaGlzIHBhcmFtIGNvbnRhaW5zIHRoZSBqc29uIG9iamVjdCB0byB0cmFuc2Zvcm1cbiAgICAgKiBiYXNlZCBvbiB0aGUgZ2V0UGFyYW1ldGVycyBtZXRob2QuIFRoaXMgY2FuIGJlIGFuIFJwY1N0cnVjdCBvciBzb21ldGhpbmcgbGlrZSBScGNNZXNzYWdlXG4gICAgICogd2hpY2ggZXh0ZW5kcyBScGNTdHJ1Y3QuXG4gICAgICogQHJldHVybnMge251bGx8VWludDhBcnJheX0gLSBFaXRoZXIgdGhlIGJ5dGUgYXJyYXkgb3IgbnVsbCBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBzdGF0aWMgbWFyc2hhbGwgKHJwY1N0cnVjdCkge1xuICAgICAgICBsZXQganNvbkJ5dGVzID0gbnVsbDtcbiAgICAgICAgZnVuY3Rpb24gcGFyYW1pZnkgKHJwY1N0cnVjdCkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gcnBjU3RydWN0LmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXNba2V5XSBpbnN0YW5jZW9mIFJwY1N0cnVjdCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IHBhcmFtaWZ5KHBhcmFtc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGpzb25PYmplY3QgPSBwYXJhbWlmeShycGNTdHJ1Y3QpO1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5nVmVyc2lvbiA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmplY3QpO1xuICAgICAgICAgICAganNvbkJ5dGVzID0gdGhpcy5fZW5jb2RlKHN0cmluZ1ZlcnNpb24pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGVuY29kZSBtZXNzYWdlcyB0byBKU09OLicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbkJ5dGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2VzIGEgYnl0ZSBhcnJheSBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGEganNvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBieXRlcyAtIEJ5dGUgYXJyYXkgY29udGFpbmluZyB0aGUganNvbiBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVsbHxPYmplY3R9IC0gRWl0aGVyIGEganNvbiBvYmplY3Qgb3IgbnVsbCBvbiBlcnJvciBpbiBwYXJzaW5nLlxuICAgICAqL1xuICAgIHN0YXRpYyB1bm1hcnNoYWxsIChieXRlcykge1xuICAgICAgICBsZXQgcmV0ID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSB0aGlzLl9kZWNvZGUoYnl0ZXMpO1xuICAgICAgICAgICAgcmV0ID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBKU09OJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIGEgc3RyaW5nIGludG8gYSBieXRlIGFycmF5LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgLSBTdHJpbmcgdG8gdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc3RhdGljIF9lbmNvZGUgKHN0cikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoVGV4dEVuY29kZXIuZW5jb2RlKHN0cikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIGJ5dGUgYXJyYXkgaW50byBhIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ5dGVzIC0gQnl0ZSBhcnJheSB0byB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHN0YXRpYyBfZGVjb2RlIChieXRlcykge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYnl0ZXMpLnRvU3RyaW5nKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBKc29uUnBjTWFyc2hhbGxlciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG4vKipcbiAqIENvbnRhaW5zIHRoZSByYXcganNvbiBkYXRhIGFuZCBidWxrIGRhdGEgZm9yIGFuIFJQQyByZXF1ZXN0L3Jlc3BvbnNlIGFsb25nIHdpdGggdGhlIGJhc2ljIGhlYWRlciBpbmZvXG4gKiBycGMgdHlwZSwgZnVuY3Rpb24gaWQsIGFuZCBjb3JyZWxhdGlvbiBpZC5cbiAqXG4gKiBUaGlzIGNsYXNzIGNhbiBwYXJzZSBpbmNvbWluZyBkYXRhIGZyb20gc2RsIGNvcmUgYW5kIGFzc2VtYmxlIGEgYmluYXJ5IGhlYWRlciB0byBzZW5kIHRvIHNkbCBjb3JlLlxuICpcbiAqXG4gKiAgQHByaXZhdGUge251bWJlcn0gX3JwY1R5cGUgLSBSZXF1ZXN0ID0gMCwgUmVzcG9uc2UgPSAxLCBOb3RpZmljYXRpb24gPSAyLlxuICogIEBwcml2YXRlIHtudW1iZXJ9IF9mdW5jdGlvbklkIC0gTWF0Y2hlcyBhIGZ1bmN0aW9uIElkIGluIHRoZSBtb2JpbGUgYXBpIHNwZWMgaHR0cHM6Ly9naXRodWIuY29tL3NtYXJ0ZGV2aWNlbGluay9ycGNfc3BlYy9ibG9iL21hc3Rlci9NT0JJTEVfQVBJLnhtbFxuICogIEBwcml2YXRlIHtudW1iZXJ9IF9jb3JyZWxhdGlvbklkIC0gRm9yIGEgcmVxdWVzdCB0aGlzIGlkIGlzIHByb3ZpZGVkIGFuZCB0aGUgbWF0Y2hpbmcgcmVzcG9uc2Ugd2lsbCBoYXZlIHRoaXMgc2FtZSBpZC5cbiAqICBAcHJpdmF0ZSB7bnVtYmVyfSBfanNvblNpemUgLSBTaXplIG9mIGpzb24uXG4gKiAgQHByaXZhdGUge1VpbnQ4QXJyYXl9IF9qc29uRGF0YSAtIFJhdyBqc29uIGRhdGEuIFRoaXMgY2FuIGJlIHBhcnNlZCB1c2luZyB0aGUgSnNvblJwY01hcnNoYWxsZXIuXG4gKiAgQHByaXZhdGUge1VpbnQ4QXJyYXl9IF9idWxrRGF0YSAtIEJ1bGsgZGF0YSAob3B0aW9uYWwpLiBJZiBzb21ldGhpbmcgY2Fubm90IGJlIGV4cHJlc3NlZCBhcyBhIGpzb24gb2JqZWN0IGl0IHdpbGwgYmUgaW4gdGhlIGJ1bGsgZGF0YSAoZWcgUHV0RmlsZS9HZXRGaWxlIGhhcyB0aGUgZnVsbCBmaWxlIGluIGJ1bGsgZGF0YS4pXG4gKi9cbmNsYXNzIEJpbmFyeUZyYW1lSGVhZGVyIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBycGNUeXBlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZ1bmN0aW9uSWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29ycmVsYXRpb25JZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBqc29uU2l6ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChycGNUeXBlLCBmdW5jdGlvbklkLCBjb3JyZWxhdGlvbklkLCBqc29uU2l6ZSkge1xuICAgICAgICB0aGlzLl9ycGNUeXBlID0gcnBjVHlwZTtcbiAgICAgICAgdGhpcy5fZnVuY3Rpb25JZCA9IGZ1bmN0aW9uSWQ7XG4gICAgICAgIHRoaXMuX2NvcnJlbGF0aW9uSWQgPSBjb3JyZWxhdGlvbklkO1xuICAgICAgICB0aGlzLl9qc29uU2l6ZSA9IGpzb25TaXplO1xuICAgICAgICB0aGlzLl9idWxrRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2pzb25EYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGJ5dGUgYXJyYXkgd2l0aCB1aW50OCB2YWx1ZXMsIGEgQmluYXJ5RnJhbWVIZWFkZXIgaW5zdGFuY2UgaXMgY3JlYXRlZC5cbiAgICAgKiBAcGFyYW0ge2FycmF5fSBiaW5hcnlGcmFtZUhlYWRlckRhdGEgLSBCeXRlIGFycmF5IGNvbnRhaW5pbmcgYmFzaWMgaW5mb3JtYXRpb24gb24gdGhlIGZyYW1lcyB0eXBlLCBsZW5ndGgsIGFuZCByZWxhdGVkIGlkcy5cbiAgICAgKiBAcmV0dXJucyB7QmluYXJ5RnJhbWVIZWFkZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGZyb21CaW5hcnlIZWFkZXIgKGJpbmFyeUZyYW1lSGVhZGVyRGF0YSkge1xuICAgICAgICBjb25zdCBycGNUeXBlID0gYmluYXJ5RnJhbWVIZWFkZXJEYXRhWzBdID4+IDQ7XG5cbiAgICAgICAgbGV0IGZ1bmN0aW9uSWQgPSAoYmluYXJ5RnJhbWVIZWFkZXJEYXRhWzBdICYgMHgwRikgPDwgMjQ7XG4gICAgICAgIGZ1bmN0aW9uSWQgKz0gKGJpbmFyeUZyYW1lSGVhZGVyRGF0YVsxXSAmIDB4RkYpIDw8IDE2O1xuICAgICAgICBmdW5jdGlvbklkICs9IChiaW5hcnlGcmFtZUhlYWRlckRhdGFbMl0gJiAweEZGKSA8PCA4O1xuICAgICAgICBmdW5jdGlvbklkICs9IGJpbmFyeUZyYW1lSGVhZGVyRGF0YVszXSAmIDB4RkY7XG5cbiAgICAgICAgbGV0IGNvcnJlbGF0aW9uSWQgPSAoYmluYXJ5RnJhbWVIZWFkZXJEYXRhWzRdICYgMHhGRikgPDwgMjQ7XG4gICAgICAgIGNvcnJlbGF0aW9uSWQgKz0gKGJpbmFyeUZyYW1lSGVhZGVyRGF0YVs1XSAmIDB4RkYpIDw8IDE2O1xuICAgICAgICBjb3JyZWxhdGlvbklkICs9IChiaW5hcnlGcmFtZUhlYWRlckRhdGFbNl0gJiAweEZGKSA8PCA4O1xuICAgICAgICBjb3JyZWxhdGlvbklkICs9IGJpbmFyeUZyYW1lSGVhZGVyRGF0YVs3XSAmIDB4RkY7XG5cbiAgICAgICAgbGV0IGpzb25TaXplID0gKGJpbmFyeUZyYW1lSGVhZGVyRGF0YVs4XSAmIDB4RkYpIDw8IDI0O1xuICAgICAgICBqc29uU2l6ZSArPSAoYmluYXJ5RnJhbWVIZWFkZXJEYXRhWzldICYgMHhGRikgPDwgMTY7XG4gICAgICAgIGpzb25TaXplICs9IChiaW5hcnlGcmFtZUhlYWRlckRhdGFbMTBdICYgMHhGRikgPDwgODtcbiAgICAgICAganNvblNpemUgKz0gYmluYXJ5RnJhbWVIZWFkZXJEYXRhWzExXSAmIDB4RkY7XG5cbiAgICAgICAgY29uc3QgYmluYXJ5RnJhbWVIZWFkZXIgPSBuZXcgQmluYXJ5RnJhbWVIZWFkZXIocnBjVHlwZSwgZnVuY3Rpb25JZCwgY29ycmVsYXRpb25JZCwganNvblNpemUpO1xuXG4gICAgICAgIGNvbnN0IGpzb25EYXRhU3RhcnQgPSBCaW5hcnlGcmFtZUhlYWRlci5IRUFERVJfU0laRTtcbiAgICAgICAgY29uc3QganNvbkRhdGFFbmQgPSBCaW5hcnlGcmFtZUhlYWRlci5IRUFERVJfU0laRSArIGpzb25TaXplO1xuXG4gICAgICAgIGJpbmFyeUZyYW1lSGVhZGVyLnNldEpzb25EYXRhKGJpbmFyeUZyYW1lSGVhZGVyRGF0YS5zbGljZShqc29uRGF0YVN0YXJ0LCBqc29uRGF0YUVuZCkpO1xuXG4gICAgICAgIC8vIGFueSBkYXRhIGFmdGVyIHRoZSBKU09OIGRhdGEgaXMgdGhlIGJ1bGsgZGF0YSAoZWcgUHV0RmlsZSBjb250YWlucyB0aGUgZmlsZSBhZnRlciB0aGUgbWFpbiBqc29uKVxuICAgICAgICBpZiAoYmluYXJ5RnJhbWVIZWFkZXJEYXRhLmxlbmd0aCA+IGpzb25EYXRhRW5kKSB7XG4gICAgICAgICAgICBjb25zdCBidWxrRGF0YSA9IGJpbmFyeUZyYW1lSGVhZGVyRGF0YS5zbGljZShqc29uRGF0YUVuZCk7XG4gICAgICAgICAgICBiaW5hcnlGcmFtZUhlYWRlci5zZXRCdWxrRGF0YShidWxrRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJpbmFyeUZyYW1lSGVhZGVyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQXNzZW1ibGVzIGJpbmFyeSBoZWFkZXIgZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9XG4gICAgICovXG4gICAgYXNzZW1ibGVIZWFkZXJCeXRlcyAoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IFtdO1xuICAgICAgICBjb25zdCBmdW5jdGlvbklkID0gdGhpcy5fZnVuY3Rpb25JZDtcbiAgICAgICAgY29uc3QgY29ycmVsYXRpb25JZCA9IHRoaXMuX2NvcnJlbGF0aW9uSWQ7XG4gICAgICAgIGNvbnN0IHJwY1R5cGUgPSB0aGlzLl9ycGNUeXBlO1xuXG4gICAgICAgIGJ1ZmZlci5wdXNoKChmdW5jdGlvbklkICYgMHgwRjAwMDAwMCkgPj4gMjQpICsgKHJwY1R5cGUgPDwgNCk7XG4gICAgICAgIGJ1ZmZlci5wdXNoKChmdW5jdGlvbklkICYgMHgwMEZGMDAwMCkgPj4gMTYpO1xuICAgICAgICBidWZmZXIucHVzaCgoZnVuY3Rpb25JZCAmIDB4MDAwMEZGMDApID4+IDgpO1xuICAgICAgICBidWZmZXIucHVzaChmdW5jdGlvbklkICYgMHgwMDAwMDBGRik7XG5cbiAgICAgICAgYnVmZmVyLnB1c2goKGNvcnJlbGF0aW9uSWQgJiAweEZGMDAwMDAwKSA+PiAyNCk7XG4gICAgICAgIGJ1ZmZlci5wdXNoKChjb3JyZWxhdGlvbklkICYgMHgwMEZGMDAwMCkgPj4gMTYpO1xuICAgICAgICBidWZmZXIucHVzaCgoY29ycmVsYXRpb25JZCAmIDB4MDAwMEZGMDApID4+IDgpO1xuICAgICAgICBidWZmZXIucHVzaChjb3JyZWxhdGlvbklkICYgMHgwMDAwMDBGRik7XG5cbiAgICAgICAgY29uc3QganNvblNpemUgPSB0aGlzLl9qc29uU2l6ZTtcbiAgICAgICAgYnVmZmVyLnB1c2goKGpzb25TaXplICYgMHhGRjAwMDAwMCkgPj4gMjQpO1xuICAgICAgICBidWZmZXIucHVzaCgoanNvblNpemUgJiAweDAwRkYwMDAwKSA+PiAxNik7XG4gICAgICAgIGJ1ZmZlci5wdXNoKChqc29uU2l6ZSAmIDB4MDAwMEZGMDApID4+IDgpO1xuICAgICAgICBidWZmZXIucHVzaChqc29uU2l6ZSAmIDB4MDAwMDAwRkYpO1xuXG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcnBjIHR5cGUgb2YgdGhlIGJpbmFyeSBoZWFkZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAgICAgKiBAcmV0dXJucyB7QmluYXJ5RnJhbWVIZWFkZXJ9XG4gICAgICovXG4gICAgc2V0UnBjVHlwZSAodHlwZSkge1xuICAgICAgICB0aGlzLl9ycGNUeXBlID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcnBjIHR5cGUgb2YgdGhlIGJpbmFyeSBoZWFkZXJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldFJwY1R5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnBjVHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmdW5jdGlvbiBpZCBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICAgKiBAcmV0dXJucyB7QmluYXJ5RnJhbWVIZWFkZXJ9XG4gICAgICovXG4gICAgc2V0RnVuY3Rpb25JZCAoaWQpIHtcbiAgICAgICAgdGhpcy5fZnVuY3Rpb25JZCA9IGlkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmdW5jdGlvbiBJZCBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldEZ1bmN0aW9uSWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnVuY3Rpb25JZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjb3JyZWxhdGlvbiBJZCBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICAgKiBAcmV0dXJucyB7QmluYXJ5RnJhbWVIZWFkZXJ9XG4gICAgICovXG4gICAgc2V0Q29ycmVsYXRpb25JZCAoaWQpIHtcbiAgICAgICAgdGhpcy5fY29ycmVsYXRpb25JZCA9IGlkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb3JyZWxhdGlvbiBJZCBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKi9cbiAgICBnZXRDb3JyZWxhdGlvbklkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcnJlbGF0aW9uSWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUganNvbiBzaXplIG9mIHRoZSBiaW5hcnkgaGVhZGVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAgICogQHJldHVybnMge0JpbmFyeUZyYW1lSGVhZGVyfVxuICAgICAqL1xuICAgIHNldEpzb25TaXplIChzaXplKSB7XG4gICAgICAgIHRoaXMuX2pzb25TaXplID0gc2l6ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VzdCB0aGUganNvbiBzaXplIG9mIHRoZSBiaW5hcnkgaGVhZGVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0SnNvblNpemUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fanNvblNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUganNvbiBkYXRhIGFzIGEgYnl0ZSBhcnJheS5cbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9IC0gQnl0ZSBhcnJheSBvZiBqc29uIGRhdGEuXG4gICAgICovXG4gICAgZ2V0SnNvbkRhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fanNvbkRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUganNvbiBkYXRhIG9mIHRoZSBiaW5hcnkgaGVhZGVyLlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGRhdGEgLSBCeXRlIGFycmF5IG9mIGpzb24gZGF0YVxuICAgICAqIEByZXR1cm5zIHtCaW5hcnlGcmFtZUhlYWRlcn1cbiAgICAgKi9cbiAgICBzZXRKc29uRGF0YSAoZGF0YSkge1xuICAgICAgICB0aGlzLl9qc29uRGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGJ1bGsgZGF0YSBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKiBTdXBwb3J0ZWQgYnkgcHJvdGNvbCAyIGFuZCB1cC5cbiAgICAgKiBAcGFyYW0ge2FycmF5fSBkYXRhIC0gQnl0ZSBhcnJheSBvZiBidWxrIGRhdGFcbiAgICAgKi9cbiAgICBzZXRCdWxrRGF0YSAoZGF0YSkge1xuICAgICAgICB0aGlzLl9idWxrRGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGJ1bGsgZGF0YSBvZiB0aGUgYmluYXJ5IGhlYWRlci5cbiAgICAgKiBTdXBwb3J0ZWQgYnkgcHJvdGNvbCAyIGFuZCB1cC5cbiAgICAgKiBAcmV0dXJucyB7YXJyYXl9IC0gQnl0ZSBhcnJheSBvZiBidWxrIGRhdGFcbiAgICAgKi9cbiAgICBnZXRCdWxrRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWxrRGF0YTtcbiAgICB9XG59XG5cbkJpbmFyeUZyYW1lSGVhZGVyLkhFQURFUl9TSVpFID0gMTI7XG5cbmV4cG9ydCB7IEJpbmFyeUZyYW1lSGVhZGVyIH07XG5cblxuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5pbXBvcnQgeyBGcmFtZVR5cGUgfSBmcm9tICcuL2VudW1zL0ZyYW1lVHlwZS5qcyc7XG5pbXBvcnQgeyBTZGxQYWNrZXQgfSBmcm9tICcuL1NkbFBhY2tldC5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi8uLi9ycGMvZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5pbXBvcnQgeyBKc29uUnBjTWFyc2hhbGxlciB9IGZyb20gJy4vLi4vdXRpbC9Kc29uUnBjTWFyc2hhbGxlci5qcyc7XG5pbXBvcnQgeyBCaW5hcnlGcmFtZUhlYWRlciB9IGZyb20gJy4vQmluYXJ5RnJhbWVIZWFkZXIuanMnO1xuXG5cbi8qKlxuICogVGFrZXMgYW4gcnBjIG1lc3NhZ2UgYW5kIGNvbnZlcnRzIGl0IGludG8gcGFja2V0cyByZWFkeSB0byBzZW5kLlxuICovXG5jbGFzcyBNZXNzYWdlRnJhbWVEaXNhc3NlbWJsZXIge1xuICAgIC8qKlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge1JwY1JlcXVlc3R9IHJwY1JlcXVlc3QgLSBSUEMgbWVzc2FnZSB0aGF0IHdpbGwgc3BsaXQgaW50byBzbWFsbGVyIHNkbCBwYWNrZXRzLlxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklkIC0gc2Vzc2lvbklkIGZvciBwYWNrZXRzXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtZXNzYWdlSWQgLSBtZXNzYWdlSWQgZm9yIHBhY2tldHMuXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtdHUgLSBtYXggdHJhbnNwb3J0IHVuaXQsIHVzZWQgdG8gZGV0ZXJtaW5lIHBhY2tldCBzaXplIHRvIHNlbmQuXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIC0gbWFqb3IgdmVyc2lvblxuICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRW5jcnlwdGVkIC0gcGFja2V0IGlzIGVuY3J5cHRlZFxuICAgICAgKiBAcGFyYW0ge2NifSBwYWNrZXRDYWxsYmFjayAtIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiBhIHBhY2tldCBpcyByZWFkeSB0byBzZW5kLlxuICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICovXG4gICAgY29uc3RydWN0b3IgKHJwY1JlcXVlc3QsIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBtdHUsIHZlcnNpb24sIGlzRW5jcnlwdGVkLCBwYWNrZXRDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gcnBjUmVxdWVzdDtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgICAgICB0aGlzLl9tZXNzYWdlSWQgPSBtZXNzYWdlSWQ7XG4gICAgICAgIHRoaXMuX2lzRW5jcnlwdGVkID0gaXNFbmNyeXB0ZWQ7XG5cbiAgICAgICAgaWYgKCFtdHUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTVRVIG11c3QgYmUgc3BlY2lmaWVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX210dSA9IG10dTtcblxuICAgICAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVmVyc2lvbiBtdXN0IGJlIHNwZWNpZmllZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5fcGFja2V0Q2FsbGJhY2sgPSBwYWNrZXRDYWxsYmFjaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgICogSW1tZWRpYXRlbHkgYnVpbGQgcnBjIGFuZCByZXNwb25kIHRvIHBhY2tldGNhbGxiYWNrIHdpdGggcGFja2V0cyB0byBzZW5kLlxuICAgICAgKiBAcGFyYW0ge1JwY1JlcXVlc3R9IHJwY01lc3NhZ2UgLSBSUEMgbWVzc2FnZSB0aGF0IHdpbGwgc3BsaXQgaW50byBzbWFsbGVyIHNkbCBwYWNrZXRzLlxuICAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklkIC0gc2Vzc2lvbklkIGZvciBwYWNrZXRzXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtZXNzYWdlSWQgLSBtZXNzYWdlSWQgZm9yIHBhY2tldHMuXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtdHUgLSBtYXggdHJhbnNwb3J0IHVuaXQsIHVzZWQgdG8gZGV0ZXJtaW5lIHBhY2tldCBzaXplIHRvIHNlbmQuXG4gICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIC0gbWFqb3IgdmVyc2lvblxuICAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRW5jcnlwdGVkIC0gcGFja2V0IGlzIGVuY3J5cHRlZFxuICAgICAgKiBAcGFyYW0ge2NifSBwYWNrZXRDYWxsYmFjayAtIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiBhIHBhY2tldCBpcyByZWFkeSB0byBzZW5kLlxuICAgICAgKi9cbiAgICBzdGF0aWMgYnVpbGRSUEMgKHJwY1JlcXVlc3QsIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBtdHUsIHZlcnNpb24sIGlzRW5jcnlwdGVkLCBjYikge1xuICAgICAgICBjb25zdCBvYmogPSBuZXcgTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyKHJwY1JlcXVlc3QsIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBtdHUsIHZlcnNpb24sIGlzRW5jcnlwdGVkLCBjYik7XG4gICAgICAgIG9iai5kb1JlcXVlc3QoKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgdGhlIG1haW4gQmluYXJ5RnJhbWVIZWFkZXIgYnVmZmVyLlxuICAgICAqIEByZXR1cm5zIHtVbml0OEFycmF5fVxuICAgICAqL1xuICAgIF9idWlsZFJQQ01haW5CdWZmZXIgKCkge1xuICAgICAgICBjb25zdCBycGNCdWxrRGF0YSA9IHRoaXMuX3JwY1JlcXVlc3QuZ2V0QnVsa0RhdGEoKTtcbiAgICAgICAgY29uc3QgY29ycmVsYXRpb25JZCA9IHRoaXMuX3JwY1JlcXVlc3QuZ2V0Q29ycmVsYXRpb25JZCgpO1xuICAgICAgICBjb25zdCBycGNUeXBlID0gIHRoaXMuX3JwY1JlcXVlc3QuZ2V0UlBDVHlwZSgpO1xuXG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IHRoaXMuX3JwY1JlcXVlc3QuZ2V0RnVuY3Rpb25OYW1lKCk7XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uSWQgPSBGdW5jdGlvbklELnZhbHVlRm9yS2V5KGZ1bmN0aW9uTmFtZSk7XG4gICAgICAgIGlmICghZnVuY3Rpb25JZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmluZCBmdW5jdGlvbiAke2Z1bmN0aW9uTmFtZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGpzb25CdWZmZXIgPSBKc29uUnBjTWFyc2hhbGxlci5tYXJzaGFsbCh0aGlzLl9ycGNSZXF1ZXN0KTtcbiAgICAgICAgY29uc3QganNvblNpemUgPSBqc29uQnVmZmVyLmxlbmd0aDtcblxuICAgICAgICBjb25zdCBiZmggPSBuZXcgQmluYXJ5RnJhbWVIZWFkZXIocnBjVHlwZSwgZnVuY3Rpb25JZCwgY29ycmVsYXRpb25JZCk7XG4gICAgICAgIGJmaC5zZXRKc29uRGF0YShqc29uQnVmZmVyKTtcbiAgICAgICAgYmZoLnNldEpzb25TaXplKGpzb25TaXplKTtcbiAgICAgICAgYmZoLnNldEJ1bGtEYXRhKHJwY0J1bGtEYXRhKTtcbiAgICAgICAgY29uc3QgaGVhZGVyU2l6ZSA9IDEyO1xuICAgICAgICBjb25zdCBidWxrRGF0YSA9IGJmaC5nZXRCdWxrRGF0YSgpO1xuICAgICAgICBsZXQgYnVsa0RhdGFTaXplID0gMDtcbiAgICAgICAgaWYgKGJ1bGtEYXRhKSB7XG4gICAgICAgICAgICBidWxrRGF0YVNpemUgPSBidWxrRGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG90YWxNZXNzYWdlU2l6ZSA9IGhlYWRlclNpemUgKyBqc29uU2l6ZSArIGJ1bGtEYXRhU2l6ZTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTWVzc2FnZVNpemUpO1xuICAgICAgICBkYXRhLnNldChiZmguYXNzZW1ibGVIZWFkZXJCeXRlcygpLCAwKTtcbiAgICAgICAgZGF0YS5zZXQoanNvbkJ1ZmZlciwgaGVhZGVyU2l6ZSk7XG4gICAgICAgIGlmIChidWxrRGF0YSkge1xuICAgICAgICAgICAgZGF0YS5zZXQoYnVsa0RhdGEsIGhlYWRlclNpemUgKyBqc29uU2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgUlBDIHJlcXVlc3QgYW5kIHVzZSBjYWxsYmFjayB0byBzZW5kXG4gICAgICogc2RsIHBhY2tldHMgb2YgdGhlIGFwcHJvcHJpYXRlIHNpemUuXG4gICAgICovXG4gICAgZG9SZXF1ZXN0ICgpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHRoaXMuX3ZlcnNpb247XG4gICAgICAgIGNvbnN0IGZyYW1lSW5mbyA9IDA7XG4gICAgICAgIGNvbnN0IGZyYW1lVHlwZSA9IEZyYW1lVHlwZS5TSU5HTEU7XG5cbiAgICAgICAgY29uc3Qgc2VydmljZVR5cGUgPSBTZGxQYWNrZXQuU0VSVklDRV9UWVBFX1JQQztcbiAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gdGhpcy5fc2Vzc2lvbklkO1xuICAgICAgICBjb25zdCBtZXNzYWdlSWQgPSB0aGlzLl9tZXNzYWdlSWQ7XG5cbiAgICAgICAgY29uc3QgaXNFbmNyeXB0ZWQgPSB0aGlzLl9pc0VuY3J5cHRlZDtcbiAgICAgICAgY29uc3QgbWFpbkJ1ZmZlciA9IHRoaXMuX2J1aWxkUlBDTWFpbkJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBtdHUgPSB0aGlzLl9tdHU7XG5cbiAgICAgICAgY29uc3QgZnJhbWVDb3VudCA9IE1hdGguY2VpbChtYWluQnVmZmVyLmxlbmd0aCAvIG10dSk7XG5cbiAgICAgICAgaWYgKGZyYW1lQ291bnQgPD0gMSkge1xuICAgICAgICAgICAgY29uc3QgZnVsbFBhY2tldCA9IHRoaXMuX2NvbnN0cnVjdFBhY2tldChcbiAgICAgICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VUeXBlLFxuICAgICAgICAgICAgICAgIGZyYW1lSW5mbyxcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgIGZyYW1lVHlwZSxcbiAgICAgICAgICAgICAgICBtYWluQnVmZmVyLFxuICAgICAgICAgICAgICAgIGlzRW5jcnlwdGVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fcGFja2V0Q2FsbGJhY2soZnVsbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoOCk7IC8vIEludDMyIGhhcyA4IGJ5dGVzXG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMigwLCBtYWluQnVmZmVyLmxlbmd0aCwgZmFsc2UpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoNCwgZnJhbWVDb3VudCwgZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG5cbiAgICAgICAgICAgIGNvbnN0IGZpcnN0SGVhZGVyID0gdGhpcy5fY29uc3RydWN0UGFja2V0KHZlcnNpb24sIHNlcnZpY2VUeXBlLCBmcmFtZUluZm8sIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBGcmFtZVR5cGUuRklSU1QsIHBheWxvYWQsIGlzRW5jcnlwdGVkKTtcbiAgICAgICAgICAgIHRoaXMuX3BhY2tldENhbGxiYWNrKGZpcnN0SGVhZGVyKTtcblxuICAgICAgICAgICAgdGhpcy5fYnVpbGRDb25zZWN1dGl2ZUZyYW1lcyhcbiAgICAgICAgICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VUeXBlLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgbWFpbkJ1ZmZlcixcbiAgICAgICAgICAgICAgICBtdHUsXG4gICAgICAgICAgICAgICAgaXNFbmNyeXB0ZWRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gc2RsIHBhY2tldC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvblxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGZyYW1lSW5mb1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWVzc2FnZUlkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGZyYW1lVHlwZVxuICAgICAqIEBwYXJhbSB7VW5pdDhBcnJheX0gcGF5bG9hZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNFbmNyeXB0ZWRcbiAgICAgKiBAcmV0dXJucyB7U2RsUGFja2V0fVxuICAgICAqL1xuICAgIF9jb25zdHJ1Y3RQYWNrZXQgKHZlcnNpb24sIHNlcnZpY2VUeXBlLCBmcmFtZUluZm8sIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBmcmFtZVR5cGUsIHBheWxvYWQsIGlzRW5jcnlwdGVkKSB7XG4gICAgICAgIGNvbnN0IGRhdGFTaXplID0gcGF5bG9hZC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IGJ5dGVzVG9Xcml0ZSA9IGRhdGFTaXplO1xuICAgICAgICBjb25zdCBzZGxQYWNrZXQgPSBuZXcgU2RsUGFja2V0KHZlcnNpb24sIGlzRW5jcnlwdGVkLCBmcmFtZVR5cGUsIHNlcnZpY2VUeXBlLCBmcmFtZUluZm8sIHNlc3Npb25JZCwgZGF0YVNpemUsIG1lc3NhZ2VJZCwgcGF5bG9hZCwgb2Zmc2V0LCBieXRlc1RvV3JpdGUpO1xuICAgICAgICByZXR1cm4gc2RsUGFja2V0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIGNvbnNlY3V0aXZlIGZyYW1lcyBhZnRlciB0aGUgaW5pdGFsIGZyYW1lIGlzIHNlbnQgZm9yIGEgbXVsdGktZnJhbWUgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvblxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtZXNzYWdlSWRcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNFbmNyeXB0ZWRcbiAgICAgKi9cbiAgICBfYnVpbGRDb25zZWN1dGl2ZUZyYW1lcyAodmVyc2lvbiwgc2VydmljZVR5cGUsIHNlc3Npb25JZCwgbWVzc2FnZUlkLCBidWZmZXIsIGxlbmd0aCwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgbGV0IGZyYW1lU2VxdWVuY2VOdW1iZXI7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuXG4gICAgICAgIHdoaWxlIChmcmFtZVNlcXVlbmNlTnVtYmVyICE9PSAwKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICsgbGVuZ3RoID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmcmFtZVNlcXVlbmNlTnVtYmVyID0gMDsgLy8gbGFzdCBmcmFtZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcmFtZVNlcXVlbmNlTnVtYmVyID0gKGNvdW50ICUgMjU1KSArIDE7IC8vIDEsMiwzLC4uLiwyNTUsMVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLl9jb25zdHJ1Y3RQYWNrZXQoXG4gICAgICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgICAgICBzZXJ2aWNlVHlwZSxcbiAgICAgICAgICAgICAgICBmcmFtZVNlcXVlbmNlTnVtYmVyLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgRnJhbWVUeXBlLkNPTlNFQ1VUSVZFLFxuICAgICAgICAgICAgICAgIGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgaXNFbmNyeXB0ZWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLl9wYWNrZXRDYWxsYmFjayhoZWFkZXIpO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5leHBvcnQgeyBNZXNzYWdlRnJhbWVEaXNhc3NlbWJsZXIgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgU2RsUGFja2V0IH0gZnJvbSAnLi4vcHJvdG9jb2wvU2RsUGFja2V0LmpzJztcblxuY2xhc3MgVHJhbnNwb3J0TGlzdGVuZXIge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydERpc2Nvbm5lY3RlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uRXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLl9vblBhY2tldFJlY2VpdmVkID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0TGlzdGVuZXJ9XG4gICAgICovXG4gICAgc2V0T25UcmFuc3BvcnRDb25uZWN0ZWQgKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQgPSBmdW5jO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnRMaXN0ZW5lcn1cbiAgICAgKi9cbiAgICBzZXRPblRyYW5zcG9ydERpc2Nvbm5lY3RlZCAoZnVuYykge1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydERpc2Nvbm5lY3RlZCA9IGZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqIEByZXR1cm4ge1RyYW5zcG9ydExpc3RlbmVyfVxuICAgICAqL1xuICAgIHNldE9uRXJyb3IgKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IGZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqIEByZXR1cm4ge1RyYW5zcG9ydExpc3RlbmVyfVxuICAgICAqL1xuICAgIHNldE9uUGFja2V0UmVjZWl2ZWQgKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fb25QYWNrZXRSZWNlaXZlZCA9IGZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbiAgICBvblRyYW5zcG9ydENvbm5lY3RlZCAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uVHJhbnNwb3J0Q29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblRyYW5zcG9ydERpc2Nvbm5lY3RlZCAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25UcmFuc3BvcnREaXNjb25uZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uVHJhbnNwb3J0RGlzY29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkVycm9yIChlcnJvciA9IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uUGFja2V0UmVjZWl2ZWQgKHNkbFBhY2tldCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uUGFja2V0UmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUGFja2V0UmVjZWl2ZWQoc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNwb3J0TGlzdGVuZXIgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBWZXJzaW9uIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKG1ham9yLCBtaW5vciwgcGF0Y2gpIHtcbiAgICAgICAgdGhpcy5zZXRNYWpvcihtYWpvcik7XG4gICAgICAgIHRoaXMuc2V0TWlub3IobWlub3IpO1xuICAgICAgICB0aGlzLnNldFBhdGNoKHBhdGNoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYWpvclxuICAgICogQHJldHVybiB7VmVyc2lvbn1cbiAgICAqL1xuICAgIHNldE1ham9yIChtYWpvcikge1xuICAgICAgICB0aGlzLl9tYWpvciA9IHBhcnNlSW50KG1ham9yKSB8fCAwO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0TWFqb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFqb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbWlub3JcbiAgICAqIEByZXR1cm4ge1ZlcnNpb259XG4gICAgKi9cbiAgICBzZXRNaW5vciAobWlub3IpIHtcbiAgICAgICAgdGhpcy5fbWlub3IgPSBwYXJzZUludChtaW5vcikgfHwgMDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldE1pbm9yICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhdGNoXG4gICAgKiBAcmV0dXJuIHtWZXJzaW9ufVxuICAgICovXG4gICAgc2V0UGF0Y2ggKHBhdGNoKSB7XG4gICAgICAgIHRoaXMuX3BhdGNoID0gcGFyc2VJbnQocGF0Y2gpIHx8IDA7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRQYXRjaCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXRjaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uIC0gUGFyc2UgdGhpcyBzdHJpbmcgdG8gYSBWZXJzaW9uIG9iamVjdFxuICAgICogQHJldHVybiB7VmVyc2lvbn1cbiAgICAqL1xuICAgIGZyb21TdHJpbmcgKHZlcnNpb24pIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbnMgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgICAgIGlmICh2ZXJzaW9ucy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IHZlcnNpb24gc3RyaW5nIGZvcm1hdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TWFqb3IodmVyc2lvbnNbMF0pO1xuICAgICAgICB0aGlzLnNldE1pbm9yKHZlcnNpb25zWzFdKTtcbiAgICAgICAgdGhpcy5zZXRQYXRjaCh2ZXJzaW9uc1syXSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICB0b1N0cmluZyAoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmdldE1ham9yKCl9LiR7dGhpcy5nZXRNaW5vcigpfS4ke3RoaXMuZ2V0UGF0Y2goKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogTWV0aG9kIHRvIHRlc3QgaWYgdGhpcyBpbnN0YW5jZSBvZiBWZXJzaW9uIGlzIG5ld2VyIHRoYW4gdGhlIHN1cHBsaWVkIG9uZS5cbiAgICAqIEBwYXJhbSB2ZXJzaW9uIC0gdGhlIHZlcnNpb24gdG8gY2hlY2sgYWdhaW5zdFxuICAgICogQHJldHVybiB7TnVtYmVyfSAtIDEgaWYgdGhpcyBpbnN0YW5jZSBpcyBuZXdlciwgLTEgaWYgc3VwcGxpZWQgdmVyc2lvbiBpcyBuZXdlciwgYW5kIDAgaWYgdGhleSBhcmUgZXF1YWxcbiAgICAqL1xuICAgIGlzTmV3ZXJUaGFuICh2ZXJzaW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmdldE1ham9yKCkgPiB2ZXJzaW9uLmdldE1ham9yKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0TWFqb3IoKSA9PT0gdmVyc2lvbi5nZXRNYWpvcigpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRNaW5vcigpID4gdmVyc2lvbi5nZXRNaW5vcigpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0TWlub3IoKSA9PT0gdmVyc2lvbi5nZXRNaW5vcigpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UGF0Y2goKSA+IHZlcnNpb24uZ2V0UGF0Y2goKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UGF0Y2goKSA9PT0gdmVyc2lvbi5nZXRQYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufVxuXG5leHBvcnQgeyBWZXJzaW9uIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBTZXJ2aWNlVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgU2VydmljZVR5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDT05UUk9MICgpIHtcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VUeXBlLl9NQVAuQ09OVFJPTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgUlBDICgpIHtcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VUeXBlLl9NQVAuUlBDO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBBVURJTyAoKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5fTUFQLkFVRElPO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBWSURFTyAoKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5fTUFQLlZJREVPO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBIWUJSSUQgKCkge1xuICAgICAgICByZXR1cm4gU2VydmljZVR5cGUuX01BUC5IWUJSSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VUeXBlLl92YWx1ZUZvcktleShrZXksIFNlcnZpY2VUeXBlLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5fa2V5Rm9yVmFsdWUodmFsdWUsIFNlcnZpY2VUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuU2VydmljZVR5cGUuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdDT05UUk9MJzogMHgwMCxcbiAgICAnUlBDJzogMHgwNyxcbiAgICAnQVVESU8nOiAweDBBLFxuICAgICdWSURFTyc6IDB4MEIsXG4gICAgJ0hZQlJJRCc6MHgwRixcbn0pO1xuXG5leHBvcnQgeyBTZXJ2aWNlVHlwZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEZyYW1lVHlwZSB9IGZyb20gJy4vZW51bXMvRnJhbWVUeXBlLmpzJztcbmltcG9ydCB7IFNkbFBhY2tldCB9IGZyb20gJy4vU2RsUGFja2V0LmpzJztcblxuLyoqXG4gKiBDYWxsYmFjayBmb3IgZmluaXNoZWQgcGFja2V0LlxuICogQGNhbGxiYWNrIGNiXG4gKiBAcGFyYW0ge3N0cmluZ30gZXJyb3IgLSBJZiB0aGVyZSBpcyBhbiBlcnJvciB0aGF0IGNhbm5vdCBiZSByZWNvdmVyZWQgZnJvbSBpdCB3aWxsIGJlIHJldHVybmVkLlxuICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldCAtIEZpbmlzaGVkIHNkbCBwYWNrZXQuXG4gKi9cblxuLyoqXG4gKiBBc3NlbWJsZXMgc2RsIHBhY2tldHMgd2hpY2ggbWF5IGNvbWUgaW4gc2VwZXJhdGUgY2h1bmtzIGlmIHRoZSBkYXRhIGV4Y2VlZHMgdGhlXG4gKiBtYXggdHJhbnNwb3J0IHVuaXQgYWxsb3dlZCBieSBzZGwgY29yZS5cbiAqXG4gKiBAcHJpdmF0ZSB7Y2J9IF9jYWxsYmFjayAtIENhbGxiYWNrIGZvciBjb21iaW5lZCBwYWNrZXQuXG4gKiBAcHJpdmF0ZSB7bnVtYmVyfSBfdG90YWxDb25zZWN1dGl2ZUZyYW1lcyAtIFRvdGFsIGNvbnNlY3V0aXZlIGZyYW1lcyBleHBlY3RlZCBmb3IgYSBtdWx0aWZyYW1lIHBhY2tldC5cbiAqIEBwcml2YXRlIHtudW1iZXJ9IF9jb25zZWN1dGl2ZUZyYW1lc0RhdGFMZW5ndGggLSBFeHBlY3RlZCBkYXRhIGxlbmd0aCBvZiBmaW5pc2hlZCBtdWx0aWZyYW1lIHBhY2tldC5cbiAqIEBwcml2YXRlIHtudW1iZXJ9IF9jb25zZWN1dGl2ZUZyYW1lc0hhbmRsZWRDb3VudCAtIFJ1bm5pbmcgdG90YWwgb2YgY29uc2VjdXRpdmUgZnJhbWVzIHJlY2VpdmVkIGFuZCBoYW5kbGVkLlxuICogQHByaXZhdGUge2FycmF5fSBfYWNjdW11bGF0b3IgQ29tYmluZXMgaW5jb21pbmcgYnl0ZXMgZnJvbSBjb25zZWN1dGl2ZSBmcmFtZXMuXG4gKi9cbmNsYXNzIE1lc3NhZ2VGcmFtZUFzc2VtYmxlciB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqIEBwYXJhbSB7Y2J9IGNhbGxiYWNrXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBub3Qgb2YgZXhwZWN0ZWQgdHlwZSAoZnVuY3Rpb24pIGZvciBNZXNzYWdlRnJhbWVBc3NlbWJsZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICAgICAgdGhpcy5fYWNjdW11bGF0b3IgPSBbXTtcbiAgICAgICAgdGhpcy5fdG90YWxDb25zZWN1dGl2ZUZyYW1lcyA9IDA7XG4gICAgICAgIHRoaXMuX2NvbnNlY3V0aXZlRnJhbWVzSGFuZGxlZENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fY29uc2VjdXRpdmVGcmFtZXNEYXRhTGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGEgc2luZ2xlIGZyYW1lIG9yIG11bHRpZnJhbWUgcGFja2V0LiBUaGUgY2FsbGJhY2sgaXMgdXNlZCB3aGVuIHRoZSBwYWNrZXRcbiAgICAgKiBpcyBjb21wbGV0ZWx5IHJlYWQuIEZvciBhIHNpbmdsZSBmcmFtZSB0aGlzIGlzIGltbWVkaWF0ZWx5LiBGb3IgYSBtdWx0aSBmcmFtZSBwYWNrZXRcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IC0gSW5jb21pbmcgc2RsIHBhY2tldCB0byBiZSByZWFkLlxuICAgICovXG4gICAgaGFuZGxlRnJhbWUgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBmcmFtZVR5cGUgPSBzZGxQYWNrZXQuZ2V0RnJhbWVUeXBlKCk7XG4gICAgICAgIC8vIElmIHRoZSBzZGwgcGFja2V0IGlzIGEgc2luZ2xlIGZyYW1lIG5vdGhpbmcgbmVlZHMgdG8gYmUgYXNzZW1ibGVkIGFuZCB0aGlzIGNhbiBiZSByZXR1cm5lZCBpbW1lZGlhdGVseS5cbiAgICAgICAgaWYgKGZyYW1lVHlwZSAhPT0gRnJhbWVUeXBlLkZJUlNUICYmIGZyYW1lVHlwZSAhPT0gRnJhbWVUeXBlLkNPTlNFQ1VUSVZFKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2sobnVsbCwgc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlTXVsdGlGcmFtZU1lc3NhZ2Uoc2RsUGFja2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBmaXJzdCBkYXRhIGZyYW1lLiBTZXRzIHRoZSBleHBlY3RlZCBmcmFtZSBjb3VudCBhbmQgZGF0YSBsZW5ndGguXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZUZpcnN0RGF0YUZyYW1lIChzZGxQYWNrZXQpIHtcbiAgICAgICAgLyoqIEB0eXBlIHthcnJheX0gQXJyYXkgb2YgdWludDggKi9cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHNkbFBhY2tldC5nZXRQYXlsb2FkKCk7XG5cbiAgICAgICAgaWYgKHBheWxvYWQgaW5zdGFuY2VvZiBVaW50OEFycmF5ICE9PSB0cnVlIHx8IHBheWxvYWQubGVuZ3RoICE9PSA4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGhhbmRsaW5nIGZpcnN0IGZyYW1lLiBQYXlsb2FkIGlzIGFuIGludmFsaWQgbGVuZ3RoIHNob3VsZCBiZSBsZW5ndGggOC4nKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGJ5dGUgaW4gcGF5bG9hZCkge1xuICAgICAgICAgICAgaWYgKGJ5dGUgPCAweDAwIHx8IGJ5dGUgPiAweEZGKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBheWxvYWQuIE11c3QgYmUgYW4gYXJyYXkgb2YgdWludDggYnl0ZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJzdCA0IDgtYml0IGludGVnZXJzIGNvbnRhaW4gdGhlIGRhdGEgbGVuZ3RoLlxuICAgICAgICBsZXQgZGF0YUxlbmd0aCA9IChwYXlsb2FkWzBdICYgMHgwRikgPDwgMjQ7IC8vIDgtYml0IHggM1xuICAgICAgICBkYXRhTGVuZ3RoICs9IChwYXlsb2FkWzFdICYgMHhGRikgPDwgMTY7IC8vIDggeCAyXG4gICAgICAgIGRhdGFMZW5ndGggKz0gKHBheWxvYWRbMl0gJiAweEZGKSA8PCA4OyAvLyA4IHggMVxuICAgICAgICBkYXRhTGVuZ3RoICs9IHBheWxvYWRbM10gJiAweEZGOyAvLyA4IHggMFxuXG4gICAgICAgIGxldCBmcmFtZUNvdW50ID0gKHBheWxvYWRbNF0gJiAweEZGKSA8PCAyNDtcbiAgICAgICAgZnJhbWVDb3VudCArPSAocGF5bG9hZFs1XSAmIDB4RkYpIDw8IDE2O1xuICAgICAgICBmcmFtZUNvdW50ICs9IChwYXlsb2FkWzZdICYgMHhGRikgPDwgODtcbiAgICAgICAgZnJhbWVDb3VudCArPSBwYXlsb2FkWzddICYgMHhGRjtcblxuICAgICAgICB0aGlzLl90b3RhbENvbnNlY3V0aXZlRnJhbWVzID0gZnJhbWVDb3VudDtcbiAgICAgICAgdGhpcy5fY29uc2VjdXRpdmVGcmFtZXNEYXRhTGVuZ3RoID0gZGF0YUxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJzdCBmcmFtZSBzaG91bGQgYmUgcmVhZCBpbiBiZWZvcmUgdGhpcyBpcyBjYWxsZWQuIE9uY2UgdGhlIGxhc3RcbiAgICAgKiBmcmFtZSBpcyByZWFkLCBjYWxsYmFjayBpcyB1c2VkLlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlQ29uc2VjdXRpdmVGcmFtZSAoc2RsUGFja2V0KSB7XG4gICAgICAgIHRoaXMuX2NvbnNlY3V0aXZlRnJhbWVzSGFuZGxlZENvdW50Kys7XG5cbiAgICAgICAgY29uc3QgZnJhbWVUeXBlID0gc2RsUGFja2V0LmdldEZyYW1lVHlwZSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogZnJhbWVTZXF1ZW5jZSBudGggZnJhbWUsIG9yIDAgZm9yIGxhc3QgZnJhbWUsXG4gICAgICAgICAqIDggYml0cyBhcmUgdXNlZCB0byBzdG9yZSB0aGlzIGluZm8gc28gdGhlIGNvdW50IHJldmVydHMgdG8gMSBhZnRlciAyNTVcbiAgICAgICAgICogVGhpcyBkb2Vzbid0IGFmZmVjdCByZWFkaW5nIHRoZSBwYWNrZXQgYnV0IGl0IGlzIG5vdGFibGUgaWYgZnJhbWUgc2VxdWVuY2UgaXMgcmVsaWVkIG9uLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZnJhbWVTZXF1ZW5jZSA9IHNkbFBhY2tldC5nZXRGcmFtZUluZm8oKTtcblxuICAgICAgICBjb25zdCBwYXlsb2FkID0gc2RsUGFja2V0LmdldFBheWxvYWQoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGJ5dGUgb2YgcGF5bG9hZCkge1xuICAgICAgICAgICAgdGhpcy5fYWNjdW11bGF0b3IucHVzaChieXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGxhc3QgZnJhbWUsIGZpbmlzaCB0aGluZ3MgdXAgYW5kIHVzZSBjYWxsYmFjay5cbiAgICAgICAgaWYgKGZyYW1lU2VxdWVuY2UgPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25zZWN1dGl2ZUZyYW1lc0hhbmRsZWRDb3VudCAhPT0gdGhpcy5fdG90YWxDb25zZWN1dGl2ZUZyYW1lcykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVG90YWwgZnJhbWVzIGV4cGVjdGVkICR7dGhpcy5fdG90YWxDb25zZWN1dGl2ZUZyYW1lc30gZG9lcyBub3QgbWF0Y2ggdG90YWwgZnJhbWVzIHJlY2VpdmVkICR7dGhpcy5fY29uc2VjdXRpdmVGcmFtZXNIYW5kbGVkQ291bnR9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25zZWN1dGl2ZUZyYW1lc0RhdGFMZW5ndGggIT09IHRoaXMuX2FjY3VtdWxhdG9yLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVG90YWwgZGF0YSBleHBlY3RlZCAke3RoaXMuX2NvbnNlY3V0aXZlRnJhbWVzRGF0YUxlbmd0aH0gZG9lcyBub3QgbWF0Y2ggdG90YWwgZGF0YSByZWNlaXZlZCAke3RoaXMuX2FjY3VtdWxhdG9yLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZmluaXNoZWRTZGxQYWNrZXQgPSBuZXcgU2RsUGFja2V0KFxuICAgICAgICAgICAgICAgIHNkbFBhY2tldC5nZXRWZXJzaW9uKCksXG4gICAgICAgICAgICAgICAgc2RsUGFja2V0LmdldEVuY3J5cHRpb24oKSxcbiAgICAgICAgICAgICAgICBmcmFtZVR5cGUsXG4gICAgICAgICAgICAgICAgc2RsUGFja2V0LmdldFNlcnZpY2VUeXBlKCksXG4gICAgICAgICAgICAgICAgZnJhbWVTZXF1ZW5jZSxcbiAgICAgICAgICAgICAgICBzZGxQYWNrZXQuZ2V0U2Vzc2lvbklEKCksXG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjdW11bGF0b3IubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHNkbFBhY2tldC5nZXRNZXNzYWdlSUQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2N1bXVsYXRvcixcbiAgICAgICAgICAgICAgICAwLCAvLyBubyBvZmZzZXRcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2N1bXVsYXRvci5sZW5ndGggLy8gcmVhZCB0aGUgZW50aXJlIGJ1ZmZlclxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sobnVsbCwgZmluaXNoZWRTZGxQYWNrZXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBzZGwgcGFja2V0IGJhc2VkIG9uIGl0cyBmcmFtZSB0eXBlLCBGSVJTVCBvciBDT05TRUNVVElWRS5cbiAgICAgKiBDYWxsYmFjayBpcyB1c2VkIHdoZW4gZmluYWwgcGFja2V0IGlzIHJlYWQuXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldCAtIFNkbCBwYWNrZXQgdG8gYmUgcmVhZC5cbiAgICAgKi9cbiAgICBfaGFuZGxlTXVsdGlGcmFtZU1lc3NhZ2UgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBmcmFtZVR5cGUgPSBzZGxQYWNrZXQuZ2V0RnJhbWVUeXBlKCk7XG4gICAgICAgIGlmIChmcmFtZVR5cGUgPT09IEZyYW1lVHlwZS5GSVJTVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUZpcnN0RGF0YUZyYW1lKHNkbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIEZyYW1lVHlwZS5Db25zZWN1dGl2ZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUNvbnNlY3V0aXZlRnJhbWUoc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbmV4cG9ydCB7IE1lc3NhZ2VGcmFtZUFzc2VtYmxlciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBDb250cm9sRnJhbWVUYWdzIHtcbn1cblxuLy8gaGlkZGVuIGlubmVyIG9iamVjdHNcblxuY29uc3QgU3RhcnRTZXJ2aWNlQUNLQmFzZSA9IHtcbiAgICBNVFU6ICdtdHUnLFxufTtcblxuY29uc3QgTkFLQmFzZSA9IHtcbiAgICBSRUpFQ1RFRF9QQVJBTVM6ICdyZWplY3RlZFBhcmFtcycsXG59O1xuXG5jb25zdCBTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24gPSB7XG4gICAgLyoqIFRoZSBuZWdvdGlhdGVkIHZlcnNpb24gb2YgdGhlIHByb3RvY29sLiBNdXN0IGJlIGluIHRoZSBmb3JtYXQgXCJNYWpvci5NaW5vci5QYXRjaFwiKi9cbiAgICBQUk9UT0NPTF9WRVJTSU9OOiAncHJvdG9jb2xWZXJzaW9uJyxcbn07XG5cbmNvbnN0IFN0YXJ0U2VydmljZUhhc2hJZCA9IHtcbiAgICAvKiogSGFzaCBJRCB0byBpZGVudGlmeSB0aGlzIHNlcnZpY2UgYW5kIHVzZWQgd2hlbiBzZW5kaW5nIGFuIEVuZFNlcnZpY2UgY29udHJvbCBmcmFtZSovXG4gICAgSEFTSF9JRDogJ2hhc2hJZCcsXG59O1xuXG5jb25zdCBTdGFydFNlcnZpY2VEaW1lbnNpb25zID0ge1xuICAgIEhFSUdIVDogJ2hlaWdodCcsXG4gICAgV0lEVEg6ICd3aWR0aCcsXG59O1xuXG4vLyBzdGF0aWMgbWVtYmVycyBcblxuQ29udHJvbEZyYW1lVGFncy5SUEMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFydFNlcnZpY2U6IFN0YXJ0U2VydmljZVByb3RvY29sVmVyc2lvbixcblxuICAgIFN0YXJ0U2VydmljZUFDSzogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIC8qKiBIVSBhbGxvd2VkIHRyYW5zcG9ydCBmb3Igc2Vjb25kYXJ5IGNvbm5lY3Rpb24gKi9cbiAgICAgICAgU0VDT05EQVJZX1RSQU5TUE9SVFM6ICdzZWNvbmRhcnlUcmFuc3BvcnRzJyxcbiAgICAgICAgLyoqIEhVIGFsbG93ZWQgdHJhbnNwb3J0cyBmb3IgYXVkaW8gYW5kIHZpZGVvIHNlcnZpY2VzICgxID09IFByaW1hcnksIDIgPT0gU2Vjb25kYXJ5KSAqL1xuICAgICAgICBBVURJT19TRVJWSUNFX1RSQU5TUE9SVFM6ICdhdWRpb1NlcnZpY2VUcmFuc3BvcnRzJyxcbiAgICAgICAgVklERU9fU0VSVklDRV9UUkFOU1BPUlRTOiAndmlkZW9TZXJ2aWNlVHJhbnNwb3J0cycsXG4gICAgICAgIC8qKiBBdXRoIHRva2VuIHRvIGJlIHVzZWQgZm9yIGxvZyBpbiBpbnRvIHNlcnZpY2VzICoqL1xuICAgICAgICBBVVRIX1RPS0VOOiAnYXV0aFRva2VuJyxcbiAgICB9LCBTdGFydFNlcnZpY2VBQ0tCYXNlLCBTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24sIFN0YXJ0U2VydmljZUhhc2hJZCksXG5cbiAgICBTdGFydFNlcnZpY2VOQUs6IE5BS0Jhc2UsXG5cbiAgICBFbmRTZXJ2aWNlOiBTdGFydFNlcnZpY2VIYXNoSWQsXG5cbiAgICBFbmRTZXJ2aWNlQUNLOiB7fSxcblxuICAgIEVuZFNlcnZpY2VOQUs6IE5BS0Jhc2UsXG5cbiAgICBUcmFuc3BvcnRFdmVudFVwZGF0ZToge1xuICAgICAgICBUQ1BfSVBfQUREUkVTUzogJ3RjcElwQWRkcmVzcycsXG4gICAgICAgIFRDUF9QT1JUOiAndGNwUG9ydCcsXG4gICAgfSxcblxuICAgIFJlZ2lzdGVyU2Vjb25kYXJ5VHJhbnNwb3J0OiB7fSxcblxuICAgIFJlZ2lzdGVyU2Vjb25kYXJ5VHJhbnNwb3J0QUNLOiB7fSxcblxuICAgIFJlZ2lzdGVyU2Vjb25kYXJ5VHJhbnNwb3J0TkFLOiBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgUkVBU09OOiAncmVhc29uJyxcbiAgICB9LCBOQUtCYXNlKSxcbn0pO1xuXG5Db250cm9sRnJhbWVUYWdzLkF1ZGlvID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU3RhcnRTZXJ2aWNlOiB7fSxcblxuICAgIFN0YXJ0U2VydmljZUFDSzogU3RhcnRTZXJ2aWNlQUNLQmFzZSxcblxuICAgIFN0YXJ0U2VydmljZU5BSzogTkFLQmFzZSxcblxuICAgIEVuZFNlcnZpY2U6IHt9LFxuXG4gICAgRW5kU2VydmljZUFDSzoge30sXG5cbiAgICBFbmRTZXJ2aWNlTkFLOiBOQUtCYXNlLFxufSk7XG5cbkNvbnRyb2xGcmFtZVRhZ3MuVmlkZW8gPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFydFNlcnZpY2U6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBWSURFT19QUk9UT0NPTDogJ3ZpZGVvUHJvdG9jb2wnLFxuICAgICAgICBWSURFT19DT0RFQzogJ3ZpZGVvQ29kZWMnLFxuICAgIH0sIFN0YXJ0U2VydmljZURpbWVuc2lvbnMpLFxuXG4gICAgU3RhcnRTZXJ2aWNlQUNLOiBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgVklERU9fUFJPVE9DT0w6ICd2aWRlb1Byb3RvY29sJyxcbiAgICAgICAgVklERU9fQ09ERUM6ICd2aWRlb0NvZGVjJyxcbiAgICB9LCBTdGFydFNlcnZpY2VBQ0tCYXNlLCBTdGFydFNlcnZpY2VEaW1lbnNpb25zKSxcblxuICAgIFN0YXJ0U2VydmljZU5BSzogTkFLQmFzZSxcblxuICAgIEVuZFNlcnZpY2U6IHt9LFxuXG4gICAgRW5kU2VydmljZUFDSzoge30sXG5cbiAgICBFbmRTZXJ2aWNlTkFLOiBOQUtCYXNlLFxufSk7XG5cbmV4cG9ydCB7IENvbnRyb2xGcmFtZVRhZ3MgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuY2xhc3MgQml0Q29udmVydGVyIHtcbiAgICAvKipcblx0ICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYnVmZmVyIC0gYnVmZmVyIHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCAtIGludCBvcHRpb25hbCwgdGhlIG9mZnNldCBzaGlmdFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IGludCBjb252ZXJ0ZWQgZnJvbSBidWZmZXIgb3IgLTEgaWYgYnVmZmVyIGlzIG51bGxcblx0ICovXG4gICAgc3RhdGljIGFycmF5QnVmZmVyVG9JbnQzMiAoYnVmZmVyLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGlmICghYnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuICAgICAgICByZXR1cm4gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICB9XG5cbiAgICAvKipcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gdGhlIGludGVnZXIgdG8gYmUgY29udmVydGVkXG5cdCAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBidWZmZXIgY29udmVydGVkIGZyb20gaW5wdXQgdmFsdWVcblx0ICovXG4gICAgc3RhdGljIGludDMyVG9BcnJheUJ1ZmZlciAodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpOyAvLyBJbnQzMiBoYXMgNCBieXRlc1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICAgIHZpZXcuc2V0VWludDMyKDAsIHZhbHVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCaXRDb252ZXJ0ZXIgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgU2RsUGFja2V0IH0gZnJvbSAnLi9TZGxQYWNrZXQuanMnO1xuaW1wb3J0IHsgQ29udHJvbEZyYW1lVGFncyB9IGZyb20gJy4vZW51bXMvQ29udHJvbEZyYW1lVGFncy5qcyc7XG5pbXBvcnQgeyBCaXRDb252ZXJ0ZXIgfSBmcm9tICcuLy4uL3V0aWwvQml0Q29udmVydGVyLmpzJztcbmltcG9ydCB7IEZyYW1lVHlwZSB9IGZyb20gJy4vZW51bXMvRnJhbWVUeXBlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGNvbnRyb2wgcGFja2V0cy5cbiAqIEZvciByZWd1bGFyIFJQQyBSUENNZXNzYWdlIHNob3VsZCBiZSB1c2VkLlxuICovXG5jbGFzcyBTZGxQYWNrZXRGYWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGVhcnRiZWF0IGFja25vd2xlZ2VtZW50IHBhY2tldC5cbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklEIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIFxuICAgICAqIEByZXR1cm5zIHtTZGxQYWNrZXR9XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZUhlYXJ0YmVhdEFDSyAoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gbmV3IFNkbFBhY2tldCh2ZXJzaW9uLCBmYWxzZSwgRnJhbWVUeXBlLkNPTlRST0wsXG4gICAgICAgICAgICBzZXJ2aWNlVHlwZSwgU2RsUGFja2V0LkZSQU1FX0lORk9fSEVBUlRfQkVBVF9BQ0ssIHNlc3Npb25JRCxcbiAgICAgICAgICAgIDAsIDAsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW5kIHNlc3Npb24gcGFja2V0LlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSUQgXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1lc3NhZ2VJRCBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGFzaElEIFxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVFbmRTZXNzaW9uIChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklELCBtZXNzYWdlSUQsIHZlcnNpb24sIGhhc2hJRCkge1xuICAgICAgICBpZiAodmVyc2lvbiA8IDUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgVWludDhBcnJheShCaXRDb252ZXJ0ZXIuaW50MzJUb0FycmF5QnVmZmVyKGhhc2hJRCkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZGxQYWNrZXQodmVyc2lvbiwgZmFsc2UsIEZyYW1lVHlwZS5DT05UUk9MLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VUeXBlLCBTZGxQYWNrZXQuRlJBTUVfSU5GT19FTkRfU0VSVklDRSwgc2Vzc2lvbklELFxuICAgICAgICAgICAgICAgIHBheWxvYWQubGVuZ3RoLCBtZXNzYWdlSUQsIHBheWxvYWQsIDAsIHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZFNlc3Npb24gPSBuZXcgU2RsUGFja2V0KHZlcnNpb24sIGZhbHNlLCBGcmFtZVR5cGUuQ09OVFJPTCxcbiAgICAgICAgICAgICAgICBzZXJ2aWNlVHlwZSwgU2RsUGFja2V0LkZSQU1FX0lORk9fRU5EX1NFUlZJQ0UsIHNlc3Npb25JRCxcbiAgICAgICAgICAgICAgICAwLCBtZXNzYWdlSUQsIG51bGwpO1xuICAgICAgICAgICAgZW5kU2Vzc2lvbi5wdXRUYWcoQ29udHJvbEZyYW1lVGFncy5SUEMuRW5kU2VydmljZS5IQVNIX0lELCBoYXNoSUQpO1xuICAgICAgICAgICAgcmV0dXJuIGVuZFNlc3Npb247XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFNkbFBhY2tldEZhY3RvcnkgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEltYWdlVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgSW1hZ2VUeXBlIGV4dGVuZHMgRW51bSB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTVEFUSUMgKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VUeXBlLl9NQVAuU1RBVElDO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IERZTkFNSUMgKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VUeXBlLl9NQVAuRFlOQU1JQztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gSW1hZ2VUeXBlLl92YWx1ZUZvcktleShrZXksIEltYWdlVHlwZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSW1hZ2VUeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgSW1hZ2VUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuSW1hZ2VUeXBlLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnU1RBVElDJzogJ1NUQVRJQycsXG4gICAgJ0RZTkFNSUMnOiAnRFlOQU1JQycsXG59KTtcblxuZXhwb3J0IHsgSW1hZ2VUeXBlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5pbXBvcnQgeyBJbWFnZVR5cGUgfSBmcm9tICcuLi9lbnVtcy9JbWFnZVR5cGUuanMnO1xuXG5jbGFzcyBJbWFnZSBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICAqL1xuICAgIHNldFZhbHVlICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihJbWFnZS5LRVlfVkFMVUUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRWYWx1ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihJbWFnZS5LRVlfVkFMVUUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZVR5cGV9IHR5cGVcbiAgICAqIEByZXR1cm4ge0ltYWdlfVxuICAgICovXG4gICAgc2V0SW1hZ2VUeXBlICh0eXBlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEltYWdlVHlwZSwgdHlwZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoSW1hZ2UuS0VZX0lNQUdFX1RZUEUsIHR5cGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ltYWdlVHlwZX1cbiAgICAqL1xuICAgIGdldEltYWdlVHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChJbWFnZVR5cGUsIEltYWdlLktFWV9JTUFHRV9UWVBFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUZW1wbGF0ZVxuICAgICogQHJldHVybiB7SW1hZ2V9XG4gICAgKi9cbiAgICBzZXRJc1RlbXBsYXRlIChpc1RlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlLktFWV9JU19URU1QTEFURSwgaXNUZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldElzVGVtcGxhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSW1hZ2UuS0VZX0lTX1RFTVBMQVRFKTtcbiAgICB9XG59XG5cbkltYWdlLktFWV9WQUxVRSA9ICd2YWx1ZSc7XG5JbWFnZS5LRVlfSU1BR0VfVFlQRSA9ICdpbWFnZVR5cGUnO1xuSW1hZ2UuS0VZX0lTX1RFTVBMQVRFID0gJ2lzVGVtcGxhdGUnO1xuXG5leHBvcnQgeyBJbWFnZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5cbmNsYXNzIE1lbnVQYXJhbXMgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBpZFxuICAgICogQHJldHVybiB7TWVudVBhcmFtc31cbiAgICAqL1xuICAgIHNldFBhcmVudElEIChpZCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihNZW51UGFyYW1zLktFWV9QQVJFTlRfSUQsIGlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRQYXJlbnRJRCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihNZW51UGFyYW1zLktFWV9QQVJFTlRfSUQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uXG4gICAgKiBAcmV0dXJuIHtNZW51UGFyYW1zfVxuICAgICovXG4gICAgc2V0UG9zaXRpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1lbnVQYXJhbXMuS0VZX1BPU0lUSU9OLCBwb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0UG9zaXRpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoTWVudVBhcmFtcy5LRVlfUE9TSVRJT04pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG1lbnVOYW1lXG4gICAgKiBAcmV0dXJuIHtNZW51UGFyYW1zfVxuICAgICovXG4gICAgc2V0TWVudU5hbWUgKG1lbnVOYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1lbnVQYXJhbXMuS0VZX01FTlVfTkFNRSwgbWVudU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0TWVudU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoTWVudVBhcmFtcy5LRVlfTUVOVV9OQU1FKTtcbiAgICB9XG59XG5cbk1lbnVQYXJhbXMuS0VZX1BBUkVOVF9JRCA9ICdwYXJlbnRJRCc7XG5NZW51UGFyYW1zLktFWV9QT1NJVElPTiAgPSAncG9zaXRpb24nO1xuTWVudVBhcmFtcy5LRVlfTUVOVV9OQU1FID0gJ21lbnVOYW1lJztcblxuZXhwb3J0IHsgTWVudVBhcmFtcyB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1JlcXVlc3QgfSBmcm9tICcuLi9ScGNSZXF1ZXN0LmpzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vc3RydWN0cy9JbWFnZS5qcyc7XG5pbXBvcnQgeyBNZW51UGFyYW1zIH0gZnJvbSAnLi4vc3RydWN0cy9NZW51UGFyYW1zLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgQWRkQ29tbWFuZCBleHRlbmRzIFJwY1JlcXVlc3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELkFkZENvbW1hbmQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaWRcbiAgICAqIEByZXR1cm4ge0FkZENvbW1hbmR9XG4gICAgKi9cbiAgICBzZXRDbWRJRCAoaWQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfQ01EX0lELCBpZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Q21kSUQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfQ01EX0lEKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TWVudVBhcmFtc30gbWVudVBhcmFtc1xuICAgICogQHJldHVybiB7QWRkQ29tbWFuZH1cbiAgICAqL1xuICAgIHNldE1lbnVQYXJhbXMgKG1lbnVQYXJhbXMpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoTWVudVBhcmFtcywgbWVudVBhcmFtcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfTUVOVV9QQVJBTVMsIG1lbnVQYXJhbXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge01lbnVQYXJhbXN9XG4gICAgKi9cbiAgICBnZXRNZW51UGFyYW1zICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KE1lbnVQYXJhbXMsIEFkZENvbW1hbmQuS0VZX01FTlVfUEFSQU1TKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gdnJDb21tYW5kc1xuICAgICogQHJldHVybiB7QWRkQ29tbWFuZH1cbiAgICAqL1xuICAgIHNldFZyQ29tbWFuZHMgKHZyQ29tbWFuZHMpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfVlJfQ09NTUFORFMsIHZyQ29tbWFuZHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59XG4gICAgKi9cbiAgICBnZXRWckNvbW1hbmRzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEFkZENvbW1hbmQuS0VZX1ZSX0NPTU1BTkRTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7SW1hZ2V9IGljb25cbiAgICAqIEByZXR1cm4ge0FkZENvbW1hbmR9XG4gICAgKi9cbiAgICBzZXRDbWRJY29uIChpY29uKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEltYWdlLCBpY29uKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihBZGRDb21tYW5kLktFWV9DTURfSUNPTiwgaWNvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7SW1hZ2V9XG4gICAgKi9cbiAgICBnZXRDbWRJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEltYWdlLCBBZGRDb21tYW5kLktFWV9DTURfSUNPTik7XG4gICAgfVxufVxuXG5BZGRDb21tYW5kLktFWV9DTURfSUNPTiA9ICdjbWRJY29uJztcbkFkZENvbW1hbmQuS0VZX01FTlVfUEFSQU1TID0gJ21lbnVQYXJhbXMnO1xuQWRkQ29tbWFuZC5LRVlfQ01EX0lEID0gJ2NtZElEJztcbkFkZENvbW1hbmQuS0VZX1ZSX0NPTU1BTkRTID0gJ3ZyQ29tbWFuZHMnO1xuXG5leHBvcnQgeyBBZGRDb21tYW5kIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVzcG9uc2UgfSBmcm9tICcuLi9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIEFkZENvbW1hbmRSZXNwb25zZSBleHRlbmRzIFJwY1Jlc3BvbnNlIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5BZGRDb21tYW5kKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFkZENvbW1hbmRSZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY01lc3NhZ2UgfSBmcm9tICcuL1JwY01lc3NhZ2UuanMnO1xuaW1wb3J0IHsgUnBjVHlwZSB9IGZyb20gJy4vZW51bXMvUnBjVHlwZS5qcyc7XG5cbmNsYXNzIFJwY05vdGlmaWNhdGlvbiBleHRlbmRzIFJwY01lc3NhZ2Uge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldFJQQ1R5cGUoUnBjVHlwZS5OT1RJRklDQVRJT04pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUnBjTm90aWZpY2F0aW9uIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBITUlMZXZlbFxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgSE1JTGV2ZWwgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSE1JX0ZVTEwgKCkge1xuICAgICAgICByZXR1cm4gSE1JTGV2ZWwuX01BUC5ITUlfRlVMTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBITUlfTElNSVRFRCAoKSB7XG4gICAgICAgIHJldHVybiBITUlMZXZlbC5fTUFQLkhNSV9MSU1JVEVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEhNSV9CQUNLR1JPVU5EICgpIHtcbiAgICAgICAgcmV0dXJuIEhNSUxldmVsLl9NQVAuSE1JX0JBQ0tHUk9VTkQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSE1JX05PTkUgKCkge1xuICAgICAgICByZXR1cm4gSE1JTGV2ZWwuX01BUC5ITUlfTk9ORTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gSE1JTGV2ZWwuX3ZhbHVlRm9yS2V5KGtleSwgSE1JTGV2ZWwuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEhNSUxldmVsLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgSE1JTGV2ZWwuX01BUCk7XG4gICAgfVxufVxuXG5ITUlMZXZlbC5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ0hNSV9GVUxMJzogJ0ZVTEwnLFxuICAgICdITUlfTElNSVRFRCc6ICdMSU1JVEVEJyxcbiAgICAnSE1JX0JBQ0tHUk9VTkQnOiAnQkFDS0dST1VORCcsXG4gICAgJ0hNSV9OT05FJzogJ05PTkUnLFxuXG59KTtcblxuZXhwb3J0IHsgSE1JTGV2ZWwgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEF1ZGlvU3RyZWFtaW5nU3RhdGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIEF1ZGlvU3RyZWFtaW5nU3RhdGUgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQVVESUJMRSAoKSB7XG4gICAgICAgIHJldHVybiBBdWRpb1N0cmVhbWluZ1N0YXRlLl9NQVAuQVVESUJMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBBVFRFTlVBVEVEICgpIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvU3RyZWFtaW5nU3RhdGUuX01BUC5BVFRFTlVBVEVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5PVF9BVURJQkxFICgpIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvU3RyZWFtaW5nU3RhdGUuX01BUC5OT1RfQVVESUJMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gQXVkaW9TdHJlYW1pbmdTdGF0ZS5fdmFsdWVGb3JLZXkoa2V5LCBBdWRpb1N0cmVhbWluZ1N0YXRlLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBBdWRpb1N0cmVhbWluZ1N0YXRlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgQXVkaW9TdHJlYW1pbmdTdGF0ZS5fTUFQKTtcbiAgICB9XG59XG5cbkF1ZGlvU3RyZWFtaW5nU3RhdGUuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdBVURJQkxFJzogJ0FVRElCTEUnLFxuICAgICdBVFRFTlVBVEVEJzogJ0FUVEVOVUFURUQnLFxuICAgICdOT1RfQVVESUJMRSc6ICdOT1RfQVVESUJMRScsXG5cbn0pO1xuXG5leHBvcnQgeyBBdWRpb1N0cmVhbWluZ1N0YXRlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBWaWRlb1N0cmVhbWluZ1N0YXRlXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBWaWRlb1N0cmVhbWluZ1N0YXRlIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNUUkVBTUFCTEUgKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdTdGF0ZS5fTUFQLlNUUkVBTUFCTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTk9UX1NUUkVBTUFCTEUgKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdTdGF0ZS5fTUFQLk5PVF9TVFJFQU1BQkxFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBWaWRlb1N0cmVhbWluZ1N0YXRlLl92YWx1ZUZvcktleShrZXksIFZpZGVvU3RyZWFtaW5nU3RhdGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFZpZGVvU3RyZWFtaW5nU3RhdGUuX2tleUZvclZhbHVlKHZhbHVlLCBWaWRlb1N0cmVhbWluZ1N0YXRlLl9NQVApO1xuICAgIH1cbn1cblxuVmlkZW9TdHJlYW1pbmdTdGF0ZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1NUUkVBTUFCTEUnOiAnU1RSRUFNQUJMRScsXG4gICAgJ05PVF9TVFJFQU1BQkxFJzogJ05PVF9TVFJFQU1BQkxFJyxcblxufSk7XG5cbmV4cG9ydCB7IFZpZGVvU3RyZWFtaW5nU3RhdGUgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFN5c3RlbUNvbnRleHRcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFN5c3RlbUNvbnRleHQgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU1lTQ1RYVF9NQUlOICgpIHtcbiAgICAgICAgcmV0dXJuIFN5c3RlbUNvbnRleHQuX01BUC5TWVNDVFhUX01BSU47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU1lTQ1RYVF9WUlNFU1NJT04gKCkge1xuICAgICAgICByZXR1cm4gU3lzdGVtQ29udGV4dC5fTUFQLlNZU0NUWFRfVlJTRVNTSU9OO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNZU0NUWFRfTUVOVSAoKSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1Db250ZXh0Ll9NQVAuU1lTQ1RYVF9NRU5VO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNZU0NUWFRfSE1JX09CU0NVUkVEICgpIHtcbiAgICAgICAgcmV0dXJuIFN5c3RlbUNvbnRleHQuX01BUC5TWVNDVFhUX0hNSV9PQlNDVVJFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTWVNDVFhUX0FMRVJUICgpIHtcbiAgICAgICAgcmV0dXJuIFN5c3RlbUNvbnRleHQuX01BUC5TWVNDVFhUX0FMRVJUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1Db250ZXh0Ll92YWx1ZUZvcktleShrZXksIFN5c3RlbUNvbnRleHQuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFN5c3RlbUNvbnRleHQuX2tleUZvclZhbHVlKHZhbHVlLCBTeXN0ZW1Db250ZXh0Ll9NQVApO1xuICAgIH1cbn1cblxuU3lzdGVtQ29udGV4dC5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1NZU0NUWFRfTUFJTic6ICdNQUlOJyxcbiAgICAnU1lTQ1RYVF9WUlNFU1NJT04nOiAnVlJTRVNTSU9OJyxcbiAgICAnU1lTQ1RYVF9NRU5VJzogJ01FTlUnLFxuICAgICdTWVNDVFhUX0hNSV9PQlNDVVJFRCc6ICdITUlfT0JTQ1VSRUQnLFxuICAgICdTWVNDVFhUX0FMRVJUJzogJ0FMRVJUJyxcblxufSk7XG5cbmV4cG9ydCB7IFN5c3RlbUNvbnRleHQgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vUnBjTm90aWZpY2F0aW9uLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcbmltcG9ydCB7IEhNSUxldmVsIH0gZnJvbSAnLi4vZW51bXMvSE1JTGV2ZWwuanMnO1xuaW1wb3J0IHsgQXVkaW9TdHJlYW1pbmdTdGF0ZSB9IGZyb20gJy4uL2VudW1zL0F1ZGlvU3RyZWFtaW5nU3RhdGUuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdTdGF0ZSB9IGZyb20gJy4uL2VudW1zL1ZpZGVvU3RyZWFtaW5nU3RhdGUuanMnO1xuaW1wb3J0IHsgU3lzdGVtQ29udGV4dCB9IGZyb20gJy4uL2VudW1zL1N5c3RlbUNvbnRleHQuanMnO1xuXG5jbGFzcyBPbkhtaVN0YXR1cyBleHRlbmRzIFJwY05vdGlmaWNhdGlvbiB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChzdG9yZSkge1xuICAgICAgICBzdXBlcihzdG9yZSk7XG4gICAgICAgIHRoaXMuc2V0RnVuY3Rpb25OYW1lKEZ1bmN0aW9uSUQuT25ITUlTdGF0dXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtITUlMZXZlbH0gaG1pTGV2ZWxcbiAgICAqIEByZXR1cm4ge09uSG1pU3RhdHVzfVxuICAgICovXG4gICAgc2V0SE1JTGV2ZWwgKGhtaUxldmVsKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEhNSUxldmVsLCBobWlMZXZlbCk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoT25IbWlTdGF0dXMuS0VZX0hNSV9MRVZFTCwgaG1pTGV2ZWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0hNSUxldmVsfVxuICAgICovXG4gICAgZ2V0SE1JTGV2ZWwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoSE1JTGV2ZWwsIE9uSG1pU3RhdHVzLktFWV9ITUlfTEVWRUwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBdWRpb1N0cmVhbWluZ1N0YXRlfSBhdWRpb1N0cmVhbWluZ1N0YXRlXG4gICAgKiBAcmV0dXJuIHtPbkhtaVN0YXR1c31cbiAgICAqL1xuICAgIHNldEF1ZGlvU3RyZWFtaW5nU3RhdGUgKGF1ZGlvU3RyZWFtaW5nU3RhdGUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoQXVkaW9TdHJlYW1pbmdTdGF0ZSwgYXVkaW9TdHJlYW1pbmdTdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoT25IbWlTdGF0dXMuS0VZX0FVRElPX1NUUkVBTUlOR19TVEFURSwgYXVkaW9TdHJlYW1pbmdTdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXVkaW9TdHJlYW1pbmdTdGF0ZX1cbiAgICAqL1xuICAgIGdldEF1ZGlvU3RyZWFtaW5nU3RhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoQXVkaW9TdHJlYW1pbmdTdGF0ZSwgT25IbWlTdGF0dXMuS0VZX0FVRElPX1NUUkVBTUlOR19TVEFURSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N5c3RlbUNvbnRleHR9IHN5c3RlbUNvbnRleHRcbiAgICAqIEByZXR1cm4ge09uSG1pU3RhdHVzfVxuICAgICovXG4gICAgc2V0U3lzdGVtQ29udGV4dCAoc3lzdGVtQ29udGV4dCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTeXN0ZW1Db250ZXh0LCBzeXN0ZW1Db250ZXh0KTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihPbkhtaVN0YXR1cy5LRVlfU1lTVEVNX0NPTlRFWFQsIHN5c3RlbUNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N5c3RlbUNvbnRleHR9XG4gICAgKi9cbiAgICBnZXRTeXN0ZW1Db250ZXh0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFN5c3RlbUNvbnRleHQsIE9uSG1pU3RhdHVzLktFWV9TWVNURU1fQ09OVEVYVCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nU3RhdGV9IHZpZGVvU3RyZWFtaW5nU3RhdGVcbiAgICAqIEByZXR1cm4ge09uSG1pU3RhdHVzfVxuICAgICovXG4gICAgc2V0VmlkZW9TdHJlYW1pbmdTdGF0ZSAodmlkZW9TdHJlYW1pbmdTdGF0ZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShWaWRlb1N0cmVhbWluZ1N0YXRlLCB2aWRlb1N0cmVhbWluZ1N0YXRlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihPbkhtaVN0YXR1cy5LRVlfVklERU9fU1RSRUFNSU5HX1NUQVRFLCB2aWRlb1N0cmVhbWluZ1N0YXRlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1N0YXRlfVxuICAgICovXG4gICAgZ2V0VmlkZW9TdHJlYW1pbmdTdGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChWaWRlb1N0cmVhbWluZ1N0YXRlLCBPbkhtaVN0YXR1cy5LRVlfVklERU9fU1RSRUFNSU5HX1NUQVRFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aW5kb3dJRFxuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldFdpbmRvd0lEICh3aW5kb3dJRCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihPbkhtaVN0YXR1cy5LRVlfV0lORE9XX0lELCB3aW5kb3dJRCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0V2luZG93SUQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoT25IbWlTdGF0dXMuS0VZX1dJTkRPV19JRCk7XG4gICAgfVxufVxuXG5PbkhtaVN0YXR1cy5LRVlfSE1JX0xFVkVMID0gJ2htaUxldmVsJztcbk9uSG1pU3RhdHVzLktFWV9BVURJT19TVFJFQU1JTkdfU1RBVEUgPSAnYXVkaW9TdHJlYW1pbmdTdGF0ZSc7XG5PbkhtaVN0YXR1cy5LRVlfU1lTVEVNX0NPTlRFWFQgPSAnc3lzdGVtQ29udGV4dCc7XG5PbkhtaVN0YXR1cy5LRVlfVklERU9fU1RSRUFNSU5HX1NUQVRFID0gJ3ZpZGVvU3RyZWFtaW5nU3RhdGUnO1xuT25IbWlTdGF0dXMuS0VZX1dJTkRPV19JRCA9ICd3aW5kb3dJRCc7XG5cbmV4cG9ydCB7IE9uSG1pU3RhdHVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vUnBjTm90aWZpY2F0aW9uLmpzJztcbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnLi4vZW51bXMvTGFuZ3VhZ2UuanMnO1xuaW1wb3J0IHsgRnVuY3Rpb25JRCB9IGZyb20gJy4uL2VudW1zL0Z1bmN0aW9uSUQuanMnO1xuXG5jbGFzcyBPbkxhbmd1YWdlQ2hhbmdlIGV4dGVuZHMgUnBjTm90aWZpY2F0aW9uIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5Pbkxhbmd1YWdlQ2hhbmdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TGFuZ3VhZ2V9IGxhbmd1YWdlXG4gICAgKiBAcmV0dXJuIHtPbkxhbmd1YWdlQ2hhbmdlfVxuICAgICovXG4gICAgc2V0TGFuZ3VhZ2UgKGxhbmd1YWdlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKExhbmd1YWdlLCBsYW5ndWFnZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoT25MYW5ndWFnZUNoYW5nZS5LRVlfTEFOR1VBR0UsIGxhbmd1YWdlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtMYW5ndWFnZX1cbiAgICAqL1xuICAgIGdldExhbmd1YWdlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KExhbmd1YWdlLCBPbkxhbmd1YWdlQ2hhbmdlLktFWV9MQU5HVUFHRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0xhbmd1YWdlfSBsYW5ndWFnZVxuICAgICogQHJldHVybiB7T25MYW5ndWFnZUNoYW5nZX1cbiAgICAqL1xuICAgIHNldEhNSURpc3BsYXlMYW5ndWFnZSAobGFuZ3VhZ2UpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoTGFuZ3VhZ2UsIGxhbmd1YWdlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihPbkxhbmd1YWdlQ2hhbmdlLktFWV9ITUlfRElTUExBWV9MQU5HVUFHRSwgbGFuZ3VhZ2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0xhbmd1YWdlfVxuICAgICovXG4gICAgZ2V0SE1JRGlzcGxheUxhbmd1YWdlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KExhbmd1YWdlLCBPbkxhbmd1YWdlQ2hhbmdlLktFWV9ITUlfRElTUExBWV9MQU5HVUFHRSk7XG4gICAgfVxufVxuXG5Pbkxhbmd1YWdlQ2hhbmdlLktFWV9MQU5HVUFHRSA9ICdsYW5ndWFnZSc7XG5Pbkxhbmd1YWdlQ2hhbmdlLktFWV9ITUlfRElTUExBWV9MQU5HVUFHRSA9ICdobWlEaXNwbGF5TGFuZ3VhZ2UnO1xuXG5leHBvcnQgeyBPbkxhbmd1YWdlQ2hhbmdlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEZpbGVUeXBlXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBGaWxlVHlwZSBleHRlbmRzIEVudW0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBHUkFQSElDX0JNUCAoKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fTUFQLkdSQVBISUNfQk1QO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdSQVBISUNfSlBFRyAoKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fTUFQLkdSQVBISUNfSlBFRztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBHUkFQSElDX1BORyAoKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fTUFQLkdSQVBISUNfUE5HO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFVRElPX1dBVkUgKCkge1xuICAgICAgICByZXR1cm4gRmlsZVR5cGUuX01BUC5BVURJT19XQVZFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFVRElPX0FBQyAoKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fTUFQLkFVRElPX0FBQztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBCSU5BUlkgKCkge1xuICAgICAgICByZXR1cm4gRmlsZVR5cGUuX01BUC5CSU5BUlk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSlNPTiAoKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fTUFQLkpTT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIEZpbGVUeXBlLl92YWx1ZUZvcktleShrZXksIEZpbGVUeXBlLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBGaWxlVHlwZS5fa2V5Rm9yVmFsdWUodmFsdWUsIEZpbGVUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuRmlsZVR5cGUuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdHUkFQSElDX0JNUCc6ICdHUkFQSElDX0JNUCcsXG4gICAgJ0dSQVBISUNfSlBFRyc6ICdHUkFQSElDX0pQRUcnLFxuICAgICdHUkFQSElDX1BORyc6ICdHUkFQSElDX1BORycsXG4gICAgJ0FVRElPX1dBVkUnOiAnQVVESU9fV0FWRScsXG4gICAgJ0FVRElPX01QMyc6ICdBVURJT19NUDMnLFxuICAgICdBVURJT19BQUMnOiAnQVVESU9fQUFDJyxcbiAgICAnQklOQVJZJzogJ0JJTkFSWScsXG4gICAgJ0pTT04nOiAnSlNPTicsXG5cbn0pO1xuXG5leHBvcnQgeyBGaWxlVHlwZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNSZXF1ZXN0IH0gZnJvbSAnLi4vUnBjUmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBGaWxlVHlwZSB9IGZyb20gJy4uL2VudW1zL0ZpbGVUeXBlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgUHV0RmlsZSBleHRlbmRzIFJwY1JlcXVlc3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELlB1dEZpbGUpO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLSBOb3QgcGFydCBvZiB0aGUgUlBDIHNwZWMgaXRzZWxmIC0tLS0tXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gZmlsZURhdGFcbiAgICAqIEByZXR1cm4ge1B1dEZpbGV9XG4gICAgKi9cbiAgICBzZXRGaWxlRGF0YSAoZmlsZURhdGEpIHtcbiAgICAgICAgdGhpcy5zZXRCdWxrRGF0YShmaWxlRGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAgKi9cbiAgICBnZXRGaWxlRGF0YSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1bGtEYXRhKCk7XG4gICAgfVxuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVOYW1lXG4gICAgKiBAcmV0dXJuIHtQdXRGaWxlfVxuICAgICovXG4gICAgc2V0RmlsZU5hbWUgKGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFB1dEZpbGUuS0VZX0ZJTEVfTkFNRSwgZmlsZU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEZpbGVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFB1dEZpbGUuS0VZX0ZJTEVfTkFNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0ZpbGVUeXBlfSBmaWxlVHlwZVxuICAgICogQHJldHVybiB7UHV0RmlsZX1cbiAgICAqL1xuICAgIHNldEZpbGVUeXBlIChmaWxlVHlwZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShGaWxlVHlwZSwgZmlsZVR5cGUpO1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihQdXRGaWxlLktFWV9GSUxFX1RZUEUsIGZpbGVUeXBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtGaWxlVHlwZX1cbiAgICAqL1xuICAgIGdldEZpbGVUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEZpbGVUeXBlLCBQdXRGaWxlLktFWV9NRU5VX1BBUkFNUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBlcnNpc3RlbnRGaWxlXG4gICAgKiBAcmV0dXJuIHtQdXRGaWxlfVxuICAgICovXG4gICAgc2V0UGVyc2lzdGVudEZpbGUgKHBlcnNpc3RlbnRGaWxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFB1dEZpbGUuS0VZX1BFUlNJU1RFTlRfRklMRSwgcGVyc2lzdGVudEZpbGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRQZXJzaXN0ZW50RmlsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihQdXRGaWxlLktFWV9QRVJTSVNURU5UX0ZJTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBzeXN0ZW1GaWxlXG4gICAgKiBAcmV0dXJuIHtQdXRGaWxlfVxuICAgICovXG4gICAgc2V0U3lzdGVtRmlsZSAoc3lzdGVtRmlsZSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihQdXRGaWxlLktFWV9TWVNURU1fRklMRSwgc3lzdGVtRmlsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFN5c3RlbUZpbGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUHV0RmlsZS5LRVlfU1lTVEVNX0ZJTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxuICAgICogQHJldHVybiB7UHV0RmlsZX1cbiAgICAqL1xuICAgIHNldE9mZnNldCAob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFB1dEZpbGUuS0VZX09GRlNFVCwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRPZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUHV0RmlsZS5LRVlfT0ZGU0VUKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGhcbiAgICAqIEByZXR1cm4ge1B1dEZpbGV9XG4gICAgKi9cbiAgICBzZXRMZW5ndGggKGxlbmd0aCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihQdXRGaWxlLktFWV9MRU5HVEgsIGxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0TGVuZ3RoICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFB1dEZpbGUuS0VZX0xFTkdUSCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gY3JjXG4gICAgKiBAcmV0dXJuIHtQdXRGaWxlfVxuICAgICovXG4gICAgc2V0Q1JDIChjcmMpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUHV0RmlsZS5LRVlfQ1JDLCBjcmMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldENSQyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihQdXRGaWxlLktFWV9DUkMpO1xuICAgIH1cbn1cblxuUHV0RmlsZS5LRVlfRklMRV9OQU1FID0gJ3N5bmNGaWxlTmFtZSc7XG5QdXRGaWxlLktFWV9GSUxFX1RZUEUgPSAnZmlsZVR5cGUnO1xuUHV0RmlsZS5LRVlfUEVSU0lTVEVOVF9GSUxFID0gJ3BlcnNpc3RlbnRGaWxlJztcblB1dEZpbGUuS0VZX1NZU1RFTV9GSUxFID0gJ3N5c3RlbUZpbGUnO1xuUHV0RmlsZS5LRVlfT0ZGU0VUID0gJ29mZnNldCc7XG5QdXRGaWxlLktFWV9MRU5HVEggPSAnbGVuZ3RoJztcblB1dEZpbGUuS0VZX0NSQyA9ICdjcmMnO1xuXG5leHBvcnQgeyBQdXRGaWxlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVzcG9uc2UgfSBmcm9tICcuLi9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIFB1dEZpbGVSZXNwb25zZSBleHRlbmRzIFJwY1Jlc3BvbnNlIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5QdXRGaWxlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHNwYWNlQXZhaWxhYmxlXG4gICAgKiBAcmV0dXJuIHtQdXRGaWxlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRTcGFjZUF2YWlsYWJsZSAoc3BhY2VBdmFpbGFibGUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUHV0RmlsZVJlc3BvbnNlLktFWV9TUEFDRV9BVkFJTEFCTEUsIHNwYWNlQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRTcGFjZUF2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihQdXRGaWxlUmVzcG9uc2UuS0VZX1NQQUNFX0FWQUlMQUJMRSk7XG4gICAgfVxufVxuXG5QdXRGaWxlUmVzcG9uc2UuS0VZX1NQQUNFX0FWQUlMQUJMRSA9ICdzcGFjZUF2YWlsYWJsZSc7XG5cbmV4cG9ydCB7IFB1dEZpbGVSZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBUZXh0RmllbGROYW1lXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBUZXh0RmllbGROYW1lIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtYWluRmllbGQxICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tYWluRmllbGQxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtYWluRmllbGQyICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tYWluRmllbGQyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtYWluRmllbGQzICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tYWluRmllbGQzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtYWluRmllbGQ0ICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tYWluRmllbGQ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBzdGF0dXNCYXIgKCkge1xuICAgICAgICByZXR1cm4gVGV4dEZpZWxkTmFtZS5fTUFQLnN0YXR1c0JhcjtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtZWRpYUNsb2NrICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tZWRpYUNsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBtZWRpYVRyYWNrICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tZWRpYVRyYWNrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCB0ZW1wbGF0ZVRpdGxlICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC50ZW1wbGF0ZVRpdGxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBhbGVydFRleHQxICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5hbGVydFRleHQxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBhbGVydFRleHQyICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5hbGVydFRleHQyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBhbGVydFRleHQzICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5hbGVydFRleHQzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBzY3JvbGxhYmxlTWVzc2FnZUJvZHkgKCkge1xuICAgICAgICByZXR1cm4gVGV4dEZpZWxkTmFtZS5fTUFQLnNjcm9sbGFibGVNZXNzYWdlQm9keTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBpbml0aWFsSW50ZXJhY3Rpb25UZXh0ICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5pbml0aWFsSW50ZXJhY3Rpb25UZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IG5hdmlnYXRpb25UZXh0MSAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAubmF2aWdhdGlvblRleHQxO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IG5hdmlnYXRpb25UZXh0MiAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAubmF2aWdhdGlvblRleHQyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVUQSAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAuRVRBO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHRvdGFsRGlzdGFuY2UgKCkge1xuICAgICAgICByZXR1cm4gVGV4dEZpZWxkTmFtZS5fTUFQLnRvdGFsRGlzdGFuY2U7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgYXVkaW9QYXNzVGhydURpc3BsYXlUZXh0MSAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAuYXVkaW9QYXNzVGhydURpc3BsYXlUZXh0MTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBhdWRpb1Bhc3NUaHJ1RGlzcGxheVRleHQyICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5hdWRpb1Bhc3NUaHJ1RGlzcGxheVRleHQyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNsaWRlckhlYWRlciAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAuc2xpZGVySGVhZGVyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNsaWRlckZvb3RlciAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAuc2xpZGVyRm9vdGVyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1lbnVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5tZW51TmFtZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBzZWNvbmRhcnlUZXh0ICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5zZWNvbmRhcnlUZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHRlcnRpYXJ5VGV4dCAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAudGVydGlhcnlUZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1lbnVUaXRsZSAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAubWVudVRpdGxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBsb2NhdGlvbk5hbWUgKCkge1xuICAgICAgICByZXR1cm4gVGV4dEZpZWxkTmFtZS5fTUFQLmxvY2F0aW9uTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgbG9jYXRpb25EZXNjcmlwdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9NQVAubG9jYXRpb25EZXNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgYWRkcmVzc0xpbmVzICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5hZGRyZXNzTGluZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHBob25lTnVtYmVyICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRGaWVsZE5hbWUuX01BUC5waG9uZU51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gVGV4dEZpZWxkTmFtZS5fdmFsdWVGb3JLZXkoa2V5LCBUZXh0RmllbGROYW1lLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBUZXh0RmllbGROYW1lLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgVGV4dEZpZWxkTmFtZS5fTUFQKTtcbiAgICB9XG59XG5cblRleHRGaWVsZE5hbWUuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdtYWluRmllbGQxJzogJ21haW5GaWVsZDEnLFxuICAgICdtYWluRmllbGQyJzogJ21haW5GaWVsZDInLFxuICAgICdtYWluRmllbGQzJzogJ21haW5GaWVsZDMnLFxuICAgICdtYWluRmllbGQ0JzogJ21haW5GaWVsZDQnLFxuICAgICdzdGF0dXNCYXInOiAnc3RhdHVzQmFyJyxcbiAgICAnbWVkaWFDbG9jayc6ICdtZWRpYUNsb2NrJyxcbiAgICAnbWVkaWFUcmFjayc6ICdtZWRpYVRyYWNrJyxcbiAgICAndGVtcGxhdGVUaXRsZSc6ICd0ZW1wbGF0ZVRpdGxlJyxcbiAgICAnYWxlcnRUZXh0MSc6ICdhbGVydFRleHQxJyxcbiAgICAnYWxlcnRUZXh0Mic6ICdhbGVydFRleHQyJyxcbiAgICAnYWxlcnRUZXh0Myc6ICdhbGVydFRleHQzJyxcbiAgICAnc2Nyb2xsYWJsZU1lc3NhZ2VCb2R5JzogJ3Njcm9sbGFibGVNZXNzYWdlQm9keScsXG4gICAgJ2luaXRpYWxJbnRlcmFjdGlvblRleHQnOiAnaW5pdGlhbEludGVyYWN0aW9uVGV4dCcsXG4gICAgJ25hdmlnYXRpb25UZXh0MSc6ICduYXZpZ2F0aW9uVGV4dDEnLFxuICAgICduYXZpZ2F0aW9uVGV4dDInOiAnbmF2aWdhdGlvblRleHQyJyxcbiAgICAnRVRBJzogJ0VUQScsXG4gICAgJ3RvdGFsRGlzdGFuY2UnOiAndG90YWxEaXN0YW5jZScsXG4gICAgJ2F1ZGlvUGFzc1RocnVEaXNwbGF5VGV4dDEnOiAnYXVkaW9QYXNzVGhydURpc3BsYXlUZXh0MScsXG4gICAgJ2F1ZGlvUGFzc1RocnVEaXNwbGF5VGV4dDInOiAnYXVkaW9QYXNzVGhydURpc3BsYXlUZXh0MicsXG4gICAgJ3NsaWRlckhlYWRlcic6ICdzbGlkZXJIZWFkZXInLFxuICAgICdzbGlkZXJGb290ZXInOiAnc2xpZGVyRm9vdGVyJyxcbiAgICAnbWVudU5hbWUnOiAnbWVudU5hbWUnLFxuICAgICdzZWNvbmRhcnlUZXh0JzogJ3NlY29uZGFyeVRleHQnLFxuICAgICd0ZXJ0aWFyeVRleHQnOiAndGVydGlhcnlUZXh0JyxcbiAgICAnbWVudVRpdGxlJzogJ21lbnVUaXRsZScsXG4gICAgJ2xvY2F0aW9uTmFtZSc6ICdsb2NhdGlvbk5hbWUnLFxuICAgICdsb2NhdGlvbkRlc2NyaXB0aW9uJzogJ2xvY2F0aW9uRGVzY3JpcHRpb24nLFxuICAgICdhZGRyZXNzTGluZXMnOiAnYWRkcmVzc0xpbmVzJyxcbiAgICAncGhvbmVOdW1iZXInOiAncGhvbmVOdW1iZXInLFxuXG59KTtcblxuZXhwb3J0IHsgVGV4dEZpZWxkTmFtZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gQ2hhcmFjdGVyU2V0XG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBDaGFyYWN0ZXJTZXQgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRZUEUyU0VUICgpIHtcbiAgICAgICAgcmV0dXJuIENoYXJhY3RlclNldC5fTUFQLlRZUEUyU0VUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBUWVBFNVNFVCAoKSB7XG4gICAgICAgIHJldHVybiBDaGFyYWN0ZXJTZXQuX01BUC5UWVBFNVNFVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ0lEMVNFVCAoKSB7XG4gICAgICAgIHJldHVybiBDaGFyYWN0ZXJTZXQuX01BUC5DSUQxU0VUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDSUQyU0VUICgpIHtcbiAgICAgICAgcmV0dXJuIENoYXJhY3RlclNldC5fTUFQLkNJRDJTRVQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIENoYXJhY3RlclNldC5fdmFsdWVGb3JLZXkoa2V5LCBDaGFyYWN0ZXJTZXQuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIENoYXJhY3RlclNldC5fa2V5Rm9yVmFsdWUodmFsdWUsIENoYXJhY3RlclNldC5fTUFQKTtcbiAgICB9XG59XG5cbkNoYXJhY3RlclNldC5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1RZUEUyU0VUJzogJ1RZUEUyU0VUJyxcbiAgICAnVFlQRTVTRVQnOiAnVFlQRTVTRVQnLFxuICAgICdDSUQxU0VUJzogJ0NJRDFTRVQnLFxuICAgICdDSUQyU0VUJzogJ0NJRDJTRVQnLFxuXG59KTtcblxuZXhwb3J0IHsgQ2hhcmFjdGVyU2V0IH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5pbXBvcnQgeyBUZXh0RmllbGROYW1lIH0gZnJvbSAnLi4vZW51bXMvVGV4dEZpZWxkTmFtZS5qcyc7XG5pbXBvcnQgeyBDaGFyYWN0ZXJTZXQgfSBmcm9tICcuLi9lbnVtcy9DaGFyYWN0ZXJTZXQuanMnO1xuXG5jbGFzcyBUZXh0RmllbGQgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtUZXh0RmllbGROYW1lfSB0ZXh0RmllbGROYW1lXG4gICAgKiBAcmV0dXJuIHtUZXh0RmllbGR9XG4gICAgKi9cbiAgICBzZXRUZXh0RmllbGROYW1lICh0ZXh0RmllbGROYW1lKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFRleHRGaWVsZE5hbWUsIHRleHRGaWVsZE5hbWUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRleHRGaWVsZC5LRVlfTkFNRSwgdGV4dEZpZWxkTmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7VGV4dEZpZWxkTmFtZX1cbiAgICAqL1xuICAgIGdldFRleHRGaWVsZE5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoVGV4dEZpZWxkTmFtZSwgVGV4dEZpZWxkLktFWV9OQU1FKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtDaGFyYWN0ZXJTZXR9IHRleHRGaWVsZE5hbWVcbiAgICAqIEByZXR1cm4ge1RleHRGaWVsZH1cbiAgICAqL1xuICAgIHNldENoYXJhY3RlclNldCAoY2hhcmFjdGVyU2V0KSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKENoYXJhY3RlclNldCwgY2hhcmFjdGVyU2V0KTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihUZXh0RmllbGQuS0VZX0NIQVJBQ1RFUl9TRVQsIGNoYXJhY3RlclNldCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Q2hhcmFjdGVyU2V0fVxuICAgICovXG4gICAgZ2V0Q2hhcmFjdGVyU2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KENoYXJhY3RlclNldCwgVGV4dEZpZWxkLktFWV9DSEFSQUNURVJfU0VUKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICogQHJldHVybiB7VGV4dEZpZWxkfVxuICAgICovXG4gICAgc2V0V2lkdGggKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRleHRGaWVsZC5LRVlfV0lEVEgsIHdpZHRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRXaWR0aCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihUZXh0RmllbGQuS0VZX1dJRFRIKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3dzXG4gICAgKiBAcmV0dXJuIHtUZXh0RmllbGR9XG4gICAgKi9cbiAgICBzZXRSb3dzIChyb3dzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRleHRGaWVsZC5LRVlfUk9XUywgcm93cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Um93cyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihUZXh0RmllbGQuS0VZX1JPV1MpO1xuICAgIH1cbn1cblxuVGV4dEZpZWxkLktFWV9OQU1FID0gJ25hbWUnO1xuVGV4dEZpZWxkLktFWV9DSEFSQUNURVJfU0VUID0gJ2NoYXJhY3RlclNldCc7XG5UZXh0RmllbGQuS0VZX1dJRFRIID0gJ3dpZHRoJztcblRleHRGaWVsZC5LRVlfUk9XUyA9ICdyb3dzJztcblxuZXhwb3J0IHsgVGV4dEZpZWxkIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgSW1hZ2VSZXNvbHV0aW9uIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXNvbHV0aW9uV2lkdGhcbiAgICAqIEByZXR1cm4ge0ltYWdlUmVzb2x1dGlvbn1cbiAgICAqL1xuICAgIHNldFJlc29sdXRpb25XaWR0aCAocmVzb2x1dGlvbldpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlUmVzb2x1dGlvbi5LRVlfUkVTT0xVVElPTl9XSURUSCwgcmVzb2x1dGlvbldpZHRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRSZXNvbHV0aW9uV2lkdGggKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSW1hZ2VSZXNvbHV0aW9uLktFWV9SRVNPTFVUSU9OX1dJRFRIKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSByZXNvbHV0aW9uSGVpZ2h0XG4gICAgKiBAcmV0dXJuIHtJbWFnZVJlc29sdXRpb259XG4gICAgKi9cbiAgICBzZXRSZXNvbHV0aW9uSGVpZ2h0IChyZXNvbHV0aW9uSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlUmVzb2x1dGlvbi5LRVlfUkVTT0xVVElPTl9IRUlHSFQsIHJlc29sdXRpb25IZWlnaHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldFJlc29sdXRpb25IZWlnaHQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSW1hZ2VSZXNvbHV0aW9uLktFWV9SRVNPTFVUSU9OX0hFSUdIVCk7XG4gICAgfVxufVxuXG5JbWFnZVJlc29sdXRpb24uS0VZX1JFU09MVVRJT05fV0lEVEggPSAncmVzb2x1dGlvbldpZHRoJztcbkltYWdlUmVzb2x1dGlvbi5LRVlfUkVTT0xVVElPTl9IRUlHSFQgPSAncmVzb2x1dGlvbkhlaWdodCc7XG5cbmV4cG9ydCB7IEltYWdlUmVzb2x1dGlvbiB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBJbWFnZUZpZWxkTmFtZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgSW1hZ2VGaWVsZE5hbWUgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNvZnRCdXR0b25JbWFnZSAoKSB7XG4gICAgICAgIHJldHVybiBJbWFnZUZpZWxkTmFtZS5fTUFQLnNvZnRCdXR0b25JbWFnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgY2hvaWNlSW1hZ2UgKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VGaWVsZE5hbWUuX01BUC5jaG9pY2VJbWFnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgY2hvaWNlU2Vjb25kYXJ5SW1hZ2UgKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VGaWVsZE5hbWUuX01BUC5jaG9pY2VTZWNvbmRhcnlJbWFnZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCB2ckhlbHBJdGVtICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAudnJIZWxwSXRlbTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCB0dXJuSWNvbiAoKSB7XG4gICAgICAgIHJldHVybiBJbWFnZUZpZWxkTmFtZS5fTUFQLnR1cm5JY29uO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1lbnVJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAubWVudUljb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IGNtZEljb24gKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VGaWVsZE5hbWUuX01BUC5jbWRJY29uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBhcHBJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAuYXBwSWNvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgZ3JhcGhpYyAoKSB7XG4gICAgICAgIHJldHVybiBJbWFnZUZpZWxkTmFtZS5fTUFQLmdyYXBoaWM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IHNlY29uZGFyeUdyYXBoaWMgKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VGaWVsZE5hbWUuX01BUC5zZWNvbmRhcnlHcmFwaGljO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBzaG93Q29uc3RhbnRUQlRJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAuc2hvd0NvbnN0YW50VEJUSWNvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgc2hvd0NvbnN0YW50VEJUTmV4dFR1cm5JY29uICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAuc2hvd0NvbnN0YW50VEJUTmV4dFR1cm5JY29uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBsb2NhdGlvbkltYWdlICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAubG9jYXRpb25JbWFnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgYWxlcnRJY29uICgpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlRmllbGROYW1lLl9NQVAuYWxlcnRJY29uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJbWFnZUZpZWxkTmFtZS5fdmFsdWVGb3JLZXkoa2V5LCBJbWFnZUZpZWxkTmFtZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSW1hZ2VGaWVsZE5hbWUuX2tleUZvclZhbHVlKHZhbHVlLCBJbWFnZUZpZWxkTmFtZS5fTUFQKTtcbiAgICB9XG59XG5cbkltYWdlRmllbGROYW1lLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnc29mdEJ1dHRvbkltYWdlJzogJ3NvZnRCdXR0b25JbWFnZScsXG4gICAgJ2Nob2ljZUltYWdlJzogJ2Nob2ljZUltYWdlJyxcbiAgICAnY2hvaWNlU2Vjb25kYXJ5SW1hZ2UnOiAnY2hvaWNlU2Vjb25kYXJ5SW1hZ2UnLFxuICAgICd2ckhlbHBJdGVtJzogJ3ZySGVscEl0ZW0nLFxuICAgICd0dXJuSWNvbic6ICd0dXJuSWNvbicsXG4gICAgJ21lbnVJY29uJzogJ21lbnVJY29uJyxcbiAgICAnY21kSWNvbic6ICdjbWRJY29uJyxcbiAgICAnYXBwSWNvbic6ICdhcHBJY29uJyxcbiAgICAnZ3JhcGhpYyc6ICdncmFwaGljJyxcbiAgICAnc2Vjb25kYXJ5R3JhcGhpYyc6ICdzZWNvbmRhcnlHcmFwaGljJyxcbiAgICAnc2hvd0NvbnN0YW50VEJUSWNvbic6ICdzaG93Q29uc3RhbnRUQlRJY29uJyxcbiAgICAnc2hvd0NvbnN0YW50VEJUTmV4dFR1cm5JY29uJzogJ3Nob3dDb25zdGFudFRCVE5leHRUdXJuSWNvbicsXG4gICAgJ2xvY2F0aW9uSW1hZ2UnOiAnbG9jYXRpb25JbWFnZScsXG4gICAgJ2FsZXJ0SWNvbic6ICdhbGVydEljb24nLFxuXG59KTtcblxuZXhwb3J0IHsgSW1hZ2VGaWVsZE5hbWUgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IEltYWdlUmVzb2x1dGlvbiB9IGZyb20gJy4vSW1hZ2VSZXNvbHV0aW9uLmpzJztcbmltcG9ydCB7IEZpbGVUeXBlIH0gZnJvbSAnLi4vZW51bXMvRmlsZVR5cGUuanMnO1xuaW1wb3J0IHsgSW1hZ2VGaWVsZE5hbWUgfSBmcm9tICcuLi9lbnVtcy9JbWFnZUZpZWxkTmFtZS5qcyc7XG5cbmNsYXNzIEltYWdlRmllbGQgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZUZpZWxkTmFtZX0gaW1hZ2VGaWVsZE5hbWVcbiAgICAqIEByZXR1cm4ge0ltYWdlRmllbGR9XG4gICAgKi9cbiAgICBzZXRJbWFnZUZpZWxkTmFtZSAoaW1hZ2VGaWVsZE5hbWUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoSW1hZ2VGaWVsZE5hbWUsIGltYWdlRmllbGROYW1lKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihJbWFnZUZpZWxkLktFWV9OQU1FLCBpbWFnZUZpZWxkTmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7SW1hZ2VGaWVsZE5hbWV9XG4gICAgKi9cbiAgICBnZXRJbWFnZUZpZWxkTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChJbWFnZUZpZWxkTmFtZSwgSW1hZ2VGaWVsZC5LRVlfTkFNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0ZpbGVUeXBlW119IGltYWdlVHlwZVN1cHBvcnRlZFxuICAgICogQHJldHVybiB7SW1hZ2VGaWVsZH1cbiAgICAqL1xuICAgIHNldEltYWdlVHlwZVN1cHBvcnRlZCAoaW1hZ2VUeXBlU3VwcG9ydGVkKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEZpbGVUeXBlLCBpbWFnZVR5cGVTdXBwb3J0ZWQsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlRmllbGQuS0VZX0lNQUdFX1RZUEVfU1VQUE9SVEVELCBpbWFnZVR5cGVTdXBwb3J0ZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ZpbGVUeXBlfVxuICAgICovXG4gICAgZ2V0SW1hZ2VUeXBlU3VwcG9ydGVkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEZpbGVUeXBlLCBJbWFnZUZpZWxkLktFWV9JTUFHRV9UWVBFX1NVUFBPUlRFRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0ltYWdlUmVzb2x1dGlvbn0gaW1hZ2VSZXNvbHV0aW9uXG4gICAgKiBAcmV0dXJuIHtJbWFnZUZpZWxkfVxuICAgICovXG4gICAgc2V0SW1hZ2VSZXNvbHV0aW9uIChpbWFnZVJlc29sdXRpb24pIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoSW1hZ2VSZXNvbHV0aW9uLCBpbWFnZVJlc29sdXRpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlRmllbGQuS0VZX0lNQUdFX1JFU09MVVRJT04sIGltYWdlUmVzb2x1dGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7SW1hZ2VSZXNvbHV0aW9ufVxuICAgICovXG4gICAgZ2V0SW1hZ2VSZXNvbHV0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEltYWdlUmVzb2x1dGlvbiwgSW1hZ2VGaWVsZC5LRVlfSU1BR0VfUkVTT0xVVElPTik7XG4gICAgfVxufVxuXG5JbWFnZUZpZWxkLktFWV9OQU1FID0gJ25hbWUnO1xuSW1hZ2VGaWVsZC5LRVlfSU1BR0VfVFlQRV9TVVBQT1JURUQgPSAnaW1hZ2VUeXBlU3VwcG9ydGVkJztcbkltYWdlRmllbGQuS0VZX0lNQUdFX1JFU09MVVRJT04gPSAnaW1hZ2VSZXNvbHV0aW9uJztcblxuZXhwb3J0IHsgSW1hZ2VGaWVsZCB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5cbmNsYXNzIFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHByZXNzQXZhaWxhYmxlXG4gICAgKiBAcmV0dXJuIHtUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0UHJlc3NBdmFpbGFibGUgKHByZXNzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMuS0VZX1BSRVNTX0FWQUlMQUJMRSwgcHJlc3NBdmFpbGFibGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRQcmVzc0F2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzLktFWV9QUkVTU19BVkFJTEFCTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBtdWx0aVRvdWNoQXZhaWxhYmxlXG4gICAgKiBAcmV0dXJuIHtUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0TXVsdGlUb3VjaEF2YWlsYWJsZSAobXVsdGlUb3VjaEF2YWlsYWJsZSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzLktFWV9NVUxUSV9UT1VDSF9BVkFJTEFCTEUsIG11bHRpVG91Y2hBdmFpbGFibGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRNdWx0aVRvdWNoQXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMuS0VZX01VTFRJX1RPVUNIX0FWQUlMQUJMRSk7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBkb3VibGVQcmVzc0F2YWlsYWJsZVxuICAgICogQHJldHVybiB7VG91Y2hFdmVudENhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldERvdWJsZVByZXNzQXZhaWxhYmxlIChkb3VibGVQcmVzc0F2YWlsYWJsZSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzLktFWV9ET1VCTEVfUFJFU1NfQVZBSUxBQkxFLCBkb3VibGVQcmVzc0F2YWlsYWJsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldERvdWJsZVByZXNzQXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMuS0VZX0RPVUJMRV9QUkVTU19BVkFJTEFCTEUpO1xuICAgIH1cbn1cblxuVG91Y2hFdmVudENhcGFiaWxpdGllcy5LRVlfUFJFU1NfQVZBSUxBQkxFID0gJ3ByZXNzQXZhaWxhYmxlJztcblRvdWNoRXZlbnRDYXBhYmlsaXRpZXMuS0VZX01VTFRJX1RPVUNIX0FWQUlMQUJMRSA9ICdtdWx0aVRvdWNoQXZhaWxhYmxlJztcblRvdWNoRXZlbnRDYXBhYmlsaXRpZXMuS0VZX0RPVUJMRV9QUkVTU19BVkFJTEFCTEUgPSAnZG91YmxlUHJlc3NBdmFpbGFibGUnO1xuXG5leHBvcnQgeyBUb3VjaEV2ZW50Q2FwYWJpbGl0aWVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IEltYWdlUmVzb2x1dGlvbiB9IGZyb20gJy4vSW1hZ2VSZXNvbHV0aW9uLmpzJztcbmltcG9ydCB7IFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMgfSBmcm9tICcuL1RvdWNoRXZlbnRDYXBhYmlsaXRpZXMuanMnO1xuXG5jbGFzcyBTY3JlZW5QYXJhbXMgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0ltYWdlUmVzb2x1dGlvbn0gcmVzb2x1dGlvblxuICAgICogQHJldHVybiB7U2NyZWVuUGFyYW1zfVxuICAgICovXG4gICAgc2V0UmVzb2x1dGlvbiAocmVzb2x1dGlvbikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShJbWFnZVJlc29sdXRpb24sIHJlc29sdXRpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNjcmVlblBhcmFtcy5LRVlfUkVTT0xVVElPTiwgcmVzb2x1dGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7SW1hZ2VSZXNvbHV0aW9ufVxuICAgICovXG4gICAgZ2V0UmVzb2x1dGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChJbWFnZVJlc29sdXRpb24sIFNjcmVlblBhcmFtcy5LRVlfUkVTT0xVVElPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1RvdWNoRXZlbnRDYXBhYmlsaXRpZXN9IHRvdWNoRXZlbnRDYXBhYmlsaXRpZXNcbiAgICAqIEByZXR1cm4ge1NjcmVlblBhcmFtc31cbiAgICAqL1xuICAgIHNldFRvdWNoRXZlbnRBdmFpbGFibGUgKHRvdWNoRXZlbnRDYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoVG91Y2hFdmVudENhcGFiaWxpdGllcywgdG91Y2hFdmVudENhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2NyZWVuUGFyYW1zLktFWV9UT1VDSF9FVkVOVF9BVkFJTEFCTEUsIHRvdWNoRXZlbnRDYXBhYmlsaXRpZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1RvdWNoRXZlbnRDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBnZXRUb3VjaEV2ZW50QXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFRvdWNoRXZlbnRDYXBhYmlsaXRpZXMsIFNjcmVlblBhcmFtcy5LRVlfVE9VQ0hfRVZFTlRfQVZBSUxBQkxFKTtcbiAgICB9XG59XG5cblNjcmVlblBhcmFtcy5LRVlfUkVTT0xVVElPTiA9ICdyZXNvbHV0aW9uJztcblNjcmVlblBhcmFtcy5LRVlfVE9VQ0hfRVZFTlRfQVZBSUxBQkxFID0gJ3RvdWNoRXZlbnRBdmFpbGFibGUnO1xuXG5leHBvcnQgeyBTY3JlZW5QYXJhbXMgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gRGlzcGxheVR5cGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIERpc3BsYXlUeXBlIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENJRCAoKSB7XG4gICAgICAgIHJldHVybiBEaXNwbGF5VHlwZS5fTUFQLkNJRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBUWVBFMiAoKSB7XG4gICAgICAgIHJldHVybiBEaXNwbGF5VHlwZS5fTUFQLlRZUEUyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRZUEU1ICgpIHtcbiAgICAgICAgcmV0dXJuIERpc3BsYXlUeXBlLl9NQVAuVFlQRTU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkdOICgpIHtcbiAgICAgICAgcmV0dXJuIERpc3BsYXlUeXBlLl9NQVAuTkdOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdFTjJfOF9ETUEgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5HRU4yXzhfRE1BO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdFTjJfNl9ETUEgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5HRU4yXzZfRE1BO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1GRDMgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5NRkQzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1GRDQgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5NRkQ0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE1GRDUgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5NRkQ1O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdFTjNfOF9JTkNIICgpIHtcbiAgICAgICAgcmV0dXJuIERpc3BsYXlUeXBlLl9NQVAuR0VOM184X0lOQ0g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0RMX0dFTkVSSUMgKCkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX01BUC5TRExfR0VORVJJQztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gRGlzcGxheVR5cGUuX3ZhbHVlRm9yS2V5KGtleSwgRGlzcGxheVR5cGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIERpc3BsYXlUeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgRGlzcGxheVR5cGUuX01BUCk7XG4gICAgfVxufVxuXG5EaXNwbGF5VHlwZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ0NJRCc6ICdDSUQnLFxuICAgICdUWVBFMic6ICdUWVBFMicsXG4gICAgJ1RZUEU1JzogJ1RZUEU1JyxcbiAgICAnTkdOJzogJ05HTicsXG4gICAgJ0dFTjJfOF9ETUEnOiAnR0VOMl84X0RNQScsXG4gICAgJ0dFTjJfNl9ETUEnOiAnR0VOMl82X0RNQScsXG4gICAgJ01GRDMnOiAnTUZEMycsXG4gICAgJ01GRDQnOiAnTUZENCcsXG4gICAgJ1RFU1RJTkcnOiAnVEVTVElORycsXG4gICAgJ01GRDUnOiAnTUZENScsXG4gICAgJ0dFTjNfOF9JTkNIJzogJ0dFTjNfOC1JTkNIJyxcbiAgICAnU0RMX0dFTkVSSUMnOiAnU0RMX0dFTkVSSUMnLFxufSk7XG5cbmV4cG9ydCB7IERpc3BsYXlUeXBlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBNZWRpYUNsb2NrRm9ybWF0XG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBNZWRpYUNsb2NrRm9ybWF0IGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENMT0NLMSAoKSB7XG4gICAgICAgIHJldHVybiBNZWRpYUNsb2NrRm9ybWF0Ll9NQVAuQ0xPQ0sxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENMT0NLMiAoKSB7XG4gICAgICAgIHJldHVybiBNZWRpYUNsb2NrRm9ybWF0Ll9NQVAuQ0xPQ0syO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENMT0NLMyAoKSB7XG4gICAgICAgIHJldHVybiBNZWRpYUNsb2NrRm9ybWF0Ll9NQVAuQ0xPQ0szO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENMT0NLVEVYVDEgKCkge1xuICAgICAgICByZXR1cm4gTWVkaWFDbG9ja0Zvcm1hdC5fTUFQLkNMT0NLVEVYVDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ0xPQ0tURVhUMiAoKSB7XG4gICAgICAgIHJldHVybiBNZWRpYUNsb2NrRm9ybWF0Ll9NQVAuQ0xPQ0tURVhUMjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBDTE9DS1RFWFQzICgpIHtcbiAgICAgICAgcmV0dXJuIE1lZGlhQ2xvY2tGb3JtYXQuX01BUC5DTE9DS1RFWFQzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENMT0NLVEVYVDQgKCkge1xuICAgICAgICByZXR1cm4gTWVkaWFDbG9ja0Zvcm1hdC5fTUFQLkNMT0NLVEVYVDQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIE1lZGlhQ2xvY2tGb3JtYXQuX3ZhbHVlRm9yS2V5KGtleSwgTWVkaWFDbG9ja0Zvcm1hdC5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWVkaWFDbG9ja0Zvcm1hdC5fa2V5Rm9yVmFsdWUodmFsdWUsIE1lZGlhQ2xvY2tGb3JtYXQuX01BUCk7XG4gICAgfVxufVxuXG5NZWRpYUNsb2NrRm9ybWF0Ll9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnQ0xPQ0sxJzogJ0NMT0NLMScsXG4gICAgJ0NMT0NLMic6ICdDTE9DSzInLFxuICAgICdDTE9DSzMnOiAnQ0xPQ0szJyxcbiAgICAnQ0xPQ0tURVhUMSc6ICdDTE9DS1RFWFQxJyxcbiAgICAnQ0xPQ0tURVhUMic6ICdDTE9DS1RFWFQyJyxcbiAgICAnQ0xPQ0tURVhUMyc6ICdDTE9DS1RFWFQzJyxcbiAgICAnQ0xPQ0tURVhUNCc6ICdDTE9DS1RFWFQ0Jyxcbn0pO1xuXG5leHBvcnQgeyBNZWRpYUNsb2NrRm9ybWF0IH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tICcuL1RleHRGaWVsZC5qcyc7XG5pbXBvcnQgeyBJbWFnZUZpZWxkIH0gZnJvbSAnLi9JbWFnZUZpZWxkLmpzJztcbmltcG9ydCB7IFNjcmVlblBhcmFtcyB9IGZyb20gJy4vU2NyZWVuUGFyYW1zLmpzJztcbmltcG9ydCB7IERpc3BsYXlUeXBlIH0gZnJvbSAnLi4vZW51bXMvRGlzcGxheVR5cGUuanMnO1xuaW1wb3J0IHsgTWVkaWFDbG9ja0Zvcm1hdCB9IGZyb20gJy4uL2VudW1zL01lZGlhQ2xvY2tGb3JtYXQuanMnO1xuXG5jbGFzcyBEaXNwbGF5Q2FwYWJpbGl0aWVzIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7RGlzcGxheVR5cGV9IGRpc3BsYXlUeXBlXG4gICAgKiBAcmV0dXJuIHtEaXNwbGF5Q2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0RGlzcGxheVR5cGUgKGRpc3BsYXlUeXBlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKERpc3BsYXlUeXBlLCBkaXNwbGF5VHlwZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfRElTUExBWV9UWVBFLCBkaXNwbGF5VHlwZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7RGlzcGxheVR5cGV9XG4gICAgKi9cbiAgICBnZXREaXNwbGF5VHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChEaXNwbGF5VHlwZSwgRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfRElTUExBWV9UWVBFKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGRpc3BsYXlOYW1lXG4gICAgKiBAcmV0dXJuIHtEaXNwbGF5Q2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0RGlzcGxheU5hbWUgKGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX0RJU1BMQVlfTkFNRSwgZGlzcGxheU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldERpc3BsYXlOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX0RJU1BMQVlfTkFNRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PFRleHRGaWVsZD59IHRleHRGaWVsZHNcbiAgICAqIEByZXR1cm4ge0Rpc3BsYXlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRUZXh0RmllbGRzICh0ZXh0RmllbGRzKSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSB3b3JrIHdpdGggYXJyYXlzXG4gICAgICAgIC8vIHRoaXMudmFsaWRhdGVUeXBlKFRleHRGaWVsZCwgdGV4dEZpZWxkcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfVEVYVF9GSUVMRFMsIHRleHRGaWVsZHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PFRleHRGaWVsZD59XG4gICAgKi9cbiAgICBnZXRUZXh0RmllbGRzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFRleHRGaWVsZCwgRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfVEVYVF9GSUVMRFMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PEltYWdlRmllbGQ+fSBpbWFnZUZpZWxkc1xuICAgICogQHJldHVybiB7RGlzcGxheUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldEltYWdlRmllbGRzIChpbWFnZUZpZWxkcykge1xuICAgICAgICAvLyBUT0RPIG1ha2Ugd29yayB3aXRoIGFycmF5c1xuICAgICAgICAvLyB0aGlzLnZhbGlkYXRlVHlwZShJbWFnZUZpZWxkLCBpbWFnZUZpZWxkcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfSU1BR0VfRklFTERTLCBpbWFnZUZpZWxkcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8SW1hZ2VGaWVsZD59XG4gICAgKi9cbiAgICBnZXRJbWFnZUZpZWxkcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChJbWFnZUZpZWxkLCBEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9JTUFHRV9GSUVMRFMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxNZWRpYUNsb2NrRm9ybWF0Pn0gbWVkaWFDbG9ja0Zvcm1hdHNcbiAgICAqIEByZXR1cm4ge0Rpc3BsYXlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRNZWRpYUNsb2NrRm9ybWF0cyAobWVkaWFDbG9ja0Zvcm1hdHMpIHtcbiAgICAgICAgLy8gVE9ETyBtYWtlIHdvcmsgd2l0aCBhcnJheXNcbiAgICAgICAgLy8gdGhpcy52YWxpZGF0ZVR5cGUoSW1hZ2VGaWVsZCwgbWVkaWFDbG9ja0Zvcm1hdHMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX01FRElBX0NMT0NLX0ZPUk1BVFMsIG1lZGlhQ2xvY2tGb3JtYXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxNZWRpYUNsb2NrRm9ybWF0Pn1cbiAgICAqL1xuICAgIGdldE1lZGlhQ2xvY2tGb3JtYXRzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KE1lZGlhQ2xvY2tGb3JtYXQsIERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX01FRElBX0NMT0NLX0ZPUk1BVFMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGdyYXBoaWNTdXBwb3J0ZWRcbiAgICAqIEByZXR1cm4ge0Rpc3BsYXlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRHcmFwaGljc1N1cHBvcnRlZCAoZ3JhcGhpY1N1cHBvcnRlZCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9HUkFQSElDU19TVVBQT1JURUQsIGdyYXBoaWNTdXBwb3J0ZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRHcmFwaGljc1N1cHBvcnRlZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9HUkFQSElDU19TVVBQT1JURUQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSB0ZW1wbGF0ZXNBdmFpbGFibGVcbiAgICAqIEByZXR1cm4ge0Rpc3BsYXlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRUZW1wbGF0ZXNBdmFpbGFibGUgKHRlbXBsYXRlc0F2YWlsYWJsZSkge1xuICAgICAgICAvLyBUT0RPIG1ha2Ugd29yayB3aXRoIGFycmF5c1xuICAgICAgICAvLyB0aGlzLnZhbGlkYXRlVHlwZShTdHJpbmcsIHRlbXBsYXRlc0F2YWlsYWJsZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfVEVNUExBVEVTX0FWQUlMQUJMRSwgdGVtcGxhdGVzQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxTdHJpbmc+fVxuICAgICovXG4gICAgZ2V0VGVtcGxhdGVzQXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX1RFTVBMQVRFU19BVkFJTEFCTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTY3JlZW5QYXJhbXN9IHNjcmVlblBhcmFtc1xuICAgICogQHJldHVybiB7RGlzcGxheUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFNjcmVlblBhcmFtcyAoc2NyZWVuUGFyYW1zKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFNjcmVlblBhcmFtcywgc2NyZWVuUGFyYW1zKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9TQ1JFRU5fUEFSQU1TLCBzY3JlZW5QYXJhbXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1NjcmVlblBhcmFtc31cbiAgICAqL1xuICAgIGdldFNjcmVlblBhcmFtcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChTY3JlZW5QYXJhbXMsIERpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX1NDUkVFTl9QQVJBTVMpO1xuICAgIH1cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyPn0gbnVtQ3VzdG9tUHJlc2V0c0F2YWlsYWJsZVxuICAgICogQHJldHVybiB7RGlzcGxheUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldE51bUN1c3RvbVByZXNldHNBdmFpbGFibGUgKG51bUN1c3RvbVByZXNldHNBdmFpbGFibGUpIHtcbiAgICAgICAgLy8gVE9ETyBtYWtlIHdvcmsgd2l0aCBhcnJheXNcbiAgICAgICAgLy8gdGhpcy52YWxpZGF0ZVR5cGUoTnVtYmVyLCBudW1DdXN0b21QcmVzZXRzQXZhaWxhYmxlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9OVU1fQ1VTVE9NX1BSRVNFVFNfQVZBSUxBQkxFLCBudW1DdXN0b21QcmVzZXRzQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxOdW1iZXI+fVxuICAgICovXG4gICAgZ2V0TnVtQ3VzdG9tUHJlc2V0c0F2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihEaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9OVU1fQ1VTVE9NX1BSRVNFVFNfQVZBSUxBQkxFKTtcbiAgICB9XG59XG5cbkRpc3BsYXlDYXBhYmlsaXRpZXMuS0VZX0RJU1BMQVlfVFlQRSA9ICdkaXNwbGF5VHlwZSc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9ESVNQTEFZX05BTUUgPSAnZGlzcGxheU5hbWUnO1xuRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfVEVYVF9GSUVMRFMgPSAndGV4dEZpZWxkcyc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9JTUFHRV9GSUVMRFMgPSAnaW1hZ2VGaWVsZHMnO1xuRGlzcGxheUNhcGFiaWxpdGllcy5LRVlfTUVESUFfQ0xPQ0tfRk9STUFUUyA9ICdtZWRpYUNsb2NrRm9ybWF0cyc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9HUkFQSElDU19TVVBQT1JURUQgPSAnZ3JhcGhpY1N1cHBvcnRlZCc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9URU1QTEFURVNfQVZBSUxBQkxFID0gJ3RlbXBsYXRlc0F2YWlsYWJsZSc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9TQ1JFRU5fUEFSQU1TID0gJ3NjcmVlblBhcmFtcyc7XG5EaXNwbGF5Q2FwYWJpbGl0aWVzLktFWV9OVU1fQ1VTVE9NX1BSRVNFVFNfQVZBSUxBQkxFID0gJ251bUN1c3RvbVByZXNldHNBdmFpbGFibGUnO1xuXG5leHBvcnQgeyBEaXNwbGF5Q2FwYWJpbGl0aWVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgR3JpZCBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gY29sdW1uXG4gICAgKiBAcmV0dXJuIHtHcmlkfVxuICAgICovXG4gICAgc2V0Q29sdW1uIChjb2x1bW4pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoR3JpZC5LRVlfQ09MVU1OLCBjb2x1bW4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldENvbHVtbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihHcmlkLktFWV9DT0xVTU4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvd1xuICAgICogQHJldHVybiB7R3JpZH1cbiAgICAqL1xuICAgIHNldFJvdyAocm93KSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEdyaWQuS0VZX1JPVywgcm93KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRSb3cgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoR3JpZC5LRVlfUk9XKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXZlbFxuICAgICogQHJldHVybiB7R3JpZH1cbiAgICAqL1xuICAgIHNldExldmVsIChsZXZlbCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihHcmlkLktFWV9MRVZFTCwgbGV2ZWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldExldmVsICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEdyaWQuS0VZX0xFVkVMKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW5TcGFuXG4gICAgKiBAcmV0dXJuIHtHcmlkfVxuICAgICovXG4gICAgc2V0Q29sdW1uU3BhbiAoY29sdW1uU3Bhbikge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihHcmlkLktFWV9DT0xVTU5fU1BBTiwgY29sdW1uU3Bhbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Q29sdW1uU3BhbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihHcmlkLktFWV9DT0xVTU5fU1BBTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gcm93U3BhblxuICAgICogQHJldHVybiB7R3JpZH1cbiAgICAqL1xuICAgIHNldFJvd1NwYW4gKHJvd1NwYW4pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoR3JpZC5LRVlfUk9XX1NQQU4sIHJvd1NwYW4pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldFJvd1NwYW4gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoR3JpZC5LRVlfUk9XX1NQQU4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsU3BhblxuICAgICogQHJldHVybiB7R3JpZH1cbiAgICAqL1xuICAgIHNldExldmVsU3BhbiAobGV2ZWxTcGFuKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEdyaWQuS0VZX0xFVkVMX1NQQU4sIGxldmVsU3Bhbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0TGV2ZWxTcGFuICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEdyaWQuS0VZX0xFVkVMX1NQQU4pO1xuICAgIH1cbn1cblxuR3JpZC5LRVlfQ09MVU1OID0gJ2NvbCc7XG5HcmlkLktFWV9ST1cgPSAncm93JztcbkdyaWQuS0VZX0xFVkVMID0gJ2xldmVsJztcbkdyaWQuS0VZX0NPTFVNTl9TUEFOID0gJ2NvbHNwYW4nO1xuR3JpZC5LRVlfUk9XX1NQQU4gPSAncm93c3Bhbic7XG5HcmlkLktFWV9MRVZFTF9TUEFOID0gJ2xldmVsc3Bhbic7XG5cbmV4cG9ydCB7IEdyaWQgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4vR3JpZC5qcyc7XG5cbmNsYXNzIE1vZHVsZUluZm8gZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yIChwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG1vZHVsZUlkXG4gICAgKiBAcmV0dXJuIHtNb2R1bGVJbmZvfVxuICAgICovXG4gICAgc2V0TW9kdWxlSWQgKG1vZHVsZUlkKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1vZHVsZUluZm8uS0VZX01PRFVMRV9JRCwgbW9kdWxlSWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldE1vZHVsZUlkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKE1vZHVsZUluZm8uS0VZX01PRFVMRV9JRCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7R3JpZH0gbG9jYXRpb25cbiAgICAqIEByZXR1cm4ge01vZHVsZUluZm99XG4gICAgKi9cbiAgICBzZXRMb2NhdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoR3JpZCwgbG9jYXRpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1vZHVsZUluZm8uS0VZX0xPQ0FUSU9OLCBsb2NhdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7R3JpZH1cbiAgICAqL1xuICAgIGdldExvY2F0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEdyaWQsIE1vZHVsZUluZm8uS0VZX0xPQ0FUSU9OKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7R3JpZH0gc2VydmljZUFyZWFcbiAgICAqIEByZXR1cm4ge01vZHVsZUluZm99XG4gICAgKi9cbiAgICBzZXRTZXJ2aWNlQXJlYSAoc2VydmljZUFyZWEpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoR3JpZCwgc2VydmljZUFyZWEpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1vZHVsZUluZm8uS0VZX1NFUlZJQ0VfQVJFQSwgc2VydmljZUFyZWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0dyaWR9XG4gICAgKi9cbiAgICBnZXRTZXJ2aWNlQXJlYSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChHcmlkLCBNb2R1bGVJbmZvLktFWV9TRVJWSUNFX0FSRUEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBhbGxvd011bHRpcGxlQWNjZXNzXG4gICAgKiBAcmV0dXJuIHtNb2R1bGVJbmZvfVxuICAgICovXG4gICAgc2V0QWxsb3dNdWx0aXBsZUFjY2VzcyAoYWxsb3dNdWx0aXBsZUFjY2Vzcykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihNb2R1bGVJbmZvLktFWV9BTExPV19NVUxUSVBMRV9BQ0NFU1MsIGFsbG93TXVsdGlwbGVBY2Nlc3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRBbGxvd011bHRpcGxlQWNjZXNzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKE1vZHVsZUluZm8uS0VZX0FMTE9XX01VTFRJUExFX0FDQ0VTUyk7XG4gICAgfVxufVxuXG5Nb2R1bGVJbmZvLktFWV9NT0RVTEVfSUQgPSAnbW9kdWxlSWQnO1xuTW9kdWxlSW5mby5LRVlfTE9DQVRJT04gPSAnbG9jYXRpb24nO1xuTW9kdWxlSW5mby5LRVlfU0VSVklDRV9BUkVBID0gJ3NlcnZpY2VBcmVhJztcbk1vZHVsZUluZm8uS0VZX0FMTE9XX01VTFRJUExFX0FDQ0VTUyA9ICdhbGxvd011bHRpcGxlQWNjZXNzJztcblxuZXhwb3J0IHsgTW9kdWxlSW5mbyB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBCdXR0b25OYW1lXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBCdXR0b25OYW1lIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9LICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5PSztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQTEFZX1BBVVNFICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5QTEFZX1BBVVNFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNFRUtMRUZUICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5TRUVLTEVGVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTRUVLUklHSFQgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlNFRUtSSUdIVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBUVU5FVVAgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlRVTkVVUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBUVU5FRE9XTiAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuVFVORURPV047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFJFU0VUXzAgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlBSRVNFVF8wO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFBSRVNFVF8xICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5QUkVTRVRfMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQUkVTRVRfMiAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuUFJFU0VUXzI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFJFU0VUXzMgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlBSRVNFVF8zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFBSRVNFVF80ICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5QUkVTRVRfNDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQUkVTRVRfNSAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuUFJFU0VUXzU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFJFU0VUXzYgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlBSRVNFVF82O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFBSRVNFVF83ICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5QUkVTRVRfNztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQUkVTRVRfOCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuUFJFU0VUXzg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFJFU0VUXzkgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlBSRVNFVF85O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENVU1RPTV9CVVRUT04gKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLkNVU1RPTV9CVVRUT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0VBUkNIICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5TRUFSQ0g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQUNfTUFYICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5BQ19NQVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQUMgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLkFDO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFQ0lSQ1VMQVRFICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5SRUNJUkNVTEFURTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBGQU5fVVAgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLkZBTl9VUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBGQU5fRE9XTiAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuRkFOX0RPV047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVEVNUF9VUCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuVEVNUF9VUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBURU1QX0RPV04gKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlRFTVBfRE9XTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBERUZST1NUX01BWCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuREVGUk9TVF9NQVg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgREVGUk9TVCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuREVGUk9TVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBERUZST1NUX1JFQVIgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLkRFRlJPU1RfUkVBUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBVUFBFUl9WRU5UICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5VUFBFUl9WRU5UO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IExPV0VSX1ZFTlQgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLkxPV0VSX1ZFTlQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVk9MVU1FX1VQICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5WT0xVTUVfVVA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVk9MVU1FX0RPV04gKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlZPTFVNRV9ET1dOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVKRUNUICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5FSkVDVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTT1VSQ0UgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLlNPVVJDRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTSFVGRkxFICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5TSFVGRkxFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFUEVBVCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuUkVQRUFUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9DRU5URVJfTE9DQVRJT04gKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9DRU5URVJfTE9DQVRJT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkFWX1pPT01fSU4gKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9aT09NX0lOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9aT09NX09VVCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuTkFWX1pPT01fT1VUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9QQU5fVVAgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9QQU5fVVA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkFWX1BBTl9VUF9SSUdIVCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuTkFWX1BBTl9VUF9SSUdIVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZfUEFOX1JJR0hUICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5OQVZfUEFOX1JJR0hUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9QQU5fRE9XTl9SSUdIVCAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuTkFWX1BBTl9ET1dOX1JJR0hUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9QQU5fRE9XTiAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuTkFWX1BBTl9ET1dOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5BVl9QQU5fRE9XTl9MRUZUICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5OQVZfUEFOX0RPV05fTEVGVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZfUEFOX0xFRlQgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9QQU5fTEVGVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZfUEFOX1VQX0xFRlQgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9QQU5fVVBfTEVGVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZfVElMVF9UT0dHTEUgKCkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fTUFQLk5BVl9USUxUX1RPR0dMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBOQVZfUk9UQVRFX0NMT0NLV0lTRSAoKSB7XG4gICAgICAgIHJldHVybiBCdXR0b25OYW1lLl9NQVAuTkFWX1JPVEFURV9DTE9DS1dJU0U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkFWX1JPVEFURV9DT1VOVEVSQ0xPQ0tXSVNFICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5OQVZfUk9UQVRFX0NPVU5URVJDTE9DS1dJU0U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkFWX0hFQURJTkdfVE9HR0xFICgpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX01BUC5OQVZfSEVBRElOR19UT0dHTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIEJ1dHRvbk5hbWUuX3ZhbHVlRm9yS2V5KGtleSwgQnV0dG9uTmFtZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQnV0dG9uTmFtZS5fa2V5Rm9yVmFsdWUodmFsdWUsIEJ1dHRvbk5hbWUuX01BUCk7XG4gICAgfVxufVxuXG5CdXR0b25OYW1lLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnT0snOiAnT0snLFxuICAgICdQTEFZX1BBVVNFJzogJ1BMQVlfUEFVU0UnLFxuICAgICdTRUVLTEVGVCc6ICdTRUVLTEVGVCcsXG4gICAgJ1NFRUtSSUdIVCc6ICdTRUVLUklHSFQnLFxuICAgICdUVU5FVVAnOiAnVFVORVVQJyxcbiAgICAnVFVORURPV04nOiAnVFVORURPV04nLFxuICAgICdQUkVTRVRfMCc6ICdQUkVTRVRfMCcsXG4gICAgJ1BSRVNFVF8xJzogJ1BSRVNFVF8xJyxcbiAgICAnUFJFU0VUXzInOiAnUFJFU0VUXzInLFxuICAgICdQUkVTRVRfMyc6ICdQUkVTRVRfMycsXG4gICAgJ1BSRVNFVF80JzogJ1BSRVNFVF80JyxcbiAgICAnUFJFU0VUXzUnOiAnUFJFU0VUXzUnLFxuICAgICdQUkVTRVRfNic6ICdQUkVTRVRfNicsXG4gICAgJ1BSRVNFVF83JzogJ1BSRVNFVF83JyxcbiAgICAnUFJFU0VUXzgnOiAnUFJFU0VUXzgnLFxuICAgICdQUkVTRVRfOSc6ICdQUkVTRVRfOScsXG4gICAgJ0NVU1RPTV9CVVRUT04nOiAnQ1VTVE9NX0JVVFRPTicsXG4gICAgJ1NFQVJDSCc6ICdTRUFSQ0gnLFxuICAgICdBQ19NQVgnOiAnQUNfTUFYJyxcbiAgICAnQUMnOiAnQUMnLFxuICAgICdSRUNJUkNVTEFURSc6ICdSRUNJUkNVTEFURScsXG4gICAgJ0ZBTl9VUCc6ICdGQU5fVVAnLFxuICAgICdGQU5fRE9XTic6ICdGQU5fRE9XTicsXG4gICAgJ1RFTVBfVVAnOiAnVEVNUF9VUCcsXG4gICAgJ1RFTVBfRE9XTic6ICdURU1QX0RPV04nLFxuICAgICdERUZST1NUX01BWCc6ICdERUZST1NUX01BWCcsXG4gICAgJ0RFRlJPU1QnOiAnREVGUk9TVCcsXG4gICAgJ0RFRlJPU1RfUkVBUic6ICdERUZST1NUX1JFQVInLFxuICAgICdVUFBFUl9WRU5UJzogJ1VQUEVSX1ZFTlQnLFxuICAgICdMT1dFUl9WRU5UJzogJ0xPV0VSX1ZFTlQnLFxuICAgICdWT0xVTUVfVVAnOiAnVk9MVU1FX1VQJyxcbiAgICAnVk9MVU1FX0RPV04nOiAnVk9MVU1FX0RPV04nLFxuICAgICdFSkVDVCc6ICdFSkVDVCcsXG4gICAgJ1NPVVJDRSc6ICdTT1VSQ0UnLFxuICAgICdTSFVGRkxFJzogJ1NIVUZGTEUnLFxuICAgICdSRVBFQVQnOiAnUkVQRUFUJyxcbiAgICAnTkFWX0NFTlRFUl9MT0NBVElPTic6ICdOQVZfQ0VOVEVSX0xPQ0FUSU9OJyxcbiAgICAnTkFWX1pPT01fSU4nOiAnTkFWX1pPT01fSU4nLFxuICAgICdOQVZfWk9PTV9PVVQnOiAnTkFWX1pPT01fT1VUJyxcbiAgICAnTkFWX1BBTl9VUCc6ICdOQVZfUEFOX1VQJyxcbiAgICAnTkFWX1BBTl9VUF9SSUdIVCc6ICdOQVZfUEFOX1VQX1JJR0hUJyxcbiAgICAnTkFWX1BBTl9SSUdIVCc6ICdOQVZfUEFOX1JJR0hUJyxcbiAgICAnTkFWX1BBTl9ET1dOX1JJR0hUJzogJ05BVl9QQU5fRE9XTl9SSUdIVCcsXG4gICAgJ05BVl9QQU5fRE9XTic6ICdOQVZfUEFOX0RPV04nLFxuICAgICdOQVZfUEFOX0RPV05fTEVGVCc6ICdOQVZfUEFOX0RPV05fTEVGVCcsXG4gICAgJ05BVl9QQU5fTEVGVCc6ICdOQVZfUEFOX0xFRlQnLFxuICAgICdOQVZfUEFOX1VQX0xFRlQnOiAnTkFWX1BBTl9VUF9MRUZUJyxcbiAgICAnTkFWX1RJTFRfVE9HR0xFJzogJ05BVl9USUxUX1RPR0dMRScsXG4gICAgJ05BVl9ST1RBVEVfQ0xPQ0tXSVNFJzogJ05BVl9ST1RBVEVfQ0xPQ0tXSVNFJyxcbiAgICAnTkFWX1JPVEFURV9DT1VOVEVSQ0xPQ0tXSVNFJzogJ05BVl9ST1RBVEVfQ09VTlRFUkNMT0NLV0lTRScsXG4gICAgJ05BVl9IRUFESU5HX1RPR0dMRSc6ICdOQVZfSEVBRElOR19UT0dHTEUnLFxuXG59KTtcblxuZXhwb3J0IHsgQnV0dG9uTmFtZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgTW9kdWxlSW5mbyB9IGZyb20gJy4vTW9kdWxlSW5mbyc7XG5pbXBvcnQgeyBCdXR0b25OYW1lIH0gZnJvbSAnLi4vZW51bXMvQnV0dG9uTmFtZS5qcyc7XG5cbmNsYXNzIEJ1dHRvbkNhcGFiaWxpdGllcyBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0J1dHRvbk5hbWV9IG5hbWVcbiAgICAqIEByZXR1cm4ge0J1dHRvbkNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldE5hbWUgKG5hbWUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoQnV0dG9uTmFtZSwgbmFtZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQnV0dG9uQ2FwYWJpbGl0aWVzLktFWV9OQU1FLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCdXR0b25OYW1lfVxuICAgICovXG4gICAgZ2V0TmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChCdXR0b25OYW1lLCBCdXR0b25DYXBhYmlsaXRpZXMuS0VZX05BTUUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtNb2R1bGVJbmZvfSBtb2R1bGVJbmZvXG4gICAgKiBAcmV0dXJuIHtCdXR0b25DYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRNb2R1bGVJbmZvIChtb2R1bGVJbmZvKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKE1vZHVsZUluZm8sIG1vZHVsZUluZm8pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTU9EVUxFX0lORk8sIG1vZHVsZUluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge01vZHVsZUluZm99XG4gICAgKi9cbiAgICBnZXRNb2R1bGVJbmZvICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KE1vZHVsZUluZm8sIEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTU9EVUxFX0lORk8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBzaG9ydFByZXNzQXZhaWxhYmxlXG4gICAgKiBAcmV0dXJuIHtCdXR0b25DYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRTaG9ydFByZXNzQXZhaWxhYmxlIChzaG9ydFByZXNzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfU0hPUlRfUFJFU1NfQVZBSUxBQkxFLCBzaG9ydFByZXNzQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0U2hvcnRQcmVzc0F2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1NIT1JUX1BSRVNTX0FWQUlMQUJMRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvbmdQcmVzc0F2YWlsYWJsZVxuICAgICogQHJldHVybiB7QnV0dG9uQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0TG9uZ1ByZXNzQXZhaWxhYmxlIChsb25nUHJlc3NBdmFpbGFibGUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQnV0dG9uQ2FwYWJpbGl0aWVzLktFWV9MT05HX1BSRVNTX0FWQUlMQUJMRSwgbG9uZ1ByZXNzQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0TG9uZ1ByZXNzQXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTE9OR19QUkVTU19BVkFJTEFCTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSB1cERvd25BdmFpbGFibGVcbiAgICAqIEByZXR1cm4ge0J1dHRvbkNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFVwRG93bkF2YWlsYWJsZSAodXBEb3duQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfVVBfRE9XTl9BVkFJTEFCTEUsIHVwRG93bkF2YWlsYWJsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFVwRG93bkF2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1VQX0RPV05fQVZBSUxBQkxFKTtcbiAgICB9XG59XG5cbkJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTkFNRSA9ICduYW1lJztcbkJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTU9EVUxFX0lORk8gPSAnbW9kdWxlSW5mbyc7XG5CdXR0b25DYXBhYmlsaXRpZXMuS0VZX1NIT1JUX1BSRVNTX0FWQUlMQUJMRSA9ICdzaG9ydFByZXNzQXZhaWxhYmxlJztcbkJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTE9OR19QUkVTU19BVkFJTEFCTEUgPSAnbG9uZ1ByZXNzQXZhaWxhYmxlJztcbkJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfVVBfRE9XTl9BVkFJTEFCTEUgPSAndXBEb3duQXZhaWxhYmxlJztcblxuZXhwb3J0IHsgQnV0dG9uQ2FwYWJpbGl0aWVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgU29mdEJ1dHRvbkNhcGFiaWxpdGllcyBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNob3J0UHJlc3NBdmFpbGFibGVcbiAgICAqIEByZXR1cm4ge1NvZnRCdXR0b25DYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRTaG9ydFByZXNzQXZhaWxhYmxlIChzaG9ydFByZXNzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1NIT1JUX1BSRVNTX0FWQUlMQUJMRSwgc2hvcnRQcmVzc0F2YWlsYWJsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFNob3J0UHJlc3NBdmFpbGFibGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfU0hPUlRfUFJFU1NfQVZBSUxBQkxFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9uZ1ByZXNzQXZhaWxhYmxlXG4gICAgKiBAcmV0dXJuIHtTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0TG9uZ1ByZXNzQXZhaWxhYmxlIChsb25nUHJlc3NBdmFpbGFibGUpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfTE9OR19QUkVTU19BVkFJTEFCTEUsIGxvbmdQcmVzc0F2YWlsYWJsZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldExvbmdQcmVzc0F2YWlsYWJsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzLktFWV9MT05HX1BSRVNTX0FWQUlMQUJMRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVwRG93bkF2YWlsYWJsZVxuICAgICogQHJldHVybiB7U29mdEJ1dHRvbkNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFVwRG93bkF2YWlsYWJsZSAodXBEb3duQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1VQX0RPV05fQVZBSUxBQkxFLCB1cERvd25BdmFpbGFibGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRVcERvd25BdmFpbGFibGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfVVBfRE9XTl9BVkFJTEFCTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBpbWFnZVN1cHBvcnRlZFxuICAgICogQHJldHVybiB7U29mdEJ1dHRvbkNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldEltYWdlU3VwcG9ydGVkIChpbWFnZVN1cHBvcnRlZCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzLktFWV9JTUFHRV9TVVBQT1JURUQsIGltYWdlU3VwcG9ydGVkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0SW1hZ2VTdXBwb3J0ZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfSU1BR0VfU1VQUE9SVEVEKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdGV4dFN1cHBvcnRlZFxuICAgICogQHJldHVybiB7U29mdEJ1dHRvbkNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFRleHRTdXBwb3J0ZWQgKHRleHRTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfVEVYVF9TVVBQT1JURUQsIHRleHRTdXBwb3J0ZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRUZXh0U3VwcG9ydGVkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1RFWFRfU1VQUE9SVEVEKTtcbiAgICB9XG59XG5cblNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1NIT1JUX1BSRVNTX0FWQUlMQUJMRSA9ICdzaG9ydFByZXNzQXZhaWxhYmxlJztcblNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX0xPTkdfUFJFU1NfQVZBSUxBQkxFID0gJ2xvbmdQcmVzc0F2YWlsYWJsZSc7XG5Tb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzLktFWV9VUF9ET1dOX0FWQUlMQUJMRSA9ICd1cERvd25BdmFpbGFibGUnO1xuU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5LRVlfSU1BR0VfU1VQUE9SVEVEID0gJ2ltYWdlU3VwcG9ydGVkJztcblNvZnRCdXR0b25DYXBhYmlsaXRpZXMuS0VZX1RFWFRfU1VQUE9SVEVEID0gJ3RleHRTdXBwb3J0ZWQnO1xuXG5leHBvcnQgeyBTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcblxuY2xhc3MgUHJlc2V0QmFua0NhcGFiaWxpdGllcyBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9uU2NyZWVuUHJlc2V0c0F2YWlsYWJsZVxuICAgICogQHJldHVybiB7UHJlc2V0QmFua0NhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldE9uU2NyZWVuUHJlc2V0c0F2YWlsYWJsZSAob25TY3JlZW5QcmVzZXRzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFByZXNldEJhbmtDYXBhYmlsaXRpZXMuS0VZX09OX1NDUkVFTl9QUkVTRVRTX0FWQUlMQUJMRSwgb25TY3JlZW5QcmVzZXRzQXZhaWxhYmxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0T25TY3JlZW5QcmVzZXRzQXZhaWxhYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFByZXNldEJhbmtDYXBhYmlsaXRpZXMuS0VZX09OX1NDUkVFTl9QUkVTRVRTX0FWQUlMQUJMRSk7XG4gICAgfVxufVxuXG5QcmVzZXRCYW5rQ2FwYWJpbGl0aWVzLktFWV9PTl9TQ1JFRU5fUFJFU0VUU19BVkFJTEFCTEUgPSAnb25TY3JlZW5QcmVzZXRzQXZhaWxhYmxlJztcblxuZXhwb3J0IHsgUHJlc2V0QmFua0NhcGFiaWxpdGllcyB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5cbmNsYXNzIFZlaGljbGVUeXBlIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYWtlXG4gICAgKiBAcmV0dXJuIHtWZWhpY2xlVHlwZX1cbiAgICAqL1xuICAgIHNldE1ha2UgKG1ha2UpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVmVoaWNsZVR5cGUuS0VZX01BS0UsIG1ha2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldE1ha2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoVmVoaWNsZVR5cGUuS0VZX01BS0UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG1vZGVsXG4gICAgKiBAcmV0dXJuIHtWZWhpY2xlVHlwZX1cbiAgICAqL1xuICAgIHNldE1vZGVsIChtb2RlbCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihWZWhpY2xlVHlwZS5LRVlfTU9ERUwsIG1vZGVsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNb2RlbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihWZWhpY2xlVHlwZS5LRVlfTU9ERUwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG1vZGVsWWVhclxuICAgICogQHJldHVybiB7VmVoaWNsZVR5cGV9XG4gICAgKi9cbiAgICBzZXRNb2RlbFllYXIgKG1vZGVsWWVhcikge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihWZWhpY2xlVHlwZS5LRVlfTU9ERUxfWUVBUiwgbW9kZWxZZWFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNb2RlbFllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoVmVoaWNsZVR5cGUuS0VZX01PREVMX1lFQVIpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdHJpbVxuICAgICogQHJldHVybiB7VmVoaWNsZVR5cGV9XG4gICAgKi9cbiAgICBzZXRUcmltICh0cmltKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFZlaGljbGVUeXBlLktFWV9UUklNLCB0cmltKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRUcmltICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFZlaGljbGVUeXBlLktFWV9UUklNKTtcbiAgICB9XG59XG5cblZlaGljbGVUeXBlLktFWV9NQUtFID0gJ21ha2UnO1xuVmVoaWNsZVR5cGUuS0VZX01PREVMID0gJ21vZGVsJztcblZlaGljbGVUeXBlLktFWV9NT0RFTF9ZRUFSID0gJ21vZGVsWWVhcic7XG5WZWhpY2xlVHlwZS5LRVlfVFJJTSA9ICd0cmltJztcblxuZXhwb3J0IHsgVmVoaWNsZVR5cGUgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gRmlsZVR5cGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIEhtaVpvbmVDYXBhYmlsaXRpZXMgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRlJPTlQgKCkge1xuICAgICAgICByZXR1cm4gSG1pWm9uZUNhcGFiaWxpdGllcy5fTUFQLkZST05UO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEJBQ0sgKCkge1xuICAgICAgICByZXR1cm4gSG1pWm9uZUNhcGFiaWxpdGllcy5fTUFQLkJBQ0s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIEhtaVpvbmVDYXBhYmlsaXRpZXMuX3ZhbHVlRm9yS2V5KGtleSwgSG1pWm9uZUNhcGFiaWxpdGllcy5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSG1pWm9uZUNhcGFiaWxpdGllcy5fa2V5Rm9yVmFsdWUodmFsdWUsIEhtaVpvbmVDYXBhYmlsaXRpZXMuX01BUCk7XG4gICAgfVxufVxuXG5IbWlab25lQ2FwYWJpbGl0aWVzLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnRlJPTlQnOiAnRlJPTlQnLFxuICAgICdCQUNLJzogJ0JBQ0snLFxuXG59KTtcblxuZXhwb3J0IHsgSG1pWm9uZUNhcGFiaWxpdGllcyB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gUHJlcmVjb3JkZWRTcGVlY2hcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFByZXJlY29yZGVkU3BlZWNoIGV4dGVuZHMgRW51bSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEhFTFBfSklOR0xFICgpIHtcbiAgICAgICAgcmV0dXJuIFByZXJlY29yZGVkU3BlZWNoLl9NQVAuSEVMUF9KSU5HTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSU5JVElBTF9KSU5HTEUgKCkge1xuICAgICAgICByZXR1cm4gUHJlcmVjb3JkZWRTcGVlY2guX01BUC5JTklUSUFMX0pJTkdMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBMSVNURU5fSklOR0xFICgpIHtcbiAgICAgICAgcmV0dXJuIFByZXJlY29yZGVkU3BlZWNoLl9NQVAuTElTVEVOX0pJTkdMRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBQT1NJVElWRV9KSU5HTEUgKCkge1xuICAgICAgICByZXR1cm4gUHJlcmVjb3JkZWRTcGVlY2guX01BUC5QT1NJVElWRV9KSU5HTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgTkVHQVRJVkVfSklOR0xFICgpIHtcbiAgICAgICAgcmV0dXJuIFByZXJlY29yZGVkU3BlZWNoLl9NQVAuTkVHQVRJVkVfSklOR0xFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBQcmVyZWNvcmRlZFNwZWVjaC5fdmFsdWVGb3JLZXkoa2V5LCBQcmVyZWNvcmRlZFNwZWVjaC5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gUHJlcmVjb3JkZWRTcGVlY2guX2tleUZvclZhbHVlKHZhbHVlLCBQcmVyZWNvcmRlZFNwZWVjaC5fTUFQKTtcbiAgICB9XG59XG5cblByZXJlY29yZGVkU3BlZWNoLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnSEVMUF9KSU5HTEUnOiAnSEVMUF9KSU5HTEUnLFxuICAgICdJTklUSUFMX0pJTkdMRSc6ICdJTklUSUFMX0pJTkdMRScsXG4gICAgJ0xJU1RFTl9KSU5HTEUnOiAnTElTVEVOX0pJTkdMRScsXG4gICAgJ1BPU0lUSVZFX0pJTkdMRSc6ICdQT1NJVElWRV9KSU5HTEUnLFxuICAgICdORUdBVElWRV9KSU5HTEUnOiAnTkVHQVRJVkVfSklOR0xFJyxcblxufSk7XG5cbmV4cG9ydCB7IFByZXJlY29yZGVkU3BlZWNoIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBTYW1wbGluZ1JhdGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFNhbXBsaW5nUmF0ZSBleHRlbmRzIEVudW0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTYW1wbGluZ1JhdGVfOEtIWiAoKSB7XG4gICAgICAgIHJldHVybiBTYW1wbGluZ1JhdGUuX01BUC5TYW1wbGluZ1JhdGVfOEtIWjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTYW1wbGluZ1JhdGVfMTZLSFogKCkge1xuICAgICAgICByZXR1cm4gU2FtcGxpbmdSYXRlLl9NQVAuU2FtcGxpbmdSYXRlXzE2S0haO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNhbXBsaW5nUmF0ZV8yMktIWiAoKSB7XG4gICAgICAgIHJldHVybiBTYW1wbGluZ1JhdGUuX01BUC5TYW1wbGluZ1JhdGVfMjJLSFo7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU2FtcGxpbmdSYXRlXzQ0S0haICgpIHtcbiAgICAgICAgcmV0dXJuIFNhbXBsaW5nUmF0ZS5fTUFQLlNhbXBsaW5nUmF0ZV80NEtIWjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gU2FtcGxpbmdSYXRlLl92YWx1ZUZvcktleShrZXksIFNhbXBsaW5nUmF0ZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gU2FtcGxpbmdSYXRlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgU2FtcGxpbmdSYXRlLl9NQVApO1xuICAgIH1cbn1cblxuLy8gV2UgaGF2ZSB0byB1c2UgU2FtcGxpbmdSYXRlXyBwcmVmaXggaW4gdGhlIG5hbWUgYmVjYXVzZSBqYXZhc2NyaXB0IHdpbGwgbm90XG4vLyBhbGxvdyB0aGUgZW51bSB0byBzdGFydCB3aXRoIGEgbnVtYmVyXG5TYW1wbGluZ1JhdGUuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdTYW1wbGluZ1JhdGVfOEtIWic6ICc4S0haJyxcbiAgICAnU2FtcGxpbmdSYXRlXzE2S0haJzogJzE2S0haJyxcbiAgICAnU2FtcGxpbmdSYXRlXzIyS0haJzogJzIyS0haJyxcbiAgICAnU2FtcGxpbmdSYXRlXzQ0S0haJzogJzQ0S0haJyxcblxufSk7XG5cbmV4cG9ydCB7IFNhbXBsaW5nUmF0ZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gQml0c1BlclNhbXBsZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgQml0c1BlclNhbXBsZSBleHRlbmRzIEVudW0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBCaXRzUGVyU2FtcGxlXzhfQklUICgpIHtcbiAgICAgICAgcmV0dXJuIEJpdHNQZXJTYW1wbGUuX01BUC5CaXRzUGVyU2FtcGxlXzhfQklUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEJpdHNQZXJTYW1wbGVfMTZfQklUICgpIHtcbiAgICAgICAgcmV0dXJuIEJpdHNQZXJTYW1wbGUuX01BUC5CaXRzUGVyU2FtcGxlXzE2X0JJVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gQml0c1BlclNhbXBsZS5fdmFsdWVGb3JLZXkoa2V5LCBCaXRzUGVyU2FtcGxlLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBCaXRzUGVyU2FtcGxlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgQml0c1BlclNhbXBsZS5fTUFQKTtcbiAgICB9XG59XG5cblxuLy8gV2UgaGF2ZSB0byB1c2UgQml0c1BlclNhbXBsZV8gcHJlZml4IGluIHRoZSBuYW1lIGJlY2F1c2UgamF2YXNjcmlwdCB3aWxsIG5vdFxuLy8gYWxsb3cgdGhlIGVudW0gdG8gc3RhcnQgd2l0aCBhIG51bWJlclxuQml0c1BlclNhbXBsZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ0JpdHNQZXJTYW1wbGVfOF9CSVQnOiAnOF9CSVQnLFxuICAgICdCaXRzUGVyU2FtcGxlXzE2X0JJVCc6ICcxNl9CSVQnLFxuXG59KTtcblxuZXhwb3J0IHsgQml0c1BlclNhbXBsZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gQXVkaW9UeXBlXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBBdWRpb1R5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUENNICgpIHtcbiAgICAgICAgcmV0dXJuIEF1ZGlvVHlwZS5fTUFQLlBDTTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gQXVkaW9UeXBlLl92YWx1ZUZvcktleShrZXksIEF1ZGlvVHlwZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQXVkaW9UeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgQXVkaW9UeXBlLl9NQVApO1xuICAgIH1cbn1cblxuQXVkaW9UeXBlLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnUENNJzogJ1BDTScsXG5cbn0pO1xuXG5leHBvcnQgeyBBdWRpb1R5cGUgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IFNhbXBsaW5nUmF0ZSB9IGZyb20gJy4uL2VudW1zL1NhbXBsaW5nUmF0ZS5qcyc7XG5pbXBvcnQgeyBCaXRzUGVyU2FtcGxlIH0gZnJvbSAnLi4vZW51bXMvQml0c1BlclNhbXBsZS5qcyc7XG5pbXBvcnQgeyBBdWRpb1R5cGUgfSBmcm9tICcuLi9lbnVtcy9BdWRpb1R5cGUuanMnO1xuXG5jbGFzcyBBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U2FtcGxpbmdSYXRlfSBzYW1wbGluZ1JhdGVcbiAgICAqIEByZXR1cm4ge0F1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRTYW1wbGluZ1JhdGUgKHNhbXBsaW5nUmF0ZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTYW1wbGluZ1JhdGUsIHNhbXBsaW5nUmF0ZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcy5LRVlfU0FNUExJTkdfUkFURSwgc2FtcGxpbmdSYXRlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTYW1wbGluZ1JhdGV9XG4gICAgKi9cbiAgICBnZXRTYW1wbGluZ1JhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoU2FtcGxpbmdSYXRlLCBBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzLktFWV9TQU1QTElOR19SQVRFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qml0c1BlclNhbXBsZX0gYml0c1BlclNhbXBsZVxuICAgICogQHJldHVybiB7QXVkaW9QYXNzVGhydUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldEJpdHNQZXJTYW1wbGUgKGJpdHNQZXJTYW1wbGUpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoQml0c1BlclNhbXBsZSwgYml0c1BlclNhbXBsZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcy5LRVlfQklUU19QRVJfU0FNUExFLCBiaXRzUGVyU2FtcGxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCaXRzUGVyU2FtcGxlfVxuICAgICovXG4gICAgZ2V0Qml0c1BlclNhbXBsZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChCaXRzUGVyU2FtcGxlLCBBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzLktFWV9CSVRTX1BFUl9TQU1QTEUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBdWRpb1R5cGV9IGJpdHNQZXJTYW1wbGVcbiAgICAqIEByZXR1cm4ge0F1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRBdWRpb1R5cGUgKGF1ZGlvVHlwZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShBdWRpb1R5cGUsIGF1ZGlvVHlwZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcy5LRVlfQVVESU9fVFlQRSwgYXVkaW9UeXBlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBdWRpb1R5cGV9XG4gICAgKi9cbiAgICBnZXRBdWRpb1R5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoQXVkaW9UeXBlLCBBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzLktFWV9BVURJT19UWVBFKTtcbiAgICB9XG59XG5cbkF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMuS0VZX1NBTVBMSU5HX1JBVEUgPSAnc2FtcGxpbmdSYXRlJztcbkF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMuS0VZX0JJVFNfUEVSX1NBTVBMRSA9ICdiaXRzUGVyU2FtcGxlJztcbkF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMuS0VZX0FVRElPX1RZUEUgPSAnYXVkaW9UeXBlJztcblxuZXhwb3J0IHsgQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcyB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBWckNhcGFiaWxpdGllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgVnJDYXBhYmlsaXRpZXMgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVlJfVEVYVCAoKSB7XG4gICAgICAgIHJldHVybiBWckNhcGFiaWxpdGllcy5fTUFQLlZSX1RFWFQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFZyQ2FwYWJpbGl0aWVzLl92YWx1ZUZvcktleShrZXksIFZyQ2FwYWJpbGl0aWVzLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBWckNhcGFiaWxpdGllcy5fa2V5Rm9yVmFsdWUodmFsdWUsIFZyQ2FwYWJpbGl0aWVzLl9NQVApO1xuICAgIH1cbn1cblxuVnJDYXBhYmlsaXRpZXMuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdWUl9URVhUJzogJ1RFWFQnLFxufSk7XG5cbmV4cG9ydCB7IFZyQ2FwYWJpbGl0aWVzIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5cblxuY2xhc3MgSE1JQ2FwYWJpbGl0aWVzIGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbmF2aWdhdGlvblxuICAgICogQHJldHVybiB7SE1JQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0TmF2aWdhdGlvbiAobmF2aWdhdGlvbikge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX05BVklHQVRJT04sIG5hdmlnYXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXROYXZpZ2F0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEhNSUNhcGFiaWxpdGllcy5LRVlfTkFWSUdBVElPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBob25lQ2FsbFxuICAgICogQHJldHVybiB7SE1JQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0UGhvbmVDYWxsIChwaG9uZUNhbGwpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoSE1JQ2FwYWJpbGl0aWVzLktFWV9QSE9ORV9DQUxMLCBwaG9uZUNhbGwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRQaG9uZUNhbGwgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSE1JQ2FwYWJpbGl0aWVzLktFWV9QSE9ORV9DQUxMKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmlkZW9TdHJlYW1pbmdcbiAgICAqIEByZXR1cm4ge0hNSUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFZpZGVvU3RyZWFtaW5nICh2aWRlb1N0cmVhbWluZykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX1ZJREVPX1NUUkVBTUlORywgdmlkZW9TdHJlYW1pbmcpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRWaWRlb1N0cmVhbWluZyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX1ZJREVPX1NUUkVBTUlORyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlbW90ZUNvbnRyb2xcbiAgICAqIEByZXR1cm4ge0hNSUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIHNldFJlbW90ZUNvbnRyb2wgKHJlbW90ZUNvbnRyb2wpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoSE1JQ2FwYWJpbGl0aWVzLktFWV9SRU1PVEVfQ09OVFJPTCwgcmVtb3RlQ29udHJvbCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFJlbW90ZUNvbnRyb2wgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSE1JQ2FwYWJpbGl0aWVzLktFWV9SRU1PVEVfQ09OVFJPTCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGFwcFNlcnZpY2VzXG4gICAgKiBAcmV0dXJuIHtITUlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRBcHBTZXJ2aWNlIChhcHBTZXJ2aWNlcykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX0FQUF9TRVJWSUNFUywgYXBwU2VydmljZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRBcHBTZXJ2aWNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEhNSUNhcGFiaWxpdGllcy5LRVlfQVBQX1NFUlZJQ0VTKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSBkaXNwbGF5c1xuICAgICogQHJldHVybiB7SE1JQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgc2V0RGlzcGxheXMgKGRpc3BsYXlzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEhNSUNhcGFiaWxpdGllcy5LRVlfRElTUExBWVMsIGRpc3BsYXlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0RGlzcGxheXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSE1JQ2FwYWJpbGl0aWVzLktFWV9ESVNQTEFZUyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2VhdExvY2F0aW9uXG4gICAgKiBAcmV0dXJuIHtITUlDYXBhYmlsaXRpZXN9XG4gICAgKi9cbiAgICBzZXRTZWF0TG9jYXRpb24gKHNlYXRMb2NhdGlvbikge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX1NFQVRfTE9DQVRJT04sIHNlYXRMb2NhdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldFNlYXRMb2NhdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihITUlDYXBhYmlsaXRpZXMuS0VZX1NFQVRfTE9DQVRJT04pO1xuICAgIH1cbn1cblxuSE1JQ2FwYWJpbGl0aWVzLktFWV9OQVZJR0FUSU9OID0gJ25hdmlnYXRpb24nO1xuSE1JQ2FwYWJpbGl0aWVzLktFWV9QSE9ORV9DQUxMID0gJ3Bob25lQ2FsbCc7XG5ITUlDYXBhYmlsaXRpZXMuS0VZX1ZJREVPX1NUUkVBTUlORyA9ICd2aWRlb1N0cmVhbWluZyc7XG5ITUlDYXBhYmlsaXRpZXMuS0VZX1JFTU9URV9DT05UUk9MID0gJ3JlbW90ZUNvbnRyb2wnO1xuSE1JQ2FwYWJpbGl0aWVzLktFWV9BUFBfU0VSVklDRVMgPSAnYXBwU2VydmljZXMnO1xuSE1JQ2FwYWJpbGl0aWVzLktFWV9ESVNQTEFZUyA9ICdkaXNwbGF5cyc7XG5ITUlDYXBhYmlsaXRpZXMuS0VZX1NFQVRfTE9DQVRJT04gPSAnc2VhdExvY2F0aW9uJztcblxuZXhwb3J0IHsgSE1JQ2FwYWJpbGl0aWVzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVzcG9uc2UgfSBmcm9tICcuLi9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTZGxNc2dWZXJzaW9uIH0gZnJvbSAnLi4vc3RydWN0cy9TZGxNc2dWZXJzaW9uLmpzJztcbmltcG9ydCB7IERpc3BsYXlDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9zdHJ1Y3RzL0Rpc3BsYXlDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgQnV0dG9uQ2FwYWJpbGl0aWVzIH0gZnJvbSAnLi4vc3RydWN0cy9CdXR0b25DYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgU29mdEJ1dHRvbkNhcGFiaWxpdGllcyB9IGZyb20gJy4uL3N0cnVjdHMvU29mdEJ1dHRvbkNhcGFiaWxpdGllcy5qcyc7XG5pbXBvcnQgeyBQcmVzZXRCYW5rQ2FwYWJpbGl0aWVzIH0gZnJvbSAnLi4vc3RydWN0cy9QcmVzZXRCYW5rQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IFZlaGljbGVUeXBlIH0gZnJvbSAnLi4vc3RydWN0cy9WZWhpY2xlVHlwZS5qcyc7XG5pbXBvcnQgeyBMYW5ndWFnZSB9IGZyb20gJy4uL2VudW1zL0xhbmd1YWdlLmpzJztcbmltcG9ydCB7IEhtaVpvbmVDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9lbnVtcy9IbWlab25lQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IFNwZWVjaENhcGFiaWxpdGllcyB9IGZyb20gJy4uL2VudW1zL1NwZWVjaENhcGFiaWxpdGllcy5qcyc7XG5pbXBvcnQgeyBQcmVyZWNvcmRlZFNwZWVjaCB9IGZyb20gJy4uL2VudW1zL1ByZXJlY29yZGVkU3BlZWNoLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcbmltcG9ydCB7IEF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9zdHJ1Y3RzL0F1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgVnJDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9lbnVtcy9WckNhcGFiaWxpdGllcy5qcyc7XG5pbXBvcnQgeyBITUlDYXBhYmlsaXRpZXMgfSBmcm9tICcuLi9zdHJ1Y3RzL0hNSUNhcGFiaWxpdGllcy5qcyc7XG5cbmNsYXNzIFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UgZXh0ZW5kcyBScGNSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5SZWdpc3RlckFwcEludGVyZmFjZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1NkbE1zZ1ZlcnNpb259IFRoZSBtYXggUlBDIFNwZWMgdmVyc2lvbiBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5XG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0U2RsTXNnVmVyc2lvbiAoc2RsTXNnVmVyc2lvbikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTZGxNc2dWZXJzaW9uLCBzZGxNc2dWZXJzaW9uKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9TRExfTVNHX1ZFUlNJT04sIHNkbE1zZ1ZlcnNpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1NkbE1zZ1ZlcnNpb259XG4gICAgKi9cbiAgICBnZXRTZGxNc2dWZXJzaW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFNkbE1zZ1ZlcnNpb24sIFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NETF9NU0dfVkVSU0lPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0xhbmd1YWdlfSBsYW5ndWFnZVxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldExhbmd1YWdlIChsYW5ndWFnZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShMYW5ndWFnZSwgbGFuZ3VhZ2UpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0xBTkdVQUdFLCBsYW5ndWFnZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRMYW5ndWFnZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChMYW5ndWFnZSwgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfTEFOR1VBR0UpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0xhbmd1YWdlfSBobWlEaXNwbGF5TGFuZ3VhZ2VcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRIbWlEaXNwbGF5TGFuZ3VhZ2UgKGhtaURpc3BsYXlMYW5ndWFnZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShMYW5ndWFnZSwgaG1pRGlzcGxheUxhbmd1YWdlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9ITUlfRElTUExBWV9MQU5HVUFHRSwgaG1pRGlzcGxheUxhbmd1YWdlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtMYW5ndWFnZX1cbiAgICAqL1xuICAgIGdldEhtaURpc3BsYXlMYW5ndWFnZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChMYW5ndWFnZSwgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfSE1JX0RJU1BMQVlfTEFOR1VBR0UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtEaXNwbGF5Q2FwYWJpbGl0aWVzfSBkaXNwbGF5Q2FwYWJpbGl0aWVzXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0RGlzcGxheUNhcGFiaWxpdGllcyAoZGlzcGxheUNhcGFiaWxpdGllcykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShEaXNwbGF5Q2FwYWJpbGl0aWVzLCBkaXNwbGF5Q2FwYWJpbGl0aWVzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9ESVNQTEFZX0NBUEFCSUxJVElFUywgZGlzcGxheUNhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7RGlzcGxheUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIGdldERpc3BsYXlDYXBhYmlsaXRpZXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoRGlzcGxheUNhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfRElTUExBWV9DQVBBQklMSVRJRVMpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PEJ1dHRvbkNhcGFiaWxpdGllcz59IGJ1dHRvbkNhcGFiaWxpdGllc1xuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldEJ1dHRvbkNhcGFiaWxpdGllcyAoYnV0dG9uQ2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgd2l0aCBhcnJheXNcbiAgICAgICAgLy8gdGhpcy52YWxpZGF0ZVR5cGUoTGFuZ3VhZ2UsIGJ1dHRvbkNhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfQlVUVE9OX0NBUEFCSUxJVElFUywgYnV0dG9uQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxCdXR0b25DYXBhYmlsaXRpZXM+fVxuICAgICovXG4gICAgZ2V0QnV0dG9uQ2FwYWJpbGl0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEJ1dHRvbkNhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfQlVUVE9OX0NBUEFCSUxJVElFUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PFNvZnRCdXR0b25DYXBhYmlsaXRpZXM+fSBzb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0U29mdEJ1dHRvbkNhcGFiaWxpdGllcyAoc29mdEJ1dHRvbkNhcGFiaWxpdGllcykge1xuICAgICAgICAvLyBUT0RPIG1ha2UgdGhpcyB3b3JrIHdpdGggYXJyYXlzXG4gICAgICAgIC8vIHRoaXMudmFsaWRhdGVUeXBlKFNvZnRCdXR0b25DYXBhYmlsaXRpZXMsIHNvZnRCdXR0b25DYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NPRlRfQlVUVE9OX0NBUEFCSUxJVElFUywgc29mdEJ1dHRvbkNhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8U29mdEJ1dHRvbkNhcGFiaWxpdGllcz59XG4gICAgKi9cbiAgICBnZXRTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFNvZnRCdXR0b25DYXBhYmlsaXRpZXMsIFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NPRlRfQlVUVE9OX0NBUEFCSUxJVElFUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1ByZXNldEJhbmtDYXBhYmlsaXRpZXN9IHByZXNldEJhbmtDYXBhYmlsaXRpZXNcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRQcmVzZXRCYW5rQ2FwYWJpbGl0aWVzIChwcmVzZXRCYW5rQ2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFByZXNldEJhbmtDYXBhYmlsaXRpZXMsIHByZXNldEJhbmtDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1BSRVNFVF9CQU5LX0NBUEFCSUxJVElFUywgcHJlc2V0QmFua0NhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UHJlc2V0QmFua0NhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIGdldFByZXNldEJhbmtDYXBhYmlsaXRpZXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoUHJlc2V0QmFua0NhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfUFJFU0VUX0JBTktfQ0FQQUJJTElUSUVTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8SG1pWm9uZUNhcGFiaWxpdGllcz59IGhtaVpvbmVDYXBhYmlsaXRpZXNcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRIbWlab25lQ2FwYWJpbGl0aWVzIChobWlab25lQ2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgZm9yIGFycmF5c1xuICAgICAgICAvLyB0aGlzLnZhbGlkYXRlVHlwZShIbWlab25lQ2FwYWJpbGl0aWVzLCBobWlab25lQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9ITUlfWk9ORV9DQVBBQklMSVRJRVMsIGhtaVpvbmVDYXBhYmlsaXRpZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PEhtaVpvbmVDYXBhYmlsaXRpZXM+fVxuICAgICovXG4gICAgZ2V0SG1pWm9uZUNhcGFiaWxpdGllcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChIbWlab25lQ2FwYWJpbGl0aWVzLCBSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9ITUlfWk9ORV9DQVBBQklMSVRJRVMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxTcGVlY2hDYXBhYmlsaXRpZXM+fSBzcGVlY2hDYXBhYmlsaXRpZXNcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRTcGVlY2hDYXBhYmlsaXRpZXMgKHNwZWVjaENhcGFiaWxpdGllcykge1xuICAgICAgICAvLyBUT0RPIG1ha2UgdGhpcyB3b3JrIGZvciBhcnJheXNcbiAgICAgICAgLy8gdGhpcy52YWxpZGF0ZVR5cGUoU3BlZWNoQ2FwYWJpbGl0aWVzLCBzcGVlY2hDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NQRUVDSF9DQVBBQklMSVRJRVMsIHNwZWVjaENhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8U3BlZWNoQ2FwYWJpbGl0aWVzPn1cbiAgICAqL1xuICAgIGdldFNwZWVjaENhcGFiaWxpdGllcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChTcGVlY2hDYXBhYmlsaXRpZXMsIFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NQRUVDSF9DQVBBQklMSVRJRVMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxQcmVyZWNvcmRlZFNwZWVjaD59IHNwZWVjaENhcGFiaWxpdGllc1xuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFByZXJlY29yZGVkU3BlZWNoIChzcGVlY2hDYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgLy8gVE9ETyBtYWtlIHRoaXMgd29yayBmb3IgYXJyYXlzXG4gICAgICAgIC8vIHRoaXMudmFsaWRhdGVUeXBlKFByZXJlY29yZGVkU3BlZWNoLCBzcGVlY2hDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1BSRVJFQ09SREVEX1NQRUVDSCwgc3BlZWNoQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxQcmVyZWNvcmRlZFNwZWVjaD59XG4gICAgKi9cbiAgICBnZXRQcmVyZWNvcmRlZFNwZWVjaCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChQcmVyZWNvcmRlZFNwZWVjaCwgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfUFJFUkVDT1JERURfU1BFRUNIKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8VnJDYXBhYmlsaXRpZXM+fSB2ckNhcGFiaWxpdGllc1xuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFZyQ2FwYWJpbGl0aWVzICh2ckNhcGFiaWxpdGllcykge1xuICAgICAgICAvLyBUT0RPIG1ha2UgdGhpcyB3b3JrIGZvciBhcnJheXNcbiAgICAgICAgLy8gdGhpcy52YWxpZGF0ZVR5cGUoVnJDYXBhYmlsaXRpZXMsIHZyQ2FwYWJpbGl0aWVzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9WUl9DQVBBQklMSVRJRVMsIHZyQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxWckNhcGFiaWxpdGllcz59XG4gICAgKi9cbiAgICBnZXRWckNhcGFiaWxpdGllcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChWckNhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfVlJfQ0FQQUJJTElUSUVTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8QXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcz59IGF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXNcbiAgICAqIEByZXR1cm4ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzIChhdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgZm9yIGFycmF5c1xuICAgICAgICAvLyB0aGlzLnZhbGlkYXRlVHlwZShBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzLCBhdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9BVURJT19QQVNTX1RIUlVfQ0FQQUJJTElUSUVTLCBhdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzPn1cbiAgICAqL1xuICAgIGdldEF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfQVVESU9fUEFTU19USFJVX0NBUEFCSUxJVElFUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0F1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXN9IHBjbVN0cmVhbUNhcGFiaWxpdGllc1xuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFBjbVN0cmVhbUNhcGFiaWxpdGllcyAocGNtU3RyZWFtQ2FwYWJpbGl0aWVzKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMsIHBjbVN0cmVhbUNhcGFiaWxpdGllcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfUENNX1NUUkVBTV9DQVBBQklMSVRJRVMsIHBjbVN0cmVhbUNhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXVkaW9QYXNzVGhydUNhcGFiaWxpdGllc31cbiAgICAqL1xuICAgIGdldFBjbVN0cmVhbUNhcGFiaWxpdGllcyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChBdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzLCBSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9QQ01fU1RSRUFNX0NBUEFCSUxJVElFUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1ZlaGljbGVUeXBlfSB2ZWhpY2xlVHlwZVxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFZlaGljbGVUeXBlICh2ZWhpY2xlVHlwZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShWZWhpY2xlVHlwZSwgdmVoaWNsZVR5cGUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1ZFSElDTEVfVFlQRSwgdmVoaWNsZVR5cGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1ZlaGljbGVUeXBlfVxuICAgICovXG4gICAgZ2V0VmVoaWNsZVR5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoVmVoaWNsZVR5cGUsIFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1ZFSElDTEVfVFlQRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gc3VwcG9ydGVkRGlhZ01vZGVzXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0U3VwcG9ydGVkRGlhZ01vZGVzIChzdXBwb3J0ZWREaWFnTW9kZXMpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU1VQUE9SVEVEX0RJQUdfTU9ERSwgc3VwcG9ydGVkRGlhZ01vZGVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRTdXBwb3J0ZWREaWFnTW9kZXMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU1VQUE9SVEVEX0RJQUdfTU9ERSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0hNSUNhcGFiaWxpdGllc30gaG1pQ2FwYWJpbGl0aWVzXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0SE1JQ2FwYWJpbGl0aWVzIChobWlDYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoSE1JQ2FwYWJpbGl0aWVzLCBobWlDYXBhYmlsaXRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0hNSV9DQVBBQklMSVRJRVMsIGhtaUNhcGFiaWxpdGllcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7SE1JQ2FwYWJpbGl0aWVzfVxuICAgICovXG4gICAgZ2V0SE1JQ2FwYWJpbGl0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEhNSUNhcGFiaWxpdGllcywgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfSE1JX0NBUEFCSUxJVElFUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gc2RsVmVyc2lvblxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFNkbFZlcnNpb24gKHNkbFZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU0RMX1ZFUlNJT04sIHNkbFZlcnNpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldFNkbFZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU0RMX1ZFUlNJT04pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHN5c3RlbVNvZnR3YXJlVmVyc2lvblxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFN5c3RlbVNvZnR3YXJlVmVyc2lvbiAoc3lzdGVtU29mdHdhcmVWZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NZU1RFTV9TT0ZUV0FSRV9WRVJTSU9OLCBzeXN0ZW1Tb2Z0d2FyZVZlcnNpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldFN5c3RlbVNvZnR3YXJlVmVyc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9TWVNURU1fU09GVFdBUkVfVkVSU0lPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGljb25SZXN1bWVkXG4gICAgKiBAcmV0dXJuIHtSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlfVxuICAgICovXG4gICAgc2V0SWNvblJlc3VtZWQgKGljb25SZXN1bWVkKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0lDT05fUkVTVU1FRCwgaWNvblJlc3VtZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRJY29uUmVzdW1lZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9JQ09OX1JFU1VNRUQpO1xuICAgIH1cbn1cblxuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU0RMX01TR19WRVJTSU9OID0gJ3N5bmNNc2dWZXJzaW9uJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0xBTkdVQUdFID0gJ2xhbmd1YWdlJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0hNSV9ESVNQTEFZX0xBTkdVQUdFID0gJ2htaURpc3BsYXlMYW5ndWFnZSc7XG5SZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9ESVNQTEFZX0NBUEFCSUxJVElFUyA9ICdkaXNwbGF5Q2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0JVVFRPTl9DQVBBQklMSVRJRVMgPSAnYnV0dG9uQ2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NPRlRfQlVUVE9OX0NBUEFCSUxJVElFUyA9ICdzb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1BSRVNFVF9CQU5LX0NBUEFCSUxJVElFUyA9ICdwcmVzZXRCYW5rQ2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX0hNSV9aT05FX0NBUEFCSUxJVElFUyA9ICdobWlab25lQ2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1NQRUVDSF9DQVBBQklMSVRJRVMgPSAnc3BlZWNoQ2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1BSRVJFQ09SREVEX1NQRUVDSCA9ICdwcmVyZWNvcmRlZFNwZWVjaCc7XG5SZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9WUl9DQVBBQklMSVRJRVMgPSAndnJDYXBhYmlsaXRpZXMnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfQVVESU9fUEFTU19USFJVX0NBUEFCSUxJVElFUyA9ICdhdWRpb1Bhc3NUaHJ1Q2FwYWJpbGl0aWVzJztcblJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UuS0VZX1BDTV9TVFJFQU1fQ0FQQUJJTElUSUVTID0gJ3BjbVN0cmVhbUNhcGFiaWxpdGllcyc7XG5SZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9WRUhJQ0xFX1RZUEUgPSAndmVoaWNsZVR5cGUnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU1VQUE9SVEVEX0RJQUdfTU9ERSA9ICdzdXBwb3J0ZWREaWFnTW9kZXMnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfSE1JX0NBUEFCSUxJVElFUyA9ICdobWlDYXBhYmlsaXRpZXMnO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfU0RMX1ZFUlNJT04gPSAnc2RsVmVyc2lvbic7XG5SZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLktFWV9TWVNURU1fU09GVFdBUkVfVkVSU0lPTiA9ICdzeXN0ZW1Tb2Z0d2FyZVZlcnNpb24nO1xuUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5LRVlfSUNPTl9SRVNVTUVEID0gJ2ljb25SZXN1bWVkJztcblxuZXhwb3J0IHsgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1JlcXVlc3QgfSBmcm9tICcuLi9ScGNSZXF1ZXN0LmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgU2V0QXBwSWNvbiBleHRlbmRzIFJwY1JlcXVlc3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELlNldEFwcEljb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVOYW1lXG4gICAgKiBAcmV0dXJuIHtTZXRBcHBJY29ufVxuICAgICovXG4gICAgc2V0RmlsZU5hbWUgKGZpbGVOYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNldEFwcEljb24uS0VZX0ZJTEVfTkFNRSwgZmlsZU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldEZpbGVOYW1lICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNldEFwcEljb24uS0VZX0ZJTEVfTkFNRSk7XG4gICAgfVxufVxuXG5TZXRBcHBJY29uLktFWV9GSUxFX05BTUUgPSAnc3luY0ZpbGVOYW1lJztcblxuXG5leHBvcnQgeyBTZXRBcHBJY29uIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVzcG9uc2UgfSBmcm9tICcuLi9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIFNldEFwcEljb25SZXNwb25zZSBleHRlbmRzIFJwY1Jlc3BvbnNlIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5TZXRBcHBJY29uKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNldEFwcEljb25SZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBTb2Z0QnV0dG9uVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgU29mdEJ1dHRvblR5cGUgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0JUX1RFWFQgKCkge1xuICAgICAgICByZXR1cm4gU29mdEJ1dHRvblR5cGUuX01BUC5TQlRfVEVYVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTQlRfSU1BR0UgKCkge1xuICAgICAgICByZXR1cm4gU29mdEJ1dHRvblR5cGUuX01BUC5TQlRfSU1BR0U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU0JUX0JPVEggKCkge1xuICAgICAgICByZXR1cm4gU29mdEJ1dHRvblR5cGUuX01BUC5TQlRfQk9USDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gU29mdEJ1dHRvblR5cGUuX3ZhbHVlRm9yS2V5KGtleSwgU29mdEJ1dHRvblR5cGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFNvZnRCdXR0b25UeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgU29mdEJ1dHRvblR5cGUuX01BUCk7XG4gICAgfVxufVxuXG5Tb2Z0QnV0dG9uVHlwZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1NCVF9URVhUJzogJ1RFWFQnLFxuICAgICdTQlRfSU1BR0UnOiAnSU1BR0UnLFxuICAgICdTQlRfQk9USCc6ICdCT1RIJyxcblxufSk7XG5cbmV4cG9ydCB7IFNvZnRCdXR0b25UeXBlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBTeXN0ZW1BY3Rpb25cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFN5c3RlbUFjdGlvbiBleHRlbmRzIEVudW0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBERUZBVUxUX0FDVElPTiAoKSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1BY3Rpb24uX01BUC5ERUZBVUxUX0FDVElPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBTVEVBTF9GT0NVUyAoKSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1BY3Rpb24uX01BUC5TVEVBTF9GT0NVUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBLRUVQX0NPTlRFWFQgKCkge1xuICAgICAgICByZXR1cm4gU3lzdGVtQWN0aW9uLl9NQVAuS0VFUF9DT05URVhUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1BY3Rpb24uX3ZhbHVlRm9yS2V5KGtleSwgU3lzdGVtQWN0aW9uLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBTeXN0ZW1BY3Rpb24uX2tleUZvclZhbHVlKHZhbHVlLCBTeXN0ZW1BY3Rpb24uX01BUCk7XG4gICAgfVxufVxuXG5TeXN0ZW1BY3Rpb24uX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdERUZBVUxUX0FDVElPTic6ICdERUZBVUxUX0FDVElPTicsXG4gICAgJ1NURUFMX0ZPQ1VTJzogJ1NURUFMX0ZPQ1VTJyxcbiAgICAnS0VFUF9DT05URVhUJzogJ0tFRVBfQ09OVEVYVCcsXG5cbn0pO1xuXG5leHBvcnQgeyBTeXN0ZW1BY3Rpb24gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IFNvZnRCdXR0b25UeXBlIH0gZnJvbSAnLi4vZW51bXMvU29mdEJ1dHRvblR5cGUuanMnO1xuaW1wb3J0IHsgU3lzdGVtQWN0aW9uIH0gZnJvbSAnLi4vZW51bXMvU3lzdGVtQWN0aW9uLmpzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi9JbWFnZS5qcyc7XG5cblxuY2xhc3MgU29mdEJ1dHRvbiBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgY29uc3RydWN0b3IgKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1NvZnRCdXR0b25UeXBlfSB0eXBlXG4gICAgKiBAcmV0dXJuIHtTb2Z0QnV0dG9ufVxuICAgICovXG4gICAgc2V0VHlwZSAodHlwZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShTb2Z0QnV0dG9uVHlwZSwgdHlwZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbi5LRVlfVFlQRSwgdHlwZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U29mdEJ1dHRvblR5cGV9XG4gICAgKi9cbiAgICBnZXRUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFNvZnRCdXR0b25UeXBlLCBTb2Z0QnV0dG9uLktFWV9UWVBFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0XG4gICAgKiBAcmV0dXJuIHtTb2Z0QnV0dG9ufVxuICAgICovXG4gICAgc2V0VGV4dCAodGV4dCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTb2Z0QnV0dG9uLktFWV9URVhULCB0ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRUZXh0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNvZnRCdXR0b24uS0VZX1RFWFQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZX0gaW1hZ2VcbiAgICAqIEByZXR1cm4ge1NvZnRCdXR0b259XG4gICAgKi9cbiAgICBzZXRJbWFnZSAoaW1hZ2UpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoSW1hZ2UsIGltYWdlKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTb2Z0QnV0dG9uLktFWV9JTUFHRSwgaW1hZ2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ltYWdlfVxuICAgICovXG4gICAgZ2V0SW1hZ2UgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoSW1hZ2UsIFNvZnRCdXR0b24uS0VZX0lNQUdFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNIaWdobGlnaHRlZFxuICAgICogQHJldHVybiB7U29mdEJ1dHRvbn1cbiAgICAqL1xuICAgIHNldElzSGlnaGxpZ2h0ZWQgKGlzSGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbi5LRVlfSVNfSElHSExJR0hURUQsIGlzSGlnaGxpZ2h0ZWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgKi9cbiAgICBnZXRJc0hpZ2hsaWdodGVkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNvZnRCdXR0b24uS0VZX0lTX0hJR0hMSUdIVEVEKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBzb2Z0QnV0dG9uSURcbiAgICAqIEByZXR1cm4ge1NvZnRCdXR0b259XG4gICAgKi9cbiAgICBzZXRTb2Z0QnV0dG9uSUQgKHNvZnRCdXR0b25JRCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTb2Z0QnV0dG9uLktFWV9TT0ZUX0JVVFRPTl9JRCwgc29mdEJ1dHRvbklEKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRTb2Z0QnV0dG9uSUQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU29mdEJ1dHRvbi5LRVlfU09GVF9CVVRUT05fSUQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N5c3RlbUFjdGlvbn0gc3lzdGVtQWN0aW9uXG4gICAgKiBAcmV0dXJuIHtTb2Z0QnV0dG9ufVxuICAgICovXG4gICAgc2V0U3lzdGVtQWN0aW9uIChzeXN0ZW1BY3Rpb24pIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoU3lzdGVtQWN0aW9uLCBzeXN0ZW1BY3Rpb24pO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNvZnRCdXR0b24uS0VZX1NZU1RFTV9BQ1RJT04sIHN5c3RlbUFjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3lzdGVtQWN0aW9ufVxuICAgICovXG4gICAgZ2V0U3lzdGVtQWN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFN5c3RlbUFjdGlvbiwgU29mdEJ1dHRvbi5LRVlfU1lTVEVNX0FDVElPTik7XG4gICAgfVxufVxuXG5Tb2Z0QnV0dG9uLktFWV9UWVBFID0gJ3R5cGUnO1xuU29mdEJ1dHRvbi5LRVlfVEVYVCA9ICd0ZXh0JztcblNvZnRCdXR0b24uS0VZX0lNQUdFID0gJ2ltYWdlJztcblNvZnRCdXR0b24uS0VZX0lTX0hJR0hMSUdIVEVEID0gJ2lzSGlnaGxpZ2h0ZWQnO1xuU29mdEJ1dHRvbi5LRVlfU09GVF9CVVRUT05fSUQgPSAnc29mdEJ1dHRvbklEJztcblNvZnRCdXR0b24uS0VZX1NZU1RFTV9BQ1RJT04gPSAnc3lzdGVtQWN0aW9uJztcblxuZXhwb3J0IHsgU29mdEJ1dHRvbiB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBNZXRhZGF0YVR5cGVcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIE1ldGFkYXRhVHlwZSBleHRlbmRzIEVudW0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBtZWRpYVRpdGxlICgpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhVHlwZS5fTUFQLm1lZGlhVGl0bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbWVkaWFBcnRpc3QgKCkge1xuICAgICAgICByZXR1cm4gTWV0YWRhdGFUeXBlLl9NQVAubWVkaWFBcnRpc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbWVkaWFBbGJ1bSAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5tZWRpYUFsYnVtO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1lZGlhWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5tZWRpYVllYXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbWVkaWFHZW5yZSAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5tZWRpYUdlbnJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1lZGlhU3RhdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5tZWRpYVN0YXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgcmF0aW5nICgpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhVHlwZS5fTUFQLnJhdGluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBjdXJyZW50VGVtcGVyYXR1cmUgKCkge1xuICAgICAgICByZXR1cm4gTWV0YWRhdGFUeXBlLl9NQVAuY3VycmVudFRlbXBlcmF0dXJlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IG1heGltdW1UZW1wZXJhdHVyZSAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5tYXhpbXVtVGVtcGVyYXR1cmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbWluaW11bVRlbXBlcmF0dXJlICgpIHtcbiAgICAgICAgcmV0dXJuIE1ldGFkYXRhVHlwZS5fTUFQLm1pbmltdW1UZW1wZXJhdHVyZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCB3ZWF0aGVyVGVybSAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC53ZWF0aGVyVGVybTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBodW1pZGl0eSAoKSB7XG4gICAgICAgIHJldHVybiBNZXRhZGF0YVR5cGUuX01BUC5odW1pZGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gTWV0YWRhdGFUeXBlLl92YWx1ZUZvcktleShrZXksIE1ldGFkYXRhVHlwZS5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWV0YWRhdGFUeXBlLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgTWV0YWRhdGFUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuTWV0YWRhdGFUeXBlLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnbWVkaWFUaXRsZSc6ICdtZWRpYVRpdGxlJyxcbiAgICAnbWVkaWFBcnRpc3QnOiAnbWVkaWFBcnRpc3QnLFxuICAgICdtZWRpYUFsYnVtJzogJ21lZGlhQWxidW0nLFxuICAgICdtZWRpYVllYXInOiAnbWVkaWFZZWFyJyxcbiAgICAnbWVkaWFHZW5yZSc6ICdtZWRpYUdlbnJlJyxcbiAgICAnbWVkaWFTdGF0aW9uJzogJ21lZGlhU3RhdGlvbicsXG4gICAgJ3JhdGluZyc6ICdyYXRpbmcnLFxuICAgICdjdXJyZW50VGVtcGVyYXR1cmUnOiAnY3VycmVudFRlbXBlcmF0dXJlJyxcbiAgICAnbWF4aW11bVRlbXBlcmF0dXJlJzogJ21heGltdW1UZW1wZXJhdHVyZScsXG4gICAgJ21pbmltdW1UZW1wZXJhdHVyZSc6ICdtaW5pbXVtVGVtcGVyYXR1cmUnLFxuICAgICd3ZWF0aGVyVGVybSc6ICd3ZWF0aGVyVGVybScsXG4gICAgJ2h1bWlkaXR5JzogJ2h1bWlkaXR5JyxcblxufSk7XG5cbmV4cG9ydCB7IE1ldGFkYXRhVHlwZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4uL1JwY1N0cnVjdC5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVR5cGUgfSBmcm9tICcuLi9lbnVtcy9NZXRhZGF0YVR5cGUuanMnO1xuXG5jbGFzcyBNZXRhZGF0YVRhZ3MgZXh0ZW5kcyBScGNTdHJ1Y3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8TWV0YWRhdGFUeXBlPn0gbWFpbkZpZWxkMVxuICAgICogQHJldHVybiB7TWV0YWRhdGFUYWdzfVxuICAgICovXG4gICAgc2V0TWFpbkZpZWxkMSAobWFpbkZpZWxkMSkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihNZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfMSwgbWFpbkZpZWxkMSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8TWV0YWRhdGFUeXBlPn1cbiAgICAqL1xuICAgIGdldE1haW5GaWVsZDEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoTWV0YWRhdGFUeXBlLCBNZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PE1ldGFkYXRhVHlwZT59IG1haW5GaWVsZDJcbiAgICAqIEByZXR1cm4ge01ldGFkYXRhVGFnc31cbiAgICAqL1xuICAgIHNldE1haW5GaWVsZDIgKG1haW5GaWVsZDIpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoTWV0YWRhdGFUYWdzLktFWV9NQUlOX0ZJRUxEXzIsIG1haW5GaWVsZDIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PE1ldGFkYXRhVHlwZT59XG4gICAgKi9cbiAgICBnZXRNYWluRmllbGQyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KE1ldGFkYXRhVHlwZSwgTWV0YWRhdGFUYWdzLktFWV9NQUlOX0ZJRUxEXzIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxNZXRhZGF0YVR5cGU+fSBtYWluRmllbGQzXG4gICAgKiBAcmV0dXJuIHtNZXRhZGF0YVRhZ3N9XG4gICAgKi9cbiAgICBzZXRNYWluRmllbGQzIChtYWluRmllbGQzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1ldGFkYXRhVGFncy5LRVlfTUFJTl9GSUVMRF8zLCBtYWluRmllbGQzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtBcnJheTxNZXRhZGF0YVR5cGU+fVxuICAgICovXG4gICAgZ2V0TWFpbkZpZWxkMyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChNZXRhZGF0YVR5cGUsIE1ldGFkYXRhVGFncy5LRVlfTUFJTl9GSUVMRF8zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8TWV0YWRhdGFUeXBlPn0gbWFpbkZpZWxkNFxuICAgICogQHJldHVybiB7TWV0YWRhdGFUYWdzfVxuICAgICovXG4gICAgc2V0TWFpbkZpZWxkNCAobWFpbkZpZWxkNCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihNZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfNCwgbWFpbkZpZWxkNCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8TWV0YWRhdGFUeXBlPn1cbiAgICAqL1xuICAgIGdldE1haW5GaWVsZDQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoTWV0YWRhdGFUeXBlLCBNZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfNCk7XG4gICAgfVxufVxuXG5NZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfMSA9ICdtYWluRmllbGQxJztcbk1ldGFkYXRhVGFncy5LRVlfTUFJTl9GSUVMRF8yID0gJ21haW5GaWVsZDInO1xuTWV0YWRhdGFUYWdzLktFWV9NQUlOX0ZJRUxEXzMgPSAnbWFpbkZpZWxkMyc7XG5NZXRhZGF0YVRhZ3MuS0VZX01BSU5fRklFTERfNCA9ICdtYWluRmllbGQ0JztcblxuZXhwb3J0IHsgTWV0YWRhdGFUYWdzIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFRleHRBbGlnbm1lbnRcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBfTUFQXG4gKi9cbmNsYXNzIFRleHRBbGlnbm1lbnQgZXh0ZW5kcyBFbnVtIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IExFRlRfQUxJR05FRCAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0QWxpZ25tZW50Ll9NQVAuTEVGVF9BTElHTkVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBSSUdIVF9BTElHTkVEICgpIHtcbiAgICAgICAgcmV0dXJuIFRleHRBbGlnbm1lbnQuX01BUC5SSUdIVF9BTElHTkVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDRU5URVJFRCAoKSB7XG4gICAgICAgIHJldHVybiBUZXh0QWxpZ25tZW50Ll9NQVAuQ0VOVEVSRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFRleHRBbGlnbm1lbnQuX3ZhbHVlRm9yS2V5KGtleSwgVGV4dEFsaWdubWVudC5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gVGV4dEFsaWdubWVudC5fa2V5Rm9yVmFsdWUodmFsdWUsIFRleHRBbGlnbm1lbnQuX01BUCk7XG4gICAgfVxufVxuXG5UZXh0QWxpZ25tZW50Ll9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnTEVGVF9BTElHTkVEJzogJ0xFRlRfQUxJR05FRCcsXG4gICAgJ1JJR0hUX0FMSUdORUQnOiAnUklHSFRfQUxJR05FRCcsXG4gICAgJ0NFTlRFUkVEJzogJ0NFTlRFUkVEJyxcblxuXG59KTtcblxuZXhwb3J0IHsgVGV4dEFsaWdubWVudCB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNSZXF1ZXN0IH0gZnJvbSAnLi4vUnBjUmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBTb2Z0QnV0dG9uIH0gZnJvbSAnLi4vc3RydWN0cy9Tb2Z0QnV0dG9uLmpzJztcbmltcG9ydCB7IEltYWdlIH0gZnJvbSAnLi4vc3RydWN0cy9JbWFnZS5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVRhZ3MgfSBmcm9tICcuLi9zdHJ1Y3RzL01ldGFkYXRhVGFncy5qcyc7XG5cbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcbmltcG9ydCB7IFRleHRBbGlnbm1lbnQgfSBmcm9tICcuLi9lbnVtcy9UZXh0QWxpZ25tZW50LmpzJztcblxuY2xhc3MgU2hvdyBleHRlbmRzIFJwY1JlcXVlc3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELlNob3cpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gbWFpbkZpZWxkMVxuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1haW5GaWVsZDEgKG1haW5GaWVsZDEpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUFJTl9GSUVMRF8xLCBtYWluRmllbGQxKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNYWluRmllbGQxICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX01BSU5fRklFTERfMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gbWFpbkZpZWxkMlxuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1haW5GaWVsZDIgKG1haW5GaWVsZDIpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUFJTl9GSUVMRF8yLCBtYWluRmllbGQyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNYWluRmllbGQyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX01BSU5fRklFTERfMik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gbWFpbkZpZWxkM1xuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1haW5GaWVsZDMgKG1haW5GaWVsZDMpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUFJTl9GSUVMRF8zLCBtYWluRmllbGQzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNYWluRmllbGQzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX01BSU5fRklFTERfMyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gbWFpbkZpZWxkNFxuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1haW5GaWVsZDQgKG1haW5GaWVsZDQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUFJTl9GSUVMRF80LCBtYWluRmllbGQ0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNYWluRmllbGQ0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX01BSU5fRklFTERfNCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1RleHRBbGlnbm1lbnR9IG1lbnVQYXJhbXNcbiAgICAqIEByZXR1cm4ge1Nob3d9XG4gICAgKi9cbiAgICBzZXRBbGlnbm1lbnQgKGFsaWdubWVudCkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShUZXh0QWxpZ25tZW50LCBhbGlnbm1lbnQpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNob3cuS0VZX0FMSUdOTUVOVCwgYWxpZ25tZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtUZXh0QWxpZ25tZW50fVxuICAgICovXG4gICAgZ2V0QWxpZ25tZW50ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KFRleHRBbGlnbm1lbnQsIFNob3cuS0VZX0FMSUdOTUVOVCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhdHVzQmFyXG4gICAgKiBAcmV0dXJuIHtTaG93fVxuICAgICovXG4gICAgc2V0U3RhdHVzQmFyIChzdGF0dXNCYXIpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfU1RBVFVTX0JBUiwgc3RhdHVzQmFyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRTdGF0dXNCYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU2hvdy5LRVlfU1RBVFVTX0JBUik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gbWVkaWFDbG9ja1xuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1lZGlhQ2xvY2sgKG1lZGlhQ2xvY2spIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUVESUFfQ0xPQ0ssIG1lZGlhQ2xvY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAqL1xuICAgIGdldE1lZGlhQ2xvY2sgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU2hvdy5LRVlfTUVESUFfQ0xPQ0spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IG1lZGlhVHJhY2tcbiAgICAqIEByZXR1cm4ge1Nob3d9XG4gICAgKi9cbiAgICBzZXRNZWRpYVRyYWNrIChtZWRpYVRyYWNrKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNob3cuS0VZX01FRElBX1RSQUNLLCBtZWRpYVRyYWNrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRNZWRpYVRyYWNrICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX01FRElBX1RSQUNLKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7SW1hZ2V9IGdyYXBoaWNcbiAgICAqIEByZXR1cm4ge1Nob3d9XG4gICAgKi9cbiAgICBzZXRHcmFwaGljIChncmFwaGljKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEltYWdlLCBncmFwaGljKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTaG93LktFWV9HUkFQSElDLCBncmFwaGljKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICAqL1xuICAgIGdldEdyYXBoaWMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoSW1hZ2UsIFNob3cuS0VZX0dSQVBISUMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZX0gc2Vjb25kYXJ5R3JhcGhpY1xuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldFNlY29uZGFyeUdyYXBoaWMgKHNlY29uZGFyeUdyYXBoaWMpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoSW1hZ2UsIHNlY29uZGFyeUdyYXBoaWMpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNob3cuS0VZX1NFQ09OREFSWV9HUkFQSElDLCBzZWNvbmRhcnlHcmFwaGljKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICAqL1xuICAgIGdldFNlY29uZGFyeUdyYXBoaWMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoSW1hZ2UsIFNob3cuS0VZX1NFQ09OREFSWV9HUkFQSElDKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7QXJyYXk8U29mdEJ1dHRvbj59IHNvZnRCdXR0b25zXG4gICAgKiBAcmV0dXJuIHtTaG93fVxuICAgICovXG4gICAgc2V0U29mdEJ1dHRvbnMgKHNvZnRCdXR0b25zKSB7XG4gICAgICAgIC8vIFRPRE8gbWFrZSB0aGlzIHdvcmsgZm9yIGFycmF5c1xuICAgICAgICAvLyB0aGlzLnZhbGlkYXRlVHlwZShTb2Z0QnV0dG9uLCBzb2Z0QnV0dG9ucyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoU2hvdy5LRVlfU09GVF9CVVRUT05TLCBzb2Z0QnV0dG9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8U29mdEJ1dHRvbj59XG4gICAgKi9cbiAgICBnZXRTb2Z0QnV0dG9ucyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChTb2Z0QnV0dG9uLCBTaG93LktFWV9TT0ZUX0JVVFRPTlMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSBjdXN0b21QcmVzZXRzXG4gICAgKiBAcmV0dXJuIHtTaG93fVxuICAgICovXG4gICAgc2V0Q3VzdG9tUHJlc2V0cyAoY3VzdG9tUHJlc2V0cykge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTaG93LktFWV9DVVNUT01fUFJFU0VUUywgY3VzdG9tUHJlc2V0cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn1cbiAgICAqL1xuICAgIGdldEN1c3RvbVByZXNldHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoU2hvdy5LRVlfQ1VTVE9NX1BSRVNFVFMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtNZXRhZGF0YVRhZ3N9IG1ldGFkYXRhVGFnc1xuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldE1ldGFkYXRhVGFncyAobWV0YWRhdGFUYWdzKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKE1ldGFkYXRhVGFncywgbWV0YWRhdGFUYWdzKTtcblxuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTaG93LktFWV9NRVRBREFUQV9UQUdTLCBtZXRhZGF0YVRhZ3MpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge01ldGFkYXRhVGFnc31cbiAgICAqL1xuICAgIGdldE1ldGFkYXRhVGFncyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChNZXRhZGF0YVRhZ3MsIFNob3cuS0VZX01FVEFEQVRBX1RBR1MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHRlbXBsYXRlVGl0bGVcbiAgICAqIEByZXR1cm4ge1Nob3d9XG4gICAgKi9cbiAgICBzZXRUZW1wbGF0ZVRpdGxlICh0ZW1wbGF0ZVRpdGxlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFNob3cuS0VZX1RFTVBMQVRFX1RJVExFLCB0ZW1wbGF0ZVRpdGxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRUZW1wbGF0ZVRpdGxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFNob3cuS0VZX1RFTVBMQVRFX1RJVExFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aW5kb3dJRFxuICAgICogQHJldHVybiB7U2hvd31cbiAgICAqL1xuICAgIHNldFdpbmRvd0lEICh3aW5kb3dJRCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihTaG93LktFWV9XSU5ET1dfSUQsIHdpbmRvd0lEKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRXaW5kb3dJRCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihTaG93LktFWV9XSU5ET1dfSUQpO1xuICAgIH1cbn1cblxuU2hvdy5LRVlfTUFJTl9GSUVMRF8xID0gJ21haW5GaWVsZDEnO1xuU2hvdy5LRVlfTUFJTl9GSUVMRF8yID0gJ21haW5GaWVsZDInO1xuU2hvdy5LRVlfTUFJTl9GSUVMRF8zID0gJ21haW5GaWVsZDMnO1xuU2hvdy5LRVlfTUFJTl9GSUVMRF80ID0gJ21haW5GaWVsZDQnO1xuU2hvdy5LRVlfQUxJR05NRU5UID0gJ2FsaWdubWVudCc7XG5TaG93LktFWV9TVEFUVVNfQkFSID0gJ3N0YXR1c0Jhcic7XG5TaG93LktFWV9NRURJQV9DTE9DSyA9ICdtZWRpYUNsb2NrJztcblNob3cuS0VZX01FRElBX1RSQUNLID0gJ21lZGlhVHJhY2snO1xuU2hvdy5LRVlfR1JBUEhJQyA9ICdncmFwaGljJztcblNob3cuS0VZX1NFQ09OREFSWV9HUkFQSElDID0gJ3NlY29uZGFyeUdyYXBoaWMnO1xuU2hvdy5LRVlfU09GVF9CVVRUT05TID0gJ3NvZnRCdXR0b25zJztcblNob3cuS0VZX0NVU1RPTV9QUkVTRVRTID0gJ2N1c3RvbVByZXNldHMnO1xuU2hvdy5LRVlfTUVUQURBVEFfVEFHUyA9ICdtZXRhZGF0YVRhZ3MnO1xuU2hvdy5LRVlfVEVNUExBVEVfVElUTEUgPSAndGVtcGxhdGVUaXRsZSc7XG5TaG93LktFWV9XSU5ET1dfSUQgPSAnd2luZG93SUQnO1xuXG5leHBvcnQgeyBTaG93IH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjUmVzcG9uc2UgfSBmcm9tICcuLi9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIFNob3dSZXNwb25zZSBleHRlbmRzIFJwY1Jlc3BvbnNlIHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5TaG93KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNob3dSZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1JlcXVlc3QgfSBmcm9tICcuLi9ScGNSZXF1ZXN0LmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgVW5yZWdpc3RlckFwcEludGVyZmFjZSBleHRlbmRzIFJwY1JlcXVlc3Qge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoc3RvcmUpIHtcbiAgICAgICAgc3VwZXIoc3RvcmUpO1xuICAgICAgICB0aGlzLnNldEZ1bmN0aW9uTmFtZShGdW5jdGlvbklELlVucmVnaXN0ZXJBcHBJbnRlcmZhY2UpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgeyBVbnJlZ2lzdGVyQXBwSW50ZXJmYWNlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLy8gbWVzc2FnZXNcbmltcG9ydCB7IEFkZENvbW1hbmQgfSBmcm9tICcuL21lc3NhZ2VzL0FkZENvbW1hbmQuanMnO1xuaW1wb3J0IHsgQWRkQ29tbWFuZFJlc3BvbnNlIH0gZnJvbSAnLi9tZXNzYWdlcy9BZGRDb21tYW5kUmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgT25IbWlTdGF0dXMgfSBmcm9tICcuL21lc3NhZ2VzL09uSG1pU3RhdHVzLmpzJztcbmltcG9ydCB7IE9uTGFuZ3VhZ2VDaGFuZ2UgfSBmcm9tICcuL21lc3NhZ2VzL09uTGFuZ3VhZ2VDaGFuZ2UuanMnO1xuaW1wb3J0IHsgUHV0RmlsZSB9IGZyb20gJy4vbWVzc2FnZXMvUHV0RmlsZS5qcyc7XG5pbXBvcnQgeyBQdXRGaWxlUmVzcG9uc2UgfSBmcm9tICcuL21lc3NhZ2VzL1B1dEZpbGVSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBSZWdpc3RlckFwcEludGVyZmFjZSB9IGZyb20gJy4vbWVzc2FnZXMvUmVnaXN0ZXJBcHBJbnRlcmZhY2UuanMnO1xuaW1wb3J0IHsgUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZSB9IGZyb20gJy4vbWVzc2FnZXMvUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTZXRBcHBJY29uIH0gZnJvbSAnLi9tZXNzYWdlcy9TZXRBcHBJY29uLmpzJztcbmltcG9ydCB7IFNldEFwcEljb25SZXNwb25zZSB9IGZyb20gJy4vbWVzc2FnZXMvU2V0QXBwSWNvblJlc3BvbnNlLmpzJztcbmltcG9ydCB7IFNob3cgfSBmcm9tICcuL21lc3NhZ2VzL1Nob3cuanMnO1xuaW1wb3J0IHsgU2hvd1Jlc3BvbnNlIH0gZnJvbSAnLi9tZXNzYWdlcy9TaG93UmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgVW5yZWdpc3RlckFwcEludGVyZmFjZSB9IGZyb20gJy4vbWVzc2FnZXMvVW5yZWdpc3RlckFwcEludGVyZmFjZS5qcyc7XG5cbi8vIG90aGVyXG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9lbnVtcy9ScGNUeXBlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuL2VudW1zL0Z1bmN0aW9uSUQuanMnO1xuaW1wb3J0IHsgSnNvblJwY01hcnNoYWxsZXIgfSBmcm9tICcuLy4uL3V0aWwvSnNvblJwY01hcnNoYWxsZXIuanMnO1xuaW1wb3J0IHsgQmluYXJ5RnJhbWVIZWFkZXIgfSBmcm9tICcuLy4uL3Byb3RvY29sL0JpbmFyeUZyYW1lSGVhZGVyLmpzJztcblxuY2xhc3MgUnBjQ3JlYXRvciB7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gU2RsUGFja2V0IHRvIGFuIFJwY01lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgICogQHJldHVybiB7UnBjTWVzc2FnZX1cbiAgICAgKi9cbiAgICBzdGF0aWMgY29uc3RydWN0IChzZGxQYWNrZXQpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHNkbFBhY2tldC5nZXRQYXlsb2FkKCk7XG4gICAgICAgIGNvbnN0IGJpbmFyeUZyYW1lSGVhZGVyID0gQmluYXJ5RnJhbWVIZWFkZXIuZnJvbUJpbmFyeUhlYWRlcihwYXlsb2FkKTtcblxuICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgY29uc3QgcnBjVHlwZSA9IGJpbmFyeUZyYW1lSGVhZGVyLmdldFJwY1R5cGUoKTtcbiAgICAgICAgY29uc3QgcnBjTmFtZSA9IFJwY1R5cGUua2V5Rm9yVmFsdWUocnBjVHlwZSk7XG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSBiaW5hcnlGcmFtZUhlYWRlci5nZXRDb3JyZWxhdGlvbklkKCk7XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uSWQgPSBiaW5hcnlGcmFtZUhlYWRlci5nZXRGdW5jdGlvbklkKCk7XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IEZ1bmN0aW9uSUQua2V5Rm9yVmFsdWUoZnVuY3Rpb25JZCk7XG4gICAgICAgIGNvbnN0IGJ1bGtEYXRhID0gYmluYXJ5RnJhbWVIZWFkZXIuZ2V0QnVsa0RhdGEoKTtcbiAgICAgICAgY29uc3QganNvbkRhdGEgPSBiaW5hcnlGcmFtZUhlYWRlci5nZXRKc29uRGF0YSgpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBKc29uUnBjTWFyc2hhbGxlci51bm1hcnNoYWxsKGpzb25EYXRhKSxcbiAgICAgICAgfTtcblxuICAgICAgICBzd2l0Y2ggKGZ1bmN0aW9uSWQpIHtcbiAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25JRC5BZGRDb21tYW5kOlxuICAgICAgICAgICAgICAgIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFUVVFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG5ldyBBZGRDb21tYW5kKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFU1BPTlNFKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgQWRkQ29tbWFuZFJlc3BvbnNlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGdW5jdGlvbklELk9uSE1JU3RhdHVzOiAvLyBUT0RPOiBzaG91bGQgT25ITUlTdGF0dXMgYmUgT25IbWlTdGF0dXMsIG9yIHRoZSBjbGFzcyBuYW1lIGNoYW5nZSB0byBPbkhNSVN0YXR1cz8gb3IgaXMgdGhpcyBmaW5lIGFzIGlzP1xuICAgICAgICAgICAgICAgIGlmIChycGNUeXBlID09PSBScGNUeXBlLk5PVElGSUNBVElPTikge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbmV3IE9uSG1pU3RhdHVzKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGdW5jdGlvbklELk9uTGFuZ3VhZ2VDaGFuZ2U6XG4gICAgICAgICAgICAgICAgaWYgKHJwY1R5cGUgPT09IFJwY1R5cGUuTk9USUZJQ0FUSU9OKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgT25MYW5ndWFnZUNoYW5nZShwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25JRC5QdXRGaWxlOlxuICAgICAgICAgICAgICAgIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFUVVFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG5ldyBQdXRGaWxlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFU1BPTlNFKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgUHV0RmlsZVJlc3BvbnNlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGdW5jdGlvbklELlJlZ2lzdGVyQXBwSW50ZXJmYWNlOlxuICAgICAgICAgICAgICAgIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFUVVFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG5ldyBSZWdpc3RlckFwcEludGVyZmFjZShwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnBjVHlwZSA9PT0gUnBjVHlwZS5SRVNQT05TRSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbmV3IFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UocGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEZ1bmN0aW9uSUQuU2V0QXBwSWNvbjpcbiAgICAgICAgICAgICAgICBpZiAocnBjVHlwZSA9PT0gUnBjVHlwZS5SRVFVRVNUKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgU2V0QXBwSWNvbihwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnBjVHlwZSA9PT0gUnBjVHlwZS5SRVNQT05TRSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbmV3IFNldEFwcEljb25SZXNwb25zZShwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25JRC5TaG93OlxuICAgICAgICAgICAgICAgIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFUVVFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG5ldyBTaG93KHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChycGNUeXBlID09PSBScGNUeXBlLlJFU1BPTlNFKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgU2hvd1Jlc3BvbnNlKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBGdW5jdGlvbklELlVucmVnaXN0ZXJBcHBJbnRlcmZhY2U6XG4gICAgICAgICAgICAgICAgaWYgKHJwY1R5cGUgPT09IFJwY1R5cGUuUkVRVUVTVCkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbmV3IFVucmVnaXN0ZXJBcHBJbnRlcmZhY2UocGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiAocnBjVHlwZSA9PT0gUnBjVHlwZS5SRVNQT05TRSkgVE9ETzogbWFrZSBVbnJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWVzc2FnZSA9PT0gbnVsbCB8fCBtZXNzYWdlID09PSB1bmRlZmluZWQpIHsgLy8gaW5mb3JtcyBvZiBtaXNzaW5nIGNsYXNzZXNcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgUnBjQ3JlYXRvciBjb3VsZG4ndCBjb25zdHJ1Y3QgYW4gUlBDIGZvciB0aGUgJHtmdW5jdGlvbk5hbWV9ICR7cnBjTmFtZX1gKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJwY1R5cGUgPT09IFJwY1R5cGUuUkVRVUVTVCB8fCBycGNUeXBlID09PSBScGNUeXBlLlJFU1BPTlNFKSB7XG4gICAgICAgICAgICBtZXNzYWdlLnNldENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1bGtEYXRhKSB7XG4gICAgICAgICAgICBtZXNzYWdlLnNldEJ1bGtEYXRhKGJ1bGtEYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUnBjQ3JlYXRvciB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBWaWRlb1N0cmVhbWluZ1Byb3RvY29sXG4gKiBAcHJvcGVydHkge09iamVjdH0gX01BUFxuICovXG5jbGFzcyBWaWRlb1N0cmVhbWluZ1Byb3RvY29sIGV4dGVuZHMgRW51bSB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkFXICgpIHtcbiAgICAgICAgcmV0dXJuIFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuX01BUC5SQVc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUlRQICgpIHtcbiAgICAgICAgcmV0dXJuIFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuX01BUC5SVFA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUlRTUCAoKSB7XG4gICAgICAgIHJldHVybiBWaWRlb1N0cmVhbWluZ1Byb3RvY29sLl9NQVAuUlRTUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBSVE1QICgpIHtcbiAgICAgICAgcmV0dXJuIFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuX01BUC5SVE1QO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFdFQk0gKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdQcm90b2NvbC5fTUFQLldFQk07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4gZW51bSBrZXlcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEga2V5IHRvIGZpbmQgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIHZhbHVlIGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yS2V5IChrZXkpIHtcbiAgICAgICAgcmV0dXJuIFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuX3ZhbHVlRm9yS2V5KGtleSwgVmlkZW9TdHJlYW1pbmdQcm90b2NvbC5fTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUga2V5IGZvciB0aGUgZ2l2ZW4gZW51bSB2YWx1ZVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCB0aGUgbWF0Y2hpbmcga2V5IGZvciBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEga2V5IGlmIGZvdW5kLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdQcm90b2NvbC5fa2V5Rm9yVmFsdWUodmFsdWUsIFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuX01BUCk7XG4gICAgfVxufVxuXG5WaWRlb1N0cmVhbWluZ1Byb3RvY29sLl9NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAvKipcbiAgICAgKiBSYXcgc3RyZWFtIGJ5dGVzIHRoYXQgY29udGFpbnMgbm8gdGltZXN0YW1wIGRhdGEgYW5kIGlzIHRoZSBsb3dlc3Qgc3VwcG9ydGVkIHZpZGVvIHN0cmVhbWluZ1xuICAgICAqL1xuICAgICdSQVcnOiAnUkFXJyxcbiAgICAvKipcbiAgICAgKiBSVFAgZmFjaWxpdGF0ZXMgdGhlIHRyYW5zZmVyIG9mIHJlYWwtdGltZSBkYXRhLiBJbmZvcm1hdGlvbiBwcm92aWRlZCBieSB0aGlzIHByb3RvY29sIGluY2x1ZGVcbiAgICAgKiB0aW1lc3RhbXBzIChmb3Igc3luY2hyb25pemF0aW9uKSwgc2VxdWVuY2UgbnVtYmVycyAoZm9yIHBhY2tldCBsb3NzIGFuZCByZW9yZGVyaW5nIGRldGVjdGlvbilcbiAgICAgKiBhbmQgdGhlIHBheWxvYWQgZm9ybWF0IHdoaWNoIGluZGljYXRlcyB0aGUgZW5jb2RlZCBmb3JtYXQgb2YgdGhlIGRhdGEuXG4gICAgICovXG4gICAgJ1JUUCc6ICdSVFAnLFxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc21pc3Npb24gb2Ygc3RyZWFtaW5nIGRhdGEgaXRzZWxmIGlzIG5vdCBhIHRhc2sgb2YgUlRTUC4gTW9zdCBSVFNQIHNlcnZlcnMgdXNlIHRoZVxuICAgICAqIFJlYWwtdGltZSBUcmFuc3BvcnQgUHJvdG9jb2wgKFJUUCkgaW4gY29uanVuY3Rpb24gd2l0aCBSZWFsLXRpbWUgQ29udHJvbCBQcm90b2NvbCAoUlRDUCkgZm9yXG4gICAgICogbWVkaWEgc3RyZWFtIGRlbGl2ZXJ5LiBIb3dldmVyLCBzb21lIHZlbmRvcnMgaW1wbGVtZW50IHByb3ByaWV0YXJ5IHRyYW5zcG9ydCBwcm90b2NvbHMuXG4gICAgICovXG4gICAgJ1JUU1AnOiAnUlRTUCcsXG4gICAgLyoqXG4gICAgICogUmVhbC1UaW1lIE1lc3NhZ2luZyBQcm90b2NvbCAoUlRNUCkgd2FzIGluaXRpYWxseSBhIHByb3ByaWV0YXJ5IHByb3RvY29sIGRldmVsb3BlZCBieVxuICAgICAqIE1hY3JvbWVkaWEgZm9yIHN0cmVhbWluZyBhdWRpbywgdmlkZW8gYW5kIGRhdGEgb3ZlciB0aGUgSW50ZXJuZXQsIGJldHdlZW4gYSBGbGFzaCBwbGF5ZXIgYW5kXG4gICAgICogYSBzZXJ2ZXIuIE1hY3JvbWVkaWEgaXMgbm93IG93bmVkIGJ5IEFkb2JlLCB3aGljaCBoYXMgcmVsZWFzZWQgYW4gaW5jb21wbGV0ZSB2ZXJzaW9uIG9mIHRoZVxuICAgICAqIHNwZWNpZmljYXRpb24gb2YgdGhlIHByb3RvY29sIGZvciBwdWJsaWMgdXNlLlxuICAgICAqL1xuICAgICdSVE1QJzogJ1JUTVAnLFxuICAgIC8qKlxuICAgICAqIFRoZSBXZWJNIGNvbnRhaW5lciBpcyBiYXNlZCBvbiBhIHByb2ZpbGUgb2YgTWF0cm9za2EuIFdlYk0gaW5pdGlhbGx5IHN1cHBvcnRlZCBWUDggdmlkZW8gYW5kXG4gICAgICogVm9yYmlzIGF1ZGlvIHN0cmVhbXMuIEluIDIwMTMgaXQgd2FzIHVwZGF0ZWQgdG8gYWNjb21tb2RhdGUgVlA5IHZpZGVvIGFuZCBPcHVzIGF1ZGlvLlxuICAgICAqL1xuICAgICdXRUJNJzogJ1dFQk0nLFxuXG59KTtcblxuZXhwb3J0IHsgVmlkZW9TdHJlYW1pbmdQcm90b2NvbCB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gVmlkZW9TdHJlYW1pbmdDb2RlY1xuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgVmlkZW9TdHJlYW1pbmdDb2RlYyBleHRlbmRzIEVudW0ge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEgyNjQgKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdDb2RlYy5fTUFQLkgyNjQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSDI2NSAoKSB7XG4gICAgICAgIHJldHVybiBWaWRlb1N0cmVhbWluZ0NvZGVjLl9NQVAuSDI2NTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBUaGVvcmEgKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdDb2RlYy5fTUFQLlRoZW9yYTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBWUDggKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdDb2RlYy5fTUFQLlZQODtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGdldCBWUDkgKCkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdDb2RlYy5fTUFQLlZQOTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldCB0aGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBlbnVtIGtleVxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBrZXkgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JLZXkgKGtleSkge1xuICAgICAgICByZXR1cm4gVmlkZW9TdHJlYW1pbmdDb2RlYy5fdmFsdWVGb3JLZXkoa2V5LCBWaWRlb1N0cmVhbWluZ0NvZGVjLl9NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSBrZXkgZm9yIHRoZSBnaXZlbiBlbnVtIHZhbHVlXG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIHByaW1pdGl2ZSB2YWx1ZSB0byBmaW5kIHRoZSBtYXRjaGluZyBrZXkgZm9yIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSBrZXkgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBWaWRlb1N0cmVhbWluZ0NvZGVjLl9rZXlGb3JWYWx1ZSh2YWx1ZSwgVmlkZW9TdHJlYW1pbmdDb2RlYy5fTUFQKTtcbiAgICB9XG59XG5cblZpZGVvU3RyZWFtaW5nQ29kZWMuX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgIC8qKlxuICAgICAqIEEgYmxvY2stb3JpZW50ZWQgbW90aW9uLWNvbXBlbnNhdGlvbi1iYXNlZCB2aWRlbyBjb21wcmVzc2lvbiBzdGFuZGFyZC4gQXMgb2YgMjAxNCBpdCBpcyBvbmVcbiAgICAgKiBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIGZvcm1hdHMgZm9yIHRoZSByZWNvcmRpbmcsIGNvbXByZXNzaW9uLCBhbmQgZGlzdHJpYnV0aW9uIG9mIHZpZGVvXG4gICAgICogY29udGVudC5cbiAgICAgKi9cbiAgICAnSDI2NCc6ICdIMjY0JyxcbiAgICAvKipcbiAgICAgKiBIaWdoIEVmZmljaWVuY3kgVmlkZW8gQ29kaW5nIChIRVZDKSwgYWxzbyBrbm93biBhcyBILjI2NSBhbmQgTVBFRy1IIFBhcnQgMiwgaXMgYSB2aWRlb1xuICAgICAqIGNvbXByZXNzaW9uIHN0YW5kYXJkLCBvbmUgb2Ygc2V2ZXJhbCBwb3RlbnRpYWwgc3VjY2Vzc29ycyB0byB0aGUgd2lkZWx5IHVzZWQgQVZDXG4gICAgICogKEguMjY0IG9yIE1QRUctNCBQYXJ0IDEwKS4gSW4gY29tcGFyaXNvbiB0byBBVkMsIEhFVkMgb2ZmZXJzIGFib3V0IGRvdWJsZSB0aGUgZGF0YVxuICAgICAqIGNvbXByZXNzaW9uIHJhdGlvIGF0IHRoZSBzYW1lIGxldmVsIG9mIHZpZGVvIHF1YWxpdHksIG9yIHN1YnN0YW50aWFsbHkgaW1wcm92ZWQgdmlkZW8gcXVhbGl0eVxuICAgICAqIGF0IHRoZSBzYW1lIGJpdCByYXRlLiBJdCBzdXBwb3J0cyByZXNvbHV0aW9ucyB1cCB0byA4MTkyeDQzMjAsIGluY2x1ZGluZyA4SyBVSEQuXG4gICAgICovXG4gICAgJ0gyNjUnOiAnSDI2NScsXG4gICAgLyoqXG4gICAgICogVGhlb3JhIGlzIGRlcml2ZWQgZnJvbSB0aGUgZm9ybWVybHkgcHJvcHJpZXRhcnkgVlAzIGNvZGVjLCByZWxlYXNlZCBpbnRvIHRoZSBwdWJsaWMgZG9tYWluIGJ5XG4gICAgICogT24yIFRlY2hub2xvZ2llcy4gSXQgaXMgYnJvYWRseSBjb21wYXJhYmxlIGluIGRlc2lnbiBhbmQgYml0cmF0ZSBlZmZpY2llbmN5IHRvIE1QRUctNCBQYXJ0IDIsXG4gICAgICogZWFybHkgdmVyc2lvbnMgb2YgV2luZG93cyBNZWRpYSBWaWRlbywgYW5kIFJlYWxWaWRlbyB3aGlsZSBsYWNraW5nIHNvbWUgb2YgdGhlIGZlYXR1cmVzXG4gICAgICogcHJlc2VudCBpbiBzb21lIG9mIHRoZXNlIG90aGVyIGNvZGVjcy4gSXQgaXMgY29tcGFyYWJsZSBpbiBvcGVuIHN0YW5kYXJkcyBwaGlsb3NvcGh5IHRvIHRoZVxuICAgICAqIEJCQydzIERpcmFjIGNvZGVjLlxuICAgICAqL1xuICAgICdUaGVvcmEnOiAnVGhlb3JhJyxcbiAgICAvKipcbiAgICAgKiBWUDggY2FuIGJlIG11bHRpcGxleGVkIGludG8gdGhlIE1hdHJvc2thLWJhc2VkIGNvbnRhaW5lciBmb3JtYXQgV2ViTSBhbG9uZyB3aXRoIFZvcmJpcyBhbmRcbiAgICAgKiBPcHVzIGF1ZGlvLiBUaGUgaW1hZ2UgZm9ybWF0IFdlYlAgaXMgYmFzZWQgb24gVlA4J3MgaW50cmEtZnJhbWUgY29kaW5nLiBWUDgncyBkaXJlY3RcbiAgICAgKiBzdWNjZXNzb3IsIFZQOSwgYW5kIHRoZSBlbWVyZ2luZyByb3lhbHR5LWZyZWUgaW50ZXJuZXQgdmlkZW8gZm9ybWF0IEFWMSBmcm9tIHRoZSBBbGxpYW5jZVxuICAgICAqIGZvciBPcGVuIE1lZGlhIChBT01lZGlhKSBhcmUgYmFzZWQgb24gVlA4LlxuICAgICAqL1xuICAgICdWUDgnOiAnVlA4JyxcbiAgICAvKipcbiAgICAgKiBTaW1pbGFyIHRvIFZQOCwgYnV0IFZQOSBpcyBjdXN0b21pemVkIGZvciB2aWRlbyByZXNvbHV0aW9ucyBiZXlvbmQgaGlnaC1kZWZpbml0aW9uIHZpZGVvXG4gICAgICogKFVIRCkgYW5kIGFsc28gZW5hYmxlcyBsb3NzbGVzcyBjb21wcmVzc2lvbi5cbiAgICAgKi9cbiAgICAnVlA5JzogJ1ZQOScsXG59KTtcblxuZXhwb3J0IHsgVmlkZW9TdHJlYW1pbmdDb2RlYyB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdQcm90b2NvbCB9IGZyb20gJy4uL2VudW1zL1ZpZGVvU3RyZWFtaW5nUHJvdG9jb2wuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdDb2RlYyB9IGZyb20gJy4uL2VudW1zL1ZpZGVvU3RyZWFtaW5nQ29kZWMuanMnO1xuXG5jbGFzcyBWaWRlb1N0cmVhbWluZ0Zvcm1hdCBleHRlbmRzIFJwY1N0cnVjdCB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nUHJvdG9jb2x9IHZhbFxuICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdGb3JtYXR9XG4gICAgKi9cbiAgICBzZXRQcm90b2NvbCAodmFsKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wsIHZhbCk7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFZpZGVvU3RyZWFtaW5nRm9ybWF0LktFWV9QUk9UT0NPTCwgdmFsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1Byb3RvY29sfVxuICAgICovXG4gICAgZ2V0UHJvdG9jb2wgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdGb3JtYXQuS0VZX1BST1RPQ09MKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7VmlkZW9TdHJlYW1pbmdDb2RlY30gdmFsXG4gICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ0Zvcm1hdH1cbiAgICAqL1xuICAgIHNldENvZGVjICh2YWwpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoVmlkZW9TdHJlYW1pbmdDb2RlYywgdmFsKTtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdGb3JtYXQuS0VZX0NPREVDLCB2YWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1ZpZGVvU3RyZWFtaW5nQ29kZWN9XG4gICAgKi9cbiAgICBnZXRDb2RlYyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihWaWRlb1N0cmVhbWluZ0Zvcm1hdC5LRVlfQ09ERUMpO1xuICAgIH1cbn1cblxuVmlkZW9TdHJlYW1pbmdGb3JtYXQuS0VZX1BST1RPQ09MID0gJ3Byb3RvY29sJztcblZpZGVvU3RyZWFtaW5nRm9ybWF0LktFWV9DT0RFQyA9ICdjb2RlYyc7XG5cbmV4cG9ydCB7IFZpZGVvU3RyZWFtaW5nRm9ybWF0IH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyIH0gZnJvbSAnLi9NZXNzYWdlRnJhbWVEaXNhc3NlbWJsZXIuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0TGlzdGVuZXIgfSBmcm9tICcuLi90cmFuc3BvcnQvVHJhbnNwb3J0TGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4uL3V0aWwvVmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBTZXJ2aWNlVHlwZSB9IGZyb20gJy4vZW51bXMvU2VydmljZVR5cGUuanMnO1xuaW1wb3J0IHsgRnJhbWVUeXBlIH0gZnJvbSAnLi9lbnVtcy9GcmFtZVR5cGUuanMnO1xuaW1wb3J0IHsgTWVzc2FnZUZyYW1lQXNzZW1ibGVyIH0gZnJvbSAnLi9NZXNzYWdlRnJhbWVBc3NlbWJsZXIuanMnO1xuaW1wb3J0IHsgU2RsUGFja2V0IH0gZnJvbSAnLi9TZGxQYWNrZXQuanMnO1xuaW1wb3J0IHsgQ29udHJvbEZyYW1lVGFncyB9IGZyb20gJy4vZW51bXMvQ29udHJvbEZyYW1lVGFncy5qcyc7XG5pbXBvcnQgeyBCaXRDb252ZXJ0ZXIgfSBmcm9tICcuLy4uL3V0aWwvQml0Q29udmVydGVyLmpzJztcbmltcG9ydCB7IEpzb25ScGNNYXJzaGFsbGVyIH0gZnJvbSAnLi8uLi91dGlsL0pzb25ScGNNYXJzaGFsbGVyLmpzJztcblxuaW1wb3J0IHsgU2RsUGFja2V0RmFjdG9yeSB9IGZyb20gJy4vU2RsUGFja2V0RmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBCaW5hcnlGcmFtZUhlYWRlciB9IGZyb20gJy4vQmluYXJ5RnJhbWVIZWFkZXIuanMnO1xuaW1wb3J0IHsgRnVuY3Rpb25JRCB9IGZyb20gJy4vLi4vcnBjL2VudW1zL0Z1bmN0aW9uSUQuanMnO1xuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vLi4vcnBjL1JwY01lc3NhZ2UuanMnO1xuaW1wb3J0IHsgUnBjQ3JlYXRvciB9IGZyb20gJy4vLi4vcnBjL1JwY0NyZWF0b3IuanMnO1xuaW1wb3J0IHsgSW1hZ2VSZXNvbHV0aW9uIH0gZnJvbSAnLi4vcnBjL3N0cnVjdHMvSW1hZ2VSZXNvbHV0aW9uLmpzJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nRm9ybWF0IH0gZnJvbSAnLi4vcnBjL3N0cnVjdHMvVmlkZW9TdHJlYW1pbmdGb3JtYXQuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdQcm90b2NvbCB9IGZyb20gJy4uL3JwYy9lbnVtcy9WaWRlb1N0cmVhbWluZ1Byb3RvY29sLmpzJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nQ29kZWMgfSBmcm9tICcuLi9ycGMvZW51bXMvVmlkZW9TdHJlYW1pbmdDb2RlYy5qcyc7XG5cbi8qKlxuICogQmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBzZGwgcHJvdG9jb2wuXG4gKiBTaG91bGQgYmUgYWJsZSB0byBoYW5kbGUgYmFzaWMgY29udHJvbCBmcmFtZXMgYW5kIGJlIGFibGUgdG9cbiAqIHNlbmQgYW5kIHJlY2VpdmUgcGFja2V0cyBmcm9tIHRoZSB0cmFuc3BvcnQgbWFuYWdlci5cbiAqIEFsc28gc2VuZHMga2V5IGV2ZW50cyB0byB0aGUgc2RsUHJvdG9jb2xMaXN0ZW5lci5cbiAqL1xuY2xhc3MgU2RsUHJvdG9jb2xCYXNlIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7IFRyYW5zcG9ydENvbmZpZ0Jhc2UgfSBiYXNlVHJhbnNwb3J0Q29uZmlnXG4gICAgICogQHBhcmFtIHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9IHNkbFByb3RvY29sTGlzdGVuZXJcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoYmFzZVRyYW5zcG9ydENvbmZpZywgc2RsUHJvdG9jb2xMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9iYXNlVHJhbnNwb3J0Q29uZmlnID0gYmFzZVRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q29uZmlnID0gYmFzZVRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lciA9IHNkbFByb3RvY29sTGlzdGVuZXI7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fY3JlYXRlVHJhbnNwb3J0TGlzdGVuZXIoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgc2RsIHByb3RvY29sIHRvIGl0cyBkZWZhdWx0IHN0YXRlLlxuICAgICAqL1xuICAgIHJlc2V0ICgpIHtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2xWZXJzaW9uID0gbmV3IFZlcnNpb24oMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IHRoaXMuX2Jhc2VUcmFuc3BvcnRDb25maWc7XG4gICAgICAgIHRoaXMuX2hlYWRlclNpemUgPSBTZGxQcm90b2NvbEJhc2UuVjFfSEVBREVSX1NJWkU7XG4gICAgICAgIHRoaXMuX3NlcnZpY2VTdGF0dXMgPSB7fTtcbiAgICAgICAgdGhpcy5fc2VydmljZVN0YXR1c1tTZXJ2aWNlVHlwZS5DT05UUk9MXSA9IHRydWU7XG4gICAgICAgIHRoaXMuX210dXMgPSB7fTtcbiAgICAgICAgdGhpcy5fbXR1c1tTZXJ2aWNlVHlwZS5SUENdID0gU2RsUHJvdG9jb2xCYXNlLlYxX1YyX01UVV9TSVpFIC0gdGhpcy5faGVhZGVyU2l6ZTtcbiAgICAgICAgdGhpcy5faGFzaElEID0gMDtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUZyYW1lQXNzZW1ibGVycyA9IHt9O1xuICAgICAgICB0aGlzLl9tZXNzYWdlSUQgPSAxO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSUQgPSAwO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHRyYW5zcG9ydCBtYW5hZ2VyLlxuICAgICAqIEBwYXJhbSB7IFRyYW5zcG9ydE1hbmFnZXJCYXNlIH0gbWFuYWdlclxuICAgICAqL1xuICAgIHNldFRyYW5zcG9ydE1hbmFnZXIgKG1hbmFnZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZXJ2aWNlU3RhdHVzW1NlcnZpY2VUeXBlLlJQQ10pIHtcbiAgICAgICAgICAgIC8vIFJQQyBzZXJ2aWNlIGhhc24ndCBiZWVuIHN0YXJ0ZWQsIGxldHMgc3RhcnQgaXRcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTZXJ2aWNlKFNlcnZpY2VUeXBlLlJQQywgMCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgdHJhbnNwb3J0IGxpc3RlbmVyLiBUaGlzIHdpbGwgcmVjaWV2ZSBpbmNvbWluZyByZXF1ZXN0c1xuICAgICAqIGZyb20gdGhlIHRyYW5zcG9ydCBtYW5hZ2VyLlxuICAgICAqL1xuICAgIF9jcmVhdGVUcmFuc3BvcnRMaXN0ZW5lciAoKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRMaXN0ZW5lciA9IG5ldyBUcmFuc3BvcnRMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRMaXN0ZW5lci5zZXRPblRyYW5zcG9ydENvbm5lY3RlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVUcmFuc3BvcnRDb25uZWN0ZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLnNldE9uVHJhbnNwb3J0RGlzY29ubmVjdGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLnNldE9uUGFja2V0UmVjZWl2ZWQoZnVuY3Rpb24gKHNkbFBhY2tldCkge1xuICAgICAgICAgICAgc2VsZi5faGFuZGxlUGFja2V0UmVjZWl2ZWQoc2RsUGFja2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLnNldE9uRXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfaGFuZGxlVHJhbnNwb3J0Q29ubmVjdGVkICgpIHtcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lci5vblRyYW5zcG9ydENvbm5lY3RlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB1cCB0aGUgU0RMIHByb3RvY29sIGNsYXNzLiBJdCB3aWxsIGtpY2sgb2ZmIHRoZSB0cmFuc3BvcnQgbWFuYWdlciBhbmQgdW5kZXJseWluZyB0cmFuc3BvcnQuXG4gICAgICovXG4gICAgc3RhcnQgKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RyYW5zcG9ydE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQSB0cmFuc3BvcnQgbWFuYWdlciBtdXN0IGJlIGRlZmluZWQsIHVuYWJsZSB0byBzdGFydCBTREwgUHJvdG9jb2wnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmFuc3BvcnRNYW5hZ2VyLnN0YXJ0KCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc2VydmljZS4gVGhpcyBpcyB0aGUgZmlyc3Qgc3RlcCBpbiBjb21tdW5pY2F0aW5nIHdpdGggc2RsIGNvcmUuXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklEXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0VuY3J5cHRlZFxuICAgICAqL1xuICAgIHN0YXJ0U2VydmljZSAoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgY29uc3QgcHJvdG9jb2xWZXJzaW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5NQVhfUFJPVE9DT0xfVkVSU0lPTjtcbiAgICAgICAgY29uc3QgbWVzc2FnZUlEID0gMDtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gbmV3IFNkbFBhY2tldChwcm90b2NvbFZlcnNpb24uZ2V0TWFqb3IoKSwgaXNFbmNyeXB0ZWQsIEZyYW1lVHlwZS5DT05UUk9MLFxuICAgICAgICAgICAgc2VydmljZVR5cGUsIFNkbFBhY2tldC5GUkFNRV9JTkZPX1NUQVJUX1NFUlZJQ0UsIHNlc3Npb25JRCxcbiAgICAgICAgICAgIDAsIG1lc3NhZ2VJRCwgbnVsbCk7XG4gICAgICAgIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuQVVESU8pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmRQYWNrZXQoaGVhZGVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuUlBDKSB7XG4gICAgICAgICAgICBoZWFkZXIucHV0VGFnKENvbnRyb2xGcmFtZVRhZ3MuUlBDLlN0YXJ0U2VydmljZS5QUk9UT0NPTF9WRVJTSU9OLCBwcm90b2NvbFZlcnNpb24udG9TdHJpbmcoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VydmljZVR5cGUgPT09IFNlcnZpY2VUeXBlLlZJREVPKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyA9IHRoaXMuX3NkbFByb3RvY29sTGlzdGVuZXIuZ2V0RGVzaXJlZFZpZGVvUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNpcmVkUmVzb2x1dGlvbiA9IHZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycy5nZXRSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2lyZWRGb3JtYXQgPSB2aWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMuZ2V0Rm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNpcmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnB1dFRhZyhDb250cm9sRnJhbWVUYWdzLlZpZGVvLlN0YXJ0U2VydmljZS5XSURUSCwgZGVzaXJlZFJlc29sdXRpb24uZ2V0UmVzb2x1dGlvbldpZHRoKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLnB1dFRhZyhDb250cm9sRnJhbWVUYWdzLlZpZGVvLlN0YXJ0U2VydmljZS5IRUlHSFQsIGRlc2lyZWRSZXNvbHV0aW9uLmdldFJlc29sdXRpb25IZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2lyZWRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5wdXRUYWcoQ29udHJvbEZyYW1lVGFncy5WaWRlby5TdGFydFNlcnZpY2UuVklERU9fQ09ERUMsIGRlc2lyZWRGb3JtYXQuZ2V0Q29kZWMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIucHV0VGFnKENvbnRyb2xGcmFtZVRhZ3MuVmlkZW8uU3RhcnRTZXJ2aWNlLlZJREVPX1BST1RPQ09MLCBkZXNpcmVkRm9ybWF0LmdldFByb3RvY29sKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFBhY2tldChoZWFkZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2aWNlIHR5cGUgbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kUGFja2V0KGhlYWRlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEdldCB0aGUgbWF4IHRyYW5zcG9ydCB1bml0IG9mIGEgc3BlY2lmaWMgc2VydmljZSB0eXBlLlxuICAgICAqIEBwYXJhbSB7IFNlcnZpY2VUeXBlIH0gc2VydmljZVR5cGVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IG1heCB0cmFuc3BvcnQgdW5pdCBmb3IgdGhlIGdpdmVuIHNlcnZpY2UgdHlwZVxuICAgICAqL1xuICAgIGdldE10dSAoc2VydmljZVR5cGUpIHtcbiAgICAgICAgY29uc3QgcmV0VmFsID0gdGhpcy5fbXR1c1tzZXJ2aWNlVHlwZV07XG4gICAgICAgIGlmIChyZXRWYWwpIHtcbiAgICAgICAgICAgIHJldHVybiByZXRWYWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdHJhbnNwb3J0IG1hbmFnZXIgaXMgY29ubmVjdGVkLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IGlzQ29ubmVjdGVkXG4gICAgICovXG4gICAgaXNDb25uZWN0ZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0TWFuYWdlciAmJiB0aGlzLl90cmFuc3BvcnRNYW5hZ2VyLmlzQ29ubmVjdGVkKG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBwcm90b2NvbCB2ZXJzaW9uIGluIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7VmVyc2lvbn0gcHJvdG9jb2wgdmVyc2lvblxuICAgICAqL1xuICAgIGdldFByb3RvY29sVmVyc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm90b2NvbFZlcnNpb247XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHNldCB0aGUgbWFqb3IgcHJvdG9jb2wgdmVyc2lvbiB0aGF0IHdlIHNob3VsZCB1c2UuXG4gICAgICogSXQgd2lsbCBhbHNvIHNldCB0aGUgZGVmYXVsdCBNVFUgYmFzZWQgb24gdmVyc2lvbi5cbiAgICAgKiBAcGFyYW0geyBudW1iZXIgfSB2ZXJzaW9uIG1ham9yIHZlcnNpb24gdG8gdXNlXG4gICAgICovXG4gICAgX3NldFZlcnNpb24gKHZlcnNpb24pIHtcbiAgICAgICAgaWYgKHZlcnNpb24gPiA1KSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbignNS4xLjAnKTsgLy8gcHJvdGVjdCBmb3IgZnV0dXJlLCBwcm94eSBvbmx5IHN1cHBvcnRzIHY1IG9yIGxvd2VyXG4gICAgICAgICAgICB0aGlzLmhlYWRlclNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLlYyX0hFQURFUl9TSVpFO1xuICAgICAgICAgICAgdGhpcy5fbXR1c1tTZXJ2aWNlVHlwZS5SUENdID0gdGhpcy5jb25zdHJ1Y3Rvci5WM19WNF9NVFVfU0laRTtcbiAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uID09PSA1KSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbignNS4wLjAnKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuVjJfSEVBREVSX1NJWkU7XG4gICAgICAgICAgICB0aGlzLl9tdHVzW1NlcnZpY2VUeXBlLlJQQ10gPSB0aGlzLmNvbnN0cnVjdG9yLlYzX1Y0X01UVV9TSVpFO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb3RvY29sVmVyc2lvbiA9IG5ldyBWZXJzaW9uKCc0LjAuMCcpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5WMl9IRUFERVJfU0laRTtcbiAgICAgICAgICAgIHRoaXMuX210dXNbU2VydmljZVR5cGUuUlBDXSA9IHRoaXMuY29uc3RydWN0b3IuVjNfVjRfTVRVX1NJWkU7IC8vIHZlcnNpb25zIDQgc3VwcG9ydHMgMTI4ayBNVFVcbiAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uID09PSAzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbignMy4wLjAnKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuVjJfSEVBREVSX1NJWkU7XG4gICAgICAgICAgICB0aGlzLl9tdHVzW1NlcnZpY2VUeXBlLlJQQ10gPSB0aGlzLmNvbnN0cnVjdG9yLlYzX1Y0X01UVV9TSVpFOyAvLyB2ZXJzaW9ucyAzIHN1cHBvcnRzIDEyOGsgTVRVXG4gICAgICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fcHJvdG9jb2xWZXJzaW9uID0gbmV3IFZlcnNpb24oJzIuMC4wJyk7XG4gICAgICAgICAgICB0aGlzLmhlYWRlclNpemUgPSB0aGlzLmNvbnN0cnVjdG9yLlYyX0hFQURFUl9TSVpFO1xuICAgICAgICAgICAgdGhpcy5fbXR1c1tTZXJ2aWNlVHlwZS5SUENdID0gdGhpcy5jb25zdHJ1Y3Rvci5WMV9WMl9NVFVfU0laRSAtIHRoaXMuaGVhZGVyU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbignMS4wLjAnKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyU2l6ZSA9IHRoaXMuY29uc3RydWN0b3IuVjFfSEVBREVSX1NJWkU7XG4gICAgICAgICAgICB0aGlzLl9tdHVzW1NlcnZpY2VUeXBlLlJQQ10gPSB0aGlzLmNvbnN0cnVjdG9yLlYxX1YyX01UVV9TSVpFIC0gdGhpcy5oZWFkZXJTaXplO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gc2RsUGFja2V0LlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBzZW5kUGFja2V0IChzZGxQYWNrZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIuc2VuZFBhY2tldChzZGxQYWNrZXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2Vzc2lvbklkIGluIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIF9nZXRTZXNzaW9uSWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lci5nZXRTZXNzaW9uSWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IGF2YWlsYWJsZSBtZXNzYWdlSUQgZm9yIHNlbmRpbmcgcmVxdWVzdHMuXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBfZ2V0TmV4dE1lc3NhZ2VJRCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXNzYWdlSUQrKztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBycGMgbWVzc2FnZSBhbmQgc2VuZHMgYSBzaW5nbGUgb3IgbXVsdGkgZnJhbWUgcGFja2V0cy5cbiAgICAgKiBAcGFyYW0ge1JwY1JlcXVlc3R9IHJwY01lc3NhZ2VcbiAgICAgKi9cbiAgICBzZW5kUnBjIChycGNSZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCBzZXNzaW9uSWQgPSB0aGlzLl9nZXRTZXNzaW9uSWQoKTtcbiAgICAgICAgY29uc3QgbWVzc2FnZUlEID0gdGhpcy5fZ2V0TmV4dE1lc3NhZ2VJRCgpO1xuICAgICAgICBjb25zdCBtdHUgPSBzZWxmLl9tdHVzW1NlcnZpY2VUeXBlLlJQQ107XG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSBzZWxmLl9wcm90b2NvbFZlcnNpb24uZ2V0TWFqb3IoKTtcbiAgICAgICAgY29uc3QgaXNFbmNyeXB0ZWQgPSBycGNSZXF1ZXN0LmdldElzRW5jcnlwdGVkKCk7XG5cbiAgICAgICAgTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyLmJ1aWxkUlBDKHJwY1JlcXVlc3QsIHNlc3Npb25JZCwgbWVzc2FnZUlELCBtdHUsIHZlcnNpb24sIGlzRW5jcnlwdGVkLCBmdW5jdGlvbiAoc2RsUGFja2V0KSB7XG4gICAgICAgICAgICBzZWxmLnNlbmRQYWNrZXQoc2RsUGFja2V0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBpbmNvbWluZyBwYWNrZXRzLlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlUGFja2V0UmVjZWl2ZWQgKHNkbFBhY2tldCkge1xuICAgICAgICBpZiAodGhpcy5fcHJvdG9jb2xWZXJzaW9uID09PSBudWxsIHx8IHRoaXMuX3Byb3RvY29sVmVyc2lvbi5nZXRNYWpvcigpID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRWZXJzaW9uKHNkbFBhY2tldC5nZXRWZXJzaW9uKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZyYW1lVHlwZSA9IHNkbFBhY2tldC5nZXRGcmFtZVR5cGUoKTtcbiAgICAgICAgaWYgKGZyYW1lVHlwZSA9PT0gRnJhbWVUeXBlLkNPTlRST0wpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVDb250cm9sUGFja2V0KHNkbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlRnJhbWVBc3NlbWJsZXIgPSB0aGlzLl9nZXRNZXNzYWdlRnJhbWVBc3NlbWJsZXIoc2RsUGFja2V0KTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlRnJhbWVBc3NlbWJsZXIuaGFuZGxlRnJhbWUoc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgbm9uLWNvbnRyb2wgcGFja2V0cyBhZnRlciB0aGV5IGhhdmUgYmVlbiBhc3NlbWJsZWQuXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqL1xuICAgIF9oYW5kbGVPbk1lc3NhZ2VBc3NlbWJsZWQgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBzZXJ2aWNlVHlwZSA9IHNkbFBhY2tldC5nZXRTZXJ2aWNlVHlwZSgpO1xuXG4gICAgICAgIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuUlBDIHx8IHNlcnZpY2VUeXBlID09PSBTZXJ2aWNlVHlwZS5IWUJSSUQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVSUENQYWNrZXQoc2RsUGFja2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuSFlCUklEKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlUlBDUGFja2V0KHNkbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1VuaGFuZGxlZCBzZXJ2aWNlIHR5cGUgJywgc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbWVzc2FnZSBmcmFtZSBhc3NlbWJsZXIgZm9yIHRoZSBwYWNrZXQuXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqL1xuICAgIF9nZXRNZXNzYWdlRnJhbWVBc3NlbWJsZXIgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IG1lc3NhZ2VGcmFtZUFzc2VtYmxlciA9IHNlbGYuX21lc3NhZ2VGcmFtZUFzc2VtYmxlcnNbc2RsUGFja2V0LmdldE1lc3NhZ2VJRCgpXTtcbiAgICAgICAgaWYgKCFtZXNzYWdlRnJhbWVBc3NlbWJsZXIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VGcmFtZUFzc2VtYmxlciA9IG5ldyBNZXNzYWdlRnJhbWVBc3NlbWJsZXIoZnVuY3Rpb24gKGVyciwgc2RsUGFja2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZi5fbWVzc2FnZUZyYW1lQXNzZW1ibGVyc1tzZGxQYWNrZXQuZ2V0TWVzc2FnZUlEKCldID0gbnVsbDsgLy8gUmVtb3ZlIHRoZSBtYXBwaW5nXG4gICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlT25NZXNzYWdlQXNzZW1ibGVkKHNkbFBhY2tldCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYuX21lc3NhZ2VGcmFtZUFzc2VtYmxlcnNbc2RsUGFja2V0LmdldE1lc3NhZ2VJRCgpXSA9IG1lc3NhZ2VGcmFtZUFzc2VtYmxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlRnJhbWVBc3NlbWJsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBpbmNvbWluZyBjb250cm9sIHBhY2tldHMuXG4gICAgICogQHBhcmFtIHsgU2RsUGFja2V0IH0gc2RsUGFja2V0XG4gICAgICovXG4gICAgX2hhbmRsZUNvbnRyb2xQYWNrZXQgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBmcmFtZUluZm8gPSBzZGxQYWNrZXQuZ2V0RnJhbWVJbmZvKCk7XG5cbiAgICAgICAgaWYgKGZyYW1lSW5mbyA9PT0gU2RsUGFja2V0LkZSQU1FX0lORk9fSEVBUlRfQkVBVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVByb3RvY29sSGVhcnRiZWF0KHNkbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZnJhbWVJbmZvID09PSBTZGxQYWNrZXQuRlJBTUVfSU5GT19IRUFSVF9CRUFUX0FDSykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVByb3RvY29sSGVhcnRiZWF0QUNLKHNkbFBhY2tldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZnJhbWVJbmZvID09PSBTZGxQYWNrZXQuRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX0FDSykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVN0YXJ0U2VydmljZUFDSyhzZGxQYWNrZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGZyYW1lSW5mbyA9PT0gU2RsUGFja2V0LkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUspIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVTdGFydFNlcnZpY2VOQUsoc2RsUGFja2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChmcmFtZUluZm8gPT09IFNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFX0FDSykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZUVuZFNlcnZpY2VBQ0soc2RsUGFja2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChmcmFtZUluZm8gPT09IFNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlRW5kU2VydmljZShzZGxQYWNrZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGZyYW1lSW5mbyA9PT0gU2RsUGFja2V0LkZSQU1FX0lORk9fRU5EX1NFUlZJQ0VfTkFLKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faGFuZGxlRW5kU2VydmljZU5BSyhzZGxQYWNrZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdVbmhhbmRsZWQgY29udHJvbCBwYWNrZXQnLCB7IGZyYW1lSW5mbyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGhlYXJ0YmVhdCAoT25seSBhdmFpbGFibGUgaW4gcHJvdG9jb2wgdmVyc2lvbiAzKVxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlUHJvdG9jb2xIZWFydGJlYXQgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBoZWFydGJlYXQgPSBTZGxQYWNrZXRGYWN0b3J5LmNyZWF0ZUhlYXJ0YmVhdEFDSyhcbiAgICAgICAgICAgIFNlcnZpY2VUeXBlLkNPTlRST0wsXG4gICAgICAgICAgICB0aGlzLl9nZXRTZXNzaW9uSWQoKSxcbiAgICAgICAgICAgIHRoaXMuX3Byb3RvY29sVmVyc2lvbi5nZXRNYWpvcigpKTtcbiAgICAgICAgdGhpcy5zZW5kUGFja2V0KGhlYXJ0YmVhdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBoZWFydGJlYXQgQUNLLlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlUHJvdG9jb2xIZWFydGJlYXRBQ0sgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgSGVhcnRiZWF0QUNLIC0gJHtzZGxQYWNrZXQudG9TdHJpbmcoKX1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHN0YXJ0IHNlcnZpY2UgQUNLLiBTZXRzIHRoZSBhcHByb3ByaWF0ZSB2ZXJzaW9uLCBNVFUsIGFuZCBvdGhlclxuICAgICAqIHNlcnZpY2UgcmVsYXRlZCBpbmZvLlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlU3RhcnRTZXJ2aWNlQUNLIChzZGxQYWNrZXQpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IHNkbFBhY2tldC5nZXRWZXJzaW9uKCk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VUeXBlID0gc2RsUGFja2V0LmdldFNlcnZpY2VUeXBlKCk7XG4gICAgICAgIGlmICh2ZXJzaW9uID49IDUpIHtcbiAgICAgICAgICAgIGxldCBtdHVUYWcgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VUeXBlID09PSBTZXJ2aWNlVHlwZS5SUEMpIHtcbiAgICAgICAgICAgICAgICBtdHVUYWcgPSBDb250cm9sRnJhbWVUYWdzLlJQQy5TdGFydFNlcnZpY2VBQ0suTVRVO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2aWNlVHlwZSA9PT0gKFNlcnZpY2VUeXBlLlBDTSkpIHtcbiAgICAgICAgICAgICAgICBtdHVUYWcgPSBDb250cm9sRnJhbWVUYWdzLkF1ZGlvLlN0YXJ0U2VydmljZUFDSy5NVFU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNlcnZpY2VUeXBlID09PSAoU2VydmljZVR5cGUuTkFWKSkge1xuICAgICAgICAgICAgICAgIG10dVRhZyA9IENvbnRyb2xGcmFtZVRhZ3MuVmlkZW8uU3RhcnRTZXJ2aWNlQUNLLk1UVTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG10dSA9IHNkbFBhY2tldC5nZXRUYWcobXR1VGFnKTtcblxuICAgICAgICAgICAgaWYgKG10dSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX210dXNbc2VydmljZVR5cGVdID0gbXR1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlcnZpY2VUeXBlID09PSBTZXJ2aWNlVHlwZS5SUEMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXNzaW9uSUQgPSBzZGxQYWNrZXQuZ2V0U2Vzc2lvbklEKCk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgb2xkZXIgdmVyc2lvbnMgb2YgdGhlIHByb3RvY29sIHdoZXJlIHRoaXMgd2FzIGp1c3QgdGhlaXIgcGF5bG9hZCwgbm8gQlNPTlxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc2hJRCA9IHNkbFBhY2tldC5nZXRUYWcoQ29udHJvbEZyYW1lVGFncy5SUEMuU3RhcnRTZXJ2aWNlQUNLLkhBU0hfSUQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSBzZGxQYWNrZXQuZ2V0VGFnKENvbnRyb2xGcmFtZVRhZ3MuUlBDLlN0YXJ0U2VydmljZUFDSy5QUk9UT0NPTF9WRVJTSU9OKTtcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGhhdmUgY29uZmlybWVkIHRoZSBuZWdvdGlhdGVkIHZlcnNpb24gYmV0d2VlbiB0aGUgbW9kdWxlIGFuZCB0aGUgcHJveHlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvdG9jb2xWZXJzaW9uID0gKG5ldyBWZXJzaW9uKCkpLmZyb21TdHJpbmcodmVyc2lvbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvdG9jb2xWZXJzaW9uID0gbmV3IFZlcnNpb24oNSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuVklERU8pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NlcHRlZFJlc29sdXRpb24gPSBuZXcgSW1hZ2VSZXNvbHV0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2VwdGVkRm9ybWF0ID0gbmV3IFZpZGVvU3RyZWFtaW5nRm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkUmVzb2x1dGlvbi5zZXRSZXNvbHV0aW9uSGVpZ2h0KE1hdGguZmxvb3Ioc2RsUGFja2V0LmdldFRhZyhDb250cm9sRnJhbWVUYWdzLlZpZGVvLlN0YXJ0U2VydmljZUFDSy5IRUlHSFQpKSk7XG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkUmVzb2x1dGlvbi5zZXRSZXNvbHV0aW9uV2lkdGgoTWF0aC5mbG9vcihzZGxQYWNrZXQuZ2V0VGFnKENvbnRyb2xGcmFtZVRhZ3MuVmlkZW8uU3RhcnRTZXJ2aWNlQUNLLldJRFRIKSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdGVkRm9ybWF0LnNldENvZGVjKHNkbFBhY2tldC5nZXRUYWcoQ29udHJvbEZyYW1lVGFncy5WaWRlby5TdGFydFNlcnZpY2VBQ0suVklERU9fQ09ERUMpKTtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXB0ZWRGb3JtYXQuc2V0UHJvdG9jb2woc2RsUGFja2V0LmdldFRhZyhDb250cm9sRnJhbWVUYWdzLlZpZGVvLlN0YXJ0U2VydmljZUFDSy5WSURFT19QUk9UT0NPTCkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ3JlZWRWaWRlb1BhcmFtcyA9IHRoaXMuX3NkbFByb3RvY29sTGlzdGVuZXIuZ2V0RGVzaXJlZFZpZGVvUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgICAgIGFncmVlZFZpZGVvUGFyYW1zLnNldFJlc29sdXRpb24oYWNjZXB0ZWRSZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgYWdyZWVkVmlkZW9QYXJhbXMuc2V0Rm9ybWF0KGFjY2VwdGVkRm9ybWF0KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZGxQcm90b2NvbExpc3RlbmVyLnNldEFjY2VwdGVkVmlkZW9QYXJhbXMoYWdyZWVkVmlkZW9QYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcm90b2NvbFZlcnNpb24uZ2V0TWFqb3IoKSA+IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gc2RsUGFja2V0LmdldFBheWxvYWQoKTtcbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZCAhPT0gbnVsbCAmJiBwYXlsb2FkLmxlbmd0aCA9PT0gNCkgeyAvLyBoYXNoaWQgd2lsbCBiZSA0IGJ5dGVzIGluIGxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNoSUQgPSBCaXRDb252ZXJ0ZXIuYXJyYXlCdWZmZXJUb0ludDMyKHBheWxvYWQuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZGxQcm90b2NvbExpc3RlbmVyLm9uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZChzZXJ2aWNlVHlwZSxcbiAgICAgICAgICAgIHNkbFBhY2tldC5nZXRTZXNzaW9uSUQoKSwgdGhpcy5fcHJvdG9jb2xWZXJzaW9uLmdldE1ham9yKCksICcnLCB0aGlzLl9oYXNoSUQsIHNkbFBhY2tldC5nZXRFbmNyeXB0aW9uKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgc3RhcnQgc2VydmljZSByZWplY3Rpb24uXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqL1xuICAgIF9oYW5kbGVTdGFydFNlcnZpY2VOQUsgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGBHb3QgU3RhcnRTZXNzaW9uTkFDSyBmb3IgcHJvdG9jb2wgc2Vzc2lvbklEICR7c2RsUGFja2V0LmdldFNlc3Npb25JRCgpfWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHNlcnZpY2UgZW5kZWQgYnkgYXBwIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqL1xuICAgIF9oYW5kbGVFbmRTZXJ2aWNlQUNLIChzZGxQYWNrZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVNlcnZpY2VFbmRlZChzZGxQYWNrZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlcnZpY2UgZW5kZWQgYnkgbm9uIGFwcCBwcm9jZXNzIG9yIGZvciBzb21lIHVuZXhwZWN0ZWQgcmVhc29uLlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlRW5kU2VydmljZSAoc2RsUGFja2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYW5kbGVTZXJ2aWNlRW5kZWQoc2RsUGFja2V0KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgc2VyaXZjZSBlbmRpbmcuXG4gICAgICogQHBhcmFtIHsqfSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlU2VydmljZUVuZGVkIChzZGxQYWNrZXQpIHtcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lci5vblByb3RvY29sU2Vzc2lvbkVuZGVkKHNkbFBhY2tldC5nZXRTZXJ2aWNlVHlwZSgpLCBzZGxQYWNrZXQuZ2V0U2Vzc2lvbklEKCksICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHNlcnZpY2UgZW5kIHJlamVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgICovXG4gICAgX2hhbmRsZUVuZFNlcnZpY2VOQUsgKHNkbFBhY2tldCkge1xuICAgICAgICBjb25zdCBzZXJ2aWNlVHlwZSA9IHNkbFBhY2tldC5nZXRTZXJ2aWNlVHlwZSgpO1xuICAgICAgICBjb25zdCBwcm90b2NvbFZlcnNpb24gPSBzZGxQYWNrZXQuZ2V0VmVyc2lvbigpO1xuICAgICAgICBpZiAocHJvdG9jb2xWZXJzaW9uID49IDUpIHtcbiAgICAgICAgICAgIGxldCByZWplY3RlZFRhZyA9IG51bGw7XG4gICAgICAgICAgICBpZiAoc2VydmljZVR5cGUgPT09IFNlcnZpY2VUeXBlLkFVRElPKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0ZWRUYWcgPSBDb250cm9sRnJhbWVUYWdzLkF1ZGlvLkVuZFNlcnZpY2VOQUsuUkVKRUNURURfUEFSQU1TO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuVklERU8pIHtcbiAgICAgICAgICAgICAgICByZWplY3RlZFRhZyA9IENvbnRyb2xGcmFtZVRhZ3MuVmlkZW8uRW5kU2VydmljZU5BSy5SRUpFQ1RFRF9QQVJBTVM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWplY3RlZFBhcmFtcyA9IHNkbFBhY2tldC5nZXRUYWcocmVqZWN0ZWRUYWcpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVqZWN0ZWRQYXJhbXMpICYmIHJlamVjdGVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdHb3QgRW5kU2Vzc2lvbk5BSyB3aXRoIHJlamVjdGVkIHBhcmFtcycsIHJlamVjdGVkUGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZGxQcm90b2NvbExpc3RlbmVyLm9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQoc2VydmljZVR5cGUsIHNkbFBhY2tldC5nZXRTZXNzaW9uSUQoKSwgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgaW5jb21pbmcgYXNzZW1ibGVkIHJwYyBwYWNrZXQuXG4gICAgICogTm90aWZpZXMgc2RsUHJvdG9jb2xMaXN0ZW5lciBvZiB0aGUgZXZlbnQgYWZ0ZXIgYXNzZW1ibGVpbmcgYW4gUnBjTWVzc2FnZVxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBfaGFuZGxlUlBDUGFja2V0IChzZGxQYWNrZXQpIHtcbiAgICAgICAgY29uc3QgcnBjTWVzc2FnZSA9IFJwY0NyZWF0b3IuY29uc3RydWN0KHNkbFBhY2tldCk7XG4gICAgICAgIGlmIChycGNNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zZGxQcm90b2NvbExpc3RlbmVyLm9uUnBjTWVzc2FnZVJlY2VpdmVkKHJwY01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5kcyB0aGUgZGVmYXVsdCBzZXNzaW9uLlxuICAgICAqL1xuICAgIGVuZFNlc3Npb24gKCkge1xuICAgICAgICBjb25zdCBzZXNzaW9uSWQgPSB0aGlzLl9nZXRTZXNzaW9uSWQoKTtcbiAgICAgICAgY29uc3QgaGFzaElEID0gdGhpcy5faGFzaElEO1xuICAgICAgICBjb25zdCBzZXJ2aWNlVHlwZSA9IFNlcnZpY2VUeXBlLlJQQztcbiAgICAgICAgY29uc3QgbWVzc2FnZUlEID0gdGhpcy5fZ2V0TmV4dE1lc3NhZ2VJRCgpO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdGhpcy5fcHJvdG9jb2xWZXJzaW9uLmdldE1ham9yKCk7XG4gICAgICAgIGNvbnN0IHNkbFBhY2tldCA9IFNkbFBhY2tldEZhY3RvcnkuY3JlYXRlRW5kU2Vzc2lvbihzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCBtZXNzYWdlSUQsIHZlcnNpb24sIGhhc2hJRCk7XG4gICAgICAgIHRoaXMuc2VuZFBhY2tldChzZGxQYWNrZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuZHMgYSBzcGVjaWZpYyBzZXJ2aWNlXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgLSBTZXJ2aWNlIHR5cGUgYmVpbmcgZW5kZWQuIFdoZW4gdGhlIFJQQyBzZXJ2aWNlIGlzIGVuZGVkIHRoZSBlbnRpcmUgc2Vzc2lvbiBlbmRzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWQgLSByZXByZXNlbnRzIGEgYnl0ZVxuICAgICAqL1xuICAgIGVuZFNlcnZpY2UgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQpIHtcbiAgICAgICAgaWYgKHNlcnZpY2VUeXBlID09PSBTZXJ2aWNlVHlwZS5SUEMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuZFNlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2hJRCA9IHRoaXMuX2hhc2hJRDtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VJRCA9IHRoaXMuX2dldE5leHRNZXNzYWdlSUQoKTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSB0aGlzLl9wcm90b2NvbFZlcnNpb24uZ2V0TWFqb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IHNkbFBhY2tldCA9IFNkbFBhY2tldEZhY3RvcnkuY3JlYXRlRW5kU2Vzc2lvbihzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCBtZXNzYWdlSUQsIHZlcnNpb24sIGhhc2hJRCk7XG4gICAgICAgICAgICB0aGlzLnNlbmRQYWNrZXQoc2RsUGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBPcmlnaW5hbCBoZWFkZXIgc2l6ZSBiYXNlZCBvbiB2ZXJzaW9uIDEuMC4wIG9ubHlcbiAqL1xuU2RsUHJvdG9jb2xCYXNlLlYxX0hFQURFUl9TSVpFID0gODtcbi8qKlxuICogTGFyZ2VyIGhlYWRlciBzaXplIHRoYXQgaXMgdXNlZCBieSB2ZXJzaW9ucyAyLjAuMCBhbmQgdXBcbiAqL1xuU2RsUHJvdG9jb2xCYXNlLlYyX0hFQURFUl9TSVpFID0gMTI7XG5cblNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRSA9IDE1MDA7XG5TZGxQcm90b2NvbEJhc2UuVjNfVjRfTVRVX1NJWkUgPSAxMzEwNzI7XG5cbi8qKlxuICogTWF4IHN1cHBvcnRlZCBwcm90b2NvbCB2ZXJzaW9uIGluIHRoaXMgcmVsZWFzZSBvZiB0aGUgbGlicmFyeVxuKi9cblNkbFByb3RvY29sQmFzZS5NQVhfUFJPVE9DT0xfVkVSU0lPTiA9IG5ldyBWZXJzaW9uKDUsIDIsIDApO1xuXG5leHBvcnQgeyBTZGxQcm90b2NvbEJhc2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gVHJhbnNwb3J0VHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IF9NQVBcbiAqL1xuY2xhc3MgVHJhbnNwb3J0VHlwZSBleHRlbmRzIEVudW0ge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ31cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgV0VCU09DS0VUX0NMSUVOVCAoKSB7XG4gICAgICAgIHJldHVybiBUcmFuc3BvcnRUeXBlLl9NQVAuV0VCU09DS0VUX0NMSUVOVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBXRUJTT0NLRVRfU0VSVkVSICgpIHtcbiAgICAgICAgcmV0dXJuIFRyYW5zcG9ydFR5cGUuX01BUC5XRUJTT0NLRVRfU0VSVkVSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IENVU1RPTSAoKSB7XG4gICAgICAgIHJldHVybiBUcmFuc3BvcnRUeXBlLl9NQVAuQ1VTVE9NO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogR2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGVudW0ga2V5XG4gICAgKiBAcGFyYW0gdmFsdWUgLSBBIGtleSB0byBmaW5kIGluIHRoZSBtYXAgb2YgdGhlIHN1YmNsYXNzXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvcktleSAoa2V5KSB7XG4gICAgICAgIHJldHVybiBUcmFuc3BvcnRUeXBlLl92YWx1ZUZvcktleShrZXksIFRyYW5zcG9ydFR5cGUuX01BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGtleSBmb3IgdGhlIGdpdmVuIGVudW0gdmFsdWVcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgdGhlIG1hdGNoaW5nIGtleSBmb3IgaW4gdGhlIG1hcCBvZiB0aGUgc3ViY2xhc3NcbiAgICAqIEByZXR1cm4geyp9IC0gUmV0dXJucyBhIGtleSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFRyYW5zcG9ydFR5cGUuX2tleUZvclZhbHVlKHZhbHVlLCBUcmFuc3BvcnRUeXBlLl9NQVApO1xuICAgIH1cbn1cblxuVHJhbnNwb3J0VHlwZS5fTUFQID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgJ1dFQlNPQ0tFVF9DTElFTlQnOiAnV0VCU09DS0VUX0NMSUVOVCcsXG4gICAgJ1dFQlNPQ0tFVF9TRVJWRVInOiAnV0VCU09DS0VUX1NFUlZFUicsXG4gICAgJ0NVU1RPTSc6ICdDVVNUT00nLFxufSk7XG5cbmV4cG9ydCB7IFRyYW5zcG9ydFR5cGUgfTsiLCIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuICogZGlzdHJpYnV0aW9uLlxuICpcbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4gKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiAqIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuICogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuICogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiAqIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuICogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiAqIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4gKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuICogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxuaW1wb3J0IHsgRnJhbWVUeXBlIH0gZnJvbSAnLi4vcHJvdG9jb2wvZW51bXMvRnJhbWVUeXBlLmpzJztcbmltcG9ydCB7IFNkbFBhY2tldCB9IGZyb20gJy4uL3Byb3RvY29sL1NkbFBhY2tldC5qcyc7XG5pbXBvcnQgeyBTZGxQcm90b2NvbEJhc2UgfSBmcm9tICcuLi9wcm90b2NvbC9TZGxQcm90b2NvbEJhc2UuanMnO1xuXG4vKipcbiAqIFBhcnNlcyBpbmNvbWluZyBieXRlcyBhY2NvcmRpbmcgdG8gdGhlIHByb3RvY29sIHNwZWMuXG4gKi9cbmNsYXNzIFNkbFBzbSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyBhbGwgaW50ZXJuYWwgbWVtYmVycyB0byBkZWZhdWx0XG4gICAgICovXG4gICAgcmVzZXQgKCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFNkbFBzbS5TVEFSVF9TVEFURTtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IDA7XG4gICAgICAgIHRoaXMuX2VuY3J5cHRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZnJhbWVUeXBlID0gRnJhbWVUeXBlLlNJTkdMRTtcbiAgICAgICAgdGhpcy5fc2VydmljZVR5cGUgPSAwO1xuICAgICAgICB0aGlzLl9jb250cm9sRnJhbWVJbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklEID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZHVtcFNpemUgPSBudWxsO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUlEID0gMDtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IG51bGw7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gLSBTdGF0ZSByZXByZXNlbnRlZCBieSBhIE51bWJlclxuICAgICAqL1xuICAgIGdldFN0YXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1NkbFBhY2tldH0gLSBSZXR1cm5zIG51bGwgaWYgbm90IGNvbXBsZXRlXG4gICAgICovXG5cbiAgICBnZXRGb3JtZWRQYWNrZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFNkbFBzbS5GSU5JU0hFRF9TVEFURSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZGxQYWNrZXQodGhpcy5fdmVyc2lvbiwgdGhpcy5fZW5jcnlwdGlvbiwgdGhpcy5fZnJhbWVUeXBlLCB0aGlzLl9zZXJ2aWNlVHlwZSwgdGhpcy5fY29udHJvbEZyYW1lSW5mbywgdGhpcy5fc2Vzc2lvbklELCB0aGlzLl9kYXRhTGVuZ3RoLCB0aGlzLl9tZXNzYWdlSUQsIHRoaXMuX3BheWxvYWQsIDAsIHRoaXMuX2RhdGFMZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBuZXh0IGJ5dGUgaW4gdGhlIHN0cmVhbSBvZiBkYXRhLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhIC0gUmVwcmVzZW50cyBhIGJ5dGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAtIFRydWUgaWYgc3VjY2Vzc2Z1bCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaGFuZGxlQnl0ZSAoZGF0YSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX3RyYW5zaXRpb25PbklucHV0KGRhdGEsIHRoaXMuX3N0YXRlKTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBTZGxQc20uRVJST1JfU1RBVEUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmF3Qnl0ZSAtIFJlcHJlc2VudHMgYSBieXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90cmFuc2l0aW9uT25JbnB1dCAocmF3Qnl0ZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSBTZGxQc20uU1RBUlRfU1RBVEUpIHsgLy8gYnl0ZSAxXG4gICAgICAgICAgICB0aGlzLl92ZXJzaW9uID0gKHJhd0J5dGUgJiBTZGxQc20uVkVSU0lPTl9NQVNLKSA+PiA0O1xuICAgICAgICAgICAgaWYgKHRoaXMuX3ZlcnNpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lbmNyeXB0aW9uID0gKDEgPT09ICgocmF3Qnl0ZSAmIFNkbFBzbS5FTkNSWVBUSU9OX01BU0spID4+IDMpKTtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lVHlwZSA9IHJhd0J5dGUgJiBTZGxQc20uRlJBTUVfVFlQRV9NQVNLO1xuXG4gICAgICAgICAgICBpZiAoKHRoaXMuX3ZlcnNpb24gPCAxIHx8IHRoaXMuX3ZlcnNpb24gPiA1KSAmJiB0aGlzLl9mcmFtZVR5cGUgIT09IEZyYW1lVHlwZS5DT05UUk9MKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZyYW1lVHlwZSA8IEZyYW1lVHlwZS5DT05UUk9MIHx8IHRoaXMuX2ZyYW1lVHlwZSA+IEZyYW1lVHlwZS5DT05TRUNVVElWRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRVJST1JfU1RBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU2RsUHNtLlNFUlZJQ0VfVFlQRV9TVEFURTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU2RsUHNtLlNFUlZJQ0VfVFlQRV9TVEFURSkgeyAvLyBieXRlIDJcbiAgICAgICAgICAgIHRoaXMuX3NlcnZpY2VUeXBlID0gKHJhd0J5dGUgJiAweEZGKTtcblxuICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5DT05UUk9MX0ZSQU1FX0lORk9fU1RBVEU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFNkbFBzbS5DT05UUk9MX0ZSQU1FX0lORk9fU1RBVEUpIHsgLy8gYnl0ZSAzXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sRnJhbWVJbmZvID0gcmF3Qnl0ZSAmIDB4RkY7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fZnJhbWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBGcmFtZVR5cGUuQ09OVFJPTDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBGcmFtZVR5cGUuU0lOR0xFOiAvLyBGYWxsIHRocm91Z2ggc2luY2UgdGhleSBhcmUgYm90aCB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIGNhc2UgRnJhbWVUeXBlLkZJUlNUOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29udHJvbEZyYW1lSW5mbyAhPT0gMHgwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEZyYW1lVHlwZS5DT05TRUNVVElWRTpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5TRVNTSU9OX0lEX1NUQVRFO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTZGxQc20uU0VTU0lPTl9JRF9TVEFURSkgeyAvLyBieXRlIDRcbiAgICAgICAgICAgIHRoaXMuX3Nlc3Npb25JRCA9IChyYXdCeXRlICYgMHhGRik7XG4gICAgICAgICAgICByZXR1cm4gU2RsUHNtLkRBVEFfU0laRV8xX1NUQVRFO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTZGxQc20uREFUQV9TSVpFXzFfU1RBVEUpIHsgLy8gYnl0ZSA1XG4gICAgICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IChyYXdCeXRlICYgMHhGRikgPDwgMjQ7XG4gICAgICAgICAgICByZXR1cm4gU2RsUHNtLkRBVEFfU0laRV8yX1NUQVRFO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTZGxQc20uREFUQV9TSVpFXzJfU1RBVEUpIHsgLy8gYnl0ZSA2XG4gICAgICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IChyYXdCeXRlICYgMHhGRikgPDwgMTY7IC8vICMgMiBieXRlcyB4IDggYml0c1xuICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5EQVRBX1NJWkVfM19TVEFURTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU2RsUHNtLkRBVEFfU0laRV8zX1NUQVRFKSB7IC8vIGJ5dGUgN1xuICAgICAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCArPSAocmF3Qnl0ZSAmIDB4RkYpIDw8IDg7IC8vICMgIDEgYnl0ZSB4IDggYml0c1xuICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5EQVRBX1NJWkVfNF9TVEFURTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU2RsUHNtLkRBVEFfU0laRV80X1NUQVRFKSB7IC8vIGJ5dGUgOFxuICAgICAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCArPSAocmF3Qnl0ZSAmIDB4RkYpOyAvLyAjIDIgYnl0ZXMgeCA4IGJpdHNcblxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9mcmFtZVR5cGUpIHsgLy8gSWYgYWxsIGlzIGNvcnJlY3Qgd2Ugc2hvdWxkIGJyZWFrIG91dCBvZiB0aGlzIHN3aXRjaCBzdGF0ZW1lbnRcbiAgICAgICAgICAgICAgICBjYXNlIEZyYW1lVHlwZS5TSU5HTEU6XG4gICAgICAgICAgICAgICAgY2FzZSBGcmFtZVR5cGUuQ09OU0VDVVRJVkU6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRnJhbWVUeXBlLkNPTlRST0w6XG4gICAgICAgICAgICAgICAgLy8gT2ssIHdlbGwgaGVyZSdzIHNvbWUgaW50ZXJlc3RpbmcgYml0IG9mIGtub3dsZWRnZS4gQmVjYXVzZSB0aGUgc3RhcnQgc2Vzc2lvbiByZXF1ZXN0IGlzIGZyb20gdGhlIHBob25lIHdpdGggbm8ga25vd2xlZGdlIG9mIHZlcnNpb24gaXQgc2VuZHMgb3V0XG4gICAgICAgICAgICAgICAgLy8gYSB2MSBwYWNrZXQuIFRIRVJFRk9SRSB0aGVyZSBpcyBubyBtZXNzYWdlIGlkIGZpZWxkLiAqKioqIE5vdyB5b3Uga25vdyBhbmQga25vd2luZyBpcyBoYWxmIHRoZSBiYXR0bGUgKioqKlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmVyc2lvbiA9PT0gMSAmJiB0aGlzLl9jb250cm9sRnJhbWVJbmZvID09PSBTZGxQYWNrZXQuRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGF0YUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRklOSVNIRURfU1RBVEU7IC8vIFdlIGFyZSBkb25lIGlmIHdlIGRvbid0IGhhdmUgYW55IHBheWxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kYXRhTGVuZ3RoIDw9IFNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRSAtIFNkbFByb3RvY29sQmFzZS5WMV9IRUFERVJfU0laRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSBuZXcgVWludDhBcnJheSh0aGlzLl9kYXRhTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2R1bXBTaXplID0gdGhpcy5fZGF0YUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uREFUQV9QVU1QX1NUQVRFO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBGcmFtZVR5cGUuRklSU1Q6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kYXRhTGVuZ3RoICE9PSBTZGxQc20uRklSU1RfRlJBTUVfREFUQV9TSVpFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRVJST1JfU1RBVEU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl92ZXJzaW9uID09PSAxKSB7IC8vIFZlcnNpb24gMSBwYWNrZXRzIHdpbGwgbm90IGhhdmUgbWVzc2FnZSBpZCdzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RhdGFMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5GSU5JU0hFRF9TVEFURTsgLy8gV2UgYXJlIGRvbmUgaWYgd2UgZG9uJ3QgaGF2ZSBhbnkgcGF5bG9hZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGF0YUxlbmd0aCA8PSBTZGxQcm90b2NvbEJhc2UuVjFfVjJfTVRVX1NJWkUgLSBTZGxQcm90b2NvbEJhc2UuVjFfSEVBREVSX1NJWkUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2RhdGFMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRVJST1JfU1RBVEU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2R1bXBTaXplID0gdGhpcy5fZGF0YUxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkRBVEFfUFVNUF9TVEFURTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5NRVNTQUdFXzFfU1RBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IFNkbFBzbS5NRVNTQUdFXzFfU1RBVEUpIHsgLy8gYnl0ZSA5LCBieXRlcyA5LTEyIGF2YWlsYWJsZSBpbiB2ZXJzaW9uIDIrLlxuICAgICAgICAgICAgdGhpcy5fbWVzc2FnZUlEICs9IChyYXdCeXRlICYgMHhGRikgPDwgMjQ7XG4gICAgICAgICAgICByZXR1cm4gU2RsUHNtLk1FU1NBR0VfMl9TVEFURTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU2RsUHNtLk1FU1NBR0VfMl9TVEFURSkgeyAvLyBieXRlIDEwXG4gICAgICAgICAgICB0aGlzLl9tZXNzYWdlSUQgKz0gKHJhd0J5dGUgJiAweEZGKSA8PCAxNjtcbiAgICAgICAgICAgIHJldHVybiBTZGxQc20uTUVTU0FHRV8zX1NUQVRFO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTZGxQc20uTUVTU0FHRV8zX1NUQVRFKSB7IC8vIGJ5dGUgMTFcbiAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VJRCArPSAocmF3Qnl0ZSAmIDB4RkYpIDw8IDg7XG4gICAgICAgICAgICByZXR1cm4gU2RsUHNtLk1FU1NBR0VfNF9TVEFURTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gU2RsUHNtLk1FU1NBR0VfNF9TVEFURSkgeyAvLyBieXRlIDEyXG4gICAgICAgICAgICB0aGlzLl9tZXNzYWdlSUQgKz0gKHJhd0J5dGUgJiAweEZGKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kYXRhTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5GSU5JU0hFRF9TVEFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2R1bXBTaXplID0gdGhpcy5fZGF0YUxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSBuZXcgVWludDhBcnJheSh0aGlzLl9kYXRhTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBTZGxQc20uREFUQV9QVU1QX1NUQVRFO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBTZGxQc20uREFUQV9QVU1QX1NUQVRFKSB7IC8vIGJ5dGUgMTNcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWRbdGhpcy5fZGF0YUxlbmd0aCAtIHRoaXMuX2R1bXBTaXplXSA9IHJhd0J5dGU7XG4gICAgICAgICAgICB0aGlzLl9kdW1wU2l6ZSAtPSAxO1xuICAgICAgICAgICAgLy8gRG8gd2UgaGF2ZSBhbnkgbW9yZSBieXRlcyB0byByZWFkIGluP1xuICAgICAgICAgICAgaWYgKHRoaXMuX2R1bXBTaXplID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uREFUQV9QVU1QX1NUQVRFO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kdW1wU2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRklOSVNIRURfU1RBVEU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRVJST1JfU1RBVEU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblNkbFBzbS5TVEFSVF9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwO1xuU2RsUHNtLlNFUlZJQ0VfVFlQRV9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgPSAweDAyO1xuU2RsUHNtLkNPTlRST0xfRlJBTUVfSU5GT19TVEFURSAgICAgICAgICAgICAgICAgPSAweDAzO1xuU2RsUHNtLlNFU1NJT05fSURfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA0O1xuU2RsUHNtLkRBVEFfU0laRV8xX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA1O1xuU2RsUHNtLkRBVEFfU0laRV8yX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA2O1xuU2RsUHNtLkRBVEFfU0laRV8zX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA3O1xuU2RsUHNtLkRBVEFfU0laRV80X1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA4O1xuU2RsUHNtLk1FU1NBR0VfMV9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA5O1xuU2RsUHNtLk1FU1NBR0VfMl9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDBBO1xuU2RsUHNtLk1FU1NBR0VfM19TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDBCO1xuU2RsUHNtLk1FU1NBR0VfNF9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDBDO1xuU2RsUHNtLkRBVEFfUFVNUF9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDBEO1xuU2RsUHNtLkZJTklTSEVEX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweEZGO1xuU2RsUHNtLkVSUk9SX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAtMTtcblxuU2RsUHNtLkZJUlNUX0ZSQU1FX0RBVEFfU0laRSAgICAgICAgICAgICAgICAgICAgPSAweDA4O1xuU2RsUHNtLlZFUlNJT05fTUFTSyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweEYwOyAvLyA0IGhpZ2hlc3QgYml0c1xuU2RsUHNtLkVOQ1JZUFRJT05fTUFTSyAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA4OyAvLyA0dGggbG93ZXN0IGJpdFxuU2RsUHNtLkZSQU1FX1RZUEVfTUFTSyAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA3OyAvLyAzIGxvd2VzdCBiaXRzXG5cbmV4cG9ydCB7IFNkbFBzbSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBTZGxQc20gfSBmcm9tICcuL1NkbFBzbS5qcyc7XG5cbmNsYXNzIFRyYW5zcG9ydEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QmFzZVRyYW5zcG9ydENvbmZpZ30gdHJhbnNwb3J0Q29uZmlnXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnRDYWxsYmFja30gdHJhbnNwb3J0Q2FsbGJhY2tcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAodHJhbnNwb3J0Q29uZmlnLCB0cmFuc3BvcnRDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9zZGxQc20gPSBuZXcgU2RsUHNtKCk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IHRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sgPSB0cmFuc3BvcnRDYWxsYmFjaztcbiAgICB9XG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbWV0aG9kIG11c3QgYmUgb3ZlcnJpZGRlbicpO1xuICAgIH1cblxuICAgIHN0b3AgKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3N0b3AgbWV0aG9kIG11c3QgYmUgb3ZlcnJpZGRlbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBzZW5kUGFja2V0IChzZGxQYWNrZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZW5kUGFja2V0IG1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydENhbGxiYWNrfSBjYWxsYmFja1xuICAgICAqL1xuICAgIHNldFRyYW5zcG9ydENhbGxiYWNrIChjYWxsYmFjaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRyYW5zcG9ydENhbGxiYWNrIG1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW4nKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRyYW5zcG9ydEJhc2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBUcmFuc3BvcnRCYXNlIH0gZnJvbSAnLi9UcmFuc3BvcnRCYXNlLmpzJztcbmltcG9ydCB7IFNkbFBzbSB9IGZyb20gJy4vU2RsUHNtLmpzJztcblxuY2xhc3MgV2ViU29ja2V0Q2xpZW50IGV4dGVuZHMgVHJhbnNwb3J0QmFzZSB7XG4gICAgY29uc3RydWN0b3IgKGNvbmZpZywgdHJhbnNwb3J0Q2FsbGJhY2spIHtcbiAgICAgICAgc3VwZXIoY29uZmlnLCB0cmFuc3BvcnRDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl93c1VybCA9IGAke2NvbmZpZy5nZXRIb3N0KCl9OiR7Y29uZmlnLmdldFBvcnQoKX1gO1xuICAgICAgICB0aGlzLl93cyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnRDYWxsYmFja30gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZXRUcmFuc3BvcnRDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVucyB0aGUgdHJhbnNwb3J0IGNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWF0ZXMgYSB3ZWJzb2NrZXQgY29ubmVjdGlvbiB0byB0aGUgdXJsIHBhc3NlZCBpbiBhbmQgbGlzdGVucyBmb3IgbWVzc2FnZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0ICgpIHtcbiAgICAgICAgdGhpcy5fd3MgID0gbmV3IFdlYlNvY2tldCh0aGlzLl93c1VybCk7XG5cbiAgICAgICAgdGhpcy5fd3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sub25Db25uZWN0aW9uRXN0YWJsaXNoZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl93cy5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29ubmVjdCcsIGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrLm9uRXJyb3IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl93cy5vbm1lc3NhZ2UgPSAobXNnKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVJbmNvbWluZyhtc2cpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3dzLm9uY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc3BvcnRDYWxsYmFjay5vbkNvbm5lY3Rpb25UZXJtaW5hdGVkKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQgY29ubmVjdGlvblxuICAgICAqL1xuICAgIHN0b3AgKCkge1xuICAgICAgICB0aGlzLl93cy5jbG9zZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50cyBpbiB0aGUgcGFja2V0IHNob3VsZCBiZSBzZW50IG91dCB0aHJvdWdoIHRoZSB0cmFuc3BvcnRcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gcGFja2V0XG4gICAgICovXG4gICAgc2VuZFBhY2tldCAocGFja2V0KSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcGFja2V0LnRvUGFja2V0KCk7XG4gICAgICAgIHRoaXMuX3dzLnNlbmQoYnl0ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgY2FsbGVkIHdoZW5ldmVyIGEgbmV3IG1lc3NhZ2UgY29tZXMgaW5cbiAgICAgKiBAcGFyYW0ge01lc3NhZ2VFdmVudH0gbXNnXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlSW5jb21pbmcgKG1zZykge1xuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKG1zZy5kYXRhKTtcbiAgICAgICAgdGhpcy5fbXVsdGlCeXRlSGFuZGxlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyByZWNlaXZlZCBkYXRhIGZyb20gdGhlIGludGVybmFsIHF1ZXVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfbXVsdGlCeXRlSGFuZGxlciAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgIHdoaWxlICh0aGlzLl9xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBtc2dEYXRhID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgIG5ldyBSZXNwb25zZShtc2dEYXRhKS5hcnJheUJ1ZmZlcigpLnRoZW4oKGFycmF5QnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdWludDggPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBieXRlIG9mIHVpbnQ4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUJ5dGUoYnl0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZWVkcyBhIGJ5dGUgdGhyb3VnaCB0aGUgaW50ZXJuYWwgUFNNXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGUgLSB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlQnl0ZSAoYnl0ZSkge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gdGhpcy5fc2RsUHNtLmhhbmRsZUJ5dGUoYnl0ZSk7XG4gICAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignZmFpbGVkJywgdGhpcy5fc2RsUHNtKTtcbiAgICAgICAgICAgIHRoaXMuX3NkbFBzbS5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzRmluaXNoZWQgPSB0aGlzLl9zZGxQc20uZ2V0U3RhdGUoKSA9PT0gU2RsUHNtLkZJTklTSEVEX1NUQVRFO1xuXG4gICAgICAgIGlmIChpc0ZpbmlzaGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwYWNrZXQgPSB0aGlzLl9zZGxQc20uZ2V0Rm9ybWVkUGFja2V0KCk7XG4gICAgICAgICAgICB0aGlzLl9zZGxQc20ucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrLm9uUGFja2V0UmVjZWl2ZWQocGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5leHBvcnQgeyBXZWJTb2NrZXRDbGllbnQgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuY2xhc3MgVHJhbnNwb3J0Q2FsbGJhY2sge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fb25Db25uZWN0aW9uRXN0YWJsaXNoZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbkVycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25Db25uZWN0aW9uVGVybWluYXRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uUGFja2V0UmVjZWl2ZWQgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uQ29ubmVjdGlvbkVzdGFibGlzaGVkIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqLyAgICBcbiAgICBzZXRPbkVycm9yIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9vbkVycm9yID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgXG4gICAgICovICAgIFxuICAgIHNldE9uQ29ubmVjdGlvblRlcm1pbmF0ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uQ29ubmVjdGlvblRlcm1pbmF0ZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi8gICAgXG4gICAgc2V0T25QYWNrZXRSZWNlaXZlZCAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25QYWNrZXRSZWNlaXZlZCA9IGxpc3RlbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXIgZm9yIHdoZW4gYSBjb25uZWN0aW9uIGlzIHN1Y2Nlc3NmdWxcbiAgICAgKi9cbiAgICBvbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZCAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Db25uZWN0aW9uRXN0YWJsaXNoZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ29ubmVjdGlvbkVzdGFibGlzaGVkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVyIGZvciB3aGVuIGEgY29ubmVjdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgb25FcnJvciAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3Igd2hlbiBhIGNvbm5lY3Rpb24gaXMgZHJvcHBlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gXG4gICAgICovXG4gICAgb25Db25uZWN0aW9uVGVybWluYXRlZCAocmVhc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Db25uZWN0aW9uVGVybWluYXRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25Db25uZWN0aW9uVGVybWluYXRlZChyZWFzb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciBmb3Igd2hlbiBhIHBhY2tldCBpcyByZWNlaXZlZFxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBwYWNrZXQgXG4gICAgICovXG4gICAgb25QYWNrZXRSZWNlaXZlZCAocGFja2V0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25QYWNrZXRSZWNlaXZlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25QYWNrZXRSZWNlaXZlZChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmV4cG9ydCB7IFRyYW5zcG9ydENhbGxiYWNrIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFRyYW5zcG9ydFR5cGUgfSBmcm9tICcuL2VudW1zL1RyYW5zcG9ydFR5cGUuanMnO1xuaW1wb3J0IHsgV2ViU29ja2V0Q2xpZW50IH0gZnJvbSAnLi9XZWJTb2NrZXRDbGllbnQuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0Q2FsbGJhY2sgfSBmcm9tICcuL1RyYW5zcG9ydENhbGxiYWNrLmpzJztcblxuY2xhc3MgVHJhbnNwb3J0TWFuYWdlckJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QmFzZVRyYW5zcG9ydENvbmZpZ30gYmFzZVRyYW5zcG9ydENvbmZpZ1xuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0TGlzdGVuZXJ9IHRyYW5zcG9ydExpc3RlbmVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKGJhc2VUcmFuc3BvcnRDb25maWcsIHRyYW5zcG9ydExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IGJhc2VUcmFuc3BvcnRDb25maWc7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyID0gdHJhbnNwb3J0TGlzdGVuZXI7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrID0gbmV3IFRyYW5zcG9ydENhbGxiYWNrKCk7XG5cbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2suc2V0T25Db25uZWN0aW9uRXN0YWJsaXNoZWQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNwb3J0TGlzdGVuZXIub25UcmFuc3BvcnRDb25uZWN0ZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrLnNldE9uQ29ubmVjdGlvblRlcm1pbmF0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrLnNldE9uUGFja2V0UmVjZWl2ZWQodGhpcy5vblBhY2tldFJlY2VpdmVkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnRDb25maWcuZ2V0VHJhbnNwb3J0VHlwZSgpID09PSBUcmFuc3BvcnRUeXBlLldFQlNPQ0tFVF9DTElFTlQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG5ldyBXZWJTb2NrZXRDbGllbnQodGhpcy5fdHJhbnNwb3J0Q29uZmlnLCB0aGlzLl90cmFuc3BvcnRDYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdHJhbnNwb3J0Q29uZmlnLmdldFRyYW5zcG9ydFR5cGUoKSA9PT0gVHJhbnNwb3J0VHlwZS5DVVNUT00pIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IHRoaXMuX3RyYW5zcG9ydENvbmZpZy5nZXRUcmFuc3BvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zZXRUcmFuc3BvcnRDYWxsYmFjayh0aGlzLl90cmFuc3BvcnRDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblRyYW5zcG9ydENvbm5lY3RlZCAoKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLm9uVHJhbnNwb3J0Q29ubmVjdGVkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqL1xuICAgIG9uVHJhbnNwb3J0RGlzY29ubmVjdGVkIChmdW5jKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLm9uVHJhbnNwb3J0RGlzY29ubmVjdGVkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqL1xuICAgIG9uRXJyb3IgKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIub25FcnJvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBvblBhY2tldFJlY2VpdmVkIChzZGxQYWNrZXQpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIub25QYWNrZXRSZWNlaXZlZChzZGxQYWNrZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSB0cmFuc3BvcnQgY29ubmVjdGlvblxuICAgICAqL1xuICAgIHN0YXJ0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydCAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpcy5fdHJhbnNwb3J0LnN0YXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc3BvcnQuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgdHJhbnNwb3J0IGNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBzdG9wICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydCAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpcy5fdHJhbnNwb3J0LnN0b3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udGVudHMgaW4gdGhlIHBhY2tldCBzaG91bGQgYmUgc2VudCBvdXQgdGhyb3VnaCB0aGUgdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHBhY2tldFxuICAgICAqL1xuICAgIHNlbmRQYWNrZXQgKHBhY2tldCkge1xuICAgICAgICBpZiAodGhpcy5fdHJhbnNwb3J0ICE9PSBudWxsICYmIHR5cGVvZiB0aGlzLl90cmFuc3BvcnQuc2VuZFBhY2tldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0LnNlbmRQYWNrZXQocGFja2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0VHlwZX0gdHJhbnNwb3J0VHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzXG4gICAgICovXG4gICAgaXNDb25uZWN0ZWQgKHRyYW5zcG9ydFR5cGUsIGFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ29ubmVjdGVkO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNwb3J0TWFuYWdlckJhc2UgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgVHJhbnNwb3J0TWFuYWdlckJhc2UgfSBmcm9tICcuL1RyYW5zcG9ydE1hbmFnZXJCYXNlLmpzJztcblxuY2xhc3MgVHJhbnNwb3J0TWFuYWdlciBleHRlbmRzIFRyYW5zcG9ydE1hbmFnZXJCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoY29uZmlnLCB0cmFuc3BvcnRMaXN0ZW5lcikge1xuICAgICAgICBzdXBlcihjb25maWcsIHRyYW5zcG9ydExpc3RlbmVyKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IHsgVHJhbnNwb3J0TWFuYWdlciB9O1xuIiwiXG5pbXBvcnQgeyBTZGxQcm90b2NvbEJhc2UgfSBmcm9tICcuLy4uLy4uLy4uL2pzL3NyYy9wcm90b2NvbC9TZGxQcm90b2NvbEJhc2UuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0TWFuYWdlciB9IGZyb20gJy4vLi4vdHJhbnNwb3J0L1RyYW5zcG9ydE1hbmFnZXIuanMnO1xuXG5cbmNsYXNzIFNkbFByb3RvY29sIGV4dGVuZHMgU2RsUHJvdG9jb2xCYXNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydENvbmZpZ0Jhc2V9IGJhc2VUcmFuc3BvcnRDb25maWcgXG4gICAgICogQHBhcmFtIHtTZGxQcm90b2NvbExpc3RlbmVyfSBzZGxQcm90b2NvbExpc3RlbmVyIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yIChiYXNlVHJhbnNwb3J0Q29uZmlnLCBzZGxQcm90b2NvbExpc3RlbmVyKSB7XG4gICAgICAgIHN1cGVyKGJhc2VUcmFuc3BvcnRDb25maWcsIHNkbFByb3RvY29sTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLnNldFRyYW5zcG9ydE1hbmFnZXIobmV3IFRyYW5zcG9ydE1hbmFnZXIodGhpcy5fdHJhbnNwb3J0Q29uZmlnLCB0aGlzLl90cmFuc3BvcnRMaXN0ZW5lcikpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU2RsUHJvdG9jb2wgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgU2VydmljZVR5cGUgfSBmcm9tICcuLi9wcm90b2NvbC9lbnVtcy9TZXJ2aWNlVHlwZS5qcyc7XG5cbmNsYXNzIFNlcnZpY2VMaXN0ZW5lck1hcCB7XG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBhbiBhcnJheSBvZiBsaXN0ZW5lcnMgZm9yIGVhY2ggc2VydmljZSB0eXBlXG4gICAgICAgIHRoaXMuX2xpc3RlbmVyc1tTZXJ2aWNlVHlwZS5DT05UUk9MXSA9IFtdO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbU2VydmljZVR5cGUuUlBDXSA9IFtdO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbU2VydmljZVR5cGUuQVVESU9dID0gW107XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyc1tTZXJ2aWNlVHlwZS5WSURFT10gPSBbXTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzW1NlcnZpY2VUeXBlLkhZQlJJRF0gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcGFyYW0ge1NkbFNlcnZpY2VMaXN0ZW5lcn0gc2VydmljZUxpc3RlbmVyIFxuICAgICAqL1xuICAgIGFkZExpc3RlbmVyIChzZXJ2aWNlVHlwZSwgc2VydmljZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghc2VydmljZVR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbc2VydmljZVR5cGVdLnB1c2goc2VydmljZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcGFyYW0ge1NkbFNlcnZpY2VMaXN0ZW5lcn0gc2VydmljZUxpc3RlbmVyIFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IC0gd2hldGhlciB0aGUgc2VydmljZSBnb3QgcmVtb3ZlZCBcbiAgICAgKi9cbiAgICByZW1vdmVMaXN0ZW5lciAoc2VydmljZVR5cGUsIHNlcnZpY2VMaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXNlcnZpY2VUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdGVuZXJBcnJheSA9IHRoaXMuX2xpc3RlbmVyc1tzZXJ2aWNlVHlwZV07XG4gICAgICAgIGxldCByZW1vdmVkID0gZmFsc2U7XG4gICAgICAgIC8vIHJlbW92ZSBtYXRjaGluZyByZWZlcmVuY2VzIHRvIHRoZSBwYXNzZWQgaW4gc2VydmljZSBsaXN0ZW5lclxuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbc2VydmljZVR5cGVdID0gbGlzdGVuZXJBcnJheS5maWx0ZXIobGlzdGVuZXIgPT4ge1xuICAgICAgICAgICAgcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIgIT09IHNlcnZpY2VMaXN0ZW5lcjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZW1vdmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoaXMgZXZlbnQgdG8gYWxsIGxpc3RlbmVycyBiZWxvbmdpbmcgdG8gYSBzcGVjaWZpYyBzZXJ2aWNlIHR5cGVcbiAgICAgKiBAcGFyYW0ge1NkbFNlc3Npb259IHNlc3Npb24gXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0VuY3J5cHRlZCBcbiAgICAgKi9cbiAgICBzZW5kRXZlbnRTZXJ2aWNlU3RhcnRlZCAoc2Vzc2lvbiwgc2VydmljZVR5cGUsIGlzRW5jcnlwdGVkKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyQXJyYXkgPSB0aGlzLl9saXN0ZW5lcnNbc2VydmljZVR5cGVdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IGluIGxpc3RlbmVyQXJyYXkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyQXJyYXlbaW5kZXhdLm9uU2VydmljZVN0YXJ0ZWQoc2Vzc2lvbiwgc2VydmljZVR5cGUsIGlzRW5jcnlwdGVkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmRzIHRoaXMgZXZlbnQgdG8gYWxsIGxpc3RlbmVycyBiZWxvbmdpbmcgdG8gYSBzcGVjaWZpYyBzZXJ2aWNlIHR5cGVcbiAgICAgKiBAcGFyYW0ge1NkbFNlc3Npb259IHNlc3Npb24gXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICovXG4gICAgc2VuZEV2ZW50U2VydmljZUVuZGVkIChzZXNzaW9uLCBzZXJ2aWNlVHlwZSkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lckFycmF5ID0gdGhpcy5fbGlzdGVuZXJzW3NlcnZpY2VUeXBlXTtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBpbiBsaXN0ZW5lckFycmF5KSB7XG4gICAgICAgICAgICBsaXN0ZW5lckFycmF5W2luZGV4XS5vblNlcnZpY2VFbmRlZChzZXNzaW9uLCBzZXJ2aWNlVHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyB0aGlzIGV2ZW50IHRvIGFsbCBsaXN0ZW5lcnMgYmVsb25naW5nIHRvIGEgc3BlY2lmaWMgc2VydmljZSB0eXBlXG4gICAgICogQHBhcmFtIHtTZGxTZXNzaW9ufSBzZXNzaW9uIFxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gXG4gICAgICovXG4gICAgc2VuZEV2ZW50U2VydmljZUVycm9yIChzZXNzaW9uLCBzZXJ2aWNlVHlwZSwgcmVhc29uKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyQXJyYXkgPSB0aGlzLl9saXN0ZW5lcnNbc2VydmljZVR5cGVdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IGluIGxpc3RlbmVyQXJyYXkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyQXJyYXlbaW5kZXhdLm9uU2VydmljZUVycm9yKHNlc3Npb24sIHNlcnZpY2VUeXBlLCByZWFzb24pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBTZXJ2aWNlTGlzdGVuZXJNYXAgfTtcbiIsImltcG9ydCB7IFZpZGVvU3RyZWFtaW5nRm9ybWF0IH0gZnJvbSAnLi4vLi4vcnBjL3N0cnVjdHMvVmlkZW9TdHJlYW1pbmdGb3JtYXQnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdDb2RlYyB9IGZyb20gJy4uLy4uL3JwYy9lbnVtcy9WaWRlb1N0cmVhbWluZ0NvZGVjJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wgfSBmcm9tICcuLi8uLi9ycGMvZW51bXMvVmlkZW9TdHJlYW1pbmdQcm90b2NvbCc7XG5pbXBvcnQgeyBJbWFnZVJlc29sdXRpb24gfSBmcm9tICcuLi8uLi9ycGMvc3RydWN0cy9JbWFnZVJlc29sdXRpb24nO1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IExpdmlvLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4gKiBkaXN0cmlidXRpb24uXG4gKlxuICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuICogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5jb25zdCBERUZBVUxUX1BST1RPQ09MID0gVmlkZW9TdHJlYW1pbmdQcm90b2NvbC5SQVc7XG5jb25zdCBERUZBVUxUX0NPREVDID0gVmlkZW9TdHJlYW1pbmdDb2RlYy5IMjY0O1xuY29uc3QgREVGQVVMVF9XSURUSCA9IDEwMjQ7XG5jb25zdCBERUZBVUxUX0hFSUdIVCA9IDU3NjtcbmNvbnN0IERFRkFVTFRfREVOU0lUWSA9IDI0MDtcbmNvbnN0IERFRkFVTFRfRlJBTUVSQVRFID0gMzA7XG5jb25zdCBERUZBVUxUX0JJVFJBVEUgPSA1MTIwMDA7XG5jb25zdCBERUZBVUxUX0lOVEVSVkFMID0gNTtcbmNvbnN0IERFRkFVTFRfU0NBTEUgPSAxLjA7XG5cbmNsYXNzIFZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3BsYXlEZW5zaXR5IFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmcmFtZVJhdGUgXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdHJhdGUgXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIFxuICAgICAqIEBwYXJhbSB7SW1hZ2VSZXNvbHV0aW9ufSByZXNvbHV0aW9uIFxuICAgICAqIEBwYXJhbSB7VmlkZW9TdHJlYW1pbmdGb3JtYXR9IGZvcm1hdCBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoZGlzcGxheURlbnNpdHkgPSBudWxsLCBmcmFtZVJhdGUgPSBudWxsLCBiaXRyYXRlID0gbnVsbCwgaW50ZXJ2YWwgPSBudWxsLCByZXNvbHV0aW9uID0gbnVsbCwgZm9ybWF0ID0gbnVsbCkge1xuICAgICAgICB0aGlzLl9kaXNwbGF5RGVuc2l0eSA9IGRpc3BsYXlEZW5zaXR5IHx8IERFRkFVTFRfREVOU0lUWTtcbiAgICAgICAgdGhpcy5fZnJhbWVSYXRlID0gZnJhbWVSYXRlIHx8IERFRkFVTFRfRlJBTUVSQVRFO1xuICAgICAgICB0aGlzLl9iaXRyYXRlID0gYml0cmF0ZSB8fCBERUZBVUxUX0JJVFJBVEU7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gaW50ZXJ2YWwgfHwgREVGQVVMVF9JTlRFUlZBTDtcblxuICAgICAgICBpZiAoIShyZXNvbHV0aW9uIGluc3RhbmNlb2YgSW1hZ2VSZXNvbHV0aW9uKSkge1xuICAgICAgICAgICAgcmVzb2x1dGlvbiA9IG5ldyBJbWFnZVJlc29sdXRpb24oKTtcbiAgICAgICAgICAgIHJlc29sdXRpb24uc2V0UmVzb2x1dGlvbldpZHRoKERFRkFVTFRfV0lEVEgpO1xuICAgICAgICAgICAgcmVzb2x1dGlvbi5zZXRSZXNvbHV0aW9uSGVpZ2h0KERFRkFVTFRfSEVJR0hUKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcblxuICAgICAgICBpZiAoIShmb3JtYXQgaW5zdGFuY2VvZiBWaWRlb1N0cmVhbWluZ0Zvcm1hdCkpIHtcbiAgICAgICAgICAgIGZvcm1hdCA9IG5ldyBWaWRlb1N0cmVhbWluZ0Zvcm1hdCgpO1xuICAgICAgICAgICAgZm9ybWF0LnNldFByb3RvY29sKERFRkFVTFRfUFJPVE9DT0wpO1xuICAgICAgICAgICAgZm9ybWF0LnNldENvZGVjKERFRkFVTFRfQ09ERUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgdmFsdWVzIGNvbnRhaW5lZCBpbiB0aGUgY2FwYWJpbGl0eSB0aGF0IHNob3VsZCBoYXZlIGJlZW4gcmV0dXJuZWQgdGhyb3VnaCB0aGUgU3lzdGVtQ2FwYWJpbGl0eU1hbmFnZXIuXG4gICAgICogVGhpcyB1cGRhdGUgd2lsbCB1c2UgdGhlIG1vc3QgcHJlZmVycmVkIHN0cmVhbWluZyBmb3JtYXQgZnJvbSB0aGUgbW9kdWxlLlxuICAgICAqIEBwYXJhbSB7VmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5fSBjYXBhYmlsaXR5IHRoZSB2aWRlbyBzdHJlYW1pbmcgY2FwYWJpbGl0eSByZXR1cm5lZCBmcm9tIHRoZSBTeXN0ZW1DYXBhYmlsaXR5TWFuYWdlclxuICAgICAqL1xuICAgIHVwZGF0ZSAoY2FwYWJpbGl0eSkge1xuICAgICAgICBpZiAoY2FwYWJpbGl0eS5nZXRNYXhCaXRyYXRlKCkgIT09IG51bGwpIHsgXG4gICAgICAgICAgICB0aGlzLl9iaXRyYXRlID0gY2FwYWJpbGl0eS5nZXRNYXhCaXRyYXRlKCkgKiAxMDAwOyAvLyBOT1RFOiB0aGUgdW5pdCBvZiBtYXhCaXRyYXRlIGluIGdldFN5c3RlbUNhcGFiaWxpdHkgaXMga2Jwcy5cbiAgICAgICAgfSBcbiAgICAgICAgbGV0IHNjYWxlID0gREVGQVVMVF9TQ0FMRTtcbiAgICAgICAgaWYgKGNhcGFiaWxpdHkuZ2V0U2NhbGUoKSAhPT0gbnVsbCkgeyBcbiAgICAgICAgICAgIHNjYWxlID0gY2FwYWJpbGl0eS5nZXRTY2FsZSgpOyBcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNvbHV0aW9uID0gY2FwYWJpbGl0eS5nZXRQcmVmZXJyZWRSZXNvbHV0aW9uKCk7XG4gICAgICAgIGlmIChyZXNvbHV0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzb2x1dGlvbi5nZXRSZXNvbHV0aW9uSGVpZ2h0KCkgIT09IG51bGwgJiYgcmVzb2x1dGlvbi5nZXRSZXNvbHV0aW9uSGVpZ2h0KCkgPiAwKSB7IFxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdXRpb24uc2V0UmVzb2x1dGlvbkhlaWdodChNYXRoLmZsb29yKChyZXNvbHV0aW9uLmdldFJlc29sdXRpb25IZWlnaHQoKSAvIHNjYWxlKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc29sdXRpb24uZ2V0UmVzb2x1dGlvbldpZHRoKCkgIT09IG51bGwgJiYgcmVzb2x1dGlvbi5nZXRSZXNvbHV0aW9uV2lkdGgoKSA+IDApIHsgXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzb2x1dGlvbi5zZXRSZXNvbHV0aW9uV2lkdGgoTWF0aC5mbG9vcigocmVzb2x1dGlvbi5nZXRSZXNvbHV0aW9uV2lkdGgoKSAvIHNjYWxlKSkpOyBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gY2FwYWJpbGl0eS5nZXRTdXBwb3J0ZWRGb3JtYXRzKCk7XG4gICAgICAgIGlmIChmb3JtYXRzICE9PSBudWxsICYmIGZvcm1hdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0c1swXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXNwbGF5RGVuc2l0eSBcbiAgICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnN9XG4gICAgICovXG4gICAgc2V0RGlzcGxheURlbnNpdHkgKGRpc3BsYXlEZW5zaXR5KSB7XG4gICAgICAgIHRoaXMuX2Rpc3BsYXlEZW5zaXR5ID0gZGlzcGxheURlbnNpdHk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXREaXNwbGF5RGVuc2l0eSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5RGVuc2l0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJhbWVSYXRlXG4gICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdQYXJhbWV0ZXJzfVxuICAgICAqL1xuICAgIHNldEZyYW1lUmF0ZSAoZnJhbWVSYXRlKSB7XG4gICAgICAgIHRoaXMuX2ZyYW1lUmF0ZSA9IGZyYW1lUmF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0RnJhbWVSYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZyYW1lUmF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0cmF0ZVxuICAgICAqIEByZXR1cm4ge1ZpZGVvU3RyZWFtaW5nUGFyYW1ldGVyc31cbiAgICAgKi9cbiAgICBzZXRCaXRyYXRlIChiaXRyYXRlKSB7XG4gICAgICAgIHRoaXMuX2JpdHJhdGUgPSBiaXRyYXRlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIGdldEJpdHJhdGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYml0cmF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxcbiAgICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnN9XG4gICAgICovXG4gICAgc2V0SW50ZXJ2YWwgKGludGVydmFsKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRJbnRlcnZhbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRlcnZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nRm9ybWF0fSBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnN9XG4gICAgICovXG4gICAgc2V0Rm9ybWF0IChmb3JtYXQpIHtcbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ0Zvcm1hdH1cbiAgICAgKi9cbiAgICBnZXRGb3JtYXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByZXNvbHV0aW9uXG4gICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdQYXJhbWV0ZXJzfVxuICAgICAqL1xuICAgIHNldFJlc29sdXRpb24gKHJlc29sdXRpb24pIHtcbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSZXNvbHV0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdXRpb247XG4gICAgfVxufVxuXG5leHBvcnQgeyBWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgU2RsU2Vzc2lvbkxpc3RlbmVyIH0gZnJvbSAnLi9TZGxTZXNzaW9uTGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9IGZyb20gJy4uL3Byb3RvY29sL1NkbFByb3RvY29sTGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgU2RsUHJvdG9jb2wgfSBmcm9tICcuLi9wcm90b2NvbC9TZGxQcm90b2NvbC5qcyc7XG5pbXBvcnQgeyBTZXJ2aWNlVHlwZSB9IGZyb20gJy4uL3Byb3RvY29sL2VudW1zL1NlcnZpY2VUeXBlLmpzJztcbmltcG9ydCB7IFNlcnZpY2VMaXN0ZW5lck1hcCB9IGZyb20gJy4vU2VydmljZUxpc3RlbmVyTWFwLmpzJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyB9IGZyb20gJy4uL3N0cmVhbWluZy92aWRlby9WaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMuanMnO1xuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsU2Vzc2lvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc3RhcnRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldFNlc3Npb25JZFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gb25Qcm90b2NvbFNlc3Npb25TdGFydGVkXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBvblByb3RvY29sU2Vzc2lvbkVuZGVkXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBvblByb3RvY29sU2Vzc2lvbkVuZGVkTkFDS2VkXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBvblJwY01lc3NhZ2VSZWNlaXZlZFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZW5kU2Vzc2lvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc2VuZFJwY1xuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0TXR1XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBjbG9zZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc3RhcnRTZXJ2aWNlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBlbmRTZXJ2aWNlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRDdXJyZW50VHJhbnNwb3J0VHlwZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0SXNDb25uZWN0ZWRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGdldFByb3RvY29sVmVyc2lvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0VHJhbnNwb3J0Q29uZmlnXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRTZXNzaW9uSGFzaElkXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBhZGRTZXJ2aWNlTGlzdGVuZXJcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IHJlbW92ZVNlcnZpY2VMaXN0ZW5lclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0U2VydmljZUxpc3RlbmVyc1xuICovXG5jbGFzcyBTZGxTZXNzaW9uIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydENvbmZpZ0Jhc2V9IGJhc2VUcmFuc3BvcnRDb25maWcgXG4gICAgICogQHBhcmFtIHtTZGxTZXNzaW9uTGlzdGVuZXJ9IHNkbFNlc3Npb25MaXN0ZW5lciBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoYmFzZVRyYW5zcG9ydENvbmZpZywgc2RsU2Vzc2lvbkxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2Jhc2VUcmFuc3BvcnRDb25maWcgPSBiYXNlVHJhbnNwb3J0Q29uZmlnO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSGFzaElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbkxpc3RlbmVyID0gc2RsU2Vzc2lvbkxpc3RlbmVyO1xuICAgICAgICB0aGlzLl9iYXNlVHJhbnNwb3J0Q29uZmlnID0gYmFzZVRyYW5zcG9ydENvbmZpZztcblxuICAgICAgICAvLyBhIGhhc2ggd2hlcmUgZWFjaCBrZXkgaXMgYSBzZXJ2aWNlIHR5cGUsIGFuZCBoYXMgYW4gYXJyYXkgb2YgbGlzdGVuZXJzIGF0dGFjaGVkXG4gICAgICAgIHRoaXMuX3NlcnZpY2VMaXN0ZW5lcnMgPSBuZXcgU2VydmljZUxpc3RlbmVyTWFwKCk7XG5cbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xMaXN0ZW5lciA9IHRoaXMuX3NldHVwU2RsUHJvdG9jb2xMaXN0ZW5lcigpO1xuXG4gICAgICAgIHRoaXMuX3NkbFByb3RvY29sID0gbmV3IFNkbFByb3RvY29sKGJhc2VUcmFuc3BvcnRDb25maWcsIHRoaXMuX3NkbFByb3RvY29sTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1NkbFByb3RvY29sTGlzdGVuZXJ9IFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldHVwU2RsUHJvdG9jb2xMaXN0ZW5lciAoKSB7XG4gICAgICAgIGNvbnN0IHNkbFByb3RvY29sTGlzdGVuZXIgPSBuZXcgU2RsUHJvdG9jb2xMaXN0ZW5lcigpO1xuICAgICAgICBzZGxQcm90b2NvbExpc3RlbmVyLnNldEdldFNlc3Npb25JZCh0aGlzLmdldFNlc3Npb25JZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgc2RsUHJvdG9jb2xMaXN0ZW5lci5zZXRPblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQodGhpcy5vblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHNkbFByb3RvY29sTGlzdGVuZXIuc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZCh0aGlzLm9uUHJvdG9jb2xTZXNzaW9uRW5kZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHNkbFByb3RvY29sTGlzdGVuZXIuc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCh0aGlzLm9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHNkbFByb3RvY29sTGlzdGVuZXIuc2V0T25ScGNNZXNzYWdlUmVjZWl2ZWQodGhpcy5vblJwY01lc3NhZ2VSZWNlaXZlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgc2RsUHJvdG9jb2xMaXN0ZW5lci5zZXRPblRyYW5zcG9ydENvbm5lY3RlZCh0aGlzLm9uVHJhbnNwb3J0Q29ubmVjdGVkLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHNkbFByb3RvY29sTGlzdGVuZXIuc2V0R2V0RGVzaXJlZFZpZGVvUGFyYW1zKHRoaXMuZ2V0RGVzaXJlZFZpZGVvUGFyYW1zLmJpbmQodGhpcykpO1xuICAgICAgICBzZGxQcm90b2NvbExpc3RlbmVyLnNldFNldEFjY2VwdGVkVmlkZW9QYXJhbXModGhpcy5zZXRBY2NlcHRlZFZpZGVvUGFyYW1zLmJpbmQodGhpcykpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNkbFByb3RvY29sTGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnRzIHVwIHRoZSBTREwgcHJvdG9jb2wgY2xhc3MuIEl0IHdpbGwga2ljayBvZmYgdGhlIHRyYW5zcG9ydCBtYW5hZ2VyIGFuZCB1bmRlcmx5aW5nIHRyYW5zcG9ydC5cbiAgICAgKi9cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRoaXMuX3NkbFByb3RvY29sLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgLyoqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCRUdJTjogICAgU2RsUHJvdG9jb2xMaXN0ZW5lciBpbXBsZW1lbnRlZCBtZXRob2RzXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICAtIHJlcHJlc2VudHMgYSBieXRlIFxuICAgICAqL1xuICAgIGdldFNlc3Npb25JZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uSWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgZmlyZWQgd2hlbiB0cmFuc3BvcnQgKGVnIHRjcCwgd3MsIGJsdWV0b290aCkgaGFzIGNvbm5lY3RlZC5cbiAgICAgKi9cbiAgICBvblRyYW5zcG9ydENvbm5lY3RlZCAoKSB7XG4gICAgICAgIHRoaXMuX3NkbFNlc3Npb25MaXN0ZW5lci5vblRyYW5zcG9ydENvbm5lY3RlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiAtIHJlcHJlc2VudHMgYSBieXRlIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhhc2hJZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNFbmNyeXB0ZWRcbiAgICAgKi9cbiAgICBvblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQsIHZlcnNpb24sIGNvcnJlbGF0aW9uSWQsIGhhc2hJZCwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuXG4gICAgICAgIGlmIChzZXJ2aWNlVHlwZSA9PT0gU2VydmljZVR5cGUuUlBDKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uSGFzaElkID0gaGFzaElkO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbkxpc3RlbmVyLm9uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCB2ZXJzaW9uLCBjb3JyZWxhdGlvbklkLCBoYXNoSWQsIGlzRW5jcnlwdGVkKTtcbiAgICAgICAgdGhpcy5fc2VydmljZUxpc3RlbmVycy5zZW5kRXZlbnRTZXJ2aWNlU3RhcnRlZCh0aGlzLCBzZXJ2aWNlVHlwZSwgaXNFbmNyeXB0ZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29ycmVsYXRpb25JZFxuICAgICAqL1xuICAgIG9uUHJvdG9jb2xTZXNzaW9uRW5kZWQgKHNlcnZpY2VUeXBlLCBzZXNzaW9uSWQsIGNvcnJlbGF0aW9uSWQpIHtcbiAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbkxpc3RlbmVyLm9uUHJvdG9jb2xTZXNzaW9uRW5kZWQoc2VydmljZVR5cGUsIHNlc3Npb25JZCwgY29ycmVsYXRpb25JZCk7XG4gICAgICAgIHRoaXMuX3NlcnZpY2VMaXN0ZW5lcnMuc2VuZEV2ZW50U2VydmljZUVuZGVkKHRoaXMsIHNlcnZpY2VUeXBlKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JZCAtIHJlcHJlc2VudHMgYSBieXRlIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb3JyZWxhdGlvbklkXG4gICAgICovXG4gICAgb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCAoc2VydmljZVR5cGUsIHNlc3Npb25JZCwgY29ycmVsYXRpb25JZCkge1xuICAgICAgICB0aGlzLl9zZGxTZXNzaW9uTGlzdGVuZXIub25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCBjb3JyZWxhdGlvbklkKTtcbiAgICAgICAgdGhpcy5fc2VydmljZUxpc3RlbmVycy5zZW5kRXZlbnRTZXJ2aWNlRXJyb3IodGhpcywgc2VydmljZVR5cGUsIGBFbmQgJHtzZXJ2aWNlVHlwZS50b1N0cmluZygpfSBTZXJ2aWNlIE5BQ0snZWRgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1JwY01lc3NhZ2V9IHJwY01lc3NhZ2UgXG4gICAgICovXG4gICAgb25ScGNNZXNzYWdlUmVjZWl2ZWQgKHJwY01lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbkxpc3RlbmVyLm9uUnBjTWVzc2FnZVJlY2VpdmVkKHJwY01lc3NhZ2UpO1xuICAgIH1cblxuXG4gICAgLyoqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFTkQ6ICAgIFNkbFByb3RvY29sTGlzdGVuZXIgaW1wbGVtZW50ZWQgbWV0aG9kc1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBlbmRTZXNzaW9uICgpIHtcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2wuZW5kU2Vzc2lvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UnBjTWVzc2FnZX0gcnBjTWVzc2FnZSBcbiAgICAgKi9cbiAgICBzZW5kUnBjIChycGNNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX3NkbFByb3RvY29sLnNlbmRScGMocnBjTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gc2RsUGFja2V0LlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBzZW5kUGFja2V0IChzZGxQYWNrZXQpIHtcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2wuc2VuZFBhY2tldChzZGxQYWNrZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gbWF4IHRyYW5zcG9ydCB1bml0IGZvciB0aGUgZ2l2ZW4gc2VydmljZSB0eXBlXG4gICAgICovXG4gICAgZ2V0TXR1IChzZXJ2aWNlVHlwZSkge1xuICAgICAgICB0aGlzLl9zZGxQcm90b2NvbC5nZXRNdHUoc2VydmljZVR5cGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuZHMgdGhlIGN1cnJlbnQgc2Vzc2lvblxuICAgICAqL1xuICAgIGNsb3NlICgpIHtcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2wuZW5kU2Vzc2lvbih0aGlzLl9zZXNzaW9uSWQsIHRoaXMuX3Nlc3Npb25IYXNoSWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRW5jcnlwdGVkXG4gICAgICovXG4gICAgc3RhcnRTZXJ2aWNlIChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkLCBpc0VuY3J5cHRlZCkge1xuICAgICAgICB0aGlzLl9zZGxQcm90b2NvbC5zdGFydFNlcnZpY2Uoc2VydmljZVR5cGUsIHNlc3Npb25JZCwgaXNFbmNyeXB0ZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSWQgLSByZXByZXNlbnRzIGEgYnl0ZSBcbiAgICAgKi9cbiAgICBlbmRTZXJ2aWNlIChzZXJ2aWNlVHlwZSwgc2Vzc2lvbklkKSB7XG4gICAgICAgIHRoaXMuX3NkbFByb3RvY29sLmVuZFNlcnZpY2Uoc2VydmljZVR5cGUsIHNlc3Npb25JZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0VHlwZX0gIFxuICAgICAqL1xuICAgIGdldEN1cnJlbnRUcmFuc3BvcnRUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jhc2VUcmFuc3BvcnRDb25maWcuZ2V0VHJhbnNwb3J0VHlwZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IGlzQ29ubmVjdGVkXG4gICAgICovXG4gICAgZ2V0SXNDb25uZWN0ZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2RsUHJvdG9jb2wuaXNDb25uZWN0ZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtWZXJzaW9ufSAgXG4gICAgICovXG4gICAgZ2V0UHJvdG9jb2xWZXJzaW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NkbFByb3RvY29sLmdldFByb3RvY29sVmVyc2lvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1RyYW5zcG9ydENvbmZpZ0Jhc2V9ICBcbiAgICAgKi9cbiAgICBnZXRUcmFuc3BvcnRDb25maWcgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmFzZVRyYW5zcG9ydENvbmZpZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9ICBcbiAgICAgKi9cbiAgICBnZXRTZXNzaW9uSGFzaElkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25IYXNoSWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICogQHBhcmFtIHtTZGxTZXJ2aWNlTGlzdGVuZXJ9IHNkbFNlcnZpY2VMaXN0ZW5lciBcbiAgICAgKi9cbiAgICBhZGRTZXJ2aWNlTGlzdGVuZXIgKHNlcnZpY2VUeXBlLCBzZGxTZXJ2aWNlTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fc2VydmljZUxpc3RlbmVycy5hZGRMaXN0ZW5lcihzZXJ2aWNlVHlwZSwgc2RsU2VydmljZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcGFyYW0ge1NkbFNlcnZpY2VMaXN0ZW5lcn0gc2RsU2VydmljZUxpc3RlbmVyIFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IC0gd2hldGhlciB0aGUgcmVtb3ZhbCB3YXMgc3VjY2Vzc2Z1bFxuICAgICAqL1xuICAgIHJlbW92ZVNlcnZpY2VMaXN0ZW5lciAoc2VydmljZVR5cGUsIHNkbFNlcnZpY2VMaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZUxpc3RlbmVycy5yZW1vdmVMaXN0ZW5lcihzZXJ2aWNlVHlwZSwgc2RsU2VydmljZUxpc3RlbmVyKTtcbiAgICB9IFxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U2VydmljZUxpc3RlbmVyTWFwfVxuICAgICAqL1xuICAgIGdldFNlcnZpY2VMaXN0ZW5lcnMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZUxpc3RlbmVycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nUGFyYW1ldGVyc30gcGFyYW1zIFxuICAgICAqL1xuICAgIHNldERlc2lyZWRWaWRlb1BhcmFtcyAocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX2Rlc2lyZWRWaWRlb1BhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudGx5IHNldCBkZXNpcmVkIHZpZGVvIHN0cmVhbWluZyBwYXJhbWV0ZXJzLiBJZiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHNldCxcbiAgICAgKiB0aGUgZGVmYXVsdCBvcHRpb25zIHdpbGwgYmUgcmV0dXJuZWQgYW5kIHNldCBmb3IgdGhpcyBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnN9IHRoZSBkZXNpcmVkIHZpZGVvIHN0cmVhbWluZyBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgZ2V0RGVzaXJlZFZpZGVvUGFyYW1zICgpIHtcbiAgICAgICAgaWYgKCEodGhpcy5fZGVzaXJlZFZpZGVvUGFyYW1zIGluc3RhbmNlb2YgVmlkZW9TdHJlYW1pbmdQYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgdGhpcy5fZGVzaXJlZFZpZGVvUGFyYW1zID0gbmV3IFZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXNpcmVkVmlkZW9QYXJhbXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnN9IHBhcmFtcyBcbiAgICAgKi9cbiAgICBzZXRBY2NlcHRlZFZpZGVvUGFyYW1zIChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fZGVzaXJlZFZpZGVvUGFyYW1zID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNkbFNlc3Npb24gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBcnJheVRvb2xzXG4gKi9cbmNsYXNzIEFycmF5VG9vbHMge1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGl0ZW0gZnJvbSB0aGUgYXJyYXkuXG4gICAgICogVGhpcyBkb2VzIG5vdCBtdXRhdGUgdGhlIHBhc3NlZCBpbiBhcnJheS5cbiAgICAgKiBPbmx5IHRoZSByZXR1cm5lZCBhcnJheSBoYXMgdGhlIHZhbHVlIHJlbW92ZWQuIFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFxuICAgICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cbiAgICBzdGF0aWMgYXJyYXlSZW1vdmUgKGFycmF5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChlbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGUgIT09IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgeyBBcnJheVRvb2xzIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJlZ2lzdGVyQXBwSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vcnBjL21lc3NhZ2VzL1JlZ2lzdGVyQXBwSW50ZXJmYWNlLmpzJztcbmltcG9ydCB7IFJwY1JlcXVlc3QgfSBmcm9tICcuLi8uLi9ycGMvUnBjUmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBScGNSZXNwb25zZSB9IGZyb20gJy4uLy4uL3JwYy9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBScGNMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3JwYy9ScGNMaXN0ZW5lci5qcyc7XG5pbXBvcnQgeyBTZGxTZXNzaW9uIH0gZnJvbSAnLi4vLi4vc2Vzc2lvbi9TZGxTZXNzaW9uLmpzJztcbmltcG9ydCB7IFNkbFNlc3Npb25MaXN0ZW5lciB9IGZyb20gJy4uLy4uL3Nlc3Npb24vU2RsU2Vzc2lvbkxpc3RlbmVyLmpzJztcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICcuLi8uLi91dGlsL1ZlcnNpb24uanMnO1xuaW1wb3J0IHsgQXJyYXlUb29scyB9IGZyb20gJy4uLy4uL3V0aWwvQXJyYXlUb29scy5qcyc7XG5pbXBvcnQgeyBTZGxNc2dWZXJzaW9uIH0gZnJvbSAnLi4vLi4vcnBjL3N0cnVjdHMvU2RsTXNnVmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vLi4vcnBjL2VudW1zL0Z1bmN0aW9uSUQuanMnO1xuaW1wb3J0IHsgU2VydmljZVR5cGUgfSBmcm9tICcuLi8uLi9wcm90b2NvbC9lbnVtcy9TZXJ2aWNlVHlwZS5qcyc7XG5pbXBvcnQgeyBPbkhtaVN0YXR1cyB9IGZyb20gJy4uLy4uL3JwYy9tZXNzYWdlcy9PbkhtaVN0YXR1cy5qcyc7XG5pbXBvcnQgeyBITUlMZXZlbCB9IGZyb20gJy4uLy4uL3JwYy9lbnVtcy9ITUlMZXZlbC5qcyc7XG5cbi8qKlxuICogTk9URTogVGhpcyBjb3VsZCBhbGwgY2hhbmdlIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIGZvciB0ZXN0aW5nLlxuICogVGhpcyBjbGFzcyBzaG91bGQgYWxzbyBiZSBtYXJrZWQgcHJpdmF0ZSBhbmQgYmVoaW5kIHRoZSBTZGxNYW5hZ2VyIEFQSVxuICpcbiAqIHVzYWdlIHNob3VsZCBiZTpcbiAqIHZhciBsY20gPSBuZXcgTGlmZWN5Y2xlTWFuYWdlcihhcHBDb25maWcsIGxpZmVjeWNsZUxpc3RlbmVyKTtcbiAqIGxjbS5zZXRScGNMaXN0ZW5lciggLi4uICk7XG4gKiBsY20uc3RhcnQoKTtcbiAqIC4uLi5cbiAqXG4gKiBsaWZlY3ljbGVMaXN0ZW5lci5PblByb3h5Q29ubmVjdGVkKCl7XG4gKiAgLy9Qb3NzaWJsZSB0byBzdGFydCBzZW5kaW5nIFJQQ3MsIEhNSSBsZXZlbCBzaG91bGQgYmUgTk9ORSB0byBzdGFydFxuICpcbiAqIH1cbiAqXG4gKi9cbmNsYXNzIExpZmVjeWNsZU1hbmFnZXIge1xuICAgIC8qKlxuICAgICogQHBhcmFtIHtBcHBDb25maWd9IHNkbENvbmZpZ1xuICAgICogQHBhcmFtIHtMaWZlY3ljbGVMaXN0ZW5lcn0gbGlmZWN5Y2xlTGlzdGVuZXJcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKGFwcENvbmZpZywgbGlmZWN5Y2xlTGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGFwcENvbmZpZyA9PT0gbnVsbCB8fCBsaWZlY3ljbGVMaXN0ZW5lciA9PT0gbnVsbFxuICAgICAgICAgICAgfHwgYXBwQ29uZmlnID09PSB1bmRlZmluZWQgfHwgbGlmZWN5Y2xlTGlzdGVuZXIgPT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyYW1zIG11c3Qgbm90IGJlIG51bGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FwcENvbmZpZyA9IGFwcENvbmZpZztcbiAgICAgICAgdGhpcy5fbGlmZWN5Y2xlTGlzdGVuZXIgPSBsaWZlY3ljbGVMaXN0ZW5lcjtcbiAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbiA9IG5ldyBTZGxTZXNzaW9uKHRoaXMuX2FwcENvbmZpZy5nZXRUcmFuc3BvcnRDb25maWcoKSwgdGhpcy5fY3JlYXRlU2Vzc2lvbkxpc3RlbmVyKCkpO1xuXG4gICAgICAgIC8vIFRoaXMgaXMgYnkgZGVmYXVsdCB1bnRpbCB3ZSByZWNlaXZlIHRoZSBSQUkgUmVzcG9uc2VcbiAgICAgICAgdGhpcy5fcnBjU3BlY1ZlcnNpb24gPSBuZXcgVmVyc2lvbigxLCAwLCAwKTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50SE1JU3RhdHVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZmlyc3RUaW1lRnVsbCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlTGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9tYXhDb3JyZWxhdGlvbklkID0gMDsgLy8gVE9ETyByZW1vdmUgd2hlbiBjb3JyZWxhdGlvbiBnZW4gaXMgaW1wbGVtZW50ZWRcbiAgICAgICAgdGhpcy5fcnBjTGlzdGVuZXJzID0gbmV3IE1hcCgpOyAvLyA8TnVtYmVyLCBBcnJheTxScGNMaXN0ZW5lcj4+XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U2RsU2Vzc2lvbkxpc3RlbmVyfVxuICAgICAqL1xuICAgIF9jcmVhdGVTZXNzaW9uTGlzdGVuZXIgKCkge1xuICAgICAgICBjb25zdCBzZXNzaW9uTGlzdGVuZXIgPSBuZXcgU2RsU2Vzc2lvbkxpc3RlbmVyKCk7XG4gICAgICAgIHNlc3Npb25MaXN0ZW5lci5zZXRPblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQoKHNlcnZpY2VUeXBlLCBzZXNzaW9uSUQsIHZlcnNpb24sIGNvcnJlbGF0aW9uSUQsIGhhc2hJRCwgaXNFbmNyeXB0ZWQpID0+IHtcbiAgICAgICAgICAgIC8vIFNlc3Npb24gaGFzIGJlZW4gc3RhcnRlZFxuICAgICAgICAgICAgLy8gVE9ETyBjaGVjayBtaW4gcHJvdG9jb2wgc3BlYyB2ZXJzaW9uXG4gICAgICAgICAgICBpZiAoc2VydmljZVR5cGUgPT09IFNlcnZpY2VUeXBlLlJQQykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hcHBDb25maWcgIT09IG51bGwgJiYgdGhpcy5fYXBwQ29uZmlnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBjYWxsIHByZXBhcmUgb24gY29uZmlnIHRvIG1ha2Ugc3VyZSBpdCBpcyBzYXRpc2ZhY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kUnBjTWVzc2FnZSh0aGlzLl9jcmVhdGVSZWdpc3RlckFwcEludGVyZmFjZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZXNzaW9uTGlzdGVuZXIuc2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZCgoc2VydmljZVR5cGUsIHNlc3Npb25JRCwgY29ycmVsYXRpb25JRCkgPT4ge1xuICAgICAgICAgICAgLy8gU2Vzc2lvbiBoYXMgYmVlbiBlbmRlZFxuICAgICAgICB9KTtcbiAgICAgICAgc2Vzc2lvbkxpc3RlbmVyLnNldE9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQoKHNlcnZpY2VUeXBlLCBzZXNzaW9uSUQsIGNvcnJlbGF0aW9uSUQpID0+IHtcbiAgICAgICAgICAgIC8vIFRPRE8gaW0gbm90IHN1cmUgd2h5IHdlIGhhdmUgdGhpc1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vzc2lvbkxpc3RlbmVyLnNldE9uUnBjTWVzc2FnZVJlY2VpdmVkKChycGNNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAvLyBNZXNzYWdlIGhhcyBiZWVuIHJlY2VpdmVkXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVScGMocnBjTWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXNzaW9uTGlzdGVuZXIuc2V0T25UcmFuc3BvcnRDb25uZWN0ZWQoKCkgPT4ge1xuICAgICAgICAgICAgLy8gdHJhbnNwb3J0IGhhcyBiZWVuIGNvbm5lY3RlZFxuICAgICAgICAgICAgdGhpcy5fc2RsU2Vzc2lvbi5zdGFydFNlcnZpY2UoU2VydmljZVR5cGUuUlBDLCAwLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZXNzaW9uTGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsgUnBjTWVzc2FnZSB9IHJwY01lc3NhZ2VcbiAgICAgKi9cbiAgICBfaGFuZGxlUnBjIChycGNNZXNzYWdlKSB7XG4gICAgICAgIGlmIChycGNNZXNzYWdlID09PSBudWxsIHx8IHJwY01lc3NhZ2UgPT09IHVuZGVmaW5lZCB8fCBycGNNZXNzYWdlLmdldEZ1bmN0aW9uTmFtZSgpID09PSBudWxsIHx8IHJwY01lc3NhZ2UuZ2V0RnVuY3Rpb25OYW1lKCkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnVuY3Rpb25JRCA9IEZ1bmN0aW9uSUQudmFsdWVGb3JLZXkocnBjTWVzc2FnZS5nZXRGdW5jdGlvbk5hbWUoKSk7IC8vIHRoaXMgaXMgdGhlIG51bWJlciB2YWx1ZVxuICAgICAgICBjb25zdCBsaXN0ZW5lckFycmF5ID0gdGhpcy5fcnBjTGlzdGVuZXJzLmdldChmdW5jdGlvbklEKTtcbiAgICAgICAgaWYgKGxpc3RlbmVyQXJyYXkgIT09IG51bGwgJiYgbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsaXN0ZW5lckFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaXRlbS5vblJwY01lc3NhZ2UocnBjTWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBpbmRpdmlkdWFsIFJQQyBsaXN0ZW5lcnMgZm9yIHJlcXVlc3QvcmVzcG9uc2UgcGFpcnNcbiAgICAgICAgaWYgKHJwY01lc3NhZ2UgaW5zdGFuY2VvZiBScGNSZXNwb25zZSkge1xuICAgICAgICAgICAgLy8gbnVsbCBjaGVjayBub3QgbmVlZGVkLiBpdHMgYWx3YXlzIGRlZmluZWQgaW4gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVzcG9uc2VMaXN0ZW5lcnMuaGFzKHJwY01lc3NhZ2UuZ2V0Q29ycmVsYXRpb25JZCgpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNlTGlzdGVuZXJzLmdldChycGNNZXNzYWdlLmdldENvcnJlbGF0aW9uSWQoKSkucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtMaWZlY3ljbGVNYW5hZ2VyfVxuICAgICovXG4gICAgc3RhcnQgKCkge1xuICAgICAgICB0aGlzLl9zZXR1cEludGVybmFsUnBjTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX3NkbFNlc3Npb24uc3RhcnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RvcCAoKSB7XG4gICAgICAgIHRoaXMuX3NkbFNlc3Npb24uY2xvc2UoKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbklEfSBmdW5jdGlvbklEXG4gICAgICogQHBhcmFtIHtScGNMaXN0ZW5lcn0gcnBjTGlzdGVuZXJcbiAgICAgKi9cbiAgICBhZGRScGNMaXN0ZW5lciAoZnVuY3Rpb25JRCwgcnBjTGlzdGVuZXIpIHtcbiAgICAgICAgbGV0IGxpc3RlbmVyQXJyYXkgPSB0aGlzLl9ycGNMaXN0ZW5lcnMuZ2V0KGZ1bmN0aW9uSUQpO1xuICAgICAgICAvLyBJZiBubyBhcnJheSBleGlzdHMgeWV0IGZvciB0aGlzIGZ1bmN0aW9uIGlkLCBjcmVhdGUgb25lXG4gICAgICAgIGlmIChsaXN0ZW5lckFycmF5ID09PSBudWxsIHx8IGxpc3RlbmVyQXJyYXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fcnBjTGlzdGVuZXJzLnNldChmdW5jdGlvbklELCBbXSk7XG4gICAgICAgICAgICBsaXN0ZW5lckFycmF5ID0gdGhpcy5fcnBjTGlzdGVuZXJzLmdldChmdW5jdGlvbklEKTtcbiAgICAgICAgfVxuICAgICAgICBsaXN0ZW5lckFycmF5LnB1c2gocnBjTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbklEfSBmdW5jdGlvbklEXG4gICAgICogQHBhcmFtIHtScGNMaXN0ZW5lcn0gcnBjTGlzdGVuZXJcbiAgICAgKi9cbiAgICByZW1vdmVScGNMaXN0ZW5lciAoZnVuY3Rpb25JRCwgcnBjTGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKHJwY0xpc3RlbmVyICE9PSBudWxsICYmIHJwY0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVyQXJyYXkgPSB0aGlzLl9ycGNMaXN0ZW5lcnMuZ2V0KGZ1bmN0aW9uSUQpO1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyQXJyYXkgIT09IG51bGwgJiYgbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcnBjTGlzdGVuZXJzLnNldChmdW5jdGlvbklELCBBcnJheVRvb2xzLmFycmF5UmVtb3ZlKGxpc3RlbmVyQXJyYXksIHJwY0xpc3RlbmVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UnBjTWVzc2FnZX0gcnBjTWVzc2FnZVxuICAgICAqL1xuICAgIHNlbmRScGNNZXNzYWdlIChycGNNZXNzYWdlKSB7XG4gICAgICAgIGlmIChycGNNZXNzYWdlICE9PSBudWxsICYmIHJwY01lc3NhZ2UgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9zZGxTZXNzaW9uLmdldElzQ29ubmVjdGVkKCkpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gd2Ugc3RpbGwgbmVlZCB0byBtYWtlIHByb3BlciBjaGFuZ2VzIHRvIGhhbmRsZSBzcGVjaWZpYyBjYXNlcyBmb3IgUlBDcyBpZSBQTEFZX1BBVVNFIC8gT0tcblxuICAgICAgICAgICAgLy8gVE9ETyBjcmVhdGUgYSBjb3JyZWxhdGlvbiBpZCBnZW5lcmF0b3IgYW5kIGhhbmRsZSB0aGlzIGluIHRoZSBSUEMgY2xhc3Nlc1xuICAgICAgICAgICAgaWYgKHJwY01lc3NhZ2UgaW5zdGFuY2VvZiBScGNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJwY01lc3NhZ2UuZ2V0RnVuY3Rpb25OYW1lICE9PSBGdW5jdGlvbklELlJlZ2lzdGVyQXBwSW50ZXJmYWNlKSB7IC8vIFJBSSBoYXMgYSBhIHByb3RlY3RlZCBpZFxuICAgICAgICAgICAgICAgICAgICBycGNNZXNzYWdlLnNldENvcnJlbGF0aW9uSWQoKyt0aGlzLl9tYXhDb3JyZWxhdGlvbklkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBjYW4ndCB1dGlsaXplIHRoZSBhYmlsaXR5IG9mIHByb21pc2VzIGxpa2UgdGhpc1xuICAgICAgICAgICAgICAgIGlmIChycGNNZXNzYWdlLmdldE9uUlBDUmVzcG9uc2VQcm9taXNlKCkgIT09IG51bGwgJiYgcnBjTWVzc2FnZS5nZXRPblJQQ1Jlc3BvbnNlUHJvbWlzZSgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBpbmRpdmlkdWFsIHJlc3BvbnNlIGxpc3RlbmVyIGZvciB0aGlzIFJQQyBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3BvbnNlTGlzdGVuZXJzLnNldChycGNNZXNzYWdlLmdldENvcnJlbGF0aW9uSWQoKSwgcnBjTWVzc2FnZS5nZXRPblJQQ1Jlc3BvbnNlUHJvbWlzZSgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZGxTZXNzaW9uLnNlbmRScGMocnBjTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZX1cbiAgICAgKi9cbiAgICBnZXRSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2U7XG4gICAgfVxuXG5cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UmVnaXN0ZXJBcHBJbnRlcmZhY2V9XG4gICAgKi9cbiAgICBfY3JlYXRlUmVnaXN0ZXJBcHBJbnRlcmZhY2UgKCkge1xuICAgICAgICBjb25zdCByZWdpc3RlckFwcEludGVyZmFjZSA9IG5ldyBSZWdpc3RlckFwcEludGVyZmFjZSgpO1xuICAgICAgICByZWdpc3RlckFwcEludGVyZmFjZS5zZXRTZGxNc2dWZXJzaW9uKG5ldyBTZGxNc2dWZXJzaW9uKCkuc2V0TWFqb3JWZXJzaW9uKExpZmVjeWNsZU1hbmFnZXIuTUFYX1JQQ19WRVJTSU9OLmdldE1ham9yKCkpLnNldE1pbm9yVmVyc2lvbihMaWZlY3ljbGVNYW5hZ2VyLk1BWF9SUENfVkVSU0lPTi5nZXRNaW5vcigpKS5zZXRQYXRjaFZlcnNpb24oTGlmZWN5Y2xlTWFuYWdlci5NQVhfUlBDX1ZFUlNJT04uZ2V0UGF0Y2goKSkpXG4gICAgICAgICAgICAuc2V0QXBwTmFtZSh0aGlzLl9hcHBDb25maWcuZ2V0QXBwTmFtZSgpKVxuICAgICAgICAgICAgLnNldEZ1bGxBcHBJZCh0aGlzLl9hcHBDb25maWcuZ2V0QXBwSWQoKSlcbiAgICAgICAgICAgIC5zZXROZ25NZWRpYVNjcmVlbkFwcE5hbWUodGhpcy5fYXBwQ29uZmlnLmdldFNob3J0QXBwTmFtZSgpKVxuICAgICAgICAgICAgLnNldEFwcEhtaVR5cGUodGhpcy5fYXBwQ29uZmlnLmdldEFwcFR5cGVzKCkpXG4gICAgICAgICAgICAuc2V0TGFuZ3VhZ2VEZXNpcmVkKHRoaXMuX2FwcENvbmZpZy5nZXRMYW5ndWFnZURlc2lyZWQoKSlcbiAgICAgICAgICAgIC5zZXRIbWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkKHRoaXMuX2FwcENvbmZpZy5nZXRIbWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkKCkpXG4gICAgICAgICAgICAuc2V0SXNNZWRpYUFwcGxpY2F0aW9uKHRoaXMuX2FwcENvbmZpZy5pc01lZGlhQXBwKCkpXG4gICAgICAgICAgICAuc2V0RGF5Q29sb3JTY2hlbWUodGhpcy5fYXBwQ29uZmlnLmdldERheUNvbG9yU2NoZW1lKCkpXG4gICAgICAgICAgICAuc2V0TmlnaHRDb2xvclNjaGVtZSh0aGlzLl9hcHBDb25maWcuZ2V0TmlnaHRDb2xvclNjaGVtZSgpKVxuICAgICAgICAgICAgLnNldENvcnJlbGF0aW9uSWQoTGlmZWN5Y2xlTWFuYWdlci5SRUdJU1RFUl9BUFBfSU5URVJGQUNFX0NPUlJFTEFUSU9OX0lEKTtcblxuICAgICAgICAvLyBUT0RPIEFkZCBhbGwgcG9zc2libGUgaXRlbXNcblxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJBcHBJbnRlcmZhY2U7XG4gICAgfVxuXG5cbiAgICAvKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogSU5URVJOQUwgLSBSUEMgTElTVEVORVJTICEhIFNUQVJUICEhICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICBfc2V0dXBJbnRlcm5hbFJwY0xpc3RlbmVycyAoKSB7XG4gICAgICAgIHRoaXMuX3JwY0xpc3RlbmVyID0gbmV3IFJwY0xpc3RlbmVyKCkuc2V0T25ScGNNZXNzYWdlKHJwY01lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25JRCA9IEZ1bmN0aW9uSUQudmFsdWVGb3JLZXkocnBjTWVzc2FnZS5nZXRGdW5jdGlvbk5hbWUoKSk7IC8vIHRoaXMgaXMgdGhlIG51bWJlciB2YWx1ZVxuXG5cbiAgICAgICAgICAgIHN3aXRjaCAoZnVuY3Rpb25JRCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25JRC5SZWdpc3RlckFwcEludGVyZmFjZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc1JhaVJlc3BvbnNlKHJwY01lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEZ1bmN0aW9uSUQuT25ITUlTdGF0dXM6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VuZCBhIHNpbmdsZSBvblByb3h5Q29ubmVjdGVkLCB3aGVuIHdlIGdvIGZyb20gYSBudWxsIEhNSSBsZXZlbCB0byBhIGRlZmluZWQgSE1JIGxldmVsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZEluaXQgPSBycGNNZXNzYWdlLmdldEhNSUxldmVsKCkgIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHJwY01lc3NhZ2UuZ2V0SE1JTGV2ZWwoKSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLl9jdXJyZW50SE1JU3RhdHVzID09PSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRITUlTdGF0dXMgPSBycGNNZXNzYWdlLmdldEhNSUxldmVsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpZmVjeWNsZUxpc3RlbmVyICE9PSBudWxsICYmIHRoaXMuX2xpZmVjeWNsZUxpc3RlbmVyICE9PSB1bmRlZmluZWQgJiYgc2hvdWxkSW5pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlmZWN5Y2xlTGlzdGVuZXIub25Qcm94eUNvbm5lY3RlZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBSUEMgbm90IGhhbmRsZWQgeWV0IGluIExDTVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZFJwY0xpc3RlbmVyKEZ1bmN0aW9uSUQuUmVnaXN0ZXJBcHBJbnRlcmZhY2UsIHRoaXMuX3JwY0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5hZGRScGNMaXN0ZW5lcihGdW5jdGlvbklELk9uSE1JU3RhdHVzLCB0aGlzLl9ycGNMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2V9IHJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2VcbiAgICAgKi9cbiAgICBfcHJvY2Vzc1JhaVJlc3BvbnNlIChyZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlKSB7XG4gICAgICAgIC8vIENhY2hlIHRoaXMgUkFJIFJlc3BvbnNlIGFzIGl0IGNhbiBiZSB1c2VkIGxhdGVyXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UgPSByZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlO1xuXG4gICAgICAgIC8vICBUT0RPIEtFWV9TRExfTVNHX1ZFUlNJT04gdnMgS0VZX1NZTkNfTVNHX1ZFUlNJT04gc2RsVmVyc2lvbjogJ3tHSVRfQ09NTUlUfScsIEkgdGhpbmsgdGhlIGtleSBuYW1lIGNoYW5nZVxuICAgICAgICAvLyBpcyBtZWFudCB0byBtYWtlIHRoaW5ncyBjbGVhcmVyIGFib3V0IHRoaXMgYmVpbmcgYW4gc2RsIHZlcnNpb24gd2hpY2ggaXMgbm90IHNwZWNpZmljIHRvIGZvcmQncyBzeW5jLlxuICAgICAgICAvLyBUaGVyZSBpcyBhIGtleSBjYWxsZWQgc2RsVmVyc2lvbiB0aGF0IGlzIHJlc3BvbmRpbmcgd2l0aCB7R0lUX0NPTU1JVH0gdGhhdCBJJ20gdW5zdXJlIHdoYXQgaXQgaXMgc3VwcG9zZWQgdG8gZG8uXG4gICAgICAgIGNvbnN0IG1zZ1ZlcnNpb24gPSByZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLmdldFNkbE1zZ1ZlcnNpb24oKTtcblxuICAgICAgICBpZiAobXNnVmVyc2lvbiAhPT0gbnVsbCAmJiBtc2dWZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JwY1NwZWNWZXJzaW9uID0gbmV3IFZlcnNpb24obXNnVmVyc2lvbi5nZXRNYWpvclZlcnNpb24oKSwgbXNnVmVyc2lvbi5nZXRNYWpvclZlcnNpb24oKSwgbXNnVmVyc2lvbi5nZXRQYXRjaFZlcnNpb24oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9ycGNTcGVjVmVyc2lvbiA9IExpZmVjeWNsZU1hbmFnZXIuTUFYX1JQQ19WRVJTSU9OO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBUT0RPIGNoZWNrIGFnYWluc3QgbWluIFJQQyBzcGVjIHZlcnNpb24gY29uZmlnXG5cbiAgICAgICAgLy8gVE9ETyBwYXJzZSBSQUkgZm9yIHN5c3RlbSBjYXBhYmlsaXRpZXNcbiAgICB9XG59XG5cbkxpZmVjeWNsZU1hbmFnZXIuTUFYX1JQQ19WRVJTSU9OID0gbmV3IFZlcnNpb24oNiwgMCwgMCk7XG5MaWZlY3ljbGVNYW5hZ2VyLlJFR0lTVEVSX0FQUF9JTlRFUkZBQ0VfQ09SUkVMQVRJT05fSUQgPSA2NTUyOTtcbkxpZmVjeWNsZU1hbmFnZXIuVU5SRUdJU1RFUl9BUFBfSU5URVJGQUNFX0NPUlJFTEFUSU9OX0lEID0gNjU1MzA7XG5cblxuZXhwb3J0IHsgTGlmZWN5Y2xlTWFuYWdlciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdGb3JtYXQgfSBmcm9tICcuL1ZpZGVvU3RyZWFtaW5nRm9ybWF0LmpzJztcbmltcG9ydCB7IEltYWdlUmVzb2x1dGlvbiB9IGZyb20gJy4vSW1hZ2VSZXNvbHV0aW9uLmpzJztcblxuY2xhc3MgVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5IGV4dGVuZHMgUnBjU3RydWN0IHtcbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZVJlc29sdXRpb259IHZhbFxuICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5fVxuICAgICovXG4gICAgc2V0UHJlZmVycmVkUmVzb2x1dGlvbiAodmFsKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEltYWdlUmVzb2x1dGlvbiwgdmFsKTtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9QUkVGRVJSRURfUkVTT0xVVElPTiwgdmFsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtJbWFnZVJlc29sdXRpb259XG4gICAgKi9cbiAgICBnZXRQcmVmZXJyZWRSZXNvbHV0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEltYWdlUmVzb2x1dGlvbiwgVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9QUkVGRVJSRURfUkVTT0xVVElPTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHl9XG4gICAgKi9cbiAgICBzZXRNYXhCaXRyYXRlICh2YWwpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9NQVhfQklUUkFURSwgdmFsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgKi9cbiAgICBnZXRNYXhCaXRyYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfTUFYX0JJVFJBVEUpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1ZpZGVvU3RyZWFtaW5nRm9ybWF0W119IHZhbFxuICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5fVxuICAgICovXG4gICAgc2V0U3VwcG9ydGVkRm9ybWF0cyAodmFsKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKFZpZGVvU3RyZWFtaW5nRm9ybWF0LCB2YWwsIHRydWUpO1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX1NVUFBPUlRFRF9GT1JNQVRTLCB2YWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdGb3JtYXRbXX1cbiAgICAqL1xuICAgIGdldFN1cHBvcnRlZEZvcm1hdHMgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPYmplY3QoVmlkZW9TdHJlYW1pbmdGb3JtYXQsIFZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfU1VQUE9SVEVEX0ZPUk1BVFMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtCb29sZWFufSB2YWxcbiAgICAqIEByZXR1cm4ge1ZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eX1cbiAgICAqL1xuICAgIHNldEhhcHRpY1NwYXRpYWxEYXRhU3VwcG9ydGVkICh2YWwpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9IQVBUSUNfU1BBVElBTF9EQVRBX1NVUFBPUlRFRCwgdmFsKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0SGFwdGljU3BhdGlhbERhdGFTdXBwb3J0ZWQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9IQVBUSUNfU1BBVElBTF9EQVRBX1NVUFBPUlRFRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge251bWJlcn0gdmFsXG4gICAgKiBAcmV0dXJuIHtWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHl9XG4gICAgKi9cbiAgICBzZXREaWFnb25hbFNjcmVlblNpemUgKHZhbCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX0RJQUdPTkFMX1NDUkVFTl9TSVpFLCB2YWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAqL1xuICAgIGdldERpYWdvbmFsU2NyZWVuU2l6ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX0RJQUdPTkFMX1NDUkVFTl9TSVpFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWxcbiAgICAqIEByZXR1cm4ge1ZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eX1cbiAgICAqL1xuICAgIHNldFBpeGVsUGVySW5jaCAodmFsKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKFZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfUElYRUxfUEVSX0lOQ0gsIHZhbCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICovXG4gICAgZ2V0UGl4ZWxQZXJJbmNoICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfUElYRUxfUEVSX0lOQ0gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbFxuICAgICogQHJldHVybiB7VmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5fVxuICAgICovXG4gICAgc2V0U2NhbGUgKHZhbCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX1NDQUxFLCB2YWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAqL1xuICAgIGdldFNjYWxlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKFZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfU0NBTEUpO1xuICAgIH1cbn1cblxuVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9QUkVGRVJSRURfUkVTT0xVVElPTiA9ICdwcmVmZXJyZWRSZXNvbHV0aW9uJztcblZpZGVvU3RyZWFtaW5nQ2FwYWJpbGl0eS5LRVlfTUFYX0JJVFJBVEUgPSAnbWF4Qml0cmF0ZSc7XG5WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX1NVUFBPUlRFRF9GT1JNQVRTID0gJ3N1cHBvcnRlZEZvcm1hdHMnO1xuVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LktFWV9IQVBUSUNfU1BBVElBTF9EQVRBX1NVUFBPUlRFRCA9ICdoYXB0aWNTcGF0aWFsRGF0YVN1cHBvcnRlZCc7XG5WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX0RJQUdPTkFMX1NDUkVFTl9TSVpFID0gJ2RpYWdvbmFsU2NyZWVuU2l6ZSc7XG5WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX1BJWEVMX1BFUl9JTkNIID0gJ3BpeGVsUGVySW5jaCc7XG5WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuS0VZX1NDQUxFID0gJ3NjYWxlJztcblxuZXhwb3J0IHsgVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5IH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTZGxTZXJ2aWNlTGlzdGVuZXJcbiAqL1xuY2xhc3MgU2RsU2VydmljZUxpc3RlbmVyIHtcbiAgICAvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fb25TZXJ2aWNlU3RhcnRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uU2VydmljZUVuZGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25TZXJ2aWNlRXJyb3IgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFxuICAgICAqL1xuICAgIHNldE9uU2VydmljZVN0YXJ0ZWQgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uU2VydmljZVN0YXJ0ZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPblNlcnZpY2VFbmRlZCAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25TZXJ2aWNlRW5kZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPblNlcnZpY2VFcnJvciAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25TZXJ2aWNlRXJyb3IgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFNlc3Npb259IHNlc3Npb24gXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0VuY3J5cHRlZCBcbiAgICAgKi9cbiAgICBvblNlcnZpY2VTdGFydGVkIChzZXNzaW9uLCBzZXJ2aWNlVHlwZSwgaXNFbmNyeXB0ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblNlcnZpY2VTdGFydGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vblNlcnZpY2VTdGFydGVkKHNlc3Npb24sIHNlcnZpY2VUeXBlLCBpc0VuY3J5cHRlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFNlc3Npb259IHNlc3Npb24gXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgXG4gICAgICovXG4gICAgb25TZXJ2aWNlRW5kZWQgKHNlc3Npb24sIHNlcnZpY2VUeXBlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25TZXJ2aWNlRW5kZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uU2VydmljZUVuZGVkKHNlc3Npb24sIHNlcnZpY2VUeXBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsU2Vzc2lvbn0gc2Vzc2lvbiBcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uIFxuICAgICAqL1xuICAgIG9uU2VydmljZUVycm9yIChzZXNzaW9uLCBzZXJ2aWNlVHlwZSwgcmVhc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25TZXJ2aWNlRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uU2VydmljZUVycm9yKHNlc3Npb24sIHNlcnZpY2VUeXBlLCByZWFzb24pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBTZGxTZXJ2aWNlTGlzdGVuZXIgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgVHJhbnNwb3J0QmFzZSB9IGZyb20gJy4vVHJhbnNwb3J0QmFzZS5qcyc7XG5pbXBvcnQgeyBTZGxQc20gfSBmcm9tICcuL1NkbFBzbS5qcyc7XG5cbmNsYXNzIEN1c3RvbVRyYW5zcG9ydCBleHRlbmRzIFRyYW5zcG9ydEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICh0cmFuc3BvcnRDb25maWcsIHRyYW5zcG9ydENhbGxiYWNrID0gbnVsbCkge1xuICAgICAgICBzdXBlcih0cmFuc3BvcnRDb25maWcsIHRyYW5zcG9ydENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5faXNSdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnRDYWxsYmFja30gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZXRUcmFuc3BvcnRDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIHRyYW5zcG9ydCBjYWxsYmFjayBmb3IgY29ubmVjdGlvbiBlc3RhYmxpc2hlZFxuICAgICAqL1xuICAgIHN0YXJ0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc3BvcnRDYWxsYmFjay5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIHRyYW5zcG9ydCBjYWxsYmFjayBmb3IgY29ubmVjdGlvbiB0ZXJtaW5hdGVkXG4gICAgICovXG4gICAgc3RvcCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sub25Db25uZWN0aW9uVGVybWluYXRlZCgnVHJhbnNwb3J0IHRvbGQgdG8gc3RvcCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIHRyYW5zcG9ydCBjYWxsYmFjayBmb3IgYW4gZXJyb3JcbiAgICAgKi9cbiAgICBvbkVycm9yICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFuc3BvcnRDYWxsYmFjay5vbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udGVudHMgaW4gdGhlIHBhY2tldCBzaG91bGQgYmUgc2VudCBvdXQgdGhyb3VnaCB0aGUgdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHBhY2tldFxuICAgICAqL1xuICAgIHNlbmRQYWNrZXQgKHBhY2tldCkge1xuICAgICAgICBjb25zdCBieXRlcyA9IHBhY2tldC50b1BhY2tldCgpO1xuICAgICAgICB0aGlzLm9uU2VuZFBhY2tldChieXRlcywgMCwgYnl0ZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwIGluc3RhbnRpYXRpbmcgdGhpcyBjbGFzcyBuZWVkcyB0byBpbXBsZW1lbnQgdGhpcyBtZXRob2QhIHNlbmRQYWNrZXQgY2FsbHMgdGhpcyBtZXRob2RcbiAgICAgKiBAcGFyYW0ge1VJbnQ4QXJyYXl9IGJ5dGVzXG4gICAgICovXG4gICAgb25TZW5kUGFja2V0IChieXRlcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ29uU2VuZFBhY2tldCBtZXRob2QgbXVzdCBiZSBvdmVycmlkZGVuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBieXRlIGJ1ZmZlciB3YXMgcGFzc2VkIGhlcmUgZm9yIHByb2Nlc3NpbmdcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IG1lc3NhZ2VcbiAgICAgKi9cbiAgICBvbkJ5dGVCdWZmZXJSZWNlaXZlZCAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9tdWx0aUJ5dGVIYW5kbGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIHJlY2VpdmVkIGRhdGEgZnJvbSB0aGUgaW50ZXJuYWwgcXVldWVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tdWx0aUJ5dGVIYW5kbGVyICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWU7XG5cbiAgICAgICAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHVpbnQ4ID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiB1aW50OCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUJ5dGUoYnl0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZWVkcyBhIGJ5dGUgdGhyb3VnaCB0aGUgaW50ZXJuYWwgUFNNXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGUgLSB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlQnl0ZSAoYnl0ZSkge1xuICAgICAgICBjb25zdCBzZGxQc20gPSB0aGlzLl9zZGxQc207XG5cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHNkbFBzbS5oYW5kbGVCeXRlKGJ5dGUpO1xuICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2ZhaWxlZCcsIHNkbFBzbSk7XG4gICAgICAgICAgICBzZGxQc20ucmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0ZpbmlzaGVkID0gc2RsUHNtLmdldFN0YXRlKCkgPT09IFNkbFBzbS5GSU5JU0hFRF9TVEFURTtcblxuICAgICAgICBpZiAoaXNGaW5pc2hlZCkge1xuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gc2RsUHNtLmdldEZvcm1lZFBhY2tldCgpO1xuICAgICAgICAgICAgc2RsUHNtLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNwb3J0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc3BvcnRDYWxsYmFjay5vblBhY2tldFJlY2VpdmVkKHBhY2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZXhwb3J0IHsgQ3VzdG9tVHJhbnNwb3J0IH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVHJhbnNwb3J0Q29uZmlnQmFzZVxuICogQHByb3BlcnR5IHtUcmFuc3BvcnRUeXBlfSBfdHJhbnNwb3J0VHlwZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0VHJhbnNwb3J0VHlwZVxuICovXG5jbGFzcyBUcmFuc3BvcnRDb25maWdCYXNlIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydFR5cGV9IHRyYW5zcG9ydFR5cGUgLSBlbnVtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKHRyYW5zcG9ydFR5cGUpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0VHlwZSA9IHRyYW5zcG9ydFR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0VHlwZX1cbiAgICAgKi9cbiAgICBnZXRUcmFuc3BvcnRUeXBlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydFR5cGU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUcmFuc3BvcnRDb25maWdCYXNlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFRyYW5zcG9ydENvbmZpZ0Jhc2UgfSBmcm9tICcuL1RyYW5zcG9ydENvbmZpZ0Jhc2UuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0VHlwZSB9IGZyb20gJy4vZW51bXMvVHJhbnNwb3J0VHlwZS5qcyc7XG5cbmNsYXNzIEN1c3RvbVRyYW5zcG9ydENvbmZpZyBleHRlbmRzIFRyYW5zcG9ydENvbmZpZ0Jhc2Uge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge0N1c3RvbVRyYW5zcG9ydH0gY3VzdG9tVHJhbnNwb3J0IC0gQW4gaW5zdGFuY2Ugb2YgYSBjdXN0b20gdHJhbnNwb3J0XG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoY3VzdG9tVHJhbnNwb3J0KSB7XG4gICAgICAgIHN1cGVyKFRyYW5zcG9ydFR5cGUuQ1VTVE9NKTtcbiAgICAgICAgdGhpcy5fY3VzdG9tVHJhbnNwb3J0ID0gY3VzdG9tVHJhbnNwb3J0O1xuICAgIH1cblxuICAgIGdldFRyYW5zcG9ydFR5cGUgKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNwb3J0VHlwZS5DVVNUT007XG4gICAgfVxuXG4gICAgZ2V0VHJhbnNwb3J0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbVRyYW5zcG9ydDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEN1c3RvbVRyYW5zcG9ydENvbmZpZyB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBTc2xDb25maWcge1xuICAgIGNvbnN0cnVjdG9yIChwZW1DZXJ0aWZpY2F0ZSA9IG51bGwsIHByaXZhdGVLZXkgPSBudWxsLCBwYXNzd29yZCA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcGVtQ2VydGlmaWNhdGUgPSBwZW1DZXJ0aWZpY2F0ZTtcbiAgICAgICAgdGhpcy5fcHJpdmF0ZUtleSA9IHByaXZhdGVLZXk7XG4gICAgICAgIHRoaXMuX3Bhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBQRU0gQ2VydGlmaWNhdGVcbiAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAqL1xuICAgIGdldFBlbUNlcnRpZmljYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbUNlcnRpZmljYXRlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgUHJpdmF0ZSBLZXlcbiAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAqL1xuICAgIGdldFByaXZhdGVLZXkgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpdmF0ZUtleTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIHBhc3N3b3JkXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgKi9cbiAgICBnZXRQYXNzd29yZCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXNzd29yZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFNzbENvbmZpZyB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFRyYW5zcG9ydFR5cGUgfSBmcm9tICcuL2VudW1zL1RyYW5zcG9ydFR5cGUuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0Q29uZmlnQmFzZSB9IGZyb20gJy4vVHJhbnNwb3J0Q29uZmlnQmFzZS5qcyc7XG5cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBUcmFuc3BvcnRDb25maWdCYXNlXG4gKiBAcHJvcGVydHkge1RyYW5zcG9ydFR5cGV9IF90cmFuc3BvcnRUeXBlXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBnZXRUcmFuc3BvcnRUeXBlXG4gKi9cbmNsYXNzIFdlYlNvY2tldENsaWVudENvbmZpZyBleHRlbmRzIFRyYW5zcG9ydENvbmZpZ0Jhc2Uge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0VHlwZX0gdHJhbnNwb3J0VHlwZSAtIGVudW1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAoaG9zdCwgcG9ydCkge1xuICAgICAgICBzdXBlcihUcmFuc3BvcnRUeXBlLldFQlNPQ0tFVF9DTElFTlQpO1xuXG4gICAgICAgIHRoaXMuX2hvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLl9wb3J0ID0gcG9ydDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIFN0cmluZ1xuICAgICAqL1xuICAgIGdldEhvc3QgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faG9zdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIE51bWJlclxuICAgICAqL1xuICAgIGdldFBvcnQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9ydDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFdlYlNvY2tldENsaWVudENvbmZpZyB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBUcmFuc3BvcnRSZWNvcmQge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge1RyYW5zcG9ydFR5cGV9IHRyYW5zcG9ydFR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgdHJhbnNwb3J0XG4gICAgKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzc1xuICAgICovXG4gICAgY29uc3RydWN0b3IgKHRyYW5zcG9ydFR5cGUsIGFkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRyYW5zcG9ydFR5cGU7XG4gICAgICAgIHRoaXMuX2FkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cblxuICAgIGdldFR5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICB9XG5cbiAgICBnZXRBZGRyZXNzICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZHJlc3M7XG4gICAgfVxuXG4gICAgZXF1YWxzIChvYmopIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG9iaiBpbnN0YW5jZW9mIFRyYW5zcG9ydFJlY29yZFxuICAgICAgICAgICAgJiYgb2JqLmdldFR5cGUgIT09IG51bGxcbiAgICAgICAgICAgICYmIG9iai5nZXRUeXBlKCkgPT09IHRoaXMuZ2V0VHlwZSgpXG4gICAgICAgICAgICAmJiBvYmouZ2V0QWRkcmVzcygpID09PSB0aGlzLmdldEFkZHJlc3MoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIGBUcmFuc3BvcnQgVHlwZTogJHt0aGlzLl90eXBlLm5hbWUoKX0gXFxuIEFkZHJlc3M6ICR7dGhpcy5fYWRkcmVzc31gO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNwb3J0UmVjb3JkIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJy4vc3JjL21hbmFnZXIvQXBwQ29uZmlnLmpzJztcbmltcG9ydCB7IExpZmVjeWNsZUxpc3RlbmVyIH0gZnJvbSAnLi9zcmMvbWFuYWdlci9saWZlY3ljbGUvTGlmZWN5Y2xlTGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgTGlmZWN5Y2xlTWFuYWdlciB9IGZyb20gJy4vc3JjL21hbmFnZXIvbGlmZWN5Y2xlL0xpZmVjeWNsZU1hbmFnZXIuanMnO1xuaW1wb3J0IHsgQmluYXJ5RnJhbWVIZWFkZXIgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9CaW5hcnlGcmFtZUhlYWRlci5qcyc7XG5pbXBvcnQgeyBNZXNzYWdlRnJhbWVBc3NlbWJsZXIgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9NZXNzYWdlRnJhbWVBc3NlbWJsZXIuanMnO1xuaW1wb3J0IHsgTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyIH0gZnJvbSAnLi9zcmMvcHJvdG9jb2wvTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyLmpzJztcbmltcG9ydCB7IFNkbFBhY2tldCB9IGZyb20gJy4vc3JjL3Byb3RvY29sL1NkbFBhY2tldC5qcyc7XG5pbXBvcnQgeyBTZGxQYWNrZXRGYWN0b3J5IH0gZnJvbSAnLi9zcmMvcHJvdG9jb2wvU2RsUGFja2V0RmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBTZGxQcm90b2NvbCB9IGZyb20gJy4vc3JjL3Byb3RvY29sL1NkbFByb3RvY29sLmpzJztcbmltcG9ydCB7IFNkbFByb3RvY29sQmFzZSB9IGZyb20gJy4vc3JjL3Byb3RvY29sL1NkbFByb3RvY29sQmFzZS5qcyc7XG5pbXBvcnQgeyBTZGxQcm90b2NvbExpc3RlbmVyIH0gZnJvbSAnLi9zcmMvcHJvdG9jb2wvU2RsUHJvdG9jb2xMaXN0ZW5lci5qcyc7XG5pbXBvcnQgeyBDb250cm9sRnJhbWVUYWdzIH0gZnJvbSAnLi9zcmMvcHJvdG9jb2wvZW51bXMvQ29udHJvbEZyYW1lVGFncy5qcyc7XG5pbXBvcnQgeyBGcmFtZVR5cGUgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9lbnVtcy9GcmFtZVR5cGUuanMnO1xuaW1wb3J0IHsgU2VydmljZVR5cGUgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9lbnVtcy9TZXJ2aWNlVHlwZS5qcyc7XG5pbXBvcnQgeyBScGNDcmVhdG9yIH0gZnJvbSAnLi9zcmMvcnBjL1JwY0NyZWF0b3IuanMnO1xuaW1wb3J0IHsgUnBjTGlzdGVuZXIgfSBmcm9tICcuL3NyYy9ycGMvUnBjTGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vc3JjL3JwYy9ScGNNZXNzYWdlLmpzJztcbmltcG9ydCB7IFJwY05vdGlmaWNhdGlvbiB9IGZyb20gJy4vc3JjL3JwYy9ScGNOb3RpZmljYXRpb24uanMnO1xuaW1wb3J0IHsgUnBjUmVxdWVzdCB9IGZyb20gJy4vc3JjL3JwYy9ScGNSZXF1ZXN0LmpzJztcbmltcG9ydCB7IFJwY1Jlc3BvbnNlIH0gZnJvbSAnLi9zcmMvcnBjL1JwY1Jlc3BvbnNlLmpzJztcbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4vc3JjL3JwYy9ScGNTdHJ1Y3QuanMnO1xuaW1wb3J0IHsgQXBwSE1JVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9BcHBITUlUeXBlLmpzJztcbmltcG9ydCB7IEF1ZGlvU3RyZWFtaW5nU3RhdGUgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvQXVkaW9TdHJlYW1pbmdTdGF0ZS5qcyc7XG5pbXBvcnQgeyBBdWRpb1R5cGUgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvQXVkaW9UeXBlLmpzJztcbmltcG9ydCB7IEJpdHNQZXJTYW1wbGUgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvQml0c1BlclNhbXBsZS5qcyc7XG5pbXBvcnQgeyBCdXR0b25OYW1lIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL0J1dHRvbk5hbWUuanMnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyU2V0IH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL0NoYXJhY3RlclNldC5qcyc7XG5pbXBvcnQgeyBEaXNwbGF5VHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9EaXNwbGF5VHlwZS5qcyc7XG5pbXBvcnQgeyBGaWxlVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9GaWxlVHlwZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL0Z1bmN0aW9uSUQuanMnO1xuaW1wb3J0IHsgSE1JTGV2ZWwgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvSE1JTGV2ZWwuanMnO1xuaW1wb3J0IHsgSG1pWm9uZUNhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9IbWlab25lQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IEltYWdlRmllbGROYW1lIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL0ltYWdlRmllbGROYW1lLmpzJztcbmltcG9ydCB7IEltYWdlVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9JbWFnZVR5cGUuanMnO1xuaW1wb3J0IHsgTGFuZ3VhZ2UgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvTGFuZ3VhZ2UuanMnO1xuaW1wb3J0IHsgTWVkaWFDbG9ja0Zvcm1hdCB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9NZWRpYUNsb2NrRm9ybWF0LmpzJztcbmltcG9ydCB7IE1ldGFkYXRhVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9NZXRhZGF0YVR5cGUuanMnO1xuaW1wb3J0IHsgUHJlcmVjb3JkZWRTcGVlY2ggfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvUHJlcmVjb3JkZWRTcGVlY2guanMnO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL1Jlc3VsdC5qcyc7XG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL1JwY1R5cGUuanMnO1xuaW1wb3J0IHsgU2FtcGxpbmdSYXRlIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL1NhbXBsaW5nUmF0ZS5qcyc7XG5pbXBvcnQgeyBTb2Z0QnV0dG9uVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9Tb2Z0QnV0dG9uVHlwZS5qcyc7XG5pbXBvcnQgeyBTcGVlY2hDYXBhYmlsaXRpZXMgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvU3BlZWNoQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IFN5c3RlbUFjdGlvbiB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9TeXN0ZW1BY3Rpb24uanMnO1xuaW1wb3J0IHsgU3lzdGVtQ29udGV4dCB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9TeXN0ZW1Db250ZXh0LmpzJztcbmltcG9ydCB7IFRleHRBbGlnbm1lbnQgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvVGV4dEFsaWdubWVudC5qcyc7XG5pbXBvcnQgeyBUZXh0RmllbGROYW1lIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL1RleHRGaWVsZE5hbWUuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdDb2RlYyB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9WaWRlb1N0cmVhbWluZ0NvZGVjLmpzJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nUHJvdG9jb2wgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvVmlkZW9TdHJlYW1pbmdQcm90b2NvbC5qcyc7XG5pbXBvcnQgeyBWaWRlb1N0cmVhbWluZ1N0YXRlIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL1ZpZGVvU3RyZWFtaW5nU3RhdGUuanMnO1xuaW1wb3J0IHsgVnJDYXBhYmlsaXRpZXMgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvVnJDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgQWRkQ29tbWFuZCB9IGZyb20gJy4vc3JjL3JwYy9tZXNzYWdlcy9BZGRDb21tYW5kLmpzJztcbmltcG9ydCB7IEFkZENvbW1hbmRSZXNwb25zZSB9IGZyb20gJy4vc3JjL3JwYy9tZXNzYWdlcy9BZGRDb21tYW5kUmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgT25IbWlTdGF0dXMgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvT25IbWlTdGF0dXMuanMnO1xuaW1wb3J0IHsgT25MYW5ndWFnZUNoYW5nZSB9IGZyb20gJy4vc3JjL3JwYy9tZXNzYWdlcy9Pbkxhbmd1YWdlQ2hhbmdlLmpzJztcbmltcG9ydCB7IFB1dEZpbGUgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvUHV0RmlsZS5qcyc7XG5pbXBvcnQgeyBQdXRGaWxlUmVzcG9uc2UgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvUHV0RmlsZVJlc3BvbnNlLmpzJztcbmltcG9ydCB7IFJlZ2lzdGVyQXBwSW50ZXJmYWNlIH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1JlZ2lzdGVyQXBwSW50ZXJmYWNlLmpzJztcbmltcG9ydCB7IFJlZ2lzdGVyQXBwSW50ZXJmYWNlUmVzcG9uc2UgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTZXRBcHBJY29uIH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1NldEFwcEljb24uanMnO1xuaW1wb3J0IHsgU2V0QXBwSWNvblJlc3BvbnNlIH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1NldEFwcEljb25SZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTaG93IH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1Nob3cuanMnO1xuaW1wb3J0IHsgU2hvd1Jlc3BvbnNlIH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1Nob3dSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBVbnJlZ2lzdGVyQXBwSW50ZXJmYWNlIH0gZnJvbSAnLi9zcmMvcnBjL21lc3NhZ2VzL1VucmVnaXN0ZXJBcHBJbnRlcmZhY2UuanMnO1xuaW1wb3J0IHsgQXBwSW5mbyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0FwcEluZm8uanMnO1xuaW1wb3J0IHsgQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0F1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgQnV0dG9uQ2FwYWJpbGl0aWVzIH0gZnJvbSAnLi9zcmMvcnBjL3N0cnVjdHMvQnV0dG9uQ2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IERldmljZUluZm8gfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9EZXZpY2VJbmZvLmpzJztcbmltcG9ydCB7IERpc3BsYXlDYXBhYmlsaXRpZXMgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9EaXNwbGF5Q2FwYWJpbGl0aWVzLmpzJztcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9HcmlkLmpzJztcbmltcG9ydCB7IEhNSUNhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0hNSUNhcGFiaWxpdGllcy5qcyc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0ltYWdlLmpzJztcbmltcG9ydCB7IEltYWdlRmllbGQgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9JbWFnZUZpZWxkLmpzJztcbmltcG9ydCB7IEltYWdlUmVzb2x1dGlvbiB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0ltYWdlUmVzb2x1dGlvbi5qcyc7XG5pbXBvcnQgeyBNZW51UGFyYW1zIH0gZnJvbSAnLi9zcmMvcnBjL3N0cnVjdHMvTWVudVBhcmFtcy5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVRhZ3MgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9NZXRhZGF0YVRhZ3MuanMnO1xuaW1wb3J0IHsgTW9kdWxlSW5mbyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL01vZHVsZUluZm8uanMnO1xuaW1wb3J0IHsgUHJlc2V0QmFua0NhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL1ByZXNldEJhbmtDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgUkdCQ29sb3IgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9SR0JDb2xvci5qcyc7XG5pbXBvcnQgeyBTY3JlZW5QYXJhbXMgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9TY3JlZW5QYXJhbXMuanMnO1xuaW1wb3J0IHsgU2RsTXNnVmVyc2lvbiB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL1NkbE1zZ1ZlcnNpb24uanMnO1xuaW1wb3J0IHsgU29mdEJ1dHRvbiB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL1NvZnRCdXR0b24uanMnO1xuaW1wb3J0IHsgU29mdEJ1dHRvbkNhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL1NvZnRCdXR0b25DYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgVFRTQ2h1bmsgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9UVFNDaHVuay5qcyc7XG5pbXBvcnQgeyBUZW1wbGF0ZUNvbG9yU2NoZW1lIH0gZnJvbSAnLi9zcmMvcnBjL3N0cnVjdHMvVGVtcGxhdGVDb2xvclNjaGVtZS5qcyc7XG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9UZXh0RmllbGQuanMnO1xuaW1wb3J0IHsgVG91Y2hFdmVudENhcGFiaWxpdGllcyB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL1RvdWNoRXZlbnRDYXBhYmlsaXRpZXMuanMnO1xuaW1wb3J0IHsgVmVoaWNsZVR5cGUgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9WZWhpY2xlVHlwZS5qcyc7XG5pbXBvcnQgeyBWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9WaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkuanMnO1xuaW1wb3J0IHsgVmlkZW9TdHJlYW1pbmdGb3JtYXQgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9WaWRlb1N0cmVhbWluZ0Zvcm1hdC5qcyc7XG5pbXBvcnQgeyBTZGxTZXJ2aWNlTGlzdGVuZXIgfSBmcm9tICcuL3NyYy9zZXNzaW9uL1NkbFNlcnZpY2VMaXN0ZW5lci5qcyc7XG5pbXBvcnQgeyBTZGxTZXNzaW9uIH0gZnJvbSAnLi9zcmMvc2Vzc2lvbi9TZGxTZXNzaW9uLmpzJztcbmltcG9ydCB7IFNkbFNlc3Npb25MaXN0ZW5lciB9IGZyb20gJy4vc3JjL3Nlc3Npb24vU2RsU2Vzc2lvbkxpc3RlbmVyLmpzJztcbmltcG9ydCB7IFNlcnZpY2VMaXN0ZW5lck1hcCB9IGZyb20gJy4vc3JjL3Nlc3Npb24vU2VydmljZUxpc3RlbmVyTWFwLmpzJztcbmltcG9ydCB7IFZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyB9IGZyb20gJy4vc3JjL3N0cmVhbWluZy92aWRlby9WaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMuanMnO1xuaW1wb3J0IHsgQ3VzdG9tVHJhbnNwb3J0IH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L0N1c3RvbVRyYW5zcG9ydC5qcyc7XG5pbXBvcnQgeyBDdXN0b21UcmFuc3BvcnRDb25maWcgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvQ3VzdG9tVHJhbnNwb3J0Q29uZmlnLmpzJztcbmltcG9ydCB7IFNkbFBzbSB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9TZGxQc20uanMnO1xuaW1wb3J0IHsgU3NsQ29uZmlnIH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L1NzbENvbmZpZy5qcyc7XG5pbXBvcnQgeyBUcmFuc3BvcnRCYXNlIH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydEJhc2UuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0Q2FsbGJhY2sgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0Q2FsbGJhY2suanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0Q29uZmlnQmFzZSB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9UcmFuc3BvcnRDb25maWdCYXNlLmpzJztcbmltcG9ydCB7IFRyYW5zcG9ydExpc3RlbmVyIH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydExpc3RlbmVyLmpzJztcbmltcG9ydCB7IFRyYW5zcG9ydE1hbmFnZXIgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0TWFuYWdlci5qcyc7XG5pbXBvcnQgeyBUcmFuc3BvcnRNYW5hZ2VyQmFzZSB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9UcmFuc3BvcnRNYW5hZ2VyQmFzZS5qcyc7XG5pbXBvcnQgeyBXZWJTb2NrZXRDbGllbnQgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvV2ViU29ja2V0Q2xpZW50LmpzJztcbmltcG9ydCB7IFdlYlNvY2tldENsaWVudENvbmZpZyB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9XZWJTb2NrZXRDbGllbnRDb25maWcuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0VHlwZSB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9lbnVtcy9UcmFuc3BvcnRUeXBlLmpzJztcbmltcG9ydCB7IFRyYW5zcG9ydFJlY29yZCB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC91dGlsL1RyYW5zcG9ydFJlY29yZC5qcyc7XG5pbXBvcnQgeyBBcnJheVRvb2xzIH0gZnJvbSAnLi9zcmMvdXRpbC9BcnJheVRvb2xzLmpzJztcbmltcG9ydCB7IEJpdENvbnZlcnRlciB9IGZyb20gJy4vc3JjL3V0aWwvQml0Q29udmVydGVyLmpzJztcbmltcG9ydCB7IEJzb24gfSBmcm9tICcuL3NyYy91dGlsL0Jzb24uanMnO1xuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4vc3JjL3V0aWwvRW51bS5qcyc7XG5pbXBvcnQgeyBKc29uUnBjTWFyc2hhbGxlciB9IGZyb20gJy4vc3JjL3V0aWwvSnNvblJwY01hcnNoYWxsZXIuanMnO1xuaW1wb3J0IHsgVGV4dEVuY29kZXIgfSBmcm9tICcuL3NyYy91dGlsL1RleHRFbmNvZGVyLmpzJztcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICcuL3NyYy91dGlsL1ZlcnNpb24uanMnOyAgIFxuXG5jb25zdCBTREwgPSB7XG4gICAgbWFuYWdlcjoge1xuICAgICAgICBBcHBDb25maWcsXG4gICAgICAgIGxpZmVjeWNsZToge1xuICAgICAgICAgICAgTGlmZWN5Y2xlTGlzdGVuZXIsXG4gICAgICAgICAgICBMaWZlY3ljbGVNYW5hZ2VyLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcHJvdG9jb2w6IHtcbiAgICAgICAgQmluYXJ5RnJhbWVIZWFkZXIsXG4gICAgICAgIE1lc3NhZ2VGcmFtZUFzc2VtYmxlcixcbiAgICAgICAgTWVzc2FnZUZyYW1lRGlzYXNzZW1ibGVyLFxuICAgICAgICBTZGxQYWNrZXQsXG4gICAgICAgIFNkbFBhY2tldEZhY3RvcnksXG4gICAgICAgIFNkbFByb3RvY29sLFxuICAgICAgICBTZGxQcm90b2NvbEJhc2UsXG4gICAgICAgIFNkbFByb3RvY29sTGlzdGVuZXIsXG4gICAgICAgIGVudW1zOiB7XG4gICAgICAgICAgICBDb250cm9sRnJhbWVUYWdzLFxuICAgICAgICAgICAgRnJhbWVUeXBlLFxuICAgICAgICAgICAgU2VydmljZVR5cGUsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBycGM6IHtcbiAgICAgICAgUnBjQ3JlYXRvcixcbiAgICAgICAgUnBjTGlzdGVuZXIsXG4gICAgICAgIFJwY01lc3NhZ2UsXG4gICAgICAgIFJwY05vdGlmaWNhdGlvbixcbiAgICAgICAgUnBjUmVxdWVzdCxcbiAgICAgICAgUnBjUmVzcG9uc2UsXG4gICAgICAgIFJwY1N0cnVjdCxcbiAgICAgICAgZW51bXM6IHtcbiAgICAgICAgICAgIEFwcEhNSVR5cGUsXG4gICAgICAgICAgICBBdWRpb1N0cmVhbWluZ1N0YXRlLFxuICAgICAgICAgICAgQXVkaW9UeXBlLFxuICAgICAgICAgICAgQml0c1BlclNhbXBsZSxcbiAgICAgICAgICAgIEJ1dHRvbk5hbWUsXG4gICAgICAgICAgICBDaGFyYWN0ZXJTZXQsXG4gICAgICAgICAgICBEaXNwbGF5VHlwZSxcbiAgICAgICAgICAgIEZpbGVUeXBlLFxuICAgICAgICAgICAgRnVuY3Rpb25JRCxcbiAgICAgICAgICAgIEhNSUxldmVsLFxuICAgICAgICAgICAgSG1pWm9uZUNhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIEltYWdlRmllbGROYW1lLFxuICAgICAgICAgICAgSW1hZ2VUeXBlLFxuICAgICAgICAgICAgTGFuZ3VhZ2UsXG4gICAgICAgICAgICBNZWRpYUNsb2NrRm9ybWF0LFxuICAgICAgICAgICAgTWV0YWRhdGFUeXBlLFxuICAgICAgICAgICAgUHJlcmVjb3JkZWRTcGVlY2gsXG4gICAgICAgICAgICBSZXN1bHQsXG4gICAgICAgICAgICBScGNUeXBlLFxuICAgICAgICAgICAgU2FtcGxpbmdSYXRlLFxuICAgICAgICAgICAgU29mdEJ1dHRvblR5cGUsXG4gICAgICAgICAgICBTcGVlY2hDYXBhYmlsaXRpZXMsXG4gICAgICAgICAgICBTeXN0ZW1BY3Rpb24sXG4gICAgICAgICAgICBTeXN0ZW1Db250ZXh0LFxuICAgICAgICAgICAgVGV4dEFsaWdubWVudCxcbiAgICAgICAgICAgIFRleHRGaWVsZE5hbWUsXG4gICAgICAgICAgICBWaWRlb1N0cmVhbWluZ0NvZGVjLFxuICAgICAgICAgICAgVmlkZW9TdHJlYW1pbmdQcm90b2NvbCxcbiAgICAgICAgICAgIFZpZGVvU3RyZWFtaW5nU3RhdGUsXG4gICAgICAgICAgICBWckNhcGFiaWxpdGllcyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgICAgIEFkZENvbW1hbmQsXG4gICAgICAgICAgICBBZGRDb21tYW5kUmVzcG9uc2UsXG4gICAgICAgICAgICBPbkhtaVN0YXR1cyxcbiAgICAgICAgICAgIE9uTGFuZ3VhZ2VDaGFuZ2UsXG4gICAgICAgICAgICBQdXRGaWxlLFxuICAgICAgICAgICAgUHV0RmlsZVJlc3BvbnNlLFxuICAgICAgICAgICAgUmVnaXN0ZXJBcHBJbnRlcmZhY2UsXG4gICAgICAgICAgICBSZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlLFxuICAgICAgICAgICAgU2V0QXBwSWNvbixcbiAgICAgICAgICAgIFNldEFwcEljb25SZXNwb25zZSxcbiAgICAgICAgICAgIFNob3csXG4gICAgICAgICAgICBTaG93UmVzcG9uc2UsXG4gICAgICAgICAgICBVbnJlZ2lzdGVyQXBwSW50ZXJmYWNlLFxuICAgICAgICB9LFxuICAgICAgICBzdHJ1Y3RzOiB7XG4gICAgICAgICAgICBBcHBJbmZvLFxuICAgICAgICAgICAgQXVkaW9QYXNzVGhydUNhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIEJ1dHRvbkNhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIERldmljZUluZm8sXG4gICAgICAgICAgICBEaXNwbGF5Q2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgR3JpZCxcbiAgICAgICAgICAgIEhNSUNhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIEltYWdlLFxuICAgICAgICAgICAgSW1hZ2VGaWVsZCxcbiAgICAgICAgICAgIEltYWdlUmVzb2x1dGlvbixcbiAgICAgICAgICAgIE1lbnVQYXJhbXMsXG4gICAgICAgICAgICBNZXRhZGF0YVRhZ3MsXG4gICAgICAgICAgICBNb2R1bGVJbmZvLFxuICAgICAgICAgICAgUHJlc2V0QmFua0NhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIFJHQkNvbG9yLFxuICAgICAgICAgICAgU2NyZWVuUGFyYW1zLFxuICAgICAgICAgICAgU2RsTXNnVmVyc2lvbixcbiAgICAgICAgICAgIFNvZnRCdXR0b24sXG4gICAgICAgICAgICBTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgVFRTQ2h1bmssXG4gICAgICAgICAgICBUZW1wbGF0ZUNvbG9yU2NoZW1lLFxuICAgICAgICAgICAgVGV4dEZpZWxkLFxuICAgICAgICAgICAgVG91Y2hFdmVudENhcGFiaWxpdGllcyxcbiAgICAgICAgICAgIFZlaGljbGVUeXBlLFxuICAgICAgICAgICAgVmlkZW9TdHJlYW1pbmdDYXBhYmlsaXR5LFxuICAgICAgICAgICAgVmlkZW9TdHJlYW1pbmdGb3JtYXQsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBzZXNzaW9uOiB7XG4gICAgICAgIFNkbFNlcnZpY2VMaXN0ZW5lcixcbiAgICAgICAgU2RsU2Vzc2lvbixcbiAgICAgICAgU2RsU2Vzc2lvbkxpc3RlbmVyLFxuICAgICAgICBTZXJ2aWNlTGlzdGVuZXJNYXAsXG4gICAgfSxcbiAgICBzdHJlYW1pbmc6IHtcbiAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgIFZpZGVvU3RyZWFtaW5nUGFyYW1ldGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHRyYW5zcG9ydDoge1xuICAgICAgICBDdXN0b21UcmFuc3BvcnQsXG4gICAgICAgIEN1c3RvbVRyYW5zcG9ydENvbmZpZyxcbiAgICAgICAgU2RsUHNtLFxuICAgICAgICBTc2xDb25maWcsXG4gICAgICAgIFRyYW5zcG9ydEJhc2UsXG4gICAgICAgIFRyYW5zcG9ydENhbGxiYWNrLFxuICAgICAgICBUcmFuc3BvcnRDb25maWdCYXNlLFxuICAgICAgICBUcmFuc3BvcnRMaXN0ZW5lcixcbiAgICAgICAgVHJhbnNwb3J0TWFuYWdlcixcbiAgICAgICAgVHJhbnNwb3J0TWFuYWdlckJhc2UsXG4gICAgICAgIFdlYlNvY2tldENsaWVudCxcbiAgICAgICAgV2ViU29ja2V0Q2xpZW50Q29uZmlnLFxuICAgICAgICBlbnVtczoge1xuICAgICAgICAgICAgVHJhbnNwb3J0VHlwZSxcbiAgICAgICAgfSxcbiAgICAgICAgdXRpbDoge1xuICAgICAgICAgICAgVHJhbnNwb3J0UmVjb3JkLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgdXRpbDoge1xuICAgICAgICBBcnJheVRvb2xzLFxuICAgICAgICBCaXRDb252ZXJ0ZXIsXG4gICAgICAgIEJzb24sXG4gICAgICAgIEVudW0sXG4gICAgICAgIEpzb25ScGNNYXJzaGFsbGVyLFxuICAgICAgICBUZXh0RW5jb2RlcixcbiAgICAgICAgVmVyc2lvbixcbiAgICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU0RMOyJdLCJuYW1lcyI6WyJBcHBDb25maWciLCJfdHJhbnNwb3J0Q29uZmlnIiwiX2FwcElkIiwiX2FwcE5hbWUiLCJfaWNvbk5hbWUiLCJfaWNvbkZpbGUiLCJfc2hvcnRBcHBOYW1lIiwiX3R0c05hbWUiLCJfdnJTeW5vbnltcyIsIl9pc01lZGlhQXBwIiwiX2xhbmd1YWdlRGVzaXJlZCIsIl9obWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkIiwiX2FwcFR5cGVzIiwiX2RheUNvbG9yU2NoZW1lIiwiX25pZ2h0Q29sb3JTY2hlbWUiLCJfbWluaW11bVJQQ1ZlcnNpb24iLCJfbWluaW11bVByb3RvY29sVmVyc2lvbiIsInRyYW5zcG9ydENvbmZpZyIsInRoaXMiLCJhcHBJZCIsImFwcE5hbWUiLCJpY29uTmFtZSIsImZpbGVEYXRhIiwic2hvcnRBcHBOYW1lIiwidHRzTmFtZSIsInZyU3lub255bXMiLCJpc01lZGlhQXBwIiwibGFuZ3VhZ2VEZXNpcmVkIiwiaG1pRGlzcGxheUxhbmd1YWdlRGVzaXJlZCIsImFwcFR5cGVzIiwiZGF5Q29sb3JTY2hlbWUiLCJuaWdodENvbG9yU2NoZW1lIiwibWluaW11bVJQQ1ZlcnNpb24iLCJtaW5pbXVtUHJvdG9jb2xWZXJzaW9uIiwiTGlmZWN5Y2xlTGlzdGVuZXIiLCJfb25Qcm94eUNvbm5lY3RlZCIsIl9vblByb3h5Q2xvc2VkIiwiX29uU2VydmljZVN0YXJ0ZWQiLCJfb25TZXJ2aWNlRW5kZWQiLCJfb25FcnJvciIsImxpc3RlbmVyIiwibGlmZWN5Y2xlTWFuYWdlciIsImluZm8iLCJyZWFzb24iLCJzZXJ2aWNlVHlwZSIsInNlc3Npb25JRCIsImNvcnJlbGF0aW9uSUQiLCJfb25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCIsIkVudW0iLCJFcnJvciIsInZhbHVlIiwibWFwIiwia2V5IiwiUnBjU3RydWN0IiwicGFyYW1ldGVycyIsIl9pc0Zvcm1hdFJlcXVlc3RlZCIsIl9ycGNTcGVjVmVyc2lvbiIsIl9wYXJhbWV0ZXJzIiwidENsYXNzIiwiZm9ybWF0T2JqZWN0IiwiZ2V0UGFyYW1ldGVyIiwib2JqIiwiY29uc3RydWN0b3IiLCJTdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJBcnJheSIsImxlbmd0aCIsIm91dEFycmF5IiwiaXRlbSIsInB1c2giLCJpc0FycmF5IiwibmFtZSIsInZhbGlkYXRlVHlwZSIsImtleUZvclZhbHVlIiwiRnVuY3Rpb25JRCIsIl92YWx1ZUZvcktleSIsIl9NQVAiLCJfa2V5Rm9yVmFsdWUiLCJSZWdpc3RlckFwcEludGVyZmFjZSIsIlVucmVnaXN0ZXJBcHBJbnRlcmZhY2UiLCJTZXRHbG9iYWxQcm9wZXJ0aWVzIiwiUmVzZXRHbG9iYWxQcm9wZXJ0aWVzIiwiQWRkQ29tbWFuZCIsIkRlbGV0ZUNvbW1hbmQiLCJBZGRTdWJNZW51IiwiRGVsZXRlU3ViTWVudSIsIkNyZWF0ZUludGVyYWN0aW9uQ2hvaWNlU2V0IiwiUGVyZm9ybUludGVyYWN0aW9uIiwiRGVsZXRlSW50ZXJhY3Rpb25DaG9pY2VTZXQiLCJBbGVydCIsIlNob3ciLCJTcGVhayIsIlNldE1lZGlhQ2xvY2tUaW1lciIsIlBlcmZvcm1BdWRpb1Bhc3NUaHJ1IiwiRW5kQXVkaW9QYXNzVGhydSIsIlN1YnNjcmliZUJ1dHRvbiIsIlVuc3Vic2NyaWJlQnV0dG9uIiwiU3Vic2NyaWJlVmVoaWNsZURhdGEiLCJVbnN1YnNjcmliZVZlaGljbGVEYXRhIiwiR2V0VmVoaWNsZURhdGEiLCJSZWFkRElEIiwiR2V0RFRDcyIsIlNjcm9sbGFibGVNZXNzYWdlIiwiU2xpZGVyIiwiU2hvd0NvbnN0YW50VEJUIiwiQWxlcnRNYW5ldXZlciIsIlVwZGF0ZVR1cm5MaXN0IiwiQ2hhbmdlUmVnaXN0cmF0aW9uIiwiR2VuZXJpY1Jlc3BvbnNlIiwiUHV0RmlsZSIsIkRlbGV0ZUZpbGUiLCJMaXN0RmlsZXMiLCJTZXRBcHBJY29uIiwiU2V0RGlzcGxheUxheW91dCIsIkRpYWdub3N0aWNNZXNzYWdlIiwiU3lzdGVtUmVxdWVzdCIsIlNlbmRMb2NhdGlvbiIsIkRpYWxOdW1iZXIiLCJCdXR0b25QcmVzcyIsIkdldEludGVyaW9yVmVoaWNsZURhdGEiLCJTZXRJbnRlcmlvclZlaGljbGVEYXRhIiwiR2V0V2F5UG9pbnRzIiwiU3Vic2NyaWJlV2F5UG9pbnRzIiwiVW5zdWJzY3JpYmVXYXlQb2ludHMiLCJHZXRTeXN0ZW1DYXBhYmlsaXR5IiwiU2VuZEhhcHRpY0RhdGEiLCJTZXRDbG91ZEFwcFByb3BlcnRpZXMiLCJHZXRDbG91ZEFwcFByb3BlcnRpZXMiLCJQdWJsaXNoQXBwU2VydmljZSIsIkdldEFwcFNlcnZpY2VEYXRhIiwiR2V0RmlsZSIsIlBlcmZvcm1BcHBTZXJ2aWNlSW50ZXJhY3Rpb24iLCJVbnB1Ymxpc2hBcHBTZXJ2aWNlIiwiQ2FuY2VsSW50ZXJhY3Rpb24iLCJDbG9zZUFwcGxpY2F0aW9uIiwiU2hvd0FwcE1lbnUiLCJDcmVhdGVXaW5kb3ciLCJEZWxldGVXaW5kb3ciLCJHZXRJbnRlcmlvclZlaGljbGVEYXRhQ29uc2VudCIsIlJlbGVhc2VJbnRlcmlvclZlaGljbGVEYXRhTW9kdWxlIiwiT25ITUlTdGF0dXMiLCJPbkFwcEludGVyZmFjZVVucmVnaXN0ZXJlZCIsIk9uQnV0dG9uRXZlbnQiLCJPbkJ1dHRvblByZXNzIiwiT25WZWhpY2xlRGF0YSIsIk9uQ29tbWFuZCIsIk9uVEJUQ2xpZW50U3RhdGUiLCJPbkRyaXZlckRpc3RyYWN0aW9uIiwiT25QZXJtaXNzaW9uc0NoYW5nZSIsIk9uQXVkaW9QYXNzVGhydSIsIk9uTGFuZ3VhZ2VDaGFuZ2UiLCJPbktleWJvYXJkSW5wdXQiLCJPblRvdWNoRXZlbnQiLCJPblN5c3RlbVJlcXVlc3QiLCJPbkhhc2hDaGFuZ2UiLCJPbkludGVyaW9yVmVoaWNsZURhdGEiLCJPbldheVBvaW50Q2hhbmdlIiwiT25SQ1N0YXR1cyIsIk9uQXBwU2VydmljZURhdGEiLCJPblN5c3RlbUNhcGFiaWxpdHlVcGRhdGVkIiwiZnJlZXplIiwiUnBjTWVzc2FnZSIsInN0b3JlIiwiX2lzRW5jcnlwdGVkIiwiX3JwY1R5cGUiLCJycGNUeXBlIiwiX2Z1bmN0aW9uTmFtZSIsImZ1bmN0aW9uTmFtZSIsIl9jb3JyZWxhdGlvbklEIiwic2V0QnVsa0RhdGEiLCJidWxrRGF0YSIsInR5cGUiLCJpZCIsIl9idWxrRGF0YSIsImRhdGEiLCJzbGljZSIsImJvb2wiLCJScGNUeXBlIiwiTk9USUZJQ0FUSU9OIiwiUkVTUE9OU0UiLCJSRVFVRVNUIiwiUnBjUmVxdWVzdCIsInNldFJQQ1R5cGUiLCJfcHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwiU2RsTXNnVmVyc2lvbiIsInNldFBhcmFtZXRlciIsIktFWV9NQUpPUl9WRVJTSU9OIiwiS0VZX01JTk9SX1ZFUlNJT04iLCJLRVlfUEFUQ0hfVkVSU0lPTiIsIlNwZWVjaENhcGFiaWxpdGllcyIsIlNDX1RFWFQiLCJTQVBJX1BIT05FTUVTIiwiTEhQTFVTX1BIT05FTUVTIiwiUFJFX1JFQ09SREVEIiwiU0lMRU5DRSIsIkZJTEUiLCJUVFNDaHVuayIsInRleHQiLCJLRVlfVEVYVCIsIktFWV9UWVBFIiwiZ2V0T2JqZWN0IiwiRGV2aWNlSW5mbyIsImhhcmR3YXJlIiwiS0VZX0hBUkRXQVJFIiwiZmlybXdhcmVSZXYiLCJLRVlfRklSTVdBUkVfUkVWIiwib3MiLCJLRVlfT1MiLCJvc1ZlcnNpb24iLCJLRVlfT1NfVkVSU0lPTiIsImNhcnJpZXIiLCJLRVlfQ0FSUklFUiIsIm1heE51bWJlclJGQ09NTVBvcnRzIiwiTnVtYmVyIiwiS0VZX01BWF9OVU1CRVJfUkZDT01NX1BPUlRTIiwiQXBwSW5mbyIsImFwcERpc3BsYXlOYW1lIiwiS0VZX0FQUF9ESVNQTEFZX05BTUUiLCJhcHBCdW5kbGVJRCIsIktFWV9BUFBfQlVORExFX0lEIiwiYXBwVmVyc2lvbiIsIktFWV9BUFBfVkVSU0lPTiIsImFwcEljb24iLCJLRVlfQVBQX0lDT04iLCJSR0JDb2xvciIsInJlZFZhbHVlIiwiS0VZX1JFRCIsImdyZWVuVmFsdWUiLCJLRVlfR1JFRU4iLCJibHVlVmFsdWUiLCJLRVlfQkxVRSIsIlRlbXBsYXRlQ29sb3JTY2hlbWUiLCJwcmltYXJ5Q29sb3IiLCJLRVlfUFJJTUFSWV9DT0xPUiIsInNlY29uZGFyeUNvbG9yIiwiS0VZX1NFQ09OREFSWV9DT0xPUiIsImJhY2tncm91bmRDb2xvciIsIktFWV9CQUNLR1JPVU5EX0NPTE9SIiwiTGFuZ3VhZ2UiLCJFTl9TQSIsIkhFX0lMIiwiUk9fUk8iLCJVS19VQSIsIklEX0lEIiwiVklfVk4iLCJNU19NWSIsIkhJX0lOIiwiTkxfQkUiLCJFTF9HUiIsIkhVX0hVIiwiRklfRkkiLCJTS19TSyIsIkVOX1VTIiwiRVNfTVgiLCJGUl9DQSIsIkRFX0RFIiwiRVNfRVMiLCJFTl9HQiIsIlJVX1JVIiwiVFJfVFIiLCJQTF9QTCIsIkZSX0ZSIiwiSVRfSVQiLCJTVl9TRSIsIlBUX1BUIiwiTkxfTkwiLCJFTl9BVSIsIlpIX0NOIiwiWkhfVFciLCJKQV9KUCIsIkFSX1NBIiwiS09fS1IiLCJQVF9CUiIsIkNTX0NaIiwiREFfREsiLCJOT19OTyIsIkVOX0lOIiwiVEhfVEgiLCJBcHBITUlUeXBlIiwiREVGQVVMVCIsIkNPTU1VTklDQVRJT04iLCJNRURJQSIsIk1FU1NBR0lORyIsIk5BVklHQVRJT04iLCJJTkZPUk1BVElPTiIsIlNPQ0lBTCIsIkJBQ0tHUk9VTkRfUFJPQ0VTUyIsIlRFU1RJTkciLCJTWVNURU0iLCJQUk9KRUNUSU9OIiwiUkVNT1RFX0NPTlRST0wiLCJzZXRGdW5jdGlvbk5hbWUiLCJzZGxNc2dWZXJzaW9uIiwiS0VZX1NETF9NU0dfVkVSU0lPTiIsIktFWV9BUFBfTkFNRSIsInR0c05hbWVzIiwiS0VZX1RUU19OQU1FIiwibmducHBOYW1lIiwiS0VZX05HTl9NRURJQV9TQ1JFRU5fQVBQX05BTUUiLCJLRVlfVlJfU1lOT05ZTVMiLCJpc01lZGlhQXBwbGljYXRpb24iLCJLRVlfSVNfTUVESUFfQVBQTElDQVRJT04iLCJLRVlfTEFOR1VBR0VfREVTSVJFRCIsIktFWV9ITUlfRElTUExBWV9MQU5HVUFHRV9ERVNJUkVEIiwiYXBwSE1JVHlwZSIsIktFWV9BUFBfSE1JX1RZUEUiLCJoYXNoSUQiLCJLRVlfSEFTSF9JRCIsImRldmljZUluZm8iLCJLRVlfREVWSUNFX0lORk8iLCJLRVlfQVBQX0lEIiwiZnVsbEFwcElkIiwidG9Mb3dlckNhc2UiLCJLRVlfRlVMTF9BUFBfSUQiLCJBUFBfSURfTUFYX0xFTkdUSCIsInJlcGxhY2UiLCJzdWJzdHJpbmciLCJfc2V0QXBwSWQiLCJhcHBJbmZvIiwiS0VZX0FQUF9JTkZPIiwiS0VZX0RBWV9DT0xPUl9TQ0hFTUUiLCJLRVlfTklHSFRfQ09MT1JfU0NIRU1FIiwiS0VZX1NZTkNfTVNHX1ZFUlNJT04iLCJSZXN1bHQiLCJTVUNDRVNTIiwiVU5TVVBQT1JURURfUkVRVUVTVCIsIkRJU0FMTE9XRUQiLCJSRUpFQ1RFRCIsIkFCT1JURUQiLCJJR05PUkVEIiwiUkVUUlkiLCJJTl9VU0UiLCJWRUhJQ0xFX0RBVEFfTk9UX0FWQUlMQUJMRSIsIlRJTUVEX09VVCIsIklOVkFMSURfREFUQSIsIkNIQVJfTElNSVRfRVhDRUVERUQiLCJJTlZBTElEX0lEIiwiRFVQTElDQVRFX05BTUUiLCJBUFBMSUNBVElPTl9OT1RfUkVHSVNURVJFRCIsIldST05HX0xBTkdVQUdFIiwiT1VUX09GX01FTU9SWSIsIlRPT19NQU5ZX1BFTkRJTkdfUkVRVUVTVFMiLCJUT09fTUFOWV9BUFBMSUNBVElPTlMiLCJBUFBMSUNBVElPTl9SRUdJU1RFUkVEX0FMUkVBRFkiLCJXQVJOSU5HUyIsIkdFTkVSSUNfRVJST1IiLCJVU0VSX0RJU0FMTE9XRUQiLCJUUlVOQ0FURURfREFUQSIsIlVOU1VQUE9SVEVEX1ZFUlNJT04iLCJWRUhJQ0xFX0RBVEFfTk9UX0FMTE9XRUQiLCJGSUxFX05PVF9GT1VORCIsIkNBTkNFTF9ST1VURSIsIlNBVkVEIiwiSU5WQUxJRF9DRVJUIiwiRVhQSVJFRF9DRVJUIiwiUkVTVU1FX0ZBSUxFRCIsIkRBVEFfTk9UX0FWQUlMQUJMRSIsIlJFQURfT05MWSIsIkNPUlJVUFRFRF9EQVRBIiwiUnBjUmVzcG9uc2UiLCJLRVlfU1VDQ0VTUyIsInN1Y2Nlc3MiLCJLRVlfSU5GTyIsIktFWV9SRVNVTFRfQ09ERSIsInJlc3VsdENvZGUiLCJScGNMaXN0ZW5lciIsIl9vblJwY01lc3NhZ2UiLCJmdW5jIiwicnBjTWVzc2FnZSIsIlNkbFNlc3Npb25MaXN0ZW5lciIsIl9vblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQiLCJfb25Qcm90b2NvbFNlc3Npb25FbmRlZCIsIl9vblJwY01lc3NhZ2VSZWNlaXZlZCIsIl9vblRyYW5zcG9ydENvbm5lY3RlZCIsInZlcnNpb24iLCJpc0VuY3J5cHRlZCIsImNvcnJlbGF0aW9uSSIsIlNkbFByb3RvY29sTGlzdGVuZXIiLCJfZ2V0U2Vzc2lvbklkIiwic2Vzc2lvbklkIiwiY29ycmVsYXRpb25JZCIsImhhc2hJZCIsImdldHRlciIsIl9nZXREZXNpcmVkVmlkZW9QYXJhbXMiLCJzZXR0ZXIiLCJfc2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyIsInBhcmFtcyIsIkZyYW1lVHlwZSIsIkNPTlRST0wiLCJGSVJTVCIsIkNPTlNFQ1VUSVZFIiwiU0lOR0xFIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJfX3Byb3RvX18iLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jVW5zYWZlIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJhcnJheSIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidW5kZWZpbmVkIiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwibGVuIiwiY2hlY2tlZCIsImNvcHkiLCJidWZmZXIiLCJ2YWwiLCJpc25hbiIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsInRvU3RyaW5nIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzd2FwIiwiYiIsIm4iLCJtIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJkaXIiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsImFzY2lpV3JpdGUiLCJibGl0QnVmZmVyIiwic3RyIiwiYnl0ZUFycmF5IiwiY2hhckNvZGVBdCIsImFzY2lpVG9CeXRlcyIsInVjczJXcml0ZSIsInVuaXRzIiwiYyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwic3RhcnQiLCJlbmQiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwiTWF0aCIsIm1pbiIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJTeW1ib2wiLCJzcGVjaWVzIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImEiLCJ4IiwieSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsImluc3BlY3QiLCJtYXgiLCJtYXRjaCIsImpvaW4iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4IiwiZmxvb3IiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJiYXNlNjRjbGVhbiIsInRyaW0iLCJzdHJpbmd0cmltIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzcmMiLCJkc3QiLCJmYWN0b3J5IiwibG9uZyIsImhhc093blByb3BlcnR5IiwiY29tbW9uanNHbG9iYWwiLCJzZWxmIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJmbiIsImdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UiLCJNYXAiLCJfa2V5cyIsIl92YWx1ZXMiLCJlbnRyeSIsInYiLCJjbGVhciIsInNwbGljZSIsImVudHJpZXMiLCJpbmRleCIsIm5leHQiLCJkb25lIiwiZm9yRWFjaCIsImNhbGxiYWNrIiwiZ2V0IiwiaGFzIiwia2V5cyIsInZhbHVlcyIsImVudW1lcmFibGUiLCJtYXBfMSIsInRvRXh0ZW5kZWRKU09OIiwib3B0aW9ucyIsInJlbGF4ZWQiLCJ0b051bWJlciIsIiRudW1iZXJMb25nIiwiZnJvbUV4dGVuZGVkSlNPTiIsImRvYyIsInJlc3VsdCIsImxvbmdfMSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiRG91YmxlIiwiJG51bWJlckRvdWJsZSIsInBhcnNlRmxvYXQiLCJkb3VibGVfMSIsIl90eXBlb2YiLCJfdHlwZW9mMiIsIml0ZXJhdG9yIiwiX2NsYXNzQ2FsbENoZWNrJDEiLCJfZGVmaW5lUHJvcGVydGllcyQxIiwiX2NyZWF0ZUNsYXNzJDEiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl9nZXRQcm90b3R5cGVPZiIsIm8iLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwicCIsIlRpbWVzdGFtcCIsImxvdyIsImhpZ2giLCJfdGhpcyIsImlzTG9uZyIsIiR0aW1lc3RhbXAiLCJ0IiwiZnJvbUludCIsImZyb21OdW1iZXIiLCJsb3dCaXRzIiwiaGlnaEJpdHMiLCJvcHRfcmFkaXgiLCJ0aW1lc3RhbXAiLCJlbXB0eSIsImVtcHR5JDEiLCJyZXF1aXJlJCQwIiwibm9ybWFsaXplZEZ1bmN0aW9uU3RyaW5nIiwiaW5zZWN1cmVSYW5kb21CeXRlcyIsInJhbmRvbSIsInJhbmRvbUJ5dGVzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwidXRpbHMiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwicGVyZm9ybWFuY2UiLCJwZXJmb3JtYW5jZU5vdyIsIm5vdyIsIm1vek5vdyIsIm1zTm93Iiwib05vdyIsIndlYmtpdE5vdyIsIkRhdGUiLCJnZXRUaW1lIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJpbmhlcml0cyQxIiwiX3R5cGVvZiQxIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiZiIsImlzU3RyaW5nIiwib2JqZWN0cyIsImFyZ3MiLCJKU09OIiwic3RyaW5naWZ5IiwiXyIsImlzTnVsbCIsImlzT2JqZWN0IiwiZGVwcmVjYXRlIiwibXNnIiwiaXNVbmRlZmluZWQiLCJwcm9jZXNzIiwid2FybmVkIiwiY29uc29sZSIsImVycm9yIiwiZGVidWdzIiwiZGVidWdFbnZpcm9uIiwiZGVidWdsb2ciLCJ0b1VwcGVyQ2FzZSIsIlJlZ0V4cCIsInRlc3QiLCJvcHRzIiwiY3R4Iiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImRlcHRoIiwiY29sb3JzIiwiaXNCb29sZWFuIiwic2hvd0hpZGRlbiIsIl9leHRlbmQiLCJjdXN0b21JbnNwZWN0Iiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVUeXBlIiwic3R5bGUiLCJzdHlsZXMiLCJhcnJheVRvSGFzaCIsImhhc2giLCJpZHgiLCJyZWN1cnNlVGltZXMiLCJpc0Z1bmN0aW9uIiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiaXNSZWdFeHAiLCJpc0RhdGUiLCJvdXRwdXQiLCJiYXNlIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJmb3JtYXRBcnJheSIsImZvcm1hdFByb3BlcnR5IiwicG9wIiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJzaW1wbGUiLCJpc051bWJlciIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzcGxpdCIsImxpbmUiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwiYXIiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwicmUiLCJvYmplY3RUb1N0cmluZyIsImQiLCJpc1ByaW1pdGl2ZSIsIm1heWJlQnVmIiwicGFkIiwibW9udGhzIiwidGltZXN0YW1wJDEiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsImxvZyIsIm9yaWdpbiIsImFkZCIsInByb3AiLCJ1dGlsIiwidXRpbCQxIiwidXRpbCQyIiwiX2NsYXNzQ2FsbENoZWNrJDIiLCJfZGVmaW5lUHJvcGVydGllcyQyIiwiX2NyZWF0ZUNsYXNzJDIiLCJCdWZmZXIkMSIsInJhbmRvbUJ5dGVzJDEiLCJkZXByZWNhdGUkMSIsIlBST0NFU1NfVU5JUVVFIiwiY2hlY2tGb3JIZXhSZWdFeHAiLCJoYXNCdWZmZXJUeXBlIiwiZXJyIiwiaGV4VGFibGUiLCJfaSIsImRlY29kZUxvb2t1cCIsIl9CdWZmZXIiLCJjb252ZXJ0VG9IZXgiLCJtYWtlT2JqZWN0SWRFcnJvciIsImludmFsaWRTdHJpbmciLCJpbnZhbGlkQ2hhcmFjdGVyIiwiT2JqZWN0SWQiLCJnZW5lcmF0ZSIsImNhY2hlSGV4U3RyaW5nIiwiX19pZCIsInZhbGlkIiwiaXNWYWxpZCIsImNyZWF0ZUZyb21IZXhTdHJpbmciLCJ0b0hleFN0cmluZyIsImhleFN0cmluZyIsIl9pMiIsImhleENoYXIiLCJvdGhlcklkIiwic2V0VGltZSIsIiRvaWQiLCJpbmMiLCJnZXRJbmMiLCJidWZmZXIkJDEiLCJnZXRfaW5jIiwiY3VzdG9tIiwib2JqZWN0aWQiLCJfY2xhc3NDYWxsQ2hlY2skMyIsIl9kZWZpbmVQcm9wZXJ0aWVzJDMiLCJfY3JlYXRlQ2xhc3MkMyIsImFscGhhYmV0aXplIiwic29ydCIsIkJTT05SZWdFeHAiLCJwYXR0ZXJuIiwiJHJlZ3VsYXJFeHByZXNzaW9uIiwicmVnZXhwIiwiX2NsYXNzQ2FsbENoZWNrJDQiLCJfZGVmaW5lUHJvcGVydGllcyQ0IiwiX2NyZWF0ZUNsYXNzJDQiLCJCU09OU3ltYm9sIiwiJHN5bWJvbCIsInN5bWJvbCIsIl9jbGFzc0NhbGxDaGVjayQ1IiwiX2RlZmluZVByb3BlcnRpZXMkNSIsIl9jcmVhdGVDbGFzcyQ1IiwiSW50MzIiLCIkbnVtYmVySW50IiwiaW50XzMyIiwiX2NsYXNzQ2FsbENoZWNrJDYiLCJfZGVmaW5lUHJvcGVydGllcyQ2IiwiX2NyZWF0ZUNsYXNzJDYiLCJDb2RlIiwic2NvcGUiLCIkY29kZSIsIiRzY29wZSIsIkJ1ZmZlciQyIiwiUEFSU0VfU1RSSU5HX1JFR0VYUCIsIlBBUlNFX0lORl9SRUdFWFAiLCJQQVJTRV9OQU5fUkVHRVhQIiwiRVhQT05FTlRfTUFYIiwiRVhQT05FTlRfTUlOIiwiRVhQT05FTlRfQklBUyIsIk1BWF9ESUdJVFMiLCJOQU5fQlVGRkVSIiwicmV2ZXJzZSIsIklORl9ORUdBVElWRV9CVUZGRVIiLCJJTkZfUE9TSVRJVkVfQlVGRkVSIiwiRVhQT05FTlRfUkVHRVgiLCJpc0RpZ2l0IiwiZGl2aWRldTEyOCIsIkRJVklTT1IiLCJfcmVtIiwicGFydHMiLCJxdW90aWVudCIsInJlbSIsInNoaWZ0TGVmdCIsImRpdiIsIm1vZHVsbyIsIm11bHRpcGx5NjR4MiIsImxlZnQiLCJyaWdodCIsImxlZnRIaWdoIiwic2hpZnRSaWdodFVuc2lnbmVkIiwibGVmdExvdyIsImdldExvd0JpdHMiLCJyaWdodEhpZ2giLCJyaWdodExvdyIsInByb2R1Y3RIaWdoIiwibXVsdGlwbHkiLCJwcm9kdWN0TWlkIiwicHJvZHVjdE1pZDIiLCJwcm9kdWN0TG93IiwibGVzc1RoYW4iLCJ1aGxlZnQiLCJ1aHJpZ2h0IiwiaW52YWxpZEVyciIsIm1lc3NhZ2UiLCJEZWNpbWFsMTI4IiwiYmlhc2VkRXhwb25lbnQiLCJpc05lZ2F0aXZlIiwic2F3UmFkaXgiLCJmb3VuZE5vblplcm8iLCJzaWduaWZpY2FudERpZ2l0cyIsIm5EaWdpdHNSZWFkIiwibkRpZ2l0cyIsInJhZGl4UG9zaXRpb24iLCJmaXJzdE5vblplcm8iLCJkaWdpdHMiLCJuRGlnaXRzU3RvcmVkIiwiZGlnaXRzSW5zZXJ0IiwiZmlyc3REaWdpdCIsImxhc3REaWdpdCIsImV4cG9uZW50Iiwic2lnbmlmaWNhbmRIaWdoIiwic2lnbmlmaWNhbmRMb3ciLCJzdHJpbmdNYXRjaCIsImluZk1hdGNoIiwibmFuTWF0Y2giLCJ1bnNpZ25lZE51bWJlciIsImV4cFNpZ24iLCJleHBOdW1iZXIiLCJlbmRPZlN0cmluZyIsInJvdW5kRGlnaXQiLCJyb3VuZEJpdCIsImRJZHgiLCJfZElkeCIsIl9kSWR4MiIsInNpZ25pZmljYW5kIiwiZGVjIiwiYW5kIiwib3IiLCJDT01CSU5BVElPTl9NQVNLIiwiRVhQT05FTlRfTUFTSyIsIkNPTUJJTkFUSU9OX0lORklOSVRZIiwiQ09NQklOQVRJT05fTkFOIiwibWlkaCIsIm1pZGwiLCJjb21iaW5hdGlvbiIsImJpYXNlZF9leHBvbmVudCIsInNpZ25pZmljYW5kX2RpZ2l0cyIsInNjaWVudGlmaWNfZXhwb25lbnQiLCJzaWduaWZpY2FuZF9tc2IiLCJrIiwiaXNfemVybyIsInNpZ25pZmljYW5kMTI4IiwiWkVSTyIsImxlYXN0X2RpZ2l0cyIsInJhZGl4X3Bvc2l0aW9uIiwiX2kzIiwiX2k0IiwiJG51bWJlckRlY2ltYWwiLCJkZWNpbWFsMTI4IiwiX2NsYXNzQ2FsbENoZWNrJDciLCJfZGVmaW5lUHJvcGVydGllcyQ3IiwiX2NyZWF0ZUNsYXNzJDciLCJNaW5LZXkiLCIkbWluS2V5IiwibWluX2tleSIsIl9jbGFzc0NhbGxDaGVjayQ4IiwiX2RlZmluZVByb3BlcnRpZXMkOCIsIl9jcmVhdGVDbGFzcyQ4IiwiTWF4S2V5IiwiJG1heEtleSIsIm1heF9rZXkiLCJfY2xhc3NDYWxsQ2hlY2skOSIsIl9kZWZpbmVQcm9wZXJ0aWVzJDkiLCJfY3JlYXRlQ2xhc3MkOSIsIkRCUmVmIiwiY29sbGVjdGlvbiIsIm9pZCIsImRiIiwiZmllbGRzIiwic2hpZnQiLCJhc3NpZ24iLCIkcmVmIiwiJGlkIiwiJGRiIiwiZGJfcmVmIiwiX2NsYXNzQ2FsbENoZWNrJGEiLCJfZGVmaW5lUHJvcGVydGllcyRhIiwiX2NyZWF0ZUNsYXNzJGEiLCJCdWZmZXIkMyIsIkJpbmFyeSIsInN1YlR5cGUiLCJzdWJfdHlwZSIsIkJTT05fQklOQVJZX1NVQlRZUEVfREVGQVVMVCIsInBvc2l0aW9uIiwiQlVGRkVSX1NJWkUiLCJ3cml0ZVN0cmluZ1RvQXJyYXkiLCJieXRlX3ZhbHVlIiwiZGVjb2RlZF9ieXRlIiwiX2J1ZmZlciIsImlzVWludDhBcnJheSIsImFzUmF3IiwibmV3QnVmZmVyIiwiY29udmVydEFycmF5dG9VdGY4QmluYXJ5U3RyaW5nIiwiYmFzZTY0U3RyaW5nIiwiJGJpbmFyeSIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsIlNVQlRZUEVfREVGQVVMVCIsIlNVQlRZUEVfRlVOQ1RJT04iLCJTVUJUWVBFX0JZVEVfQVJSQVkiLCJTVUJUWVBFX1VVSURfT0xEIiwiU1VCVFlQRV9VVUlEIiwiU1VCVFlQRV9NRDUiLCJTVUJUWVBFX1VTRVJfREVGSU5FRCIsImJpbmFyeSIsImNvbnN0YW50cyIsIkJTT05fSU5UMzJfTUFYIiwiQlNPTl9JTlQzMl9NSU4iLCJCU09OX0lOVDY0X01BWCIsIkJTT05fSU5UNjRfTUlOIiwiSlNfSU5UX01BWCIsIkpTX0lOVF9NSU4iLCJCU09OX0RBVEFfTlVNQkVSIiwiQlNPTl9EQVRBX1NUUklORyIsIkJTT05fREFUQV9PQkpFQ1QiLCJCU09OX0RBVEFfQVJSQVkiLCJCU09OX0RBVEFfQklOQVJZIiwiQlNPTl9EQVRBX1VOREVGSU5FRCIsIkJTT05fREFUQV9PSUQiLCJCU09OX0RBVEFfQk9PTEVBTiIsIkJTT05fREFUQV9EQVRFIiwiQlNPTl9EQVRBX05VTEwiLCJCU09OX0RBVEFfUkVHRVhQIiwiQlNPTl9EQVRBX0RCUE9JTlRFUiIsIkJTT05fREFUQV9DT0RFIiwiQlNPTl9EQVRBX1NZTUJPTCIsIkJTT05fREFUQV9DT0RFX1dfU0NPUEUiLCJCU09OX0RBVEFfSU5UIiwiQlNPTl9EQVRBX1RJTUVTVEFNUCIsIkJTT05fREFUQV9MT05HIiwiQlNPTl9EQVRBX0RFQ0lNQUwxMjgiLCJCU09OX0RBVEFfTUlOX0tFWSIsIkJTT05fREFUQV9NQVhfS0VZIiwiQlNPTl9CSU5BUllfU1VCVFlQRV9GVU5DVElPTiIsIkJTT05fQklOQVJZX1NVQlRZUEVfQllURV9BUlJBWSIsIkJTT05fQklOQVJZX1NVQlRZUEVfVVVJRCIsIkJTT05fQklOQVJZX1NVQlRZUEVfTUQ1IiwiQlNPTl9CSU5BUllfU1VCVFlQRV9VU0VSX0RFRklORUQiLCJfdHlwZW9mJDIiLCJrZXlzVG9Db2RlY3MiLCJkZXNlcmlhbGl6ZVZhbHVlIiwiJHVuZGVmaW5lZCIsImZpbHRlciIsInN0YXJ0c1dpdGgiLCIkZGF0ZSIsImRhdGUiLCJwYXJzZSIsIiRkYlBvaW50ZXIiLCJkb2xsYXJLZXlzIiwic3RyaWN0IiwicmVwbGFjZXIiLCJzcGFjZSIsInNlcmlhbGl6ZUFycmF5Iiwic2VyaWFsaXplRG9jdW1lbnQiLCJzZXJpYWxpemUiLCJic29uIiwiZGVzZXJpYWxpemUiLCJlanNvbiIsInNlcmlhbGl6ZVZhbHVlIiwiZ2V0SVNPU3RyaW5nIiwiaXNvU3RyIiwidG9JU09TdHJpbmciLCJnZXRVVENNaWxsaXNlY29uZHMiLCJkYXRlTnVtIiwiaW5SYW5nZSIsImludDY0UmFuZ2UiLCJmbGFncyIsInNvdXJjZSIsIkJTT05fVFlQRV9NQVBQSU5HUyIsInN1YnR5cGUiLCJuYW1lc3BhY2UiLCJMb25nIiwiZnJvbUJpdHMiLCJsb3dfIiwiaGlnaF8iLCJ1bnNpZ25lZCIsInVuc2lnbmVkXyIsIk9iamVjdElEIiwiYnNvbnR5cGUiLCJfYnNvbnR5cGUiLCJfZG9jIiwiX2RvYzIiLCJtYXBwZXIiLCJleHRlbmRlZF9qc29uIiwiRklSU1RfQklUIiwiRklSU1RfVFdPX0JJVFMiLCJGSVJTVF9USFJFRV9CSVRTIiwiRklSU1RfRk9VUl9CSVRTIiwiRklSU1RfRklWRV9CSVRTIiwiVFdPX0JJVF9DSEFSIiwiVEhSRUVfQklUX0NIQVIiLCJGT1VSX0JJVF9DSEFSIiwiQ09OVElOVUlOR19DSEFSIiwidmFsaWRhdGVVdGY4IiwiY29udGludWF0aW9uIiwiYnl0ZSIsInZhbGlkYXRlVXRmOF8xIiwidmFsaWRhdGVfdXRmOCIsIkJ1ZmZlciQ0IiwidmFsaWRhdGVVdGY4JDEiLCJKU19JTlRfTUFYX0xPTkciLCJKU19JTlRfTUlOX0xPTkciLCJmdW5jdGlvbkNhY2hlIiwiZGVzZXJpYWxpemUkMSIsImFsbG93T2JqZWN0U21hbGxlclRoYW5CdWZmZXJTaXplIiwiZGVzZXJpYWxpemVPYmplY3QiLCJldmFsRnVuY3Rpb25zIiwiY2FjaGVGdW5jdGlvbnMiLCJjYWNoZUZ1bmN0aW9uc0NyYzMyIiwiY3JjMzIiLCJmaWVsZHNBc1JhdyIsInJhdyIsImJzb25SZWdFeHAiLCJwcm9tb3RlQnVmZmVycyIsInByb21vdGVMb25ncyIsInByb21vdGVWYWx1ZXMiLCJvYmplY3QiLCJhcnJheUluZGV4IiwiZWxlbWVudFR5cGUiLCJzdHJpbmdTaXplIiwicyIsIl9pbmRleCIsIm9iamVjdFNpemUiLCJfaW5kZXgyIiwiX29iamVjdFNpemUiLCJhcnJheU9wdGlvbnMiLCJzdG9wSW5kZXgiLCJfbG93Qml0cyIsIl9oaWdoQml0cyIsImxvbmckJDEiLCJsZXNzVGhhbk9yRXF1YWwiLCJncmVhdGVyVGhhbk9yRXF1YWwiLCJkZWNpbWFsMTI4JCQxIiwidG9PYmplY3QiLCJiaW5hcnlTaXplIiwidG90YWxCaW5hcnlTaXplIiwicmVnRXhwT3B0aW9ucyIsIm9wdGlvbnNBcnJheSIsIl9zb3VyY2UiLCJfcmVnRXhwT3B0aW9ucyIsIl9zdHJpbmdTaXplIiwiX2xvd0JpdHMyIiwiX2hpZ2hCaXRzMiIsIl9zdHJpbmdTaXplMiIsImZ1bmN0aW9uU3RyaW5nIiwiaXNvbGF0ZUV2YWxXaXRoSGFzaCIsImlzb2xhdGVFdmFsIiwidG90YWxTaXplIiwiX3N0cmluZ1NpemUzIiwiX2Z1bmN0aW9uU3RyaW5nIiwiX2luZGV4MyIsIl9vYmplY3RTaXplMiIsInNjb3BlT2JqZWN0IiwiX2hhc2giLCJfc3RyaW5nU2l6ZTQiLCJvaWRCdWZmZXIiLCJfb2lkIiwiYmluZCIsImRlc2VyaWFsaXplciIsInJlYWRJRUVFNzU0IiwiZW5kaWFuIiwibUxlbiIsIm5CeXRlcyIsImJCRSIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIk5hTiIsIndyaXRlSUVFRTc1NCIsInJ0IiwiYWJzIiwiTE4yIiwiZmxvYXRfcGFyc2VyIiwiX3R5cGVvZiQzIiwiQnVmZmVyJDUiLCJ3cml0ZUlFRUU3NTQkMSIsIm5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQxIiwicmVnZXhwJDEiLCJpZ25vcmVLZXlzIiwiU2V0IiwiaXNEYXRlJDEiLCJpc1JlZ0V4cCQxIiwic2VyaWFsaXplU3RyaW5nIiwibnVtYmVyT2ZXcml0dGVuQnl0ZXMiLCJzZXJpYWxpemVOdW1iZXIiLCJsb25nVmFsIiwiZ2V0SGlnaEJpdHMiLCJzZXJpYWxpemVOdWxsIiwic2VyaWFsaXplQm9vbGVhbiIsInNlcmlhbGl6ZURhdGUiLCJkYXRlSW5NaWxpcyIsInNlcmlhbGl6ZVJlZ0V4cCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJzZXJpYWxpemVCU09OUmVnRXhwIiwic2VyaWFsaXplTWluTWF4Iiwic2VyaWFsaXplT2JqZWN0SWQiLCJzZXJpYWxpemVCdWZmZXIiLCJzZXJpYWxpemVPYmplY3QiLCJjaGVja0tleXMiLCJzZXJpYWxpemVGdW5jdGlvbnMiLCJpZ25vcmVVbmRlZmluZWQiLCJwYXRoIiwic2VyaWFsaXplSW50byIsInNlcmlhbGl6ZURlY2ltYWwxMjgiLCJzZXJpYWxpemVMb25nIiwic2VyaWFsaXplSW50MzIiLCJzZXJpYWxpemVEb3VibGUiLCJzZXJpYWxpemVGdW5jdGlvbiIsInNlcmlhbGl6ZUNvZGUiLCJjb2RlU2l6ZSIsInNlcmlhbGl6ZUJpbmFyeSIsInNlcmlhbGl6ZVN5bWJvbCIsInNlcmlhbGl6ZURCUmVmIiwic3RhcnRpbmdJbmRleCIsInRvQlNPTiIsIl9rZXkiLCJfdmFsdWUiLCJfdHlwZSIsIl9rZXkyIiwiX3ZhbHVlMiIsIl90eXBlMiIsInNlcmlhbGl6ZXIiLCJfdHlwZW9mJDQiLCJCdWZmZXIkNiIsIm5vcm1hbGl6ZWRGdW5jdGlvblN0cmluZyQyIiwiaXNEYXRlJDIiLCJjYWxjdWxhdGVPYmplY3RTaXplIiwidG90YWxMZW5ndGgiLCJjYWxjdWxhdGVFbGVtZW50Iiwib3JkZXJlZF92YWx1ZXMiLCJjYWxjdWxhdGVfc2l6ZSIsIkJ1ZmZlciQ3IiwiZW5zdXJlX2J1ZmZlciIsInBvdGVudGlhbEJ1ZmZlciIsIkJ1ZmZlciQ4IiwiTUFYU0laRSIsImJ1ZmZlciQxIiwic2V0SW50ZXJuYWxCdWZmZXJTaXplIiwic2VyaWFsaXplJDEiLCJtaW5JbnRlcm5hbEJ1ZmZlclNpemUiLCJzZXJpYWxpemF0aW9uSW5kZXgiLCJmaW5pc2hlZEJ1ZmZlciIsInNlcmlhbGl6ZVdpdGhCdWZmZXJBbmRJbmRleCIsImZpbmFsQnVmZmVyIiwiZGVzZXJpYWxpemUkMiIsImNhbGN1bGF0ZU9iamVjdFNpemUkMSIsImRlc2VyaWFsaXplU3RyZWFtIiwibnVtYmVyT2ZEb2N1bWVudHMiLCJkb2N1bWVudHMiLCJkb2NTdGFydEluZGV4IiwiRUpTT04iLCJic29uXzEiLCJic29uXzIiLCJic29uXzMiLCJic29uXzQiLCJic29uXzUiLCJic29uXzYiLCJic29uXzciLCJic29uXzgiLCJic29uXzkiLCJic29uXzEwIiwiYnNvbl8xMSIsImJzb25fMTIiLCJic29uXzEzIiwiYnNvbl8xNCIsImJzb25fMTUiLCJic29uXzE2IiwiYnNvbl8xNyIsImJzb25fMTgiLCJic29uXzE5IiwiYnNvbl8yMCIsImJzb25fMjEiLCJic29uXzIyIiwiYnNvbl8yMyIsImJzb25fMjQiLCJic29uXzI1IiwiYnNvbl8yNiIsImJzb25fMjciLCJic29uXzI4IiwiYnNvbl8yOSIsImJzb25fMzAiLCJic29uXzMxIiwiYnNvbl8zMiIsImJzb25fMzMiLCJic29uXzM0IiwiYnNvbl8zNSIsImJzb25fMzYiLCJic29uXzM3IiwiYnNvbl8zOCIsImJzb25fMzkiLCJic29uXzQwIiwiYnNvbl80MSIsImJzb25fNDIiLCJic29uXzQzIiwiYnNvbl80NCIsImJzb25fNDUiLCJic29uXzQ2IiwiYnNvbl80NyIsImJzb25fNDgiLCJic29uXzQ5IiwiYnNvbl81MCIsImJzb25fNTEiLCJic29uXzUyIiwiYnNvbl81MyIsImJzb25fNTQiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIndhc20iLCJXZWJBc3NlbWJseSIsIkluc3RhbmNlIiwiTW9kdWxlIiwiSU5UX0NBQ0hFIiwiVUlOVF9DQUNIRSIsImNhY2hlZE9iaiIsImNhY2hlIiwiVVpFUk8iLCJUV09fUFdSXzY0X0RCTCIsIk1BWF9VTlNJR05FRF9WQUxVRSIsIlRXT19QV1JfNjNfREJMIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwibmVnIiwiVFdPX1BXUl8zMl9EQkwiLCJwb3dfZGJsIiwicmFkaXgiLCJyYWRpeFRvUG93ZXIiLCJwb3dlciIsImZyb21WYWx1ZSIsIlRXT19QV1JfMTZfREJMIiwiVFdPX1BXUl8yNCIsIk9ORSIsIlVPTkUiLCJORUdfT05FIiwiTG9uZ1Byb3RvdHlwZSIsInRvSW50IiwiaXNaZXJvIiwiZXEiLCJyYWRpeExvbmciLCJyZW0xIiwicmVtRGl2IiwiZ2V0SGlnaEJpdHNVbnNpZ25lZCIsImdldExvd0JpdHNVbnNpZ25lZCIsImdldE51bUJpdHNBYnMiLCJiaXQiLCJlcXoiLCJpc1Bvc2l0aXZlIiwiaXNPZGQiLCJpc0V2ZW4iLCJvdGhlciIsIm5vdEVxdWFscyIsIm5lcSIsIm5lIiwiY29tcCIsImx0IiwibHRlIiwibGUiLCJncmVhdGVyVGhhbiIsImd0IiwiZ3RlIiwiZ2UiLCJ0aGlzTmVnIiwib3RoZXJOZWciLCJuZWdhdGUiLCJub3QiLCJhZGRlbmQiLCJhNDgiLCJhMzIiLCJhMTYiLCJhMDAiLCJiNDgiLCJiMzIiLCJiMTYiLCJjNDgiLCJjMzIiLCJjMTYiLCJjMDAiLCJzdWJ0cmFjdCIsInN1YnRyYWhlbmQiLCJtdWx0aXBsaWVyIiwiZ2V0X2hpZ2giLCJiMDAiLCJkaXZpZGUiLCJkaXZpc29yIiwiYXBwcm94IiwiZGl2X3UiLCJkaXZfcyIsInRvVW5zaWduZWQiLCJzaHJ1Iiwic2hyIiwic2hsIiwibG9nMiIsImNlaWwiLCJkZWx0YSIsImFwcHJveFJlcyIsImFwcHJveFJlbSIsInJlbV91IiwicmVtX3MiLCJtb2QiLCJ4b3IiLCJudW1CaXRzIiwic2hpZnRSaWdodCIsInNocl91IiwidG9TaWduZWQiLCJ0b0J5dGVzIiwidG9CeXRlc0xFIiwidG9CeXRlc0JFIiwiZnJvbUJ5dGVzIiwiZnJvbUJ5dGVzTEUiLCJmcm9tQnl0ZXNCRSIsIl9fZXNNb2R1bGUiLCJwcm9wZXJ0eSIsIkJTT04iLCJCc29uIiwiU2RsUGFja2V0IiwiZW5jcnlwdGlvbiIsImZyYW1lVHlwZSIsImZyYW1lSW5mbyIsImRhdGFTaXplIiwibWVzc2FnZUlEIiwicGF5bG9hZCIsImJ5dGVzVG9Xcml0ZSIsIl92ZXJzaW9uIiwiX2VuY3J5cHRpb24iLCJfZnJhbWVUeXBlIiwiX3NlcnZpY2VUeXBlIiwiX2ZyYW1lSW5mbyIsIl9zZXNzaW9uSUQiLCJfZGF0YVNpemUiLCJfbWVzc2FnZUlEIiwiX3BheWxvYWQiLCJfb2Zmc2V0IiwiX2J5dGVzVG9Xcml0ZSIsIl9ic29uUGF5bG9hZCIsImNvbnN0cnVjdFBhY2tldCIsInRhZyIsIkVOQ1JZUFRJT05fTUFTSyIsImNvbnRyb2xGcmFtZUluZm8iLCJkYXRhVmlldyIsImRhdGFWaWV3SW5kZXgiLCJIRUFERVJfU0laRSIsIkhFQURFUl9TSVpFX1YxIiwiZ2V0RW5jcnlwdGlvbkJpdCIsIkVYVFJBX1BBUkNFTF9EQVRBX0xFTkdUSCIsIlNFUlZJQ0VfVFlQRV9DT05UUk9MIiwiU0VSVklDRV9UWVBFX1JQQyIsIlNFUlZJQ0VfVFlQRV9QQ00iLCJTRVJWSUNFX1RZUEVfVklERU8iLCJTRVJWSUNFX1RZUEVfQlVMS19EQVRBIiwiRlJBTUVfSU5GT19IRUFSVF9CRUFUIiwiRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFIiwiRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX0FDSyIsIkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUsiLCJGUkFNRV9JTkZPX0VORF9TRVJWSUNFIiwiRlJBTUVfSU5GT19FTkRfU0VSVklDRV9BQ0siLCJGUkFNRV9JTkZPX0VORF9TRVJWSUNFX05BSyIsIkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVCIsIkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVF9BQ0siLCJGUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRfTkFLIiwiRlJBTUVfSU5GT19UUkFOU1BPUlRfRVZFTlRfVVBEQVRFIiwiRlJBTUVfSU5GT19TRVJWSUNFX0RBVEFfQUNLIiwiRlJBTUVfSU5GT19IRUFSVF9CRUFUX0FDSyIsIkZSQU1FX0lORk9fRklOQUxfQ09OTkVTQ1VUSVZFX0ZSQU1FIiwiRlJBTUVfSU5GT19SRVNFUlZFRCIsImluaXRlZCIsImluaXQiLCJwbGFjZUhvbGRlcnMiLCJMIiwidHJpcGxldFRvQmFzZTY0IiwiaW50ZXJuYWxJc0J1ZmZlciIsInNsb3dUb1N0cmluZyIsInV0ZjhXcml0ZSIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJiYXNlNjQuZnJvbUJ5dGVBcnJheSIsImllZWU3NTQud3JpdGUiLCJpZWVlNzU0LnJlYWQiLCJiYXNlNjQudG9CeXRlQXJyYXkiLCJpc0Zhc3RCdWZmZXIiLCJpc1Nsb3dCdWZmZXIiLCJUZXh0RW5jb2RlciIsIkxlbiIsInJlc1BvcyIsInJlc0FyciIsInBvaW50IiwibmV4dGNvZGUiLCJKc29uUnBjTWFyc2hhbGxlciIsInJwY1N0cnVjdCIsImpzb25CeXRlcyIsImpzb25PYmplY3QiLCJwYXJhbWlmeSIsImdldFBhcmFtZXRlcnMiLCJzdHJpbmdWZXJzaW9uIiwiX2VuY29kZSIsImpzb25TdHJpbmciLCJfZGVjb2RlIiwiZW5jb2RlIiwiQmluYXJ5RnJhbWVIZWFkZXIiLCJmdW5jdGlvbklkIiwianNvblNpemUiLCJfZnVuY3Rpb25JZCIsIl9jb3JyZWxhdGlvbklkIiwiX2pzb25TaXplIiwiX2pzb25EYXRhIiwiYmluYXJ5RnJhbWVIZWFkZXJEYXRhIiwiYmluYXJ5RnJhbWVIZWFkZXIiLCJqc29uRGF0YVN0YXJ0IiwianNvbkRhdGFFbmQiLCJzZXRKc29uRGF0YSIsIk1lc3NhZ2VGcmFtZURpc2Fzc2VtYmxlciIsInJwY1JlcXVlc3QiLCJtZXNzYWdlSWQiLCJtdHUiLCJwYWNrZXRDYWxsYmFjayIsIl9ycGNSZXF1ZXN0IiwiX3Nlc3Npb25JZCIsIl9tZXNzYWdlSWQiLCJfbXR1IiwiX3BhY2tldENhbGxiYWNrIiwicnBjQnVsa0RhdGEiLCJnZXRCdWxrRGF0YSIsImdldENvcnJlbGF0aW9uSWQiLCJnZXRSUENUeXBlIiwiZ2V0RnVuY3Rpb25OYW1lIiwidmFsdWVGb3JLZXkiLCJqc29uQnVmZmVyIiwibWFyc2hhbGwiLCJiZmgiLCJzZXRKc29uU2l6ZSIsImJ1bGtEYXRhU2l6ZSIsImFzc2VtYmxlSGVhZGVyQnl0ZXMiLCJtYWluQnVmZmVyIiwiX2J1aWxkUlBDTWFpbkJ1ZmZlciIsImZyYW1lQ291bnQiLCJmdWxsUGFja2V0IiwiX2NvbnN0cnVjdFBhY2tldCIsInZpZXciLCJEYXRhVmlldyIsInNldFVpbnQzMiIsImZpcnN0SGVhZGVyIiwiX2J1aWxkQ29uc2VjdXRpdmVGcmFtZXMiLCJmcmFtZVNlcXVlbmNlTnVtYmVyIiwiY291bnQiLCJoZWFkZXIiLCJjYiIsImRvUmVxdWVzdCIsIlRyYW5zcG9ydExpc3RlbmVyIiwiX29uVHJhbnNwb3J0RGlzY29ubmVjdGVkIiwiX29uUGFja2V0UmVjZWl2ZWQiLCJzZGxQYWNrZXQiLCJWZXJzaW9uIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwic2V0TWFqb3IiLCJzZXRNaW5vciIsInNldFBhdGNoIiwiX21ham9yIiwiX21pbm9yIiwiX3BhdGNoIiwidmVyc2lvbnMiLCJnZXRNYWpvciIsImdldE1pbm9yIiwiZ2V0UGF0Y2giLCJTZXJ2aWNlVHlwZSIsIlJQQyIsIkFVRElPIiwiVklERU8iLCJIWUJSSUQiLCJNZXNzYWdlRnJhbWVBc3NlbWJsZXIiLCJfY2FsbGJhY2siLCJfYWNjdW11bGF0b3IiLCJfdG90YWxDb25zZWN1dGl2ZUZyYW1lcyIsIl9jb25zZWN1dGl2ZUZyYW1lc0hhbmRsZWRDb3VudCIsIl9jb25zZWN1dGl2ZUZyYW1lc0RhdGFMZW5ndGgiLCJnZXRGcmFtZVR5cGUiLCJfaGFuZGxlTXVsdGlGcmFtZU1lc3NhZ2UiLCJnZXRQYXlsb2FkIiwiZGF0YUxlbmd0aCIsImZyYW1lU2VxdWVuY2UiLCJnZXRGcmFtZUluZm8iLCJ3YXJuIiwiZmluaXNoZWRTZGxQYWNrZXQiLCJnZXRWZXJzaW9uIiwiZ2V0RW5jcnlwdGlvbiIsImdldFNlcnZpY2VUeXBlIiwiZ2V0U2Vzc2lvbklEIiwiZ2V0TWVzc2FnZUlEIiwiX2hhbmRsZUZpcnN0RGF0YUZyYW1lIiwiX2hhbmRsZUNvbnNlY3V0aXZlRnJhbWUiLCJDb250cm9sRnJhbWVUYWdzIiwiU3RhcnRTZXJ2aWNlQUNLQmFzZSIsIk1UVSIsIk5BS0Jhc2UiLCJSRUpFQ1RFRF9QQVJBTVMiLCJTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24iLCJQUk9UT0NPTF9WRVJTSU9OIiwiU3RhcnRTZXJ2aWNlSGFzaElkIiwiSEFTSF9JRCIsIlN0YXJ0U2VydmljZURpbWVuc2lvbnMiLCJIRUlHSFQiLCJXSURUSCIsIlN0YXJ0U2VydmljZSIsIlN0YXJ0U2VydmljZUFDSyIsIlNFQ09OREFSWV9UUkFOU1BPUlRTIiwiQVVESU9fU0VSVklDRV9UUkFOU1BPUlRTIiwiVklERU9fU0VSVklDRV9UUkFOU1BPUlRTIiwiQVVUSF9UT0tFTiIsIlN0YXJ0U2VydmljZU5BSyIsIkVuZFNlcnZpY2UiLCJFbmRTZXJ2aWNlQUNLIiwiRW5kU2VydmljZU5BSyIsIlRyYW5zcG9ydEV2ZW50VXBkYXRlIiwiVENQX0lQX0FERFJFU1MiLCJUQ1BfUE9SVCIsIlJlZ2lzdGVyU2Vjb25kYXJ5VHJhbnNwb3J0IiwiUmVnaXN0ZXJTZWNvbmRhcnlUcmFuc3BvcnRBQ0siLCJSZWdpc3RlclNlY29uZGFyeVRyYW5zcG9ydE5BSyIsIlJFQVNPTiIsIkF1ZGlvIiwiVmlkZW8iLCJWSURFT19QUk9UT0NPTCIsIlZJREVPX0NPREVDIiwiQml0Q29udmVydGVyIiwiZ2V0VWludDMyIiwiU2RsUGFja2V0RmFjdG9yeSIsImludDMyVG9BcnJheUJ1ZmZlciIsImVuZFNlc3Npb24iLCJwdXRUYWciLCJJbWFnZVR5cGUiLCJTVEFUSUMiLCJEWU5BTUlDIiwiSW1hZ2UiLCJLRVlfVkFMVUUiLCJLRVlfSU1BR0VfVFlQRSIsImlzVGVtcGxhdGUiLCJLRVlfSVNfVEVNUExBVEUiLCJNZW51UGFyYW1zIiwiS0VZX1BBUkVOVF9JRCIsIktFWV9QT1NJVElPTiIsIm1lbnVOYW1lIiwiS0VZX01FTlVfTkFNRSIsIktFWV9DTURfSUQiLCJtZW51UGFyYW1zIiwiS0VZX01FTlVfUEFSQU1TIiwidnJDb21tYW5kcyIsIktFWV9WUl9DT01NQU5EUyIsImljb24iLCJLRVlfQ01EX0lDT04iLCJBZGRDb21tYW5kUmVzcG9uc2UiLCJScGNOb3RpZmljYXRpb24iLCJITUlMZXZlbCIsIkhNSV9GVUxMIiwiSE1JX0xJTUlURUQiLCJITUlfQkFDS0dST1VORCIsIkhNSV9OT05FIiwiQXVkaW9TdHJlYW1pbmdTdGF0ZSIsIkFVRElCTEUiLCJBVFRFTlVBVEVEIiwiTk9UX0FVRElCTEUiLCJWaWRlb1N0cmVhbWluZ1N0YXRlIiwiU1RSRUFNQUJMRSIsIk5PVF9TVFJFQU1BQkxFIiwiU3lzdGVtQ29udGV4dCIsIlNZU0NUWFRfTUFJTiIsIlNZU0NUWFRfVlJTRVNTSU9OIiwiU1lTQ1RYVF9NRU5VIiwiU1lTQ1RYVF9ITUlfT0JTQ1VSRUQiLCJTWVNDVFhUX0FMRVJUIiwiT25IbWlTdGF0dXMiLCJobWlMZXZlbCIsIktFWV9ITUlfTEVWRUwiLCJhdWRpb1N0cmVhbWluZ1N0YXRlIiwiS0VZX0FVRElPX1NUUkVBTUlOR19TVEFURSIsInN5c3RlbUNvbnRleHQiLCJLRVlfU1lTVEVNX0NPTlRFWFQiLCJ2aWRlb1N0cmVhbWluZ1N0YXRlIiwiS0VZX1ZJREVPX1NUUkVBTUlOR19TVEFURSIsIndpbmRvd0lEIiwiS0VZX1dJTkRPV19JRCIsImxhbmd1YWdlIiwiS0VZX0xBTkdVQUdFIiwiS0VZX0hNSV9ESVNQTEFZX0xBTkdVQUdFIiwiRmlsZVR5cGUiLCJHUkFQSElDX0JNUCIsIkdSQVBISUNfSlBFRyIsIkdSQVBISUNfUE5HIiwiQVVESU9fV0FWRSIsIkFVRElPX0FBQyIsIkJJTkFSWSIsImZpbGVOYW1lIiwiS0VZX0ZJTEVfTkFNRSIsImZpbGVUeXBlIiwiS0VZX0ZJTEVfVFlQRSIsInBlcnNpc3RlbnRGaWxlIiwiS0VZX1BFUlNJU1RFTlRfRklMRSIsInN5c3RlbUZpbGUiLCJLRVlfU1lTVEVNX0ZJTEUiLCJLRVlfT0ZGU0VUIiwiS0VZX0xFTkdUSCIsImNyYyIsIktFWV9DUkMiLCJQdXRGaWxlUmVzcG9uc2UiLCJzcGFjZUF2YWlsYWJsZSIsIktFWV9TUEFDRV9BVkFJTEFCTEUiLCJUZXh0RmllbGROYW1lIiwibWFpbkZpZWxkMSIsIm1haW5GaWVsZDIiLCJtYWluRmllbGQzIiwibWFpbkZpZWxkNCIsInN0YXR1c0JhciIsIm1lZGlhQ2xvY2siLCJtZWRpYVRyYWNrIiwidGVtcGxhdGVUaXRsZSIsImFsZXJ0VGV4dDEiLCJhbGVydFRleHQyIiwiYWxlcnRUZXh0MyIsInNjcm9sbGFibGVNZXNzYWdlQm9keSIsImluaXRpYWxJbnRlcmFjdGlvblRleHQiLCJuYXZpZ2F0aW9uVGV4dDEiLCJuYXZpZ2F0aW9uVGV4dDIiLCJFVEEiLCJ0b3RhbERpc3RhbmNlIiwiYXVkaW9QYXNzVGhydURpc3BsYXlUZXh0MSIsImF1ZGlvUGFzc1RocnVEaXNwbGF5VGV4dDIiLCJzbGlkZXJIZWFkZXIiLCJzbGlkZXJGb290ZXIiLCJzZWNvbmRhcnlUZXh0IiwidGVydGlhcnlUZXh0IiwibWVudVRpdGxlIiwibG9jYXRpb25OYW1lIiwibG9jYXRpb25EZXNjcmlwdGlvbiIsImFkZHJlc3NMaW5lcyIsInBob25lTnVtYmVyIiwiQ2hhcmFjdGVyU2V0IiwiVFlQRTJTRVQiLCJUWVBFNVNFVCIsIkNJRDFTRVQiLCJDSUQyU0VUIiwiVGV4dEZpZWxkIiwidGV4dEZpZWxkTmFtZSIsIktFWV9OQU1FIiwiY2hhcmFjdGVyU2V0IiwiS0VZX0NIQVJBQ1RFUl9TRVQiLCJ3aWR0aCIsIktFWV9XSURUSCIsInJvd3MiLCJLRVlfUk9XUyIsIkltYWdlUmVzb2x1dGlvbiIsInJlc29sdXRpb25XaWR0aCIsIktFWV9SRVNPTFVUSU9OX1dJRFRIIiwicmVzb2x1dGlvbkhlaWdodCIsIktFWV9SRVNPTFVUSU9OX0hFSUdIVCIsIkltYWdlRmllbGROYW1lIiwic29mdEJ1dHRvbkltYWdlIiwiY2hvaWNlSW1hZ2UiLCJjaG9pY2VTZWNvbmRhcnlJbWFnZSIsInZySGVscEl0ZW0iLCJ0dXJuSWNvbiIsIm1lbnVJY29uIiwiY21kSWNvbiIsImdyYXBoaWMiLCJzZWNvbmRhcnlHcmFwaGljIiwic2hvd0NvbnN0YW50VEJUSWNvbiIsInNob3dDb25zdGFudFRCVE5leHRUdXJuSWNvbiIsImxvY2F0aW9uSW1hZ2UiLCJhbGVydEljb24iLCJJbWFnZUZpZWxkIiwiaW1hZ2VGaWVsZE5hbWUiLCJpbWFnZVR5cGVTdXBwb3J0ZWQiLCJLRVlfSU1BR0VfVFlQRV9TVVBQT1JURUQiLCJpbWFnZVJlc29sdXRpb24iLCJLRVlfSU1BR0VfUkVTT0xVVElPTiIsIlRvdWNoRXZlbnRDYXBhYmlsaXRpZXMiLCJwcmVzc0F2YWlsYWJsZSIsIktFWV9QUkVTU19BVkFJTEFCTEUiLCJtdWx0aVRvdWNoQXZhaWxhYmxlIiwiS0VZX01VTFRJX1RPVUNIX0FWQUlMQUJMRSIsImRvdWJsZVByZXNzQXZhaWxhYmxlIiwiS0VZX0RPVUJMRV9QUkVTU19BVkFJTEFCTEUiLCJTY3JlZW5QYXJhbXMiLCJyZXNvbHV0aW9uIiwiS0VZX1JFU09MVVRJT04iLCJ0b3VjaEV2ZW50Q2FwYWJpbGl0aWVzIiwiS0VZX1RPVUNIX0VWRU5UX0FWQUlMQUJMRSIsIkRpc3BsYXlUeXBlIiwiQ0lEIiwiVFlQRTIiLCJUWVBFNSIsIk5HTiIsIkdFTjJfOF9ETUEiLCJHRU4yXzZfRE1BIiwiTUZEMyIsIk1GRDQiLCJNRkQ1IiwiR0VOM184X0lOQ0giLCJTRExfR0VORVJJQyIsIk1lZGlhQ2xvY2tGb3JtYXQiLCJDTE9DSzEiLCJDTE9DSzIiLCJDTE9DSzMiLCJDTE9DS1RFWFQxIiwiQ0xPQ0tURVhUMiIsIkNMT0NLVEVYVDMiLCJDTE9DS1RFWFQ0IiwiRGlzcGxheUNhcGFiaWxpdGllcyIsImRpc3BsYXlUeXBlIiwiS0VZX0RJU1BMQVlfVFlQRSIsImRpc3BsYXlOYW1lIiwiS0VZX0RJU1BMQVlfTkFNRSIsInRleHRGaWVsZHMiLCJLRVlfVEVYVF9GSUVMRFMiLCJpbWFnZUZpZWxkcyIsIktFWV9JTUFHRV9GSUVMRFMiLCJtZWRpYUNsb2NrRm9ybWF0cyIsIktFWV9NRURJQV9DTE9DS19GT1JNQVRTIiwiZ3JhcGhpY1N1cHBvcnRlZCIsIktFWV9HUkFQSElDU19TVVBQT1JURUQiLCJ0ZW1wbGF0ZXNBdmFpbGFibGUiLCJLRVlfVEVNUExBVEVTX0FWQUlMQUJMRSIsInNjcmVlblBhcmFtcyIsIktFWV9TQ1JFRU5fUEFSQU1TIiwibnVtQ3VzdG9tUHJlc2V0c0F2YWlsYWJsZSIsIktFWV9OVU1fQ1VTVE9NX1BSRVNFVFNfQVZBSUxBQkxFIiwiR3JpZCIsImNvbHVtbiIsIktFWV9DT0xVTU4iLCJyb3ciLCJLRVlfUk9XIiwibGV2ZWwiLCJLRVlfTEVWRUwiLCJjb2x1bW5TcGFuIiwiS0VZX0NPTFVNTl9TUEFOIiwicm93U3BhbiIsIktFWV9ST1dfU1BBTiIsImxldmVsU3BhbiIsIktFWV9MRVZFTF9TUEFOIiwiTW9kdWxlSW5mbyIsIktFWV9NT0RVTEVfSUQiLCJsb2NhdGlvbiIsIktFWV9MT0NBVElPTiIsInNlcnZpY2VBcmVhIiwiS0VZX1NFUlZJQ0VfQVJFQSIsImFsbG93TXVsdGlwbGVBY2Nlc3MiLCJLRVlfQUxMT1dfTVVMVElQTEVfQUNDRVNTIiwiQnV0dG9uTmFtZSIsIk9LIiwiUExBWV9QQVVTRSIsIlNFRUtMRUZUIiwiU0VFS1JJR0hUIiwiVFVORVVQIiwiVFVORURPV04iLCJQUkVTRVRfMCIsIlBSRVNFVF8xIiwiUFJFU0VUXzIiLCJQUkVTRVRfMyIsIlBSRVNFVF80IiwiUFJFU0VUXzUiLCJQUkVTRVRfNiIsIlBSRVNFVF83IiwiUFJFU0VUXzgiLCJQUkVTRVRfOSIsIkNVU1RPTV9CVVRUT04iLCJTRUFSQ0giLCJBQ19NQVgiLCJBQyIsIlJFQ0lSQ1VMQVRFIiwiRkFOX1VQIiwiRkFOX0RPV04iLCJURU1QX1VQIiwiVEVNUF9ET1dOIiwiREVGUk9TVF9NQVgiLCJERUZST1NUIiwiREVGUk9TVF9SRUFSIiwiVVBQRVJfVkVOVCIsIkxPV0VSX1ZFTlQiLCJWT0xVTUVfVVAiLCJWT0xVTUVfRE9XTiIsIkVKRUNUIiwiU09VUkNFIiwiU0hVRkZMRSIsIlJFUEVBVCIsIk5BVl9DRU5URVJfTE9DQVRJT04iLCJOQVZfWk9PTV9JTiIsIk5BVl9aT09NX09VVCIsIk5BVl9QQU5fVVAiLCJOQVZfUEFOX1VQX1JJR0hUIiwiTkFWX1BBTl9SSUdIVCIsIk5BVl9QQU5fRE9XTl9SSUdIVCIsIk5BVl9QQU5fRE9XTiIsIk5BVl9QQU5fRE9XTl9MRUZUIiwiTkFWX1BBTl9MRUZUIiwiTkFWX1BBTl9VUF9MRUZUIiwiTkFWX1RJTFRfVE9HR0xFIiwiTkFWX1JPVEFURV9DTE9DS1dJU0UiLCJOQVZfUk9UQVRFX0NPVU5URVJDTE9DS1dJU0UiLCJOQVZfSEVBRElOR19UT0dHTEUiLCJCdXR0b25DYXBhYmlsaXRpZXMiLCJtb2R1bGVJbmZvIiwiS0VZX01PRFVMRV9JTkZPIiwic2hvcnRQcmVzc0F2YWlsYWJsZSIsIktFWV9TSE9SVF9QUkVTU19BVkFJTEFCTEUiLCJsb25nUHJlc3NBdmFpbGFibGUiLCJLRVlfTE9OR19QUkVTU19BVkFJTEFCTEUiLCJ1cERvd25BdmFpbGFibGUiLCJLRVlfVVBfRE9XTl9BVkFJTEFCTEUiLCJTb2Z0QnV0dG9uQ2FwYWJpbGl0aWVzIiwiaW1hZ2VTdXBwb3J0ZWQiLCJLRVlfSU1BR0VfU1VQUE9SVEVEIiwidGV4dFN1cHBvcnRlZCIsIktFWV9URVhUX1NVUFBPUlRFRCIsIlByZXNldEJhbmtDYXBhYmlsaXRpZXMiLCJvblNjcmVlblByZXNldHNBdmFpbGFibGUiLCJLRVlfT05fU0NSRUVOX1BSRVNFVFNfQVZBSUxBQkxFIiwiVmVoaWNsZVR5cGUiLCJtYWtlIiwiS0VZX01BS0UiLCJtb2RlbCIsIktFWV9NT0RFTCIsIm1vZGVsWWVhciIsIktFWV9NT0RFTF9ZRUFSIiwiS0VZX1RSSU0iLCJIbWlab25lQ2FwYWJpbGl0aWVzIiwiRlJPTlQiLCJCQUNLIiwiUHJlcmVjb3JkZWRTcGVlY2giLCJIRUxQX0pJTkdMRSIsIklOSVRJQUxfSklOR0xFIiwiTElTVEVOX0pJTkdMRSIsIlBPU0lUSVZFX0pJTkdMRSIsIk5FR0FUSVZFX0pJTkdMRSIsIlNhbXBsaW5nUmF0ZSIsIlNhbXBsaW5nUmF0ZV84S0haIiwiU2FtcGxpbmdSYXRlXzE2S0haIiwiU2FtcGxpbmdSYXRlXzIyS0haIiwiU2FtcGxpbmdSYXRlXzQ0S0haIiwiQml0c1BlclNhbXBsZSIsIkJpdHNQZXJTYW1wbGVfOF9CSVQiLCJCaXRzUGVyU2FtcGxlXzE2X0JJVCIsIkF1ZGlvVHlwZSIsIlBDTSIsIkF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMiLCJzYW1wbGluZ1JhdGUiLCJLRVlfU0FNUExJTkdfUkFURSIsImJpdHNQZXJTYW1wbGUiLCJLRVlfQklUU19QRVJfU0FNUExFIiwiYXVkaW9UeXBlIiwiS0VZX0FVRElPX1RZUEUiLCJWckNhcGFiaWxpdGllcyIsIlZSX1RFWFQiLCJITUlDYXBhYmlsaXRpZXMiLCJuYXZpZ2F0aW9uIiwiS0VZX05BVklHQVRJT04iLCJwaG9uZUNhbGwiLCJLRVlfUEhPTkVfQ0FMTCIsInZpZGVvU3RyZWFtaW5nIiwiS0VZX1ZJREVPX1NUUkVBTUlORyIsInJlbW90ZUNvbnRyb2wiLCJLRVlfUkVNT1RFX0NPTlRST0wiLCJhcHBTZXJ2aWNlcyIsIktFWV9BUFBfU0VSVklDRVMiLCJkaXNwbGF5cyIsIktFWV9ESVNQTEFZUyIsInNlYXRMb2NhdGlvbiIsIktFWV9TRUFUX0xPQ0FUSU9OIiwiUmVnaXN0ZXJBcHBJbnRlcmZhY2VSZXNwb25zZSIsImhtaURpc3BsYXlMYW5ndWFnZSIsImRpc3BsYXlDYXBhYmlsaXRpZXMiLCJLRVlfRElTUExBWV9DQVBBQklMSVRJRVMiLCJidXR0b25DYXBhYmlsaXRpZXMiLCJLRVlfQlVUVE9OX0NBUEFCSUxJVElFUyIsInNvZnRCdXR0b25DYXBhYmlsaXRpZXMiLCJLRVlfU09GVF9CVVRUT05fQ0FQQUJJTElUSUVTIiwicHJlc2V0QmFua0NhcGFiaWxpdGllcyIsIktFWV9QUkVTRVRfQkFOS19DQVBBQklMSVRJRVMiLCJobWlab25lQ2FwYWJpbGl0aWVzIiwiS0VZX0hNSV9aT05FX0NBUEFCSUxJVElFUyIsInNwZWVjaENhcGFiaWxpdGllcyIsIktFWV9TUEVFQ0hfQ0FQQUJJTElUSUVTIiwiS0VZX1BSRVJFQ09SREVEX1NQRUVDSCIsInZyQ2FwYWJpbGl0aWVzIiwiS0VZX1ZSX0NBUEFCSUxJVElFUyIsImF1ZGlvUGFzc1RocnVDYXBhYmlsaXRpZXMiLCJLRVlfQVVESU9fUEFTU19USFJVX0NBUEFCSUxJVElFUyIsInBjbVN0cmVhbUNhcGFiaWxpdGllcyIsIktFWV9QQ01fU1RSRUFNX0NBUEFCSUxJVElFUyIsInZlaGljbGVUeXBlIiwiS0VZX1ZFSElDTEVfVFlQRSIsInN1cHBvcnRlZERpYWdNb2RlcyIsIktFWV9TVVBQT1JURURfRElBR19NT0RFIiwiaG1pQ2FwYWJpbGl0aWVzIiwiS0VZX0hNSV9DQVBBQklMSVRJRVMiLCJzZGxWZXJzaW9uIiwiS0VZX1NETF9WRVJTSU9OIiwic3lzdGVtU29mdHdhcmVWZXJzaW9uIiwiS0VZX1NZU1RFTV9TT0ZUV0FSRV9WRVJTSU9OIiwiaWNvblJlc3VtZWQiLCJLRVlfSUNPTl9SRVNVTUVEIiwiU2V0QXBwSWNvblJlc3BvbnNlIiwiU29mdEJ1dHRvblR5cGUiLCJTQlRfVEVYVCIsIlNCVF9JTUFHRSIsIlNCVF9CT1RIIiwiU3lzdGVtQWN0aW9uIiwiREVGQVVMVF9BQ1RJT04iLCJTVEVBTF9GT0NVUyIsIktFRVBfQ09OVEVYVCIsIlNvZnRCdXR0b24iLCJpbWFnZSIsIktFWV9JTUFHRSIsImlzSGlnaGxpZ2h0ZWQiLCJLRVlfSVNfSElHSExJR0hURUQiLCJzb2Z0QnV0dG9uSUQiLCJLRVlfU09GVF9CVVRUT05fSUQiLCJzeXN0ZW1BY3Rpb24iLCJLRVlfU1lTVEVNX0FDVElPTiIsIk1ldGFkYXRhVHlwZSIsIm1lZGlhVGl0bGUiLCJtZWRpYUFydGlzdCIsIm1lZGlhQWxidW0iLCJtZWRpYVllYXIiLCJtZWRpYUdlbnJlIiwibWVkaWFTdGF0aW9uIiwicmF0aW5nIiwiY3VycmVudFRlbXBlcmF0dXJlIiwibWF4aW11bVRlbXBlcmF0dXJlIiwibWluaW11bVRlbXBlcmF0dXJlIiwid2VhdGhlclRlcm0iLCJodW1pZGl0eSIsIk1ldGFkYXRhVGFncyIsIktFWV9NQUlOX0ZJRUxEXzEiLCJLRVlfTUFJTl9GSUVMRF8yIiwiS0VZX01BSU5fRklFTERfMyIsIktFWV9NQUlOX0ZJRUxEXzQiLCJUZXh0QWxpZ25tZW50IiwiTEVGVF9BTElHTkVEIiwiUklHSFRfQUxJR05FRCIsIkNFTlRFUkVEIiwiYWxpZ25tZW50IiwiS0VZX0FMSUdOTUVOVCIsIktFWV9TVEFUVVNfQkFSIiwiS0VZX01FRElBX0NMT0NLIiwiS0VZX01FRElBX1RSQUNLIiwiS0VZX0dSQVBISUMiLCJLRVlfU0VDT05EQVJZX0dSQVBISUMiLCJzb2Z0QnV0dG9ucyIsIktFWV9TT0ZUX0JVVFRPTlMiLCJjdXN0b21QcmVzZXRzIiwiS0VZX0NVU1RPTV9QUkVTRVRTIiwibWV0YWRhdGFUYWdzIiwiS0VZX01FVEFEQVRBX1RBR1MiLCJLRVlfVEVNUExBVEVfVElUTEUiLCJTaG93UmVzcG9uc2UiLCJScGNDcmVhdG9yIiwiZnJvbUJpbmFyeUhlYWRlciIsImdldFJwY1R5cGUiLCJycGNOYW1lIiwiZ2V0RnVuY3Rpb25JZCIsImpzb25EYXRhIiwiZ2V0SnNvbkRhdGEiLCJ1bm1hcnNoYWxsIiwic2V0Q29ycmVsYXRpb25JZCIsIlZpZGVvU3RyZWFtaW5nUHJvdG9jb2wiLCJSQVciLCJSVFAiLCJSVFNQIiwiUlRNUCIsIldFQk0iLCJWaWRlb1N0cmVhbWluZ0NvZGVjIiwiSDI2NCIsIkgyNjUiLCJUaGVvcmEiLCJWUDgiLCJWUDkiLCJWaWRlb1N0cmVhbWluZ0Zvcm1hdCIsIktFWV9QUk9UT0NPTCIsIktFWV9DT0RFQyIsIlNkbFByb3RvY29sQmFzZSIsImJhc2VUcmFuc3BvcnRDb25maWciLCJzZGxQcm90b2NvbExpc3RlbmVyIiwiX2Jhc2VUcmFuc3BvcnRDb25maWciLCJfc2RsUHJvdG9jb2xMaXN0ZW5lciIsIl90cmFuc3BvcnRNYW5hZ2VyIiwicmVzZXQiLCJfY3JlYXRlVHJhbnNwb3J0TGlzdGVuZXIiLCJfcHJvdG9jb2xWZXJzaW9uIiwiX2hlYWRlclNpemUiLCJWMV9IRUFERVJfU0laRSIsIl9zZXJ2aWNlU3RhdHVzIiwiX210dXMiLCJWMV9WMl9NVFVfU0laRSIsIl9oYXNoSUQiLCJfbWVzc2FnZUZyYW1lQXNzZW1ibGVycyIsIm1hbmFnZXIiLCJzdGFydFNlcnZpY2UiLCJfdHJhbnNwb3J0TGlzdGVuZXIiLCJzZXRPblRyYW5zcG9ydENvbm5lY3RlZCIsIl9oYW5kbGVUcmFuc3BvcnRDb25uZWN0ZWQiLCJzZXRPblRyYW5zcG9ydERpc2Nvbm5lY3RlZCIsInNldE9uUGFja2V0UmVjZWl2ZWQiLCJfaGFuZGxlUGFja2V0UmVjZWl2ZWQiLCJzZXRPbkVycm9yIiwib25UcmFuc3BvcnRDb25uZWN0ZWQiLCJwcm90b2NvbFZlcnNpb24iLCJNQVhfUFJPVE9DT0xfVkVSU0lPTiIsInNlbmRQYWNrZXQiLCJ2aWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMiLCJnZXREZXNpcmVkVmlkZW9QYXJhbXMiLCJkZXNpcmVkUmVzb2x1dGlvbiIsImdldFJlc29sdXRpb24iLCJkZXNpcmVkRm9ybWF0IiwiZ2V0Rm9ybWF0IiwiZ2V0UmVzb2x1dGlvbldpZHRoIiwiZ2V0UmVzb2x1dGlvbkhlaWdodCIsImdldENvZGVjIiwiZ2V0UHJvdG9jb2wiLCJyZXRWYWwiLCJpc0Nvbm5lY3RlZCIsImhlYWRlclNpemUiLCJWMl9IRUFERVJfU0laRSIsIlYzX1Y0X01UVV9TSVpFIiwiZ2V0U2Vzc2lvbklkIiwiX2dldE5leHRNZXNzYWdlSUQiLCJnZXRJc0VuY3J5cHRlZCIsImJ1aWxkUlBDIiwiX3NldFZlcnNpb24iLCJfaGFuZGxlQ29udHJvbFBhY2tldCIsIl9nZXRNZXNzYWdlRnJhbWVBc3NlbWJsZXIiLCJoYW5kbGVGcmFtZSIsIl9oYW5kbGVSUENQYWNrZXQiLCJtZXNzYWdlRnJhbWVBc3NlbWJsZXIiLCJfaGFuZGxlT25NZXNzYWdlQXNzZW1ibGVkIiwiX2hhbmRsZVByb3RvY29sSGVhcnRiZWF0IiwiX2hhbmRsZVByb3RvY29sSGVhcnRiZWF0QUNLIiwiX2hhbmRsZVN0YXJ0U2VydmljZUFDSyIsIl9oYW5kbGVTdGFydFNlcnZpY2VOQUsiLCJfaGFuZGxlRW5kU2VydmljZUFDSyIsIl9oYW5kbGVFbmRTZXJ2aWNlIiwiX2hhbmRsZUVuZFNlcnZpY2VOQUsiLCJoZWFydGJlYXQiLCJjcmVhdGVIZWFydGJlYXRBQ0siLCJtdHVUYWciLCJOQVYiLCJnZXRUYWciLCJhY2NlcHRlZFJlc29sdXRpb24iLCJhY2NlcHRlZEZvcm1hdCIsInNldFJlc29sdXRpb25IZWlnaHQiLCJzZXRSZXNvbHV0aW9uV2lkdGgiLCJzZXRDb2RlYyIsInNldFByb3RvY29sIiwiYWdyZWVkVmlkZW9QYXJhbXMiLCJzZXRSZXNvbHV0aW9uIiwic2V0Rm9ybWF0Iiwic2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyIsImFycmF5QnVmZmVyVG9JbnQzMiIsIm9uUHJvdG9jb2xTZXNzaW9uU3RhcnRlZCIsIl9oYW5kbGVTZXJ2aWNlRW5kZWQiLCJvblByb3RvY29sU2Vzc2lvbkVuZGVkIiwicmVqZWN0ZWRUYWciLCJyZWplY3RlZFBhcmFtcyIsIm9uUHJvdG9jb2xTZXNzaW9uRW5kZWROQUNLZWQiLCJjb25zdHJ1Y3QiLCJvblJwY01lc3NhZ2VSZWNlaXZlZCIsImNyZWF0ZUVuZFNlc3Npb24iLCJUcmFuc3BvcnRUeXBlIiwiV0VCU09DS0VUX0NMSUVOVCIsIldFQlNPQ0tFVF9TRVJWRVIiLCJDVVNUT00iLCJTZGxQc20iLCJfc3RhdGUiLCJTVEFSVF9TVEFURSIsIl9jb250cm9sRnJhbWVJbmZvIiwiX2R1bXBTaXplIiwiX2RhdGFMZW5ndGgiLCJGSU5JU0hFRF9TVEFURSIsIl90cmFuc2l0aW9uT25JbnB1dCIsIkVSUk9SX1NUQVRFIiwicmF3Qnl0ZSIsInN0YXRlIiwiVkVSU0lPTl9NQVNLIiwiRlJBTUVfVFlQRV9NQVNLIiwiU0VSVklDRV9UWVBFX1NUQVRFIiwiQ09OVFJPTF9GUkFNRV9JTkZPX1NUQVRFIiwiU0VTU0lPTl9JRF9TVEFURSIsIkRBVEFfU0laRV8xX1NUQVRFIiwiREFUQV9TSVpFXzJfU1RBVEUiLCJEQVRBX1NJWkVfM19TVEFURSIsIkRBVEFfU0laRV80X1NUQVRFIiwiTUVTU0FHRV8xX1NUQVRFIiwiTUVTU0FHRV8yX1NUQVRFIiwiTUVTU0FHRV8zX1NUQVRFIiwiTUVTU0FHRV80X1NUQVRFIiwiREFUQV9QVU1QX1NUQVRFIiwiRklSU1RfRlJBTUVfREFUQV9TSVpFIiwiVHJhbnNwb3J0QmFzZSIsInRyYW5zcG9ydENhbGxiYWNrIiwiX3NkbFBzbSIsIl90cmFuc3BvcnRDYWxsYmFjayIsIldlYlNvY2tldENsaWVudCIsImNvbmZpZyIsIl9xdWV1ZSIsIl9pc1J1bm5pbmciLCJfd3NVcmwiLCJnZXRIb3N0IiwiZ2V0UG9ydCIsIl93cyIsIl9pbml0IiwiV2ViU29ja2V0Iiwib25vcGVuIiwiX3RoaXMyIiwib25Db25uZWN0aW9uRXN0YWJsaXNoZWQiLCJvbmVycm9yIiwib25FcnJvciIsIm9ubWVzc2FnZSIsIl9oYW5kbGVJbmNvbWluZyIsIm9uY2xvc2UiLCJvbkNvbm5lY3Rpb25UZXJtaW5hdGVkIiwiY2xvc2UiLCJwYWNrZXQiLCJ0b1BhY2tldCIsInNlbmQiLCJfbXVsdGlCeXRlSGFuZGxlciIsIm1zZ0RhdGEiLCJSZXNwb25zZSIsImFycmF5QnVmZmVyIiwidGhlbiIsIl90aGlzMyIsIl9oYW5kbGVCeXRlIiwiaGFuZGxlQnl0ZSIsImdldFN0YXRlIiwiZ2V0Rm9ybWVkUGFja2V0Iiwib25QYWNrZXRSZWNlaXZlZCIsIlRyYW5zcG9ydENhbGxiYWNrIiwiX29uQ29ubmVjdGlvbkVzdGFibGlzaGVkIiwiX29uQ29ubmVjdGlvblRlcm1pbmF0ZWQiLCJUcmFuc3BvcnRNYW5hZ2VyQmFzZSIsInRyYW5zcG9ydExpc3RlbmVyIiwiX3RyYW5zcG9ydCIsIl9pc0Nvbm5lY3RlZCIsInNldE9uQ29ubmVjdGlvbkVzdGFibGlzaGVkIiwic2V0T25Db25uZWN0aW9uVGVybWluYXRlZCIsImdldFRyYW5zcG9ydFR5cGUiLCJnZXRUcmFuc3BvcnQiLCJzZXRUcmFuc3BvcnRDYWxsYmFjayIsIm9uVHJhbnNwb3J0RGlzY29ubmVjdGVkIiwic3RvcCIsIlRyYW5zcG9ydE1hbmFnZXIiLCJTZGxQcm90b2NvbCIsInNldFRyYW5zcG9ydE1hbmFnZXIiLCJTZXJ2aWNlTGlzdGVuZXJNYXAiLCJfbGlzdGVuZXJzIiwic2VydmljZUxpc3RlbmVyIiwibGlzdGVuZXJBcnJheSIsInJlbW92ZWQiLCJzZXNzaW9uIiwib25TZXJ2aWNlU3RhcnRlZCIsIm9uU2VydmljZUVuZGVkIiwib25TZXJ2aWNlRXJyb3IiLCJERUZBVUxUX1BST1RPQ09MIiwiREVGQVVMVF9DT0RFQyIsIkRFRkFVTFRfV0lEVEgiLCJERUZBVUxUX0hFSUdIVCIsIkRFRkFVTFRfREVOU0lUWSIsIkRFRkFVTFRfRlJBTUVSQVRFIiwiREVGQVVMVF9CSVRSQVRFIiwiREVGQVVMVF9JTlRFUlZBTCIsIkRFRkFVTFRfU0NBTEUiLCJWaWRlb1N0cmVhbWluZ1BhcmFtZXRlcnMiLCJkaXNwbGF5RGVuc2l0eSIsImZyYW1lUmF0ZSIsImJpdHJhdGUiLCJpbnRlcnZhbCIsIl9kaXNwbGF5RGVuc2l0eSIsIl9mcmFtZVJhdGUiLCJfYml0cmF0ZSIsIl9pbnRlcnZhbCIsIl9yZXNvbHV0aW9uIiwiX2Zvcm1hdCIsImNhcGFiaWxpdHkiLCJnZXRNYXhCaXRyYXRlIiwic2NhbGUiLCJnZXRTY2FsZSIsImdldFByZWZlcnJlZFJlc29sdXRpb24iLCJmb3JtYXRzIiwiZ2V0U3VwcG9ydGVkRm9ybWF0cyIsIlNkbFNlc3Npb24iLCJzZGxTZXNzaW9uTGlzdGVuZXIiLCJfc2Vzc2lvbkhhc2hJZCIsIl9zZGxTZXNzaW9uTGlzdGVuZXIiLCJfc2VydmljZUxpc3RlbmVycyIsIl9zZXR1cFNkbFByb3RvY29sTGlzdGVuZXIiLCJfc2RsUHJvdG9jb2wiLCJzZXRHZXRTZXNzaW9uSWQiLCJzZXRPblByb3RvY29sU2Vzc2lvblN0YXJ0ZWQiLCJzZXRPblByb3RvY29sU2Vzc2lvbkVuZGVkIiwic2V0T25Qcm90b2NvbFNlc3Npb25FbmRlZE5BQ0tlZCIsInNldE9uUnBjTWVzc2FnZVJlY2VpdmVkIiwic2V0R2V0RGVzaXJlZFZpZGVvUGFyYW1zIiwic2V0U2V0QWNjZXB0ZWRWaWRlb1BhcmFtcyIsInNlbmRFdmVudFNlcnZpY2VTdGFydGVkIiwic2VuZEV2ZW50U2VydmljZUVuZGVkIiwic2VuZEV2ZW50U2VydmljZUVycm9yIiwic2VuZFJwYyIsImdldE10dSIsImVuZFNlcnZpY2UiLCJnZXRQcm90b2NvbFZlcnNpb24iLCJzZGxTZXJ2aWNlTGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiX2Rlc2lyZWRWaWRlb1BhcmFtcyIsIkFycmF5VG9vbHMiLCJlbGUiLCJMaWZlY3ljbGVNYW5hZ2VyIiwiYXBwQ29uZmlnIiwibGlmZWN5Y2xlTGlzdGVuZXIiLCJfYXBwQ29uZmlnIiwiX2xpZmVjeWNsZUxpc3RlbmVyIiwiX3NkbFNlc3Npb24iLCJnZXRUcmFuc3BvcnRDb25maWciLCJfY3JlYXRlU2Vzc2lvbkxpc3RlbmVyIiwiX2N1cnJlbnRITUlTdGF0dXMiLCJfZmlyc3RUaW1lRnVsbCIsIl9yZXNwb25zZUxpc3RlbmVycyIsIl9tYXhDb3JyZWxhdGlvbklkIiwiX3JwY0xpc3RlbmVycyIsInNlc3Npb25MaXN0ZW5lciIsInNlbmRScGNNZXNzYWdlIiwiX2NyZWF0ZVJlZ2lzdGVyQXBwSW50ZXJmYWNlIiwiX2hhbmRsZVJwYyIsImZ1bmN0aW9uSUQiLCJvblJwY01lc3NhZ2UiLCJyZXNvbHZlIiwiX3NldHVwSW50ZXJuYWxScGNMaXN0ZW5lcnMiLCJycGNMaXN0ZW5lciIsImFycmF5UmVtb3ZlIiwiZ2V0SXNDb25uZWN0ZWQiLCJnZXRPblJQQ1Jlc3BvbnNlUHJvbWlzZSIsIl9yZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlIiwicmVnaXN0ZXJBcHBJbnRlcmZhY2UiLCJzZXRTZGxNc2dWZXJzaW9uIiwic2V0TWFqb3JWZXJzaW9uIiwiTUFYX1JQQ19WRVJTSU9OIiwic2V0TWlub3JWZXJzaW9uIiwic2V0UGF0Y2hWZXJzaW9uIiwic2V0QXBwTmFtZSIsImdldEFwcE5hbWUiLCJzZXRGdWxsQXBwSWQiLCJnZXRBcHBJZCIsInNldE5nbk1lZGlhU2NyZWVuQXBwTmFtZSIsImdldFNob3J0QXBwTmFtZSIsInNldEFwcEhtaVR5cGUiLCJnZXRBcHBUeXBlcyIsInNldExhbmd1YWdlRGVzaXJlZCIsImdldExhbmd1YWdlRGVzaXJlZCIsInNldEhtaURpc3BsYXlMYW5ndWFnZURlc2lyZWQiLCJnZXRIbWlEaXNwbGF5TGFuZ3VhZ2VEZXNpcmVkIiwic2V0SXNNZWRpYUFwcGxpY2F0aW9uIiwic2V0RGF5Q29sb3JTY2hlbWUiLCJnZXREYXlDb2xvclNjaGVtZSIsInNldE5pZ2h0Q29sb3JTY2hlbWUiLCJnZXROaWdodENvbG9yU2NoZW1lIiwiUkVHSVNURVJfQVBQX0lOVEVSRkFDRV9DT1JSRUxBVElPTl9JRCIsIl9ycGNMaXN0ZW5lciIsInNldE9uUnBjTWVzc2FnZSIsIl9wcm9jZXNzUmFpUmVzcG9uc2UiLCJzaG91bGRJbml0IiwiZ2V0SE1JTGV2ZWwiLCJvblByb3h5Q29ubmVjdGVkIiwiYWRkUnBjTGlzdGVuZXIiLCJyZWdpc3RlckFwcEludGVyZmFjZVJlc3BvbnNlIiwibXNnVmVyc2lvbiIsImdldFNkbE1zZ1ZlcnNpb24iLCJnZXRNYWpvclZlcnNpb24iLCJnZXRQYXRjaFZlcnNpb24iLCJVTlJFR0lTVEVSX0FQUF9JTlRFUkZBQ0VfQ09SUkVMQVRJT05fSUQiLCJWaWRlb1N0cmVhbWluZ0NhcGFiaWxpdHkiLCJLRVlfUFJFRkVSUkVEX1JFU09MVVRJT04iLCJLRVlfTUFYX0JJVFJBVEUiLCJLRVlfU1VQUE9SVEVEX0ZPUk1BVFMiLCJLRVlfSEFQVElDX1NQQVRJQUxfREFUQV9TVVBQT1JURUQiLCJLRVlfRElBR09OQUxfU0NSRUVOX1NJWkUiLCJLRVlfUElYRUxfUEVSX0lOQ0giLCJLRVlfU0NBTEUiLCJTZGxTZXJ2aWNlTGlzdGVuZXIiLCJfb25TZXJ2aWNlRXJyb3IiLCJDdXN0b21UcmFuc3BvcnQiLCJvblNlbmRQYWNrZXQiLCJzZGxQc20iLCJUcmFuc3BvcnRDb25maWdCYXNlIiwidHJhbnNwb3J0VHlwZSIsIl90cmFuc3BvcnRUeXBlIiwiQ3VzdG9tVHJhbnNwb3J0Q29uZmlnIiwiY3VzdG9tVHJhbnNwb3J0IiwiX2N1c3RvbVRyYW5zcG9ydCIsIlNzbENvbmZpZyIsInBlbUNlcnRpZmljYXRlIiwicHJpdmF0ZUtleSIsInBhc3N3b3JkIiwiX3BlbUNlcnRpZmljYXRlIiwiX3ByaXZhdGVLZXkiLCJfcGFzc3dvcmQiLCJXZWJTb2NrZXRDbGllbnRDb25maWciLCJob3N0IiwicG9ydCIsIl9ob3N0IiwiX3BvcnQiLCJUcmFuc3BvcnRSZWNvcmQiLCJhZGRyZXNzIiwiX2FkZHJlc3MiLCJnZXRUeXBlIiwiZ2V0QWRkcmVzcyIsIlNETCIsImxpZmVjeWNsZSIsInByb3RvY29sIiwiZW51bXMiLCJycGMiLCJtZXNzYWdlcyIsInN0cnVjdHMiLCJzdHJlYW1pbmciLCJ2aWRlbyIsInRyYW5zcG9ydCJdLCJtYXBwaW5ncyI6IjJrREFtQ01BLCtEQUtPQyxpQkFBbUIsVUFDbkJDLE9BQVMsVUFDVEMsU0FBVyxVQUNYQyxVQUFZLFVBQ1pDLFVBQVksVUFDWkMsY0FBZ0IsVUFDaEJDLFNBQVcsVUFDWEMsWUFBYyxVQUNkQyxZQUFjLFVBQ2RDLGlCQUFtQixVQUNuQkMsMkJBQTZCLFVBQzdCQyxVQUFZLFVBQ1pDLGdCQUFrQixVQUNsQkMsa0JBQW9CLFVBQ3BCQyxtQkFBcUIsVUFDckJDLHdCQUEwQixxRUFPZkMsZUFDWGhCLGlCQUFtQmdCLEVBQ2pCQyx5REFPQUEsS0FBS2pCLGtEQU9Oa0IsZUFDRGpCLE9BQVNpQixFQUNQRCwrQ0FPQUEsS0FBS2hCLDBDQU9Ka0IsZUFDSGpCLFNBQVdpQixFQUNURixpREFPQUEsS0FBS2YscURBUUprQixtQ0FBVyxXQUFZQywwQ0FFMUJsQixVQUFZaUIsT0FDWmhCLFVBQVlpQixFQUVWSixxREFPQUEsS0FBS2QsOERBT0xjLEtBQUtiLGtEQU9Da0IsZUFDUmpCLGNBQWdCaUIsRUFDZEwsc0RBT0FBLEtBQUtaLGlEQU9Ka0IsZUFDSGpCLFNBQVdpQixFQUNUTixpREFPQUEsS0FBS1gsK0NBT0RrQixlQUNOakIsWUFBY2lCLEVBQ1pQLG9EQU9BQSxLQUFLVixrREFPRGtCLGVBQ05qQixZQUFjaUIsRUFDWlIsaURBT0FBLEtBQUtULHVEQU9Ja0IsZUFDWGpCLGlCQUFtQmlCLEVBQ2pCVCx5REFPQUEsS0FBS1Isc0VBT2NrQixlQUNyQmpCLDJCQUE2QmlCLEVBQzNCVixtRUFPQUEsS0FBS1AsK0RBT0hrQixlQUNKakIsVUFBWWlCLEVBQ1ZYLGtEQU9BQSxLQUFLTixvREFRR2tCLGVBQ1ZqQixnQkFBa0JpQixFQUNoQlosd0RBT0FBLEtBQUtMLDREQU9La0IsZUFDWmpCLGtCQUFvQmlCLEVBQ2xCYiwwREFPQUEsS0FBS0osK0RBVU1rQixlQUNiakIsbUJBQXFCaUIsRUFDbkJkLDJEQVFBQSxLQUFLSCxxRUFXV2tCLGVBQ2xCakIsd0JBQTBCaUIsRUFDeEJmLGdFQU9BQSxLQUFLRixpQ0N4UmRrQix1RUFLT0Msa0JBQW9CLFVBQ3BCQyxlQUFpQixVQUNqQkMsa0JBQW9CLFVBQ3BCQyxnQkFBa0IsVUFDbEJDLFNBQVcsc0VBTUNDLFFBQ1pMLGtCQUFvQkssMkNBTVhBLFFBQ1RKLGVBQWlCSSw4Q0FNTEEsUUFDWkgsa0JBQW9CRyw0Q0FNVkEsUUFDVkYsZ0JBQWtCRSxxQ0FNZkEsUUFDSEQsU0FBV0MsMkNBT0ZDLEdBQ3dCLG1CQUEzQnZCLEtBQUtpQix3QkFDUEEsa0JBQWtCTSx5Q0FTaEJBLEVBQWtCQyxFQUFNQyxHQUNBLG1CQUF4QnpCLEtBQUtrQixxQkFDUEEsZUFBZUssRUFBa0JDLEVBQU1DLDRDQU9sQ0MsRUFBYUMsRUFBV0MsR0FDWSxtQkFBdkM1QixLQUFLNkIsb0NBQ1BWLGtCQUFrQk8sRUFBYUMsRUFBV0MsMENBT3ZDRixHQUN3QixtQkFBekIxQixLQUFLb0Isc0JBQ1BBLGdCQUFnQk0sbUNBUXBCSCxFQUFrQkMsR0FDTSxtQkFBbEJ4QixLQUFLcUIsZUFDUEEsU0FBU0UsRUFBa0JDLFlDL0Z0Q00sc0hBOEJRLElBQUlDLE1BQU0seUVBbUJWLElBQUlBLE1BQU0sb0VBbkNDQyxFQUFPQyxPQUNuQixJQUFNQyxLQUFPRCxLQUNWQSxFQUFJQyxLQUFTRixTQUNORSxTQUlSLDBDQWtCVUEsRUFBS0QsVUFDZkEsRUFBSUMsSUFBUSxjQ3RDckJDLHNDQUlXQyx5REFBYSxnQ0FDakJDLG9CQUFxQixPQUNyQkMsZ0JBQWtCLFVBQ2xCQyxZQUFjSCxHQUFjLHVFQU8xQnBDLEtBQUt1QyxpREFPRkwsVUFDSGxDLEtBQUt1QyxZQUFZTCx3Q0FRZEEsRUFBS0YsVUFDRCxPQUFWQSxTQUNPaEMsS0FBS3VDLFlBQVlMLFFBRW5CSyxZQUFZTCxHQUFPRixFQUdyQmhDLHVDQVFBd0MsRUFBUU4sVUFDUmxDLEtBQUt5QyxhQUFhRCxFQUFReEMsS0FBSzBDLGFBQWFSLHlDQVF6Q00sRUFBUUcsTUFDZEEsTUFBQUEsU0FDTyxLQUNKLEdBQUlBLEVBQUlDLGNBQWdCSixTQUVwQkcsRUFDSixHQUFJQSxFQUFJQyxjQUFnQkMsY0FDcEJGLEVBQ0osR0FBSUEsRUFBSUMsY0FBZ0JFLGNBQ3ZCTixFQUFPTyxxQkFBcUJaLEVBQ3JCLElBQUlLLEVBQU9HLEdBRWYsS0FDSixHQUFJQSxFQUFJQyxjQUFnQkksT0FDVixFQUFiTCxFQUFJTSxPQUFZLEtBQ1ZDLEVBQVcsc0NBQ0VQLGlEQUFLLEtBQWJRLFVBQ1BELEVBQVNFLEtBQUtwRCxLQUFLeUMsYUFBYUQsRUFBUVcsOEZBRXJDRCxTQUdSLDBDQVFHVixFQUFRRywwQ0FDTCxLQUNKSyxNQUFNSyxRQUFRVixTQUNULElBQUlaLGdCQUFTWSxFQUFJVywyREFBa0RkLEVBQU9jLDhDQUU3RFgsaURBQUssS0FBYlEsZUFDRkksYUFBYWYsRUFBUVcsR0FBTSw0RkFHckMsR0FDRlgsRUFBT08scUJBQXFCakIsTUFBb0MsT0FBNUJVLEVBQU9nQixZQUFZYixJQUNwREgsRUFBT08scUJBQXFCWixHQUFxQixPQUFSUSxHQUFnQkEsRUFBSUMsY0FBZ0JKLFFBRTNFLElBQUlULGdCQUFTWSxFQUFJVyxpQ0FBd0JkLEVBQU9jLGdCQzdGNURHLG9KQUFtQjNCLDZEQTJrQkRJLFVBQ1R1QixFQUFXQyxhQUFheEIsRUFBS3VCLEVBQVdFLDBDQVEvQjNCLFVBQ1R5QixFQUFXRyxhQUFhNUIsRUFBT3lCLEVBQVdFLDBEQXprQjFDRixFQUFXRSxLQUFLRSwyRUFPaEJKLEVBQVdFLEtBQUtHLDBFQU9oQkwsRUFBV0UsS0FBS0kseUVBT2hCTixFQUFXRSxLQUFLSyxnRUFPaEJQLEVBQVdFLEtBQUtNLHdEQU9oQlIsRUFBV0UsS0FBS08sd0RBT2hCVCxFQUFXRSxLQUFLUSx3REFPaEJWLEVBQVdFLEtBQUtTLHdFQU9oQlgsRUFBV0UsS0FBS1UsNkVBT2hCWixFQUFXRSxLQUFLVyw2RUFPaEJiLEVBQVdFLEtBQUtZLGdFQU9oQmQsRUFBV0UsS0FBS2EsMENBT2hCZixFQUFXRSxLQUFLYywwQ0FPaEJoQixFQUFXRSxLQUFLZSx3REFPaEJqQixFQUFXRSxLQUFLZ0IsdUVBT2hCbEIsRUFBV0UsS0FBS2lCLHFFQU9oQm5CLEVBQVdFLEtBQUtrQixnRUFPaEJwQixFQUFXRSxLQUFLbUIsaUVBT2hCckIsRUFBV0UsS0FBS29CLHNFQU9oQnRCLEVBQVdFLEtBQUtxQiwyRUFPaEJ2QixFQUFXRSxLQUFLc0IscUVBT2hCeEIsRUFBV0UsS0FBS3VCLHNEQU9oQnpCLEVBQVdFLEtBQUt3QiwrQ0FPaEIxQixFQUFXRSxLQUFLeUIseURBT2hCM0IsRUFBV0UsS0FBSzBCLHdEQU9oQjVCLEVBQVdFLEtBQUsyQixzREFPaEI3QixFQUFXRSxLQUFLNEIsNkRBT2hCOUIsRUFBV0UsS0FBSzZCLDREQU9oQi9CLEVBQVdFLEtBQUs4QixpRUFPaEJoQyxFQUFXRSxLQUFLK0Isa0VBT2hCakMsRUFBV0UsS0FBS2dDLHVEQU9oQmxDLEVBQVdFLEtBQUtpQyxrREFPaEJuQyxFQUFXRSxLQUFLa0Msb0RBT2hCcEMsRUFBV0UsS0FBS21DLG9EQU9oQnJDLEVBQVdFLEtBQUtvQywyREFPaEJ0QyxFQUFXRSxLQUFLcUMsa0VBT2hCdkMsRUFBV0UsS0FBS3NDLCtEQU9oQnhDLEVBQVdFLEtBQUt1QywwREFPaEJ6QyxFQUFXRSxLQUFLd0MsdURBT2hCMUMsRUFBV0UsS0FBS3lDLHNEQU9oQjNDLEVBQVdFLEtBQUswQyxrRUFPaEI1QyxFQUFXRSxLQUFLMkMsNkVBT2hCN0MsRUFBV0UsS0FBSzRDLG1FQU9oQjlDLEVBQVdFLEtBQUs2QywrREFPaEIvQyxFQUFXRSxLQUFLOEMsdUVBT2hCaEQsRUFBV0UsS0FBSytDLHdFQU9oQmpELEVBQVdFLEtBQUtnRCxrRUFPaEJsRCxFQUFXRSxLQUFLaUQsb0VBT2hCbkQsRUFBV0UsS0FBS2tELDJFQU9oQnBELEVBQVdFLEtBQUttRCx1RUFPaEJyRCxFQUFXRSxLQUFLb0QsbUVBT2hCdEQsRUFBV0UsS0FBS3FELHlEQU9oQnZELEVBQVdFLEtBQUtzRCxvRUFPaEJ4RCxFQUFXRSxLQUFLdUQsZ0ZBT2hCekQsRUFBV0UsS0FBS3dELHFFQU9oQjFELEVBQVdFLEtBQUt5RCxrRUFPaEIzRCxFQUFXRSxLQUFLMEQsNERBT2hCNUQsRUFBV0UsS0FBSzJELHdEQU9oQjdELEVBQVdFLEtBQUs0RCx5REFPaEI5RCxFQUFXRSxLQUFLNkQsMEVBT2hCL0QsRUFBV0UsS0FBSzhELDhGQU9oQmhFLEVBQVdFLEtBQUsrRCw0RUFPaEJqRSxFQUFXRSxLQUFLZ0Usc0VBT2hCbEUsRUFBV0UsS0FBS2lFLHdFQU9oQm5FLEVBQVdFLEtBQUtrRSwyREFPaEJwRSxFQUFXRSxLQUFLbUUsMkRBT2hCckUsRUFBV0UsS0FBS29FLHVEQU9oQnRFLEVBQVdFLEtBQUtxRSwwREFPaEJ2RSxFQUFXRSxLQUFLc0Usb0VBT2hCeEUsRUFBV0UsS0FBS3VFLHVFQU9oQnpFLEVBQVdFLEtBQUt3RSxtRUFPaEIxRSxFQUFXRSxLQUFLeUUsZ0VBT2hCM0UsRUFBV0UsS0FBSzBFLGdFQU9oQjVFLEVBQVdFLEtBQUsyRSw0REFPaEI3RSxFQUFXRSxLQUFLNEUsNERBT2hCOUUsRUFBV0UsS0FBSzZFLDREQU9oQi9FLEVBQVdFLEtBQUs4RSxrRUFPaEJoRixFQUFXRSxLQUFLK0Usc0VBT2hCakYsRUFBV0UsS0FBS2dGLDJEQU9oQmxGLEVBQVdFLEtBQUtpRiwyREFPaEJuRixFQUFXRSxLQUFLa0YsMEVBT2hCcEYsRUFBV0UsS0FBS21GLG1DQXNCL0JyRixXQUFXRSxLQUFPYixPQUFPaUcsT0FBTyxzQkFDVyx5QkFDQSxzQkFDQSx3QkFDQSxhQUNBLGdCQUNBLGFBQ0EsZ0JBQ0EsNkJBQ0EscUJBQ0EsOEJBQ0EsU0FDQSxRQUNBLFNBQ0Esc0JBQ0Esd0JBQ0Esb0JBQ0EsbUJBQ0EscUJBQ0Esd0JBQ0EsMEJBQ0Esa0JBQ0EsV0FDQSxXQUNBLHFCQUNBLFVBQ0EsbUJBQ0EsaUJBQ0Esa0JBQ0Esc0JBQ0EsbUJBQ0EsV0FDQSxjQUNBLGFBQ0EsY0FDQSxvQkFDQSxxQkFDQSxpQkFDQSxnQkFDQSxjQUNBLGVBQ0EsMEJBQ0EsMEJBQ0EsZ0JBQ0Esc0JBQ0Esd0JBQ0EsdUJBQ0Esa0JBQ0EseUJBQ0EseUJBQ0EscUJBQ0EscUJBQ0EsV0FDQSxnQ0FDQSx1QkFDQSxxQkFDQSxvQkFDQSxlQUNBLGdCQUNBLGdCQUNBLGlDQUNBLG9DQUNBLGVBQ0EsaUNBQ0Esb0JBQ0Esb0JBQ0Esb0JBQ0EsZ0JBQ0EsdUJBQ0EsMEJBQ0EsMEJBQ0Esc0JBQ0EsdUJBQ0Esc0JBQ0EsbUJBQ0Esc0JBQ0EsbUJBQ0EsNEJBQ0EsdUJBQ0EsaUJBQ0EsdUJBQ0EsZ0NBQ0EsWUMxcUJyQ0MseUNBaUJXQyx5REFBUSxrR0FDWEEsRUFBTTdHLGNBQ1A4RyxjQUFlLElBQ2ZDLFNBQVdGLEVBQU1HLFVBQ2pCQyxjQUFnQkosRUFBTUssZUFDdEJDLGVBQWlCTixFQUFNckgsZ0JBQ3ZCNEgsWUFBWVAsRUFBTVEsK0JBdkJOdEgscUVBOEJWbkMsS0FBS21KLDRDQU9KTyxlQUNIUCxTQUFXTyxFQUVUMUosc0RBT0FBLEtBQUtxSixzREFPQy9GLGVBRUorRixjQURXLGlCQUFUL0YsRUFDY0csV0FBV0QsWUFBWUYsR0FFdkJBLEVBR2xCdEQsdURBT0FBLEtBQUt1Six3REFPRUksZUFDVEosZUFBaUJJLEVBRWYzSixrREFPQUEsS0FBSzRKLHFEQU9IQyxtQ0FBTyxpQkFFUEQsVUFESSxPQUFUQyxFQUNpQkEsRUFBS0MsTUFBTSxHQUVYLEtBR2Q5SixxREFPQUEsS0FBS2tKLG9EQU9BYSxlQUNQYixhQUFlYSxFQUViL0osY0NySFRnSyxpSkFBZ0JsSSw2REFrQ0VJLFVBQ1Q4SCxFQUFRdEcsYUFBYXhCLEVBQUs4SCxFQUFRckcsMENBUXpCM0IsVUFDVGdJLEVBQVFwRyxhQUFhNUIsRUFBT2dJLEVBQVFyRyxrREFoQ3BDcUcsRUFBUXJHLEtBQUtzRyxxREFPYkQsRUFBUXJHLEtBQUt1RyxnREFPYkYsRUFBUXJHLEtBQUt3RyxpQkFzQjVCSCxRQUFRckcsS0FBT2IsT0FBT2lHLE9BQU8sY0FDVCxXQUNKLFVBQ0QsUUNyRFRxQixpQ0FJV25CLHdHQUNIQSxLQUNEb0IsV0FBV0wsUUFBUUcsV0FDbkJHLFNBQVcsMEJBUEN0QixtRkFjVmhKLEtBQUtzSyx5REFPU0MsZUFDaEJoSCxhQUFhaUgsUUFBU0QsUUFFdEJELFNBQVdDLEVBQ1R2SyxjQzNCVHlLLG9DQUNXckksK0ZBQ0hBLHVCQUZjRCxpRUFTUEgsZUFDUjBJLGFBQWFELEVBQWNFLGtCQUFtQjNJLEdBQzVDaEMsc0RBT0FBLEtBQUswQyxhQUFhK0gsRUFBY0UsMkRBTzFCM0ksZUFDUjBJLGFBQWFELEVBQWNHLGtCQUFtQjVJLEdBQzVDaEMsc0RBT0FBLEtBQUswQyxhQUFhK0gsRUFBY0csMkRBTzFCNUksZUFDUjBJLGFBQWFELEVBQWNJLGtCQUFtQjdJLEdBQzVDaEMsc0RBT0FBLEtBQUswQyxhQUFhK0gsRUFBY0ksNEJBSS9DSixjQUFjRSxrQkFBb0IsZUFDbENGLGNBQWNHLGtCQUFvQixlQUNsQ0gsY0FBY0ksa0JBQW9CLG1CQ3BENUJDLDRKQUEyQmhKLDZEQW9EVEksVUFDVDRJLEVBQW1CcEgsYUFBYXhCLEVBQUs0SSxFQUFtQm5ILDBDQVEvQzNCLFVBQ1Q4SSxFQUFtQmxILGFBQWE1QixFQUFPOEksRUFBbUJuSCw2Q0FyRDFEbUgsRUFBbUJuSCxLQUFLb0gscURBT3hCRCxFQUFtQm5ILEtBQUtxSCw2REFPeEJGLEVBQW1CbkgsS0FBS3NILDREQU94QkgsRUFBbUJuSCxLQUFLdUgsb0RBT3hCSixFQUFtQm5ILEtBQUt3SCw0Q0FPeEJMLEVBQW1CbkgsS0FBS3lILGNBc0J2Q04sbUJBQW1CbkgsS0FBT2IsT0FBT2lHLE9BQU8sU0FDekIscUJBQ00sZ0NBQ0UsK0JBQ0gsdUJBQ0wsZUFDSCxhQzNFTnNDLCtCQUNXakosK0ZBQ0hBLHVCQUZTRCx5REFTVm1KLGVBQ0FaLGFBQWFXLEVBQVNFLFNBQVVELEdBQzlCdEwsOENBT0FBLEtBQUswQyxhQUFhMkksRUFBU0UsMENBTzdCN0IsZUFDQW5HLGFBQWF1SCxtQkFBb0JwQixRQUVqQ2dCLGFBQWFXLEVBQVNHLFNBQVU5QixHQUM5QjFKLDhDQU9BQSxLQUFLeUwsVUFBVVgsbUJBQW9CTyxFQUFTRyxtQkFJM0RILFNBQVNFLFNBQVcsT0FDcEJGLFNBQVNHLFNBQVcsV0MxQ2RFLGlDQUNXdEosK0ZBQ0hBLHVCQUZXRCw2REFTUndKLGVBQ0pwSSxhQUFhVixPQUFROEksUUFFckJqQixhQUFhZ0IsRUFBV0UsYUFBY0QsR0FDcEMzTCxrREFPQUEsS0FBSzBDLGFBQWFnSixFQUFXRSxxREFReEJDLGVBQ1B0SSxhQUFhVixPQUFRZ0osUUFFckJuQixhQUFhZ0IsRUFBV0ksaUJBQWtCRCxHQUN4QzdMLHFEQU9BQSxLQUFLMEMsYUFBYWdKLEVBQVdJLGdEQVFqQ0MsZUFDRXhJLGFBQWFWLE9BQVFrSixRQUVyQnJCLGFBQWFnQixFQUFXTSxPQUFRRCxHQUM5Qi9MLDRDQU9BQSxLQUFLMEMsYUFBYWdKLEVBQVdNLDZDQU8xQkMsZUFDTDFJLGFBQWFWLE9BQVFvSixRQUVyQnZCLGFBQWFnQixFQUFXUSxlQUFnQkQsR0FDdENqTSxtREFPQUEsS0FBSzBDLGFBQWFnSixFQUFXUSxtREFRNUJDLGVBQ0g1SSxhQUFhVixPQUFRc0osUUFFckJ6QixhQUFhZ0IsRUFBV1UsWUFBYUQsR0FDbkNuTSxpREFPQUEsS0FBSzBDLGFBQWFnSixFQUFXVSw2REFRZkMsZUFDaEI5SSxhQUFhK0ksT0FBUUQsUUFFckIzQixhQUFhZ0IsRUFBV2EsNEJBQTZCRixHQUNuRHJNLDhEQU9BQSxLQUFLMEMsYUFBYWdKLEVBQVdhLHNDQUk1Q2IsV0FBV0UsYUFBZSxXQUMxQkYsV0FBV0ksaUJBQW1CLGNBQzlCSixXQUFXTSxPQUFTLEtBQ3BCTixXQUFXUSxlQUFpQixZQUM1QlIsV0FBV1UsWUFBYyxVQUN6QlYsV0FBV2EsNEJBQThCLDJCQzNIbkNDLDhCQUNXcEssK0ZBQ0hBLHVCQUZRRCxtRUFTQ3NLLGVBQ1YvQixhQUFhOEIsRUFBUUUscUJBQXNCRCxHQUN6Q3pNLHdEQU9BQSxLQUFLMEMsYUFBYThKLEVBQVFFLDZEQVFyQkMsZUFDUGpDLGFBQWE4QixFQUFRSSxrQkFBbUJELEdBQ3RDM00scURBT0FBLEtBQUswQyxhQUFhOEosRUFBUUkseURBUXRCQyxlQUNObkMsYUFBYThCLEVBQVFNLGdCQUFpQkQsR0FDcEM3TSxvREFPQUEsS0FBSzBDLGFBQWE4SixFQUFRTSxvREFPekJDLGVBQ0hyQyxhQUFhOEIsRUFBUVEsYUFBY0QsR0FDakMvTSxpREFPQUEsS0FBSzBDLGFBQWE4SixFQUFRUSx1QkFJekNSLFFBQVFFLHFCQUF1QixpQkFDL0JGLFFBQVFJLGtCQUFvQixjQUM1QkosUUFBUU0sZ0JBQWtCLGFBQzFCTixRQUFRUSxhQUFlLGNDM0VqQkMsK0JBQ1c3SywrRkFDSEEsdUJBRlNELDZEQVNOK0ssZUFDSnhDLGFBQWF1QyxFQUFTRSxRQUFTRCxHQUM3QmxOLGtEQU9BQSxLQUFLMEMsYUFBYXVLLEVBQVNFLCtDQVF2QkMsZUFDTjFDLGFBQWF1QyxFQUFTSSxVQUFXRCxHQUMvQnBOLG9EQU9BQSxLQUFLMEMsYUFBYXVLLEVBQVNJLGdEQVF4QkMsZUFDTDVDLGFBQWF1QyxFQUFTTSxTQUFVRCxHQUM5QnROLG1EQU9BQSxLQUFLMEMsYUFBYXVLLEVBQVNNLG1CQUkxQ04sU0FBU0UsUUFBVSxNQUNuQkYsU0FBU0ksVUFBWSxRQUNyQkosU0FBU00sU0FBVyxXQ3pEZEMsMENBQ1dwTCwrRkFDSEEsdUJBRm9CRCxpRUFTYnNMLGVBQ1JsSyxhQUFhMEosU0FBVVEsUUFFdkIvQyxhQUFhOEMsRUFBb0JFLGtCQUFtQkQsR0FDbER6TixzREFPQUEsS0FBS3lMLFVBQVV3QixTQUFVTyxFQUFvQkUsNkRBT3JDQyxlQUNWcEssYUFBYTBKLFNBQVVVLFFBRXZCakQsYUFBYThDLEVBQW9CSSxvQkFBcUJELEdBQ3BEM04sd0RBT0FBLEtBQUt5TCxVQUFVd0IsU0FBVU8sRUFBb0JJLGdFQU9wQ0MsZUFDWHRLLGFBQWEwSixTQUFVWSxRQUV2Qm5ELGFBQWE4QyxFQUFvQk0scUJBQXNCRCxHQUNyRDdOLHlEQU9BQSxLQUFLeUwsVUFBVXdCLFNBQVVPLEVBQW9CTSwrQkFJNUROLG9CQUFvQkUsa0JBQW9CLGVBQ3hDRixvQkFBb0JJLG9CQUFzQixpQkFDMUNKLG9CQUFvQk0scUJBQXVCLHNCQzNEckNDLGtKQUFpQmpNLDZEQThSQ0ksVUFDVDZMLEVBQVNySyxhQUFheEIsRUFBSzZMLEVBQVNwSywwQ0FRM0IzQixVQUNUK0wsRUFBU25LLGFBQWE1QixFQUFPK0wsRUFBU3BLLDJDQTVSdENvSyxFQUFTcEssS0FBS3FLLDJDQU9kRCxFQUFTcEssS0FBS3NLLDJDQU9kRixFQUFTcEssS0FBS3VLLDJDQU9kSCxFQUFTcEssS0FBS3dLLDJDQU9kSixFQUFTcEssS0FBS3lLLDJDQU9kTCxFQUFTcEssS0FBSzBLLDJDQU9kTixFQUFTcEssS0FBSzJLLDJDQU9kUCxFQUFTcEssS0FBSzRLLDJDQU9kUixFQUFTcEssS0FBSzZLLDJDQU9kVCxFQUFTcEssS0FBSzhLLDJDQU9kVixFQUFTcEssS0FBSytLLDJDQU9kWCxFQUFTcEssS0FBS2dMLDJDQU9kWixFQUFTcEssS0FBS2lMLDJDQU9kYixFQUFTcEssS0FBS2tMLDJDQU9kZCxFQUFTcEssS0FBS21MLDJDQU9kZixFQUFTcEssS0FBS29MLDJDQU9kaEIsRUFBU3BLLEtBQUtxTCwyQ0FPZGpCLEVBQVNwSyxLQUFLc0wsMkNBT2RsQixFQUFTcEssS0FBS3VMLDJDQU9kbkIsRUFBU3BLLEtBQUt3TCwyQ0FPZHBCLEVBQVNwSyxLQUFLeUwsMkNBT2RyQixFQUFTcEssS0FBSzBMLDJDQU9kdEIsRUFBU3BLLEtBQUsyTCwyQ0FPZHZCLEVBQVNwSyxLQUFLNEwsMkNBT2R4QixFQUFTcEssS0FBSzZMLDJDQU9kekIsRUFBU3BLLEtBQUs4TCwyQ0FPZDFCLEVBQVNwSyxLQUFLK0wsMkNBT2QzQixFQUFTcEssS0FBS2dNLDJDQU9kNUIsRUFBU3BLLEtBQUtpTSwyQ0FPZDdCLEVBQVNwSyxLQUFLa00sMkNBT2Q5QixFQUFTcEssS0FBS21NLDJDQU9kL0IsRUFBU3BLLEtBQUtvTSwyQ0FPZGhDLEVBQVNwSyxLQUFLcU0sMkNBT2RqQyxFQUFTcEssS0FBS3NNLDJDQU9kbEMsRUFBU3BLLEtBQUt1TSwyQ0FPZG5DLEVBQVNwSyxLQUFLd00sMkNBT2RwQyxFQUFTcEssS0FBS3lNLDJDQU9kckMsRUFBU3BLLEtBQUswTSwyQ0FPZHRDLEVBQVNwSyxLQUFLMk0sZUFzQjdCdkMsU0FBU3BLLEtBQU9iLE9BQU9pRyxPQUFPLE9BQ2pCLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQUNBLGNBQ0EsY0FDQSxjQ25WUHdILG9KQUFtQnpPLDZEQThGREksVUFDVHFPLEVBQVc3TSxhQUFheEIsRUFBS3FPLEVBQVc1TSwwQ0FRL0IzQixVQUNUdU8sRUFBVzNNLGFBQWE1QixFQUFPdU8sRUFBVzVNLDZDQS9GMUM0TSxFQUFXNU0sS0FBSzZNLHFEQU9oQkQsRUFBVzVNLEtBQUs4TSxtREFPaEJGLEVBQVc1TSxLQUFLK00sK0NBT2hCSCxFQUFXNU0sS0FBS2dOLG9EQU9oQkosRUFBVzVNLEtBQUtpTixzREFPaEJMLEVBQVc1TSxLQUFLa04sa0RBT2hCTixFQUFXNU0sS0FBS21OLHlEQU9oQlAsRUFBVzVNLEtBQUtvTiwwREFPaEJSLEVBQVc1TSxLQUFLcU4sOENBT2hCVCxFQUFXNU0sS0FBS3NOLGlEQU9oQlYsRUFBVzVNLEtBQUt1Tix5REFPaEJYLEVBQVc1TSxLQUFLd04sd0JBc0IvQlosV0FBVzVNLEtBQU9iLE9BQU9pRyxPQUFPLFNBQ2pCLHdCQUNNLHNCQUNSLGtCQUNJLHVCQUNDLHlCQUNDLHFCQUNMLDRCQUNZLDZCQUNYLGlCQUNELG9CQUNJLDRCQUNJLHVCQ25IaEJsRiwyQ0FDV29GLHdHQUNIQSxLQUNEbUksZ0JBQWdCM04sV0FBV0ksMkNBSEx1RyxtRUFVYmlILGVBQ1Q5TixhQUFha0gsY0FBZTRHLFFBRTVCM0csYUFBYTdHLEVBQXFCeU4sb0JBQXFCRCxHQUNyRHJSLHVEQU9BQSxLQUFLeUwsVUFBVWhCLGNBQWU1RyxFQUFxQnlOLHdEQVFsRHBSLGVBQ0hxRCxhQUFhVixPQUFRM0MsUUFFckJ3SyxhQUFhN0csRUFBcUIwTixhQUFjclIsR0FDOUNGLGlEQU9BQSxLQUFLMEMsYUFBYW1CLEVBQXFCME4saURBVXRDQyxlQUNIOUcsYUFBYTdHLEVBQXFCNE4sYUFBY0QsR0FDOUN4UixpREFPQUEsS0FBS3lMLFVBQVVKLFNBQVV4SCxFQUFxQjROLCtEQVMvQkMsZUFDakJuTyxhQUFhVixPQUFRNk8sUUFFckJoSCxhQUFhN0csRUFBcUI4Tiw4QkFBK0JELEdBQy9EMVIsK0RBT0FBLEtBQUswQyxhQUFhbUIsRUFBcUI4TixxRUFVbkNwUixlQUNObUssYUFBYTdHLEVBQXFCK04sZ0JBQWlCclIsR0FDakRQLG9EQU9BQSxLQUFLMEMsYUFBYW1CLEVBQXFCK04sK0RBUzNCQyxlQUNkbkgsYUFBYTdHLEVBQXFCaU8seUJBQTBCRCxHQUMxRDdSLDREQU9BQSxLQUFLMEMsYUFBYW1CLEVBQXFCaU8scUVBTzlCclIsZUFDWDhDLGFBQWF3SyxTQUFVdE4sUUFFdkJpSyxhQUFhN0csRUFBcUJrTyxxQkFBc0J0UixHQUN0RFQseURBT0FBLEtBQUt5TCxVQUFVc0MsU0FBVWxLLEVBQXFCa08sMkVBUTNCclIsZUFDckI2QyxhQUFhd0ssU0FBVXJOLFFBRXZCZ0ssYUFBYTdHLEVBQXFCbU8saUNBQWtDdFIsR0FDbEVWLG1FQU9BQSxLQUFLeUwsVUFBVXNDLFNBQVVsSyxFQUFxQm1PLHdFQVExQ0MsZUFJTnZILGFBQWE3RyxFQUFxQnFPLGlCQUFrQkQsR0FDbERqUyxvREFPQUEsS0FBS3lMLFVBQVU4RSxXQUFZMU0sRUFBcUJxTyxvREFPaERDLGVBQ0Y1TyxhQUFhVixPQUFRc1AsUUFFckJ6SCxhQUFhN0csRUFBcUJ1TyxZQUFhRCxHQUM3Q25TLGdEQU9BQSxLQUFLMEMsYUFBYW1CLEVBQXFCdU8sbURBT25DQyxlQUNOOU8sYUFBYW1JLFdBQVkyRyxRQUV6QjNILGFBQWE3RyxFQUFxQnlPLGdCQUFpQkQsR0FDakRyUyxvREFPQUEsS0FBS3lMLFVBQVVDLFdBQVk3SCxFQUFxQnlPLG1EQVFoRHJTLGVBQ0ZzRCxhQUFhVixPQUFRNUMsUUFFckJ5SyxhQUFhN0csRUFBcUIwTyxXQUFZdFMsR0FDNUNELCtDQU9BQSxLQUFLMEMsYUFBYW1CLEVBQXFCME8saURBT3BDQyxPQU1GdlMsUUFMSHNELGFBQWFWLE9BQVEyUCxHQUVSLE9BQWRBLElBQ0FBLEVBQVlBLEVBQVVDLG1CQUNqQi9ILGFBQWE3RyxFQUFxQjZPLGdCQUFpQkYsR0FHcER2UyxFQURBdVMsRUFBVXZQLFFBQVVZLEVBQXFCOE8sa0JBQ2pDSCxFQUVBQSxFQUFVSSxRQUFRLElBQUssSUFBSUMsVUFBVSxFQUFHaFAsRUFBcUI4Tyx3QkFFcEVHLFVBQVU3UyxTQUVWeUssYUFBYTdHLEVBQXFCNk8sZ0JBQWlCLGFBR3JEMVMsbURBT0FBLEtBQUswQyxhQUFhbUIsRUFBcUI2TyxvREFRdENLLGVBQ0h4UCxhQUFhaUosUUFBU3VHLFFBRXRCckksYUFBYTdHLEVBQXFCbVAsYUFBY0QsR0FDOUMvUyxpREFPQUEsS0FBS3lMLFVBQVVlLFFBQVMzSSxFQUFxQm1QLHdEQU9yQ3BTLGVBQ1YyQyxhQUFhaUssb0JBQXFCNU0sUUFFbEM4SixhQUFhN0csRUFBcUJvUCxxQkFBc0JyUyxHQUN0RFosd0RBT0FBLEtBQUt5TCxVQUFVK0Isb0JBQXFCM0osRUFBcUJvUCxrRUFPL0NwUyxlQUNaMEMsYUFBYWlLLG9CQUFxQjNNLFFBRWxDNkosYUFBYTdHLEVBQXFCcVAsdUJBQXdCclMsR0FDeERiLDBEQU9BQSxLQUFLeUwsVUFBVStCLG9CQUFxQjNKLEVBQXFCcVAsaUNBSXhFclAscUJBQXFCc1AscUJBQXVCLGlCQUM1Q3RQLHFCQUFxQnlOLG9CQUFzQixpQkFDM0N6TixxQkFBcUIwTixhQUFlLFVBQ3BDMU4scUJBQXFCNE4sYUFBZSxVQUNwQzVOLHFCQUFxQjhOLDhCQUFnQyx3QkFDckQ5TixxQkFBcUIrTixnQkFBa0IsYUFDdkMvTixxQkFBcUJpTyx5QkFBMkIscUJBQ2hEak8scUJBQXFCa08scUJBQXVCLGtCQUM1Q2xPLHFCQUFxQm1PLGlDQUFtQyw0QkFDeERuTyxxQkFBcUJxTyxpQkFBbUIsYUFDeENyTyxxQkFBcUJ1TyxZQUFjLFNBQ25Ddk8scUJBQXFCeU8sZ0JBQWtCLGFBQ3ZDek8scUJBQXFCME8sV0FBYSxRQUNsQzFPLHFCQUFxQjZPLGdCQUFrQixZQUN2QzdPLHFCQUFxQm1QLGFBQWUsVUFDcENuUCxxQkFBcUJvUCxxQkFBdUIsaUJBQzVDcFAscUJBQXFCcVAsdUJBQXlCLG1CQUM5Q3JQLHFCQUFxQjhPLGtCQUFvQixPQ3BWbkNTLGdKQUFldFIsNkRBeVFHSSxVQUNUa1IsRUFBTzFQLGFBQWF4QixFQUFLa1IsRUFBT3pQLDBDQVF2QjNCLFVBQ1RvUixFQUFPeFAsYUFBYTVCLEVBQU9vUixFQUFPelAsNkNBdlFsQ3lQLEVBQU96UCxLQUFLMFAsMkRBT1pELEVBQU96UCxLQUFLMlAsd0VBT1pGLEVBQU96UCxLQUFLMlAsOERBT1pGLEVBQU96UCxLQUFLNFAsbURBT1pILEVBQU96UCxLQUFLNlAsZ0RBT1pKLEVBQU96UCxLQUFLOFAsK0NBT1pMLEVBQU96UCxLQUFLK1AsNkNBT1pOLEVBQU96UCxLQUFLZ1EsNENBT1pQLEVBQU96UCxLQUFLaVEsaUVBT1pSLEVBQU96UCxLQUFLa1Esb0VBT1pULEVBQU96UCxLQUFLbVEsc0RBT1pWLEVBQU96UCxLQUFLb1EsZ0VBT1pYLEVBQU96UCxLQUFLcVEsOERBT1paLEVBQU96UCxLQUFLc1EseURBT1piLEVBQU96UCxLQUFLdVEseUVBT1pkLEVBQU96UCxLQUFLd1EseUVBT1pmLEVBQU96UCxLQUFLeVEsNERBT1poQixFQUFPelAsS0FBSzBRLHVFQU9aakIsRUFBT3pQLEtBQUsyUSwrRUFPWmxCLEVBQU96UCxLQUFLNFEsb0ZBT1puQixFQUFPelAsS0FBSzZRLHVFQU9acEIsRUFBT3pQLEtBQUs4USxzREFPWnJCLEVBQU96UCxLQUFLK1EsNkRBT1p0QixFQUFPelAsS0FBS2dSLDhEQU9adkIsRUFBT3pQLEtBQUtpUixrRUFPWnhCLEVBQU96UCxLQUFLa1IsNEVBT1p6QixFQUFPelAsS0FBS21SLHVFQU9aMUIsRUFBT3pQLEtBQUtvUiwyREFPWjNCLEVBQU96UCxLQUFLcVIsa0RBT1o1QixFQUFPelAsS0FBS3NSLGtEQU9aN0IsRUFBT3pQLEtBQUt1Uix5REFPWjlCLEVBQU96UCxLQUFLd1IsMERBT1ovQixFQUFPelAsS0FBS3lSLGdFQU9aaEMsRUFBT3pQLEtBQUswUiw0REFPWmpDLEVBQU96UCxLQUFLMlIsd0RBT1psQyxFQUFPelAsS0FBSzRSLHdCQXNCM0JuQyxPQUFPelAsS0FBT2IsT0FBT2lHLE9BQU8sU0FDYiw4QkFDWSwyQ0FDQyxrQ0FDVixzQkFDRixtQkFDRCxrQkFDQSxnQkFDRixlQUNDLG9DQUNvQix1Q0FDakIseUJBQ0csbUNBQ08saUNBQ1QsNEJBQ0ksNENBQ1ksNENBQ1osK0JBQ0QsMENBQ1ksa0RBQ0osdURBQ1MsMENBQ3RCLHlCQUNLLGdDQUNFLGlDQUNELHFDQUNLLCtDQUNLLDBDQUNWLDhCQUNGLHFCQUNQLHFCQUNPLDRCQUNBLDZCQUNDLG1DQUNLLCtCQUNULDJCQUNLLHVCQzdUaEJ5TSxrQ0FJV3ZNLHdHQUNIQSxLQUNEb0IsV0FBV0wsUUFBUUUsK0JBTk5sQixzRUFhWGhKLEtBQUswQyxhQUFhOFMsRUFBWUMsZ0RBTTdCQyxlQUNIaEwsYUFBYThLLEVBQVlDLFlBQWFDLEdBQ3BDMVYsOENBT0FBLEtBQUswQyxhQUFhOFMsRUFBWUcsMENBTWhDblUsZUFDQWtKLGFBQWE4SyxFQUFZRyxTQUFVblUsR0FDakN4QixvREFPQUEsS0FBS3lMLFVBQVUySCxPQUFRb0MsRUFBWUksdURBTS9CQyxlQUNOdFMsYUFBYTZQLE9BQVF5QyxRQUVyQm5MLGFBQWE4SyxFQUFZSSxnQkFBaUJDLEdBQ3hDN1YsY0FJZndWLFlBQVlDLFlBQWtCLFVBQzlCRCxZQUFZRyxTQUFrQixPQUM5QkgsWUFBWUksZ0JBQWtCLGlCQzdEeEJFLGlFQUtPQyxjQUFnQixrRUFPUkMsZUFDUkQsY0FBZ0JDLEVBRWRoVywwQ0FPR2lXLEdBQ3dCLG1CQUF2QmpXLEtBQUsrVixvQkFDUEEsY0FBY0UsWUN2QnpCQyx3RUFLT0MsMEJBQTRCLFVBQzVCQyx3QkFBMEIsVUFDMUJ2VSw4QkFBZ0MsVUFDaEN3VSxzQkFBd0IsVUFDeEJDLHNCQUF3Qiw4RUFNSmhWLFFBQ3BCNlUsMEJBQTRCN1Usb0RBTVZBLFFBQ2xCOFUsd0JBQTBCOVUsMERBTUZBLFFBQ3hCTyw4QkFBZ0NQLGtEQU1oQkEsUUFDaEIrVSxzQkFBd0IvVSxrREFNUkEsUUFDaEJnVixzQkFBd0JoVixtREFXUEksRUFBYUMsRUFBVzRVLEVBQVMzVSxFQUFldVEsRUFBUXFFLEdBQ2hDLG1CQUFuQ3hXLEtBQUttVyxnQ0FDUEEsMEJBQTBCelUsRUFBYUMsRUFBVzRVLEVBQVMzVSxFQUFldVEsRUFBUXFFLGtEQVN2RTlVLEVBQWFDLEVBQVdDLEdBQ0EsbUJBQWpDNUIsS0FBS29XLDhCQUNQQSx3QkFBd0IxVSxFQUFhQyxFQUFXQyx3REFTL0JGLEVBQWFDLEVBQVc4VSxHQUNBLG1CQUF2Q3pXLEtBQUs2QixvQ0FDUEEsOEJBQThCSCxFQUFhQyxFQUFXOFUsZ0RBTzdDUixHQUN3QixtQkFBL0JqVyxLQUFLcVcsNEJBQ1BBLHNCQUFzQkosa0RBUVcsbUJBQS9CalcsS0FBS3NXLDRCQUNQQSxpQ0N2RlhJLHlFQUtPTCxzQkFBd0IsVUFDeEJGLDBCQUE0QixVQUM1QkMsd0JBQTBCLFVBQzFCdlUsOEJBQWdDLFVBQ2hDOFUsY0FBZ0IsVUFDaEJMLHNCQUF3QiwwRUFNUmhWLGVBQ2hCZ1Ysc0JBQXdCaFYsRUFDdEJ0QixxREFNY3NCLGVBQ2hCK1Usc0JBQXdCL1UsRUFDdEJ0QixrREFNV2lXLEdBQ3dCLG1CQUEvQmpXLEtBQUtxVyw0QkFDUEEsc0JBQXNCSix1REFPTjNVLGVBQ3BCNlUsMEJBQTRCN1UsRUFDMUJ0QixvREFLbUMsbUJBQS9CQSxLQUFLc1csNEJBQ1BBLHlFQWFhNVUsRUFBYWtWLEVBQVdMLEVBQVNNLEVBQWVDLEVBQVFOLEdBQ2hDLG1CQUFuQ3hXLEtBQUttVyxnQ0FDUEEsMEJBQTBCelUsRUFBYWtWLEVBQVdMLEVBQVNNLEVBQWVDLEVBQVFOLHFEQU9wRWxWLGVBQ2xCOFUsd0JBQTBCOVUsRUFDeEJ0QixvREFTYTBCLEVBQWFrVixFQUFXQyxHQUNBLG1CQUFqQzdXLEtBQUtvVyw4QkFDUEEsd0JBQXdCMVUsRUFBYWtWLEVBQVdDLDJEQU81QnZWLGVBQ3hCTyw4QkFBZ0NQLEVBQzlCdEIsMERBU21CMEIsRUFBYWtWLEVBQVdDLEdBQ0EsbUJBQXZDN1csS0FBSzZCLG9DQUNQQSw4QkFBOEJILEVBQWFrVixFQUFXQywyQ0FPbERFLGVBQ1JKLGNBQWdCSSxFQUNkL1csK0NBUTJCLG1CQUF2QkEsS0FBSzJXLHFCQUNMM1csS0FBSzJXLGlFQVNNSSxlQUNqQkMsdUJBQXlCRCxFQUN2Qi9XLHdEQVFvQyxtQkFBaENBLEtBQUtnWCw4QkFDTGhYLEtBQUtnWCwyRUFRT0MsZUFDbEJDLHdCQUEwQkQsRUFDeEJqWCxvREFRYW1YLFNBQ3dCLG1CQUFqQ25YLEtBQUtrWCw4QkFDUEEsd0JBQXdCQyxHQUUxQm5YLGNDM0tUb1gsbUpBQWtCdFYsNkRBeUNBSSxVQUNUa1YsRUFBVTFULGFBQWF4QixFQUFLa1YsRUFBVXpULDBDQVE3QjNCLFVBQ1RvVixFQUFVeFQsYUFBYTVCLEVBQU9vVixFQUFVelQsNkNBdkN4Q3lULEVBQVV6VCxLQUFLMFQsNkNBT2ZELEVBQVV6VCxLQUFLMlQsaURBT2ZGLEVBQVV6VCxLQUFLNFQsa0RBT2ZILEVBQVV6VCxLQUFLNlQsZ05Bc0I5QkosVUFBVXpULEtBQU9iLE9BQU9pRyxPQUFPLFNBQ2hCLFFBQ0YsY0FDTSxTQUNMLDJFQzNGSzBPLEdBQW9CQyxNQUd6QkMsR0FBaUJELFVBQ1pDLEdBQWlCRCxHQUFVRSxZQUcvQkMsRUFBU0YsR0FBaUJELEdBQVksQ0FDekNJLEVBQUdKLEVBQ0hLLEdBQUcsRUFDSEgsUUFBUyxXQUlWSSxHQUFRTixHQUFVTyxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTSCxJQUcvREksRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxZQXpCTkksR0FFTEwsR0FIZEMsUUFBTyxNQUNZSSxhQW1FSEgsRUFBUUQsT0FFcEJNLEVBR0pBLEVBQUssa0JBQ0dsWSxLQURILE9BTUprWSxFQUFJQSxHQUFLQyxTQUFTLGNBQVRBLEtBQTZCLEVBQUdDLE1BQU0sUUFDOUMsTUFBTUMsR0FFYyxnQ0FBWEMsMkJBQUFBLFdBQ1RKLEVBQUlJLFFBT05ULEVBQU9ELFFBQVVNLFlBS0RMLEVBQVFELEVBQVNILGFBR0ljLE9BVWpDQyxFQUFTZixFQUFvQixHQUM3QmdCLEVBQVVoQixFQUFvQixHQUM5QnBVLEVBQVVvVSxFQUFvQixZQW1EekJpQixXQUNBQyxFQUFPQyxvQkFDVixXQUNBLG9CQUdHQyxFQUFjQyxFQUFNN1YsTUFDdkJ5VixJQUFlelYsUUFDWCxJQUFJOFYsV0FBVyxxQ0FFbkJKLEVBQU9DLHFCQUVURSxFQUFPLElBQUlFLFdBQVcvVixJQUNqQmdXLFVBQVlOLEVBQU81VixXQUdYLE9BQVQrVixJQUNGQSxFQUFPLElBQUlILEVBQU8xVixJQUVwQjZWLEVBQUs3VixPQUFTQSxHQUdUNlYsV0FhQUgsRUFBUU8sRUFBS0MsRUFBa0JsVyxRQUNqQzBWLEVBQU9DLHFCQUF5QjVZLGdCQUFnQjJZLFVBQzVDLElBQUlBLEVBQU9PLEVBQUtDLEVBQWtCbFcsTUFJeEIsaUJBQVJpVyxTQVFKRSxFQUFLcFosS0FBTWtaLEVBQUtDLEVBQWtCbFcsTUFQUCxpQkFBckJrVyxRQUNILElBQUlwWCxNQUNSLDRFQUdHc1gsRUFBWXJaLEtBQU1rWixZQWFwQkUsRUFBTU4sRUFBTTlXLEVBQU9tWCxFQUFrQmxXLE1BQ3ZCLGlCQUFWakIsUUFDSCxJQUFJc1gsVUFBVSwrQ0FHSyxvQkFBaEJDLGFBQStCdlgsYUFBaUJ1WCxxQkE2SG5DVCxFQUFNVSxFQUFPQyxFQUFZeFcsTUFDakR1VyxFQUFNRSxXQUVGRCxFQUFhLEdBQUtELEVBQU1FLFdBQWFELFFBQ2pDLElBQUlWLFdBQVcsZ0NBR25CUyxFQUFNRSxXQUFhRCxHQUFjeFcsR0FBVSxTQUN2QyxJQUFJOFYsV0FBVyw2QkFJckJTLE9BRGlCRyxJQUFmRixRQUF1Q0UsSUFBWDFXLEVBQ3RCLElBQUkrVixXQUFXUSxRQUNIRyxJQUFYMVcsRUFDRCxJQUFJK1YsV0FBV1EsRUFBT0MsR0FFdEIsSUFBSVQsV0FBV1EsRUFBT0MsRUFBWXhXLEdBR3hDMFYsRUFBT0MscUJBRVRFLEVBQU9VLEdBQ0ZQLFVBQVlOLEVBQU81VixVQUd4QitWLEVBQU9jLEVBQWNkLEVBQU1VLFVBRXRCVixFQXZKRWUsQ0FBZ0JmLEVBQU05VyxFQUFPbVgsRUFBa0JsVyxHQUduQyxpQkFBVmpCLFdBd0ZROFcsRUFBTWdCLEVBQVFDLEdBQ1QsaUJBQWJBLEdBQXNDLEtBQWJBLElBQ2xDQSxFQUFXLFlBR1JwQixFQUFPcUIsV0FBV0QsU0FDZixJQUFJVCxVQUFVLGtEQUdsQnJXLEVBQXdDLEVBQS9CeVcsRUFBV0ksRUFBUUMsR0FHNUJFLEdBRkpuQixFQUFPRCxFQUFhQyxFQUFNN1YsSUFFUmlYLE1BQU1KLEVBQVFDLEdBRTVCRSxJQUFXaFgsSUFJYjZWLEVBQU9BLEVBQUtoUCxNQUFNLEVBQUdtUSxXQUdoQm5CLEVBNUdFcUIsQ0FBV3JCLEVBQU05VyxFQUFPbVgsWUFzSmRMLEVBQU1uVyxNQUNyQmdXLEVBQU95QixTQUFTelgsR0FBTSxLQUNwQjBYLEVBQTRCLEVBQXRCQyxFQUFRM1gsRUFBSU0sZUFHRixLQUZwQjZWLEVBQU9ELEVBQWFDLEVBQU11QixJQUVqQnBYLFFBSVROLEVBQUk0WCxLQUFLekIsRUFBTSxFQUFHLEVBQUd1QixHQUhadkIsS0FPUG5XLEVBQUssSUFDcUIsb0JBQWhCNFcsYUFDUjVXLEVBQUk2WCxrQkFBa0JqQixhQUFnQixXQUFZNVcsUUFDMUIsaUJBQWZBLEVBQUlNLGlCQSs4Q0x3WCxVQUNQQSxHQUFRQSxFQWg5QzJCQyxDQUFNL1gsRUFBSU0sUUFDdkM0VixFQUFhQyxFQUFNLEdBRXJCYyxFQUFjZCxFQUFNblcsTUFHWixXQUFiQSxFQUFJK0csTUFBcUJyRyxFQUFRVixFQUFJa0gsYUFDaEMrUCxFQUFjZCxFQUFNblcsRUFBSWtILFlBSTdCLElBQUl5UCxVQUFVLHNGQTlLYnFCLENBQVc3QixFQUFNOVcsWUE0QmpCNFksRUFBWUMsTUFDQyxpQkFBVEEsUUFDSCxJQUFJdkIsVUFBVSxvQ0FDZixHQUFJdUIsRUFBTyxRQUNWLElBQUk5QixXQUFXLGlEQTRCaEJNLEVBQWFQLEVBQU0rQixNQUMxQkQsRUFBV0MsR0FDWC9CLEVBQU9ELEVBQWFDLEVBQU0rQixFQUFPLEVBQUksRUFBb0IsRUFBaEJQLEVBQVFPLEtBQzVDbEMsRUFBT0Msd0JBQ0wsSUFBSWQsRUFBSSxFQUFHQSxFQUFJK0MsSUFBUS9DLEVBQzFCZ0IsRUFBS2hCLEdBQUssU0FHUGdCLFdBd0NBYyxFQUFlZCxFQUFNVSxPQUN4QnZXLEVBQVN1VyxFQUFNdlcsT0FBUyxFQUFJLEVBQTRCLEVBQXhCcVgsRUFBUWQsRUFBTXZXLFFBQ2xENlYsRUFBT0QsRUFBYUMsRUFBTTdWLE9BQ3JCLElBQUk2VSxFQUFJLEVBQUdBLEVBQUk3VSxFQUFRNlUsR0FBSyxFQUMvQmdCLEVBQUtoQixHQUFnQixJQUFYMEIsRUFBTTFCLFVBRVhnQixXQStEQXdCLEVBQVNyWCxNQUdaQSxHQUFVeVYsVUFDTixJQUFJSyxXQUFXLDBEQUNhTCxJQUFhb0MsU0FBUyxJQUFNLGlCQUVoRCxFQUFUN1gsV0FzRkF5VyxFQUFZSSxFQUFRQyxNQUN2QnBCLEVBQU95QixTQUFTTixVQUNYQSxFQUFPN1csVUFFVyxvQkFBaEJzVyxhQUE2RCxtQkFBdkJBLFlBQVl3QixTQUN4RHhCLFlBQVl3QixPQUFPakIsSUFBV0EsYUFBa0JQLG9CQUM1Q08sRUFBT0osV0FFTSxpQkFBWEksSUFDVEEsRUFBUyxHQUFLQSxPQUdaTyxFQUFNUCxFQUFPN1csVUFDTCxJQUFSb1gsRUFBVyxPQUFPLFVBR2xCVyxHQUFjLFdBRVJqQixPQUNELFlBQ0EsYUFDQSxnQkFDSU0sTUFDSixXQUNBLGtCQUNBVixTQUNJc0IsRUFBWW5CLEdBQVE3VyxXQUN4QixXQUNBLFlBQ0EsY0FDQSxrQkFDVSxFQUFOb1gsTUFDSixhQUNJQSxJQUFRLE1BQ1osZ0JBQ0lhLEVBQWNwQixHQUFRN1csa0JBRXpCK1gsRUFBYSxPQUFPQyxFQUFZbkIsR0FBUTdXLE9BQzVDOFcsR0FBWSxHQUFLQSxHQUFVdEgsY0FDM0J1SSxHQUFjLFlBZ0ZiRyxFQUFNQyxFQUFHQyxFQUFHQyxPQUNmeEQsRUFBSXNELEVBQUVDLEdBQ1ZELEVBQUVDLEdBQUtELEVBQUVFLEdBQ1RGLEVBQUVFLEdBQUt4RCxXQW1JQXlELEVBQXNCZixFQUFRQyxFQUFLaEIsRUFBWU0sRUFBVXlCLE1BRTFDLElBQWxCaEIsRUFBT3ZYLE9BQWMsT0FBUSxLQUdQLGlCQUFmd1csR0FDVE0sRUFBV04sRUFDWEEsRUFBYSxHQUNTLFdBQWJBLEVBQ1RBLEVBQWEsV0FDSkEsR0FBYyxhQUN2QkEsR0FBYyxZQUVoQkEsR0FBY0EsRUFDVmdDLE1BQU1oQyxLQUVSQSxFQUFhK0IsRUFBTSxFQUFLaEIsRUFBT3ZYLE9BQVMsR0FJdEN3VyxFQUFhLElBQUdBLEVBQWFlLEVBQU92WCxPQUFTd1csR0FDN0NBLEdBQWNlLEVBQU92WCxPQUFRLElBQzNCdVksRUFBSyxPQUFRLEVBQ1ovQixFQUFhZSxFQUFPdlgsT0FBUyxPQUM3QixHQUFJd1csRUFBYSxFQUFHLEtBQ3JCK0IsRUFDQyxPQUFRLEVBREovQixFQUFhLEtBS0wsaUJBQVJnQixJQUNUQSxFQUFNOUIsRUFBT1MsS0FBS3FCLEVBQUtWLElBSXJCcEIsRUFBT3lCLFNBQVNLLFVBRUMsSUFBZkEsRUFBSXhYLFFBQ0UsRUFFSHlZLEVBQWFsQixFQUFRQyxFQUFLaEIsRUFBWU0sRUFBVXlCLEdBQ2xELEdBQW1CLGlCQUFSZixTQUNoQkEsR0FBWSxJQUNSOUIsRUFBT0MscUJBQ2lDLG1CQUFqQ0ksV0FBV2pXLFVBQVU0WSxRQUMxQkgsRUFDS3hDLFdBQVdqVyxVQUFVNFksUUFBUTFELEtBQUt1QyxFQUFRQyxFQUFLaEIsR0FFL0NULFdBQVdqVyxVQUFVNlksWUFBWTNELEtBQUt1QyxFQUFRQyxFQUFLaEIsR0FHdkRpQyxFQUFhbEIsRUFBUSxDQUFFQyxHQUFPaEIsRUFBWU0sRUFBVXlCLFNBR3ZELElBQUlsQyxVQUFVLGlEQUdib0MsRUFBY0csRUFBS3BCLEVBQUtoQixFQUFZTSxFQUFVeUIsT0EyQmpEMUQsRUExQkFnRSxFQUFZLEVBQ1pDLEVBQVlGLEVBQUk1WSxPQUNoQitZLEVBQVl2QixFQUFJeFgsZUFFSDBXLElBQWJJLElBRWUsVUFEakJBLEVBQVdsWCxPQUFPa1gsR0FBVXRILGdCQUNZLFVBQWJzSCxHQUNWLFlBQWJBLEdBQXVDLGFBQWJBLEdBQXlCLElBQ2pEOEIsRUFBSTVZLE9BQVMsR0FBS3dYLEVBQUl4WCxPQUFTLFNBQ3pCLEVBR1Y4WSxHQURBRCxFQUFZLEVBRVpFLEdBQWEsRUFDYnZDLEdBQWMsV0FJVHdDLEVBQU1DLEVBQUtwRSxVQUNBLElBQWRnRSxFQUNLSSxFQUFJcEUsR0FFSm9FLEVBQUlDLGFBQWFyRSxFQUFJZ0UsTUFLNUJOLEVBQUssS0FDSFksR0FBYyxNQUNidEUsRUFBSTJCLEVBQVkzQixFQUFJaUUsRUFBV2pFLE9BQzlCbUUsRUFBS0osRUFBSy9ELEtBQU9tRSxFQUFLeEIsR0FBcUIsSUFBaEIyQixFQUFvQixFQUFJdEUsRUFBSXNFLFFBQ3JDLElBQWhCQSxJQUFtQkEsRUFBYXRFLEdBQ2hDQSxFQUFJc0UsRUFBYSxJQUFNSixFQUFXLE9BQU9JLEVBQWFOLE9BRXRDLElBQWhCTSxJQUFtQnRFLEdBQUtBLEVBQUlzRSxHQUNoQ0EsR0FBYyxXQUlXTCxFQUF6QnRDLEVBQWF1QyxJQUF1QnZDLEVBQWFzQyxFQUFZQyxHQUM1RGxFLEVBQUkyQixFQUFpQixHQUFMM0IsRUFBUUEsSUFBSyxTQUM1QnVFLEdBQVEsRUFDSEMsRUFBSSxFQUFHQSxFQUFJTixFQUFXTSxPQUN6QkwsRUFBS0osRUFBSy9ELEVBQUl3RSxLQUFPTCxFQUFLeEIsRUFBSzZCLEdBQUksQ0FDckNELEdBQVEsV0FJUkEsRUFBTyxPQUFPdkUsU0FJZCxXQWVEeUUsRUFBVUwsRUFBS3BDLEVBQVEwQyxFQUFRdlosR0FDdEN1WixFQUFTbFEsT0FBT2tRLElBQVcsTUFDdkJDLEVBQVlQLEVBQUlqWixPQUFTdVosRUFDeEJ2WixFQUlVd1osR0FEYnhaLEVBQVNxSixPQUFPckosTUFFZEEsRUFBU3daLEdBSlh4WixFQUFTd1osTUFTUEMsRUFBUzVDLEVBQU83VyxVQUNoQnlaLEVBQVMsR0FBTSxFQUFHLE1BQU0sSUFBSXBELFVBQVUsc0JBRTdCb0QsRUFBUyxFQUFsQnpaLElBQ0ZBLEVBQVN5WixFQUFTLE9BRWYsSUFBSTVFLEVBQUksRUFBR0EsRUFBSTdVLElBQVU2VSxFQUFHLEtBQzNCNkUsRUFBU0MsU0FBUzlDLEVBQU8rQyxPQUFXLEVBQUovRSxFQUFPLEdBQUksT0FDM0MyRCxNQUFNa0IsR0FBUyxPQUFPN0UsRUFDMUJvRSxFQUFJTSxFQUFTMUUsR0FBSzZFLFNBRWI3RSxXQU9BZ0YsRUFBWVosRUFBS3BDLEVBQVEwQyxFQUFRdlosVUFDakM4WixXQXE2QmNDLFdBQ2pCQyxFQUFZLEdBQ1BuRixFQUFJLEVBQUdBLEVBQUlrRixFQUFJL1osU0FBVTZVLEVBRWhDbUYsRUFBVTdaLEtBQXlCLElBQXBCNFosRUFBSUUsV0FBV3BGLFdBRXpCbUYsRUEzNkJXRSxDQUFhckQsR0FBU29DLEVBQUtNLEVBQVF2WixZQVc5Q21hLEVBQVdsQixFQUFLcEMsRUFBUTBDLEVBQVF2WixVQUNoQzhaLFdBazZCZ0JDLEVBQUtLLFdBQ3hCQyxFQUFHQyxFQUFJQyxFQUNQUCxFQUFZLEdBQ1BuRixFQUFJLEVBQUdBLEVBQUlrRixFQUFJL1osV0FDakJvYSxHQUFTLEdBQUssS0FEYXZGLEVBR2hDd0YsRUFBSU4sRUFBSUUsV0FBV3BGLEdBQ25CeUYsRUFBS0QsR0FBSyxFQUNWRSxFQUFLRixFQUFJLElBQ1RMLEVBQVU3WixLQUFLb2EsR0FDZlAsRUFBVTdaLEtBQUttYSxVQUdWTixFQS82QldRLENBQWUzRCxFQUFRb0MsRUFBSWpaLE9BQVN1WixHQUFTTixFQUFLTSxFQUFRdlosWUFrRnJFeWEsRUFBYXhCLEVBQUt5QixFQUFPQyxVQUNsQixJQUFWRCxHQUFlQyxJQUFRMUIsRUFBSWpaLE9BQ3RCdVYsRUFBT3FGLGNBQWMzQixHQUVyQjFELEVBQU9xRixjQUFjM0IsRUFBSXBTLE1BQU02VCxFQUFPQyxhQUl4Q0UsRUFBVzVCLEVBQUt5QixFQUFPQyxHQUM5QkEsRUFBTUcsS0FBS0MsSUFBSTlCLEVBQUlqWixPQUFRMmEsV0FDdkJLLEVBQU0sR0FFTm5HLEVBQUk2RixFQUNEN0YsRUFBSThGLEdBQUssS0FTUk0sRUFBWUMsRUFBV0MsRUFBWUMsRUFSckNDLEVBQVlwQyxFQUFJcEUsR0FDaEJ5RyxFQUFZLEtBQ1pDLEVBQWdDLElBQVpGLEVBQW9CLEVBQzNCLElBQVpBLEVBQW9CLEVBQ1IsSUFBWkEsRUFBb0IsRUFDckIsS0FFQXhHLEVBQUkwRyxHQUFvQlosU0FHbEJZLFFBQ0QsRUFDQ0YsRUFBWSxNQUNkQyxFQUFZRCxjQUdYLEVBRXlCLE1BQVYsS0FEbEJKLEVBQWFoQyxFQUFJcEUsRUFBSSxNQUdDLEtBRHBCdUcsR0FBNkIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkosS0FFM0NLLEVBQVlGLGNBSWIsRUFDSEgsRUFBYWhDLEVBQUlwRSxFQUFJLEdBQ3JCcUcsRUFBWWpDLEVBQUlwRSxFQUFJLEdBQ1EsTUFBVixJQUFib0csSUFBc0QsTUFBVixJQUFaQyxJQUVmLE1BRHBCRSxHQUE2QixHQUFaQyxJQUFvQixJQUFvQixHQUFiSixJQUFzQixFQUFtQixHQUFaQyxLQUMzQ0UsRUFBZ0IsT0FBMEIsTUFBaEJBLEtBQ3RERSxFQUFZRixjQUliLEVBQ0hILEVBQWFoQyxFQUFJcEUsRUFBSSxHQUNyQnFHLEVBQVlqQyxFQUFJcEUsRUFBSSxHQUNwQnNHLEVBQWFsQyxFQUFJcEUsRUFBSSxHQUNPLE1BQVYsSUFBYm9HLElBQXNELE1BQVYsSUFBWkMsSUFBc0QsTUFBVixJQUFiQyxJQUU5QyxPQURwQkMsR0FBNkIsR0FBWkMsSUFBb0IsSUFBcUIsR0FBYkosSUFBc0IsSUFBbUIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkMsSUFDeEVDLEVBQWdCLFVBQzVDRSxFQUFZRixHQU1KLE9BQWRFLEdBR0ZBLEVBQVksTUFDWkMsRUFBbUIsR0FDRSxNQUFaRCxJQUVUQSxHQUFhLE1BQ2JOLEVBQUk3YSxLQUFLbWIsSUFBYyxHQUFLLEtBQVEsT0FDcENBLEVBQVksTUFBcUIsS0FBWkEsR0FHdkJOLEVBQUk3YSxLQUFLbWIsR0FDVHpHLEdBQUswRyxrQkFXdUJDLE9BQzFCcEUsRUFBTW9FLEVBQVd4YixVQUNqQm9YLEdBQU9xRSxTQUNGN2IsT0FBTzhiLGFBQWFDLE1BQU0vYixPQUFRNGIsT0FJdkNSLEVBQU0sR0FDTm5HLEVBQUksT0FDREEsRUFBSXVDLEdBQ1Q0RCxHQUFPcGIsT0FBTzhiLGFBQWFDLE1BQ3pCL2IsT0FDQTRiLEVBQVczVSxNQUFNZ08sRUFBR0EsR0FBSzRHLFdBR3RCVCxFQXZCQVksQ0FBc0JaLEdBOThCL0JyRyxFQUFRZSxPQUFTQSxFQUNqQmYsRUFBUWtILG9CQW9UYTdiLElBQ2RBLEdBQVVBLElBQ2JBLEVBQVMsVUFFSjBWLEVBQU9vRyxPQUFPOWIsSUF2VHZCMlUsRUFBUW9ILGtCQUFvQixHQTBCNUJyRyxFQUFPQyx5QkFBcURlLElBQS9CcEIsRUFBT0ssb0JBQ2hDTCxFQUFPSyx1Q0FVSGlELEVBQU0sSUFBSTdDLFdBQVcsVUFDekI2QyxFQUFJNUMsVUFBWSxDQUFDQSxVQUFXRCxXQUFXalcsVUFBV2tjLElBQUssa0JBQXFCLEtBQ3ZELEtBQWRwRCxFQUFJb0QsT0FDaUIsbUJBQWpCcEQsRUFBSXFELFVBQ3VCLElBQWxDckQsRUFBSXFELFNBQVMsRUFBRyxHQUFHeEYsV0FDdkIsTUFBT3JCLFVBQ0EsR0FmUDhHLEdBS0p2SCxFQUFRYyxXQUFhQSxJQWtFckJDLEVBQU95RyxTQUFXLEtBR2xCekcsRUFBTzBHLFNBQVcsU0FBVXhELFVBQzFCQSxFQUFJNUMsVUFBWU4sRUFBTzVWLFVBQ2hCOFksR0EyQlRsRCxFQUFPUyxLQUFPLFNBQVVwWCxFQUFPbVgsRUFBa0JsVyxVQUN4Q21XLEVBQUssS0FBTXBYLEVBQU9tWCxFQUFrQmxXLElBR3pDMFYsRUFBT0Msc0JBQ1RELEVBQU81VixVQUFVa1csVUFBWUQsV0FBV2pXLFVBQ3hDNFYsRUFBT00sVUFBWUQsV0FDRyxvQkFBWHNHLFFBQTBCQSxPQUFPQyxTQUN4QzVHLEVBQU8yRyxPQUFPQyxXQUFhNUcsR0FFN0I3VixPQUFPMGMsZUFBZTdHLEVBQVEyRyxPQUFPQyxRQUFTLENBQzVDdmQsTUFBTyxLQUNQeWQsY0FBYyxLQWlDcEI5RyxFQUFPb0csTUFBUSxTQUFVbEUsRUFBTTZFLEVBQU0zRixtQkFwQnJCakIsRUFBTStCLEVBQU02RSxFQUFNM0YsVUFDaENhLEVBQVdDLEdBQ1BBLEdBQVEsRUFDSGhDLEVBQWFDLEVBQU0rQixRQUVmbEIsSUFBVCtGLEVBSXlCLGlCQUFiM0YsRUFDVmxCLEVBQWFDLEVBQU0rQixHQUFNNkUsS0FBS0EsRUFBTTNGLEdBQ3BDbEIsRUFBYUMsRUFBTStCLEdBQU02RSxLQUFLQSxHQUU3QjdHLEVBQWFDLEVBQU0rQixHQVFuQmtFLENBQU0sS0FBTWxFLEVBQU02RSxFQUFNM0YsSUFpQmpDcEIsRUFBT1UsWUFBYyxTQUFVd0IsVUFDdEJ4QixFQUFZLEtBQU13QixJQUszQmxDLEVBQU9nSCxnQkFBa0IsU0FBVTlFLFVBQzFCeEIsRUFBWSxLQUFNd0IsSUFpSDNCbEMsRUFBT3lCLFNBQVcsU0FBbUJnQixXQUNwQixNQUFMQSxJQUFhQSxFQUFFd0UsWUFHM0JqSCxFQUFPa0gsUUFBVSxTQUFrQkMsRUFBRzFFLE9BQy9CekMsRUFBT3lCLFNBQVMwRixLQUFPbkgsRUFBT3lCLFNBQVNnQixTQUNwQyxJQUFJOUIsVUFBVSxnQ0FHbEJ3RyxJQUFNMUUsRUFBRyxPQUFPLFVBRWhCMkUsRUFBSUQsRUFBRTdjLE9BQ04rYyxFQUFJNUUsRUFBRW5ZLE9BRUQ2VSxFQUFJLEVBQUd1QyxFQUFNMEQsS0FBS0MsSUFBSStCLEVBQUdDLEdBQUlsSSxFQUFJdUMsSUFBT3ZDLEtBQzNDZ0ksRUFBRWhJLEtBQU9zRCxFQUFFdEQsR0FBSSxDQUNqQmlJLEVBQUlELEVBQUVoSSxHQUNOa0ksRUFBSTVFLEVBQUV0RCxnQkFLTmlJLEVBQUlDLEdBQVcsRUFDZkEsRUFBSUQsRUFBVSxFQUNYLEdBR1RwSCxFQUFPcUIsV0FBYSxTQUFxQkQsVUFDL0JsWCxPQUFPa1gsR0FBVXRILG1CQUNsQixVQUNBLFdBQ0EsWUFDQSxZQUNBLGFBQ0EsYUFDQSxhQUNBLFdBQ0EsWUFDQSxjQUNBLGtCQUNJLGlCQUVBLElBSWJrRyxFQUFPc0gsT0FBUyxTQUFpQkMsRUFBTWpkLE9BQ2hDSSxFQUFRNmMsU0FDTCxJQUFJNUcsVUFBVSxrREFHRixJQUFoQjRHLEVBQUtqZCxjQUNBMFYsRUFBT29HLE1BQU0sT0FHbEJqSCxVQUNXNkIsSUFBWDFXLE1BRUc2VSxFQURMN1UsRUFBUyxFQUNHNlUsRUFBSW9JLEVBQUtqZCxTQUFVNlUsRUFDN0I3VSxHQUFVaWQsRUFBS3BJLEdBQUc3VSxXQUlsQnVYLEVBQVM3QixFQUFPVSxZQUFZcFcsR0FDNUJrZCxFQUFNLE1BQ0xySSxFQUFJLEVBQUdBLEVBQUlvSSxFQUFLamQsU0FBVTZVLEVBQUcsS0FDNUJvRSxFQUFNZ0UsRUFBS3BJLE9BQ1ZhLEVBQU95QixTQUFTOEIsU0FDYixJQUFJNUMsVUFBVSwrQ0FFdEI0QyxFQUFJM0IsS0FBS0MsRUFBUTJGLEdBQ2pCQSxHQUFPakUsRUFBSWpaLGNBRU51WCxHQThDVDdCLEVBQU9lLFdBQWFBLEVBMEVwQmYsRUFBTzVWLFVBQVU2YyxXQUFZLEVBUTdCakgsRUFBTzVWLFVBQVVxZCxPQUFTLGVBQ3BCL0YsRUFBTXJhLEtBQUtpRCxVQUNYb1gsRUFBTSxHQUFNLFFBQ1IsSUFBSXRCLFdBQVcsaURBRWxCLElBQUlqQixFQUFJLEVBQUdBLEVBQUl1QyxFQUFLdkMsR0FBSyxFQUM1QnFELEVBQUtuYixLQUFNOFgsRUFBR0EsRUFBSSxVQUViOVgsTUFHVDJZLEVBQU81VixVQUFVc2QsT0FBUyxlQUNwQmhHLEVBQU1yYSxLQUFLaUQsVUFDWG9YLEVBQU0sR0FBTSxRQUNSLElBQUl0QixXQUFXLGlEQUVsQixJQUFJakIsRUFBSSxFQUFHQSxFQUFJdUMsRUFBS3ZDLEdBQUssRUFDNUJxRCxFQUFLbmIsS0FBTThYLEVBQUdBLEVBQUksR0FDbEJxRCxFQUFLbmIsS0FBTThYLEVBQUksRUFBR0EsRUFBSSxVQUVqQjlYLE1BR1QyWSxFQUFPNVYsVUFBVXVkLE9BQVMsZUFDcEJqRyxFQUFNcmEsS0FBS2lELFVBQ1hvWCxFQUFNLEdBQU0sUUFDUixJQUFJdEIsV0FBVyxpREFFbEIsSUFBSWpCLEVBQUksRUFBR0EsRUFBSXVDLEVBQUt2QyxHQUFLLEVBQzVCcUQsRUFBS25iLEtBQU04WCxFQUFHQSxFQUFJLEdBQ2xCcUQsRUFBS25iLEtBQU04WCxFQUFJLEVBQUdBLEVBQUksR0FDdEJxRCxFQUFLbmIsS0FBTThYLEVBQUksRUFBR0EsRUFBSSxHQUN0QnFELEVBQUtuYixLQUFNOFgsRUFBSSxFQUFHQSxFQUFJLFVBRWpCOVgsTUFHVDJZLEVBQU81VixVQUFVK1gsU0FBVyxlQUN0QjdYLEVBQXVCLEVBQWRqRCxLQUFLaUQsY0FDSCxHQUFYQSxFQUFxQixHQUNBLElBQXJCc2QsVUFBVXRkLE9BQXFCNmEsRUFBVTlkLEtBQU0sRUFBR2lELFlBeEhqQzhXLEVBQVU0RCxFQUFPQyxPQUNsQzVDLEdBQWMsV0FTSnJCLElBQVZnRSxHQUF1QkEsRUFBUSxLQUNqQ0EsRUFBUSxHQUlOQSxFQUFRM2QsS0FBS2lELGFBQ1IsWUFHRzBXLElBQVJpRSxHQUFxQkEsRUFBTTVkLEtBQUtpRCxVQUNsQzJhLEVBQU01ZCxLQUFLaUQsUUFHVDJhLEdBQU8sUUFDRixPQUlUQSxLQUFTLEtBQ1RELEtBQVcsU0FHRixPQUdNNUQsRUFBVkEsR0FBcUIsZ0JBR2hCQSxPQUNELGFBQ0l5RyxFQUFTeGdCLEtBQU0yZCxFQUFPQyxPQUUxQixXQUNBLGVBQ0lFLEVBQVU5ZCxLQUFNMmQsRUFBT0MsT0FFM0IsZUFDSTZDLEVBQVd6Z0IsS0FBTTJkLEVBQU9DLE9BRTVCLGFBQ0EsZ0JBQ0k4QyxFQUFZMWdCLEtBQU0yZCxFQUFPQyxPQUU3QixnQkFDSUYsRUFBWTFkLEtBQU0yZCxFQUFPQyxPQUU3QixXQUNBLFlBQ0EsY0FDQSxrQkFDSStDLEVBQWEzZ0IsS0FBTTJkLEVBQU9DLGNBRzdCNUMsRUFBYSxNQUFNLElBQUkxQixVQUFVLHFCQUF1QlMsR0FDNURBLEdBQVlBLEVBQVcsSUFBSXRILGNBQzNCdUksR0FBYyxJQXdEQTRELE1BQU01ZSxLQUFNdWdCLFlBR2xDNUgsRUFBTzVWLFVBQVU2ZCxPQUFTLFNBQWlCeEYsT0FDcEN6QyxFQUFPeUIsU0FBU2dCLEdBQUksTUFBTSxJQUFJOUIsVUFBVSxvQ0FDekN0WixPQUFTb2IsR0FDc0IsSUFBNUJ6QyxFQUFPa0gsUUFBUTdmLEtBQU1vYixJQUc5QnpDLEVBQU81VixVQUFVOGQsUUFBVSxlQUNyQjdELEVBQU0sR0FDTjhELEVBQU1sSixFQUFRb0gseUJBQ0EsRUFBZGhmLEtBQUtpRCxTQUNQK1osRUFBTWhkLEtBQUs4YSxTQUFTLE1BQU8sRUFBR2dHLEdBQUtDLE1BQU0sU0FBU0MsS0FBSyxLQUNuRGhoQixLQUFLaUQsT0FBUzZkLElBQUs5RCxHQUFPLFVBRXpCLFdBQWFBLEVBQU0sS0FHNUJyRSxFQUFPNVYsVUFBVThjLFFBQVUsU0FBa0JvQixFQUFRdEQsRUFBT0MsRUFBS3NELEVBQVdDLE9BQ3JFeEksRUFBT3lCLFNBQVM2RyxTQUNiLElBQUkzSCxVQUFVLHFDQUdSSyxJQUFWZ0UsSUFDRkEsRUFBUSxRQUVFaEUsSUFBUmlFLElBQ0ZBLEVBQU1xRCxFQUFTQSxFQUFPaGUsT0FBUyxRQUVmMFcsSUFBZHVILElBQ0ZBLEVBQVksUUFFRXZILElBQVp3SCxJQUNGQSxFQUFVbmhCLEtBQUtpRCxRQUdiMGEsRUFBUSxHQUFLQyxFQUFNcUQsRUFBT2hlLFFBQVVpZSxFQUFZLEdBQUtDLEVBQVVuaEIsS0FBS2lELGFBQ2hFLElBQUk4VixXQUFXLHlCQUdOb0ksR0FBYkQsR0FBaUN0RCxHQUFURCxTQUNuQixLQUVRd0QsR0FBYkQsU0FDTSxLQUVHdEQsR0FBVEQsU0FDSyxLQVFMM2QsT0FBU2loQixFQUFRLE9BQU8sVUFFeEJsQixHQUpKb0IsS0FBYSxJQURiRCxLQUFlLEdBTVhsQixHQVBKcEMsS0FBUyxJQURURCxLQUFXLEdBU1B0RCxFQUFNMEQsS0FBS0MsSUFBSStCLEVBQUdDLEdBRWxCb0IsRUFBV3BoQixLQUFLOEosTUFBTW9YLEVBQVdDLEdBQ2pDRSxFQUFhSixFQUFPblgsTUFBTTZULEVBQU9DLEdBRTVCOUYsRUFBSSxFQUFHQSxFQUFJdUMsSUFBT3ZDLEtBQ3JCc0osRUFBU3RKLEtBQU91SixFQUFXdkosR0FBSSxDQUNqQ2lJLEVBQUlxQixFQUFTdEosR0FDYmtJLEVBQUlxQixFQUFXdkosZ0JBS2ZpSSxFQUFJQyxHQUFXLEVBQ2ZBLEVBQUlELEVBQVUsRUFDWCxHQTZIVHBILEVBQU81VixVQUFVdWUsU0FBVyxTQUFtQjdHLEVBQUtoQixFQUFZTSxVQUNWLElBQTdDL1osS0FBSzJiLFFBQVFsQixFQUFLaEIsRUFBWU0sSUFHdkNwQixFQUFPNVYsVUFBVTRZLFFBQVUsU0FBa0JsQixFQUFLaEIsRUFBWU0sVUFDckR3QixFQUFxQnZiLEtBQU15YSxFQUFLaEIsRUFBWU0sR0FBVSxJQUcvRHBCLEVBQU81VixVQUFVNlksWUFBYyxTQUFzQm5CLEVBQUtoQixFQUFZTSxVQUM3RHdCLEVBQXFCdmIsS0FBTXlhLEVBQUtoQixFQUFZTSxHQUFVLElBa0QvRHBCLEVBQU81VixVQUFVbVgsTUFBUSxTQUFnQkosRUFBUTBDLEVBQVF2WixFQUFROFcsV0FFaERKLElBQVg2QyxFQUNGekMsRUFBVyxPQUNYOVcsRUFBU2pELEtBQUtpRCxPQUNkdVosRUFBUyxPQUVKLFFBQWU3QyxJQUFYMVcsR0FBMEMsaUJBQVh1WixFQUN4Q3pDLEVBQVd5QyxFQUNYdlosRUFBU2pELEtBQUtpRCxPQUNkdVosRUFBUyxNQUVKLENBQUEsSUFBSStFLFNBQVMvRSxTQVdaLElBQUl6YSxNQUNSLDJFQVhGeWEsR0FBa0IsRUFDZCtFLFNBQVN0ZSxJQUNYQSxHQUFrQixPQUNEMFcsSUFBYkksSUFBd0JBLEVBQVcsVUFFdkNBLEVBQVc5VyxFQUNYQSxPQUFTMFcsT0FTVDhDLEVBQVl6YyxLQUFLaUQsT0FBU3VaLFdBQ2Y3QyxJQUFYMVcsR0FBaUN3WixFQUFUeFosS0FBb0JBLEVBQVN3WixHQUVwQyxFQUFoQjNDLEVBQU83VyxTQUFlQSxFQUFTLEdBQUt1WixFQUFTLElBQU9BLEVBQVN4YyxLQUFLaUQsYUFDL0QsSUFBSThWLFdBQVcsMENBR1JnQixFQUFWQSxHQUFxQixlQTNDTm1DLEVBQWFNLEVBQVF2WixFQVp2QmlaLEVBQWFNLEVBQVF2WixFQXlEbkMrWCxHQUFjLFdBRVJqQixPQUNELGFBQ0l3QyxFQUFTdmMsS0FBTThaLEVBQVEwQyxFQUFRdlosT0FFbkMsV0FDQSxlQWhFc0J1WixFQWlFTUEsRUFqRUV2WixFQWlFTUEsRUFoRXRDOFosRUFBVzlCLEVBZ0VXbkIsR0FqRVhvQyxFQWlFS2xjLE1BaEVtQmlELE9BQVN1WixHQUFTTixFQUFLTSxFQUFRdlosT0FrRWhFLGVBQ0k2WixFQUFXOWMsS0FBTThaLEVBQVEwQyxFQUFRdlosT0FFckMsYUFDQSxnQkE5REY2WixFQStEa0I5YyxLQUFNOFosRUFBUTBDLEVBQVF2WixPQUV0QyxnQkE5RFdpWixFQWdFS2xjLEtBaEVRd2MsRUFnRU1BLEVBaEVFdlosRUFnRU1BLEVBL0R4QzhaLEVBQVc3QixFQStEYXBCLEdBL0RVb0MsRUFBS00sRUFBUXZaLE9BaUU3QyxXQUNBLFlBQ0EsY0FDQSxrQkFDSW1hLEVBQVVwZCxLQUFNOFosRUFBUTBDLEVBQVF2WixjQUduQytYLEVBQWEsTUFBTSxJQUFJMUIsVUFBVSxxQkFBdUJTLEdBQzVEQSxHQUFZLEdBQUtBLEdBQVV0SCxjQUMzQnVJLEdBQWMsSUFLdEJyQyxFQUFPNVYsVUFBVXllLE9BQVMsaUJBQ2pCLENBQ0w5WCxLQUFNLFNBQ05HLEtBQU03RyxNQUFNRCxVQUFVK0csTUFBTW1PLEtBQUtqWSxLQUFLeWhCLE1BQVF6aEIsS0FBTSxTQXdGcEQwZSxFQUF1QixjQW9CbEIrQixFQUFZdkUsRUFBS3lCLEVBQU9DLE9BQzNCOEQsRUFBTSxHQUNWOUQsRUFBTUcsS0FBS0MsSUFBSTlCLEVBQUlqWixPQUFRMmEsT0FFdEIsSUFBSTlGLEVBQUk2RixFQUFPN0YsRUFBSThGLElBQU85RixFQUM3QjRKLEdBQU83ZSxPQUFPOGIsYUFBc0IsSUFBVHpDLEVBQUlwRSxXQUUxQjRKLFdBR0FoQixFQUFheEUsRUFBS3lCLEVBQU9DLE9BQzVCOEQsRUFBTSxHQUNWOUQsRUFBTUcsS0FBS0MsSUFBSTlCLEVBQUlqWixPQUFRMmEsT0FFdEIsSUFBSTlGLEVBQUk2RixFQUFPN0YsRUFBSThGLElBQU85RixFQUM3QjRKLEdBQU83ZSxPQUFPOGIsYUFBYXpDLEVBQUlwRSxXQUUxQjRKLFdBR0FsQixFQUFVdEUsRUFBS3lCLEVBQU9DLE9BQ3pCdkQsRUFBTTZCLEVBQUlqWixTQUVUMGEsR0FBU0EsRUFBUSxLQUFHQSxFQUFRLEtBQzVCQyxHQUFPQSxFQUFNLEdBQVd2RCxFQUFOdUQsS0FBV0EsRUFBTXZELFdBRXBDc0gsRUFBTSxHQUNEN0osRUFBSTZGLEVBQU83RixFQUFJOEYsSUFBTzlGLEVBQzdCNkosR0FBT0MsRUFBTTFGLEVBQUlwRSxXQUVaNkosV0FHQWhCLEVBQWN6RSxFQUFLeUIsRUFBT0MsV0FDN0JpRSxFQUFRM0YsRUFBSXBTLE1BQU02VCxFQUFPQyxHQUN6QkssRUFBTSxHQUNEbkcsRUFBSSxFQUFHQSxFQUFJK0osRUFBTTVlLE9BQVE2VSxHQUFLLEVBQ3JDbUcsR0FBT3BiLE9BQU84YixhQUFha0QsRUFBTS9KLEdBQW9CLElBQWYrSixFQUFNL0osRUFBSSxXQUUzQ21HLFdBMENBNkQsRUFBYXRGLEVBQVF1RixFQUFLOWUsTUFDNUJ1WixFQUFTLEdBQU8sR0FBS0EsRUFBUyxFQUFHLE1BQU0sSUFBSXpELFdBQVcseUJBQ3hDOVYsRUFBZnVaLEVBQVN1RixFQUFjLE1BQU0sSUFBSWhKLFdBQVcsa0RBK0p6Q2lKLEVBQVU5RixFQUFLbGEsRUFBT3dhLEVBQVF1RixFQUFLakIsRUFBSzlDLE9BQzFDckYsRUFBT3lCLFNBQVM4QixHQUFNLE1BQU0sSUFBSTVDLFVBQVUsa0RBQ25Dd0gsRUFBUjllLEdBQWVBLEVBQVFnYyxFQUFLLE1BQU0sSUFBSWpGLFdBQVcsd0NBQ2pEeUQsRUFBU3VGLEVBQU03RixFQUFJalosT0FBUSxNQUFNLElBQUk4VixXQUFXLCtCQWtEN0NrSixFQUFtQi9GLEVBQUtsYSxFQUFPd2EsRUFBUTBGLEdBQzFDbGdCLEVBQVEsSUFBR0EsRUFBUSxNQUFTQSxFQUFRLE9BQ25DLElBQUk4VixFQUFJLEVBQUd3RSxFQUFJeUIsS0FBS0MsSUFBSTlCLEVBQUlqWixPQUFTdVosRUFBUSxHQUFJMUUsRUFBSXdFLElBQUt4RSxFQUM3RG9FLEVBQUlNLEVBQVMxRSxJQUFNOVYsRUFBUyxLQUFTLEdBQUtrZ0IsRUFBZXBLLEVBQUksRUFBSUEsTUFDbEMsR0FBNUJvSyxFQUFlcEssRUFBSSxFQUFJQSxZQThCckJxSyxFQUFtQmpHLEVBQUtsYSxFQUFPd2EsRUFBUTBGLEdBQzFDbGdCLEVBQVEsSUFBR0EsRUFBUSxXQUFhQSxFQUFRLE9BQ3ZDLElBQUk4VixFQUFJLEVBQUd3RSxFQUFJeUIsS0FBS0MsSUFBSTlCLEVBQUlqWixPQUFTdVosRUFBUSxHQUFJMUUsRUFBSXdFLElBQUt4RSxFQUM3RG9FLEVBQUlNLEVBQVMxRSxHQUFNOVYsSUFBdUMsR0FBNUJrZ0IsRUFBZXBLLEVBQUksRUFBSUEsR0FBVSxhQW1KMURzSyxFQUFjbEcsRUFBS2xhLEVBQU93YSxFQUFRdUYsTUFDckN2RixFQUFTdUYsRUFBTTdGLEVBQUlqWixPQUFRLE1BQU0sSUFBSThWLFdBQVcseUJBQ2hEeUQsRUFBUyxFQUFHLE1BQU0sSUFBSXpELFdBQVcsK0JBRzlCc0osRUFBWW5HLEVBQUtsYSxFQUFPd2EsRUFBUTBGLEVBQWNJLFVBQ2hEQSxHQUNIRixFQUFhbEcsRUFBS2xhLEVBQU93YSxFQUFRLEdBRW5DL0QsRUFBUXlCLE1BQU1nQyxFQUFLbGEsRUFBT3dhLEVBQVEwRixFQUFjLEdBQUksR0FDN0MxRixFQUFTLFdBV1QrRixFQUFhckcsRUFBS2xhLEVBQU93YSxFQUFRMEYsRUFBY0ksVUFDakRBLEdBQ0hGLEVBQWFsRyxFQUFLbGEsRUFBT3dhLEVBQVEsR0FFbkMvRCxFQUFReUIsTUFBTWdDLEVBQUtsYSxFQUFPd2EsRUFBUTBGLEVBQWMsR0FBSSxHQUM3QzFGLEVBQVMsRUEvY2xCN0QsRUFBTzVWLFVBQVUrRyxNQUFRLFNBQWdCNlQsRUFBT0MsT0FxQjFDNEUsRUFwQkFuSSxFQUFNcmEsS0FBS2lELFdBQ2YwYSxJQUFVQSxHQUdFLEdBQ1ZBLEdBQVN0RCxHQUNHLElBQUdzRCxFQUFRLEdBQ050RCxFQUFSc0QsSUFDVEEsRUFBUXRELElBTlZ1RCxPQUFjakUsSUFBUmlFLEVBQW9CdkQsSUFBUXVELEdBU3hCLEdBQ1JBLEdBQU92RCxHQUNHLElBQUd1RCxFQUFNLEdBQ0p2RCxFQUFOdUQsSUFDVEEsRUFBTXZELEdBR0p1RCxFQUFNRCxJQUFPQyxFQUFNRCxHQUduQmhGLEVBQU9DLHFCQUNUNEosRUFBU3hpQixLQUFLa2YsU0FBU3ZCLEVBQU9DLElBQ3ZCM0UsVUFBWU4sRUFBTzVWLGNBQ3JCLEtBQ0QwZixFQUFXN0UsRUFBTUQsRUFDckI2RSxFQUFTLElBQUk3SixFQUFPOEosT0FBVTlJLE9BQ3pCLElBQUk3QixFQUFJLEVBQUdBLEVBQUkySyxJQUFZM0ssRUFDOUIwSyxFQUFPMUssR0FBSzlYLEtBQUs4WCxFQUFJNkYsVUFJbEI2RSxHQVdUN0osRUFBTzVWLFVBQVUyZixXQUFhLFNBQXFCbEcsRUFBUTlDLEVBQVk0SSxHQUNyRTlGLEdBQWtCLEVBQ2xCOUMsR0FBMEIsRUFDckI0SSxHQUFVUixFQUFZdEYsRUFBUTlDLEVBQVkxWixLQUFLaUQsZ0JBRWhEd1gsRUFBTXphLEtBQUt3YyxHQUNYbUcsRUFBTSxFQUNON0ssRUFBSSxJQUNDQSxFQUFJNEIsSUFBZWlKLEdBQU8sTUFDakNsSSxHQUFPemEsS0FBS3djLEVBQVMxRSxHQUFLNkssU0FHckJsSSxHQUdUOUIsRUFBTzVWLFVBQVU2ZixXQUFhLFNBQXFCcEcsRUFBUTlDLEVBQVk0SSxHQUNyRTlGLEdBQWtCLEVBQ2xCOUMsR0FBMEIsRUFDckI0SSxHQUNIUixFQUFZdEYsRUFBUTlDLEVBQVkxWixLQUFLaUQsZ0JBR25Dd1gsRUFBTXphLEtBQUt3YyxJQUFXOUMsR0FDdEJpSixFQUFNLEVBQ1UsRUFBYmpKLElBQW1CaUosR0FBTyxNQUMvQmxJLEdBQU96YSxLQUFLd2MsSUFBVzlDLEdBQWNpSixTQUdoQ2xJLEdBR1Q5QixFQUFPNVYsVUFBVThmLFVBQVksU0FBb0JyRyxFQUFROEYsVUFDbERBLEdBQVVSLEVBQVl0RixFQUFRLEVBQUd4YyxLQUFLaUQsUUFDcENqRCxLQUFLd2MsSUFHZDdELEVBQU81VixVQUFVK2YsYUFBZSxTQUF1QnRHLEVBQVE4RixVQUN4REEsR0FBVVIsRUFBWXRGLEVBQVEsRUFBR3hjLEtBQUtpRCxRQUNwQ2pELEtBQUt3YyxHQUFXeGMsS0FBS3djLEVBQVMsSUFBTSxHQUc3QzdELEVBQU81VixVQUFVb1osYUFBZSxTQUF1QkssRUFBUThGLFVBQ3hEQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ25DakQsS0FBS3djLElBQVcsRUFBS3hjLEtBQUt3YyxFQUFTLElBRzdDN0QsRUFBTzVWLFVBQVVnZ0IsYUFBZSxTQUF1QnZHLEVBQVE4RixVQUN4REEsR0FBVVIsRUFBWXRGLEVBQVEsRUFBR3hjLEtBQUtpRCxTQUVsQ2pELEtBQUt3YyxHQUNUeGMsS0FBS3djLEVBQVMsSUFBTSxFQUNwQnhjLEtBQUt3YyxFQUFTLElBQU0sSUFDRCxTQUFuQnhjLEtBQUt3YyxFQUFTLElBR3JCN0QsRUFBTzVWLFVBQVVpZ0IsYUFBZSxTQUF1QnhHLEVBQVE4RixVQUN4REEsR0FBVVIsRUFBWXRGLEVBQVEsRUFBR3hjLEtBQUtpRCxRQUVwQixTQUFmakQsS0FBS3djLElBQ1R4YyxLQUFLd2MsRUFBUyxJQUFNLEdBQ3JCeGMsS0FBS3djLEVBQVMsSUFBTSxFQUNyQnhjLEtBQUt3YyxFQUFTLEtBR2xCN0QsRUFBTzVWLFVBQVVrZ0IsVUFBWSxTQUFvQnpHLEVBQVE5QyxFQUFZNEksR0FDbkU5RixHQUFrQixFQUNsQjlDLEdBQTBCLEVBQ3JCNEksR0FBVVIsRUFBWXRGLEVBQVE5QyxFQUFZMVosS0FBS2lELGdCQUVoRHdYLEVBQU16YSxLQUFLd2MsR0FDWG1HLEVBQU0sRUFDTjdLLEVBQUksSUFDQ0EsRUFBSTRCLElBQWVpSixHQUFPLE1BQ2pDbEksR0FBT3phLEtBQUt3YyxFQUFTMUUsR0FBSzZLLFNBRTVCQSxHQUFPLE1BRUhsSSxJQUFZQSxHQUFPc0QsS0FBS21GLElBQUksRUFBRyxFQUFJeEosSUFFaENlLEdBR1Q5QixFQUFPNVYsVUFBVW9nQixVQUFZLFNBQW9CM0csRUFBUTlDLEVBQVk0SSxHQUNuRTlGLEdBQWtCLEVBQ2xCOUMsR0FBMEIsRUFDckI0SSxHQUFVUixFQUFZdEYsRUFBUTlDLEVBQVkxWixLQUFLaUQsZ0JBRWhENlUsRUFBSTRCLEVBQ0ppSixFQUFNLEVBQ05sSSxFQUFNemEsS0FBS3djLElBQVcxRSxHQUNmLEVBQUpBLElBQVU2SyxHQUFPLE1BQ3RCbEksR0FBT3phLEtBQUt3YyxJQUFXMUUsR0FBSzZLLFNBRTlCQSxHQUFPLE1BRUhsSSxJQUFZQSxHQUFPc0QsS0FBS21GLElBQUksRUFBRyxFQUFJeEosSUFFaENlLEdBR1Q5QixFQUFPNVYsVUFBVXFnQixTQUFXLFNBQW1CNUcsRUFBUThGLFVBQ2hEQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ3RCLElBQWZqRCxLQUFLd2MsSUFDMEIsR0FBNUIsSUFBT3hjLEtBQUt3YyxHQUFVLEdBREt4YyxLQUFLd2MsSUFJM0M3RCxFQUFPNVYsVUFBVXNnQixZQUFjLFNBQXNCN0csRUFBUThGLEdBQ3REQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFlBQ3ZDd1gsRUFBTXphLEtBQUt3YyxHQUFXeGMsS0FBS3djLEVBQVMsSUFBTSxTQUNoQyxNQUFOL0IsRUFBc0IsV0FBTkEsRUFBbUJBLEdBRzdDOUIsRUFBTzVWLFVBQVV1Z0IsWUFBYyxTQUFzQjlHLEVBQVE4RixHQUN0REEsR0FBVVIsRUFBWXRGLEVBQVEsRUFBR3hjLEtBQUtpRCxZQUN2Q3dYLEVBQU16YSxLQUFLd2MsRUFBUyxHQUFNeGMsS0FBS3djLElBQVcsU0FDaEMsTUFBTi9CLEVBQXNCLFdBQU5BLEVBQW1CQSxHQUc3QzlCLEVBQU81VixVQUFVd2dCLFlBQWMsU0FBc0IvRyxFQUFROEYsVUFDdERBLEdBQVVSLEVBQVl0RixFQUFRLEVBQUd4YyxLQUFLaUQsUUFFbkNqRCxLQUFLd2MsR0FDVnhjLEtBQUt3YyxFQUFTLElBQU0sRUFDcEJ4YyxLQUFLd2MsRUFBUyxJQUFNLEdBQ3BCeGMsS0FBS3djLEVBQVMsSUFBTSxJQUd6QjdELEVBQU81VixVQUFVeWdCLFlBQWMsU0FBc0JoSCxFQUFROEYsVUFDdERBLEdBQVVSLEVBQVl0RixFQUFRLEVBQUd4YyxLQUFLaUQsUUFFbkNqRCxLQUFLd2MsSUFBVyxHQUNyQnhjLEtBQUt3YyxFQUFTLElBQU0sR0FDcEJ4YyxLQUFLd2MsRUFBUyxJQUFNLEVBQ3BCeGMsS0FBS3djLEVBQVMsSUFHbkI3RCxFQUFPNVYsVUFBVTBnQixZQUFjLFNBQXNCakgsRUFBUThGLFVBQ3REQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ3BDd1YsRUFBUXdELEtBQUtqYyxLQUFNd2MsR0FBUSxFQUFNLEdBQUksSUFHOUM3RCxFQUFPNVYsVUFBVTJnQixZQUFjLFNBQXNCbEgsRUFBUThGLFVBQ3REQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ3BDd1YsRUFBUXdELEtBQUtqYyxLQUFNd2MsR0FBUSxFQUFPLEdBQUksSUFHL0M3RCxFQUFPNVYsVUFBVTRnQixhQUFlLFNBQXVCbkgsRUFBUThGLFVBQ3hEQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ3BDd1YsRUFBUXdELEtBQUtqYyxLQUFNd2MsR0FBUSxFQUFNLEdBQUksSUFHOUM3RCxFQUFPNVYsVUFBVTZnQixhQUFlLFNBQXVCcEgsRUFBUThGLFVBQ3hEQSxHQUFVUixFQUFZdEYsRUFBUSxFQUFHeGMsS0FBS2lELFFBQ3BDd1YsRUFBUXdELEtBQUtqYyxLQUFNd2MsR0FBUSxFQUFPLEdBQUksSUFTL0M3RCxFQUFPNVYsVUFBVThnQixZQUFjLFNBQXNCN2hCLEVBQU93YSxFQUFROUMsRUFBWTRJLEdBQzlFdGdCLEdBQVNBLEVBQ1R3YSxHQUFrQixFQUNsQjlDLEdBQTBCLEVBQ3JCNEksR0FFSE4sRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVE5QyxFQURmcUUsS0FBS21GLElBQUksRUFBRyxFQUFJeEosR0FBYyxFQUNPLE9BR2xEaUosRUFBTSxFQUNON0ssRUFBSSxXQUNIMEUsR0FBa0IsSUFBUnhhLElBQ044VixFQUFJNEIsSUFBZWlKLEdBQU8sV0FDNUJuRyxFQUFTMUUsR0FBTTlWLEVBQVEyZ0IsRUFBTyxXQUc5Qm5HLEVBQVM5QyxHQUdsQmYsRUFBTzVWLFVBQVUrZ0IsWUFBYyxTQUFzQjloQixFQUFPd2EsRUFBUTlDLEVBQVk0SSxHQUM5RXRnQixHQUFTQSxFQUNUd2EsR0FBa0IsRUFDbEI5QyxHQUEwQixFQUNyQjRJLEdBRUhOLEVBQVNoaUIsS0FBTWdDLEVBQU93YSxFQUFROUMsRUFEZnFFLEtBQUttRixJQUFJLEVBQUcsRUFBSXhKLEdBQWMsRUFDTyxPQUdsRDVCLEVBQUk0QixFQUFhLEVBQ2pCaUosRUFBTSxXQUNMbkcsRUFBUzFFLEdBQWEsSUFBUjlWLEVBQ0wsS0FBTDhWLElBQVc2SyxHQUFPLFdBQ3BCbkcsRUFBUzFFLEdBQU05VixFQUFRMmdCLEVBQU8sV0FHOUJuRyxFQUFTOUMsR0FHbEJmLEVBQU81VixVQUFVZ2hCLFdBQWEsU0FBcUIvaEIsRUFBT3dhLEVBQVE4RixVQUNoRXRnQixHQUFTQSxFQUNUd2EsR0FBa0IsRUFDYjhGLEdBQVVOLEVBQVNoaUIsS0FBTWdDLEVBQU93YSxFQUFRLEVBQUcsSUFBTSxHQUNqRDdELEVBQU9DLHNCQUFxQjVXLEVBQVErYixLQUFLaUcsTUFBTWhpQixTQUMvQ3dhLEdBQW1CLElBQVJ4YSxFQUNUd2EsRUFBUyxHQVdsQjdELEVBQU81VixVQUFVa2hCLGNBQWdCLFNBQXdCamlCLEVBQU93YSxFQUFROEYsVUFDdEV0Z0IsR0FBU0EsRUFDVHdhLEdBQWtCLEVBQ2I4RixHQUFVTixFQUFTaGlCLEtBQU1nQyxFQUFPd2EsRUFBUSxFQUFHLE1BQVEsR0FDcEQ3RCxFQUFPQywwQkFDSjRELEdBQW1CLElBQVJ4YSxPQUNYd2EsRUFBUyxHQUFNeGEsSUFBVSxHQUU5QmlnQixFQUFrQmppQixLQUFNZ0MsRUFBT3dhLEdBQVEsR0FFbENBLEVBQVMsR0FHbEI3RCxFQUFPNVYsVUFBVW1oQixjQUFnQixTQUF3QmxpQixFQUFPd2EsRUFBUThGLFVBQ3RFdGdCLEdBQVNBLEVBQ1R3YSxHQUFrQixFQUNiOEYsR0FBVU4sRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVEsRUFBRyxNQUFRLEdBQ3BEN0QsRUFBT0MsMEJBQ0o0RCxHQUFXeGEsSUFBVSxPQUNyQndhLEVBQVMsR0FBYyxJQUFSeGEsR0FFcEJpZ0IsRUFBa0JqaUIsS0FBTWdDLEVBQU93YSxHQUFRLEdBRWxDQSxFQUFTLEdBVWxCN0QsRUFBTzVWLFVBQVVvaEIsY0FBZ0IsU0FBd0JuaUIsRUFBT3dhLEVBQVE4RixVQUN0RXRnQixHQUFTQSxFQUNUd2EsR0FBa0IsRUFDYjhGLEdBQVVOLEVBQVNoaUIsS0FBTWdDLEVBQU93YSxFQUFRLEVBQUcsV0FBWSxHQUN4RDdELEVBQU9DLDBCQUNKNEQsRUFBUyxHQUFNeGEsSUFBVSxRQUN6QndhLEVBQVMsR0FBTXhhLElBQVUsUUFDekJ3YSxFQUFTLEdBQU14YSxJQUFVLE9BQ3pCd2EsR0FBbUIsSUFBUnhhLEdBRWhCbWdCLEVBQWtCbmlCLEtBQU1nQyxFQUFPd2EsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQjdELEVBQU81VixVQUFVcWhCLGNBQWdCLFNBQXdCcGlCLEVBQU93YSxFQUFROEYsVUFDdEV0Z0IsR0FBU0EsRUFDVHdhLEdBQWtCLEVBQ2I4RixHQUFVTixFQUFTaGlCLEtBQU1nQyxFQUFPd2EsRUFBUSxFQUFHLFdBQVksR0FDeEQ3RCxFQUFPQywwQkFDSjRELEdBQVd4YSxJQUFVLFFBQ3JCd2EsRUFBUyxHQUFNeGEsSUFBVSxRQUN6QndhLEVBQVMsR0FBTXhhLElBQVUsT0FDekJ3YSxFQUFTLEdBQWMsSUFBUnhhLEdBRXBCbWdCLEVBQWtCbmlCLEtBQU1nQyxFQUFPd2EsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQjdELEVBQU81VixVQUFVc2hCLFdBQWEsU0FBcUJyaUIsRUFBT3dhLEVBQVE5QyxFQUFZNEksTUFDNUV0Z0IsR0FBU0EsRUFDVHdhLEdBQWtCLEdBQ2I4RixFQUFVLEtBQ1RnQyxFQUFRdkcsS0FBS21GLElBQUksRUFBRyxFQUFJeEosRUFBYSxHQUV6Q3NJLEVBQVNoaUIsS0FBTWdDLEVBQU93YSxFQUFROUMsRUFBWTRLLEVBQVEsR0FBSUEsT0FHcER4TSxFQUFJLEVBQ0o2SyxFQUFNLEVBQ040QixFQUFNLFdBQ0wvSCxHQUFrQixJQUFSeGEsSUFDTjhWLEVBQUk0QixJQUFlaUosR0FBTyxNQUM3QjNnQixFQUFRLEdBQWEsSUFBUnVpQixHQUFzQyxJQUF6QnZrQixLQUFLd2MsRUFBUzFFLEVBQUksS0FDOUN5TSxFQUFNLFFBRUgvSCxFQUFTMUUsSUFBTzlWLEVBQVEyZ0IsR0FBUSxHQUFLNEIsRUFBTSxXQUczQy9ILEVBQVM5QyxHQUdsQmYsRUFBTzVWLFVBQVV5aEIsV0FBYSxTQUFxQnhpQixFQUFPd2EsRUFBUTlDLEVBQVk0SSxNQUM1RXRnQixHQUFTQSxFQUNUd2EsR0FBa0IsR0FDYjhGLEVBQVUsS0FDVGdDLEVBQVF2RyxLQUFLbUYsSUFBSSxFQUFHLEVBQUl4SixFQUFhLEdBRXpDc0ksRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVE5QyxFQUFZNEssRUFBUSxHQUFJQSxPQUdwRHhNLEVBQUk0QixFQUFhLEVBQ2pCaUosRUFBTSxFQUNONEIsRUFBTSxXQUNML0gsRUFBUzFFLEdBQWEsSUFBUjlWLEVBQ0wsS0FBTDhWLElBQVc2SyxHQUFPLE1BQ3JCM2dCLEVBQVEsR0FBYSxJQUFSdWlCLEdBQXNDLElBQXpCdmtCLEtBQUt3YyxFQUFTMUUsRUFBSSxLQUM5Q3lNLEVBQU0sUUFFSC9ILEVBQVMxRSxJQUFPOVYsRUFBUTJnQixHQUFRLEdBQUs0QixFQUFNLFdBRzNDL0gsRUFBUzlDLEdBR2xCZixFQUFPNVYsVUFBVTBoQixVQUFZLFNBQW9CemlCLEVBQU93YSxFQUFROEYsVUFDOUR0Z0IsR0FBU0EsRUFDVHdhLEdBQWtCLEVBQ2I4RixHQUFVTixFQUFTaGlCLEtBQU1nQyxFQUFPd2EsRUFBUSxFQUFHLEtBQU8sS0FDbEQ3RCxFQUFPQyxzQkFBcUI1VyxFQUFRK2IsS0FBS2lHLE1BQU1oaUIsSUFDaERBLEVBQVEsSUFBR0EsRUFBUSxJQUFPQSxFQUFRLFFBQ2pDd2EsR0FBbUIsSUFBUnhhLEVBQ1R3YSxFQUFTLEdBR2xCN0QsRUFBTzVWLFVBQVUyaEIsYUFBZSxTQUF1QjFpQixFQUFPd2EsRUFBUThGLFVBQ3BFdGdCLEdBQVNBLEVBQ1R3YSxHQUFrQixFQUNiOEYsR0FBVU4sRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVEsRUFBRyxPQUFTLE9BQ3JEN0QsRUFBT0MsMEJBQ0o0RCxHQUFtQixJQUFSeGEsT0FDWHdhLEVBQVMsR0FBTXhhLElBQVUsR0FFOUJpZ0IsRUFBa0JqaUIsS0FBTWdDLEVBQU93YSxHQUFRLEdBRWxDQSxFQUFTLEdBR2xCN0QsRUFBTzVWLFVBQVU0aEIsYUFBZSxTQUF1QjNpQixFQUFPd2EsRUFBUThGLFVBQ3BFdGdCLEdBQVNBLEVBQ1R3YSxHQUFrQixFQUNiOEYsR0FBVU4sRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVEsRUFBRyxPQUFTLE9BQ3JEN0QsRUFBT0MsMEJBQ0o0RCxHQUFXeGEsSUFBVSxPQUNyQndhLEVBQVMsR0FBYyxJQUFSeGEsR0FFcEJpZ0IsRUFBa0JqaUIsS0FBTWdDLEVBQU93YSxHQUFRLEdBRWxDQSxFQUFTLEdBR2xCN0QsRUFBTzVWLFVBQVU2aEIsYUFBZSxTQUF1QjVpQixFQUFPd2EsRUFBUThGLFVBQ3BFdGdCLEdBQVNBLEVBQ1R3YSxHQUFrQixFQUNiOEYsR0FBVU4sRUFBU2hpQixLQUFNZ0MsRUFBT3dhLEVBQVEsRUFBRyxZQUFhLFlBQ3pEN0QsRUFBT0MsMEJBQ0o0RCxHQUFtQixJQUFSeGEsT0FDWHdhLEVBQVMsR0FBTXhhLElBQVUsT0FDekJ3YSxFQUFTLEdBQU14YSxJQUFVLFFBQ3pCd2EsRUFBUyxHQUFNeGEsSUFBVSxJQUU5Qm1nQixFQUFrQm5pQixLQUFNZ0MsRUFBT3dhLEdBQVEsR0FFbENBLEVBQVMsR0FHbEI3RCxFQUFPNVYsVUFBVThoQixhQUFlLFNBQXVCN2lCLEVBQU93YSxFQUFROEYsVUFDcEV0Z0IsR0FBU0EsRUFDVHdhLEdBQWtCLEVBQ2I4RixHQUFVTixFQUFTaGlCLEtBQU1nQyxFQUFPd2EsRUFBUSxFQUFHLFlBQWEsWUFDekR4YSxFQUFRLElBQUdBLEVBQVEsV0FBYUEsRUFBUSxHQUN4QzJXLEVBQU9DLDBCQUNKNEQsR0FBV3hhLElBQVUsUUFDckJ3YSxFQUFTLEdBQU14YSxJQUFVLFFBQ3pCd2EsRUFBUyxHQUFNeGEsSUFBVSxPQUN6QndhLEVBQVMsR0FBYyxJQUFSeGEsR0FFcEJtZ0IsRUFBa0JuaUIsS0FBTWdDLEVBQU93YSxHQUFRLEdBRWxDQSxFQUFTLEdBZ0JsQjdELEVBQU81VixVQUFVK2hCLGFBQWUsU0FBdUI5aUIsRUFBT3dhLEVBQVE4RixVQUM3REQsRUFBV3JpQixLQUFNZ0MsRUFBT3dhLEdBQVEsRUFBTThGLElBRy9DM0osRUFBTzVWLFVBQVVnaUIsYUFBZSxTQUF1Qi9pQixFQUFPd2EsRUFBUThGLFVBQzdERCxFQUFXcmlCLEtBQU1nQyxFQUFPd2EsR0FBUSxFQUFPOEYsSUFXaEQzSixFQUFPNVYsVUFBVWlpQixjQUFnQixTQUF3QmhqQixFQUFPd2EsRUFBUThGLFVBQy9EQyxFQUFZdmlCLEtBQU1nQyxFQUFPd2EsR0FBUSxFQUFNOEYsSUFHaEQzSixFQUFPNVYsVUFBVWtpQixjQUFnQixTQUF3QmpqQixFQUFPd2EsRUFBUThGLFVBQy9EQyxFQUFZdmlCLEtBQU1nQyxFQUFPd2EsR0FBUSxFQUFPOEYsSUFJakQzSixFQUFPNVYsVUFBVXdYLEtBQU8sU0FBZTBHLEVBQVFpRSxFQUFhdkgsRUFBT0MsTUFDckRELEVBQVBBLEdBQWUsRUFDZkMsR0FBZSxJQUFSQSxJQUFXQSxFQUFNNWQsS0FBS2lELFFBQzlCaWlCLEdBQWVqRSxFQUFPaGUsU0FBUWlpQixFQUFjakUsRUFBT2hlLFFBQ3JDaWlCLEVBQWJBLEdBQTJCLEVBQ3RCLEVBQU50SCxHQUFXQSxFQUFNRCxJQUFPQyxFQUFNRCxHQUc5QkMsSUFBUUQsRUFBTyxPQUFPLEtBQ0osSUFBbEJzRCxFQUFPaGUsUUFBZ0MsSUFBaEJqRCxLQUFLaUQsT0FBYyxPQUFPLEtBR2pEaWlCLEVBQWMsUUFDVixJQUFJbk0sV0FBVyxnQ0FFbkI0RSxFQUFRLEdBQUtBLEdBQVMzZCxLQUFLaUQsT0FBUSxNQUFNLElBQUk4VixXQUFXLGdDQUN4RDZFLEVBQU0sRUFBRyxNQUFNLElBQUk3RSxXQUFXLDJCQUc5QjZFLEVBQU01ZCxLQUFLaUQsU0FBUTJhLEVBQU01ZCxLQUFLaUQsUUFDOUJnZSxFQUFPaGUsT0FBU2lpQixFQUFjdEgsRUFBTUQsSUFDdENDLEVBQU1xRCxFQUFPaGUsT0FBU2lpQixFQUFjdkgsT0FJbEM3RixFQURBdUMsRUFBTXVELEVBQU1ELEtBR1ozZCxPQUFTaWhCLEdBQVV0RCxFQUFRdUgsR0FBZUEsRUFBY3RILE1BRXJEOUYsRUFBSXVDLEVBQU0sRUFBUSxHQUFMdkMsSUFBVUEsRUFDMUJtSixFQUFPbkosRUFBSW9OLEdBQWVsbEIsS0FBSzhYLEVBQUk2RixRQUVoQyxHQUFJdEQsRUFBTSxNQUFTMUIsRUFBT0Msd0JBRTFCZCxFQUFJLEVBQUdBLEVBQUl1QyxJQUFPdkMsRUFDckJtSixFQUFPbkosRUFBSW9OLEdBQWVsbEIsS0FBSzhYLEVBQUk2RixRQUdyQzNFLFdBQVdqVyxVQUFVb2lCLElBQUlsTixLQUN2QmdKLEVBQ0FqaEIsS0FBS2tmLFNBQVN2QixFQUFPQSxFQUFRdEQsR0FDN0I2SyxVQUlHN0ssR0FPVDFCLEVBQU81VixVQUFVMmMsS0FBTyxTQUFlakYsRUFBS2tELEVBQU9DLEVBQUs3RCxNQUVuQyxpQkFBUlUsRUFBa0IsSUFDTixpQkFBVmtELEdBQ1Q1RCxFQUFXNEQsRUFDWEEsRUFBUSxFQUNSQyxFQUFNNWQsS0FBS2lELFFBQ2EsaUJBQVIyYSxJQUNoQjdELEVBQVc2RCxFQUNYQSxFQUFNNWQsS0FBS2lELFFBRU0sSUFBZndYLEVBQUl4WCxPQUFjLEtBQ2hCbWlCLEVBQU8zSyxFQUFJeUMsV0FBVyxHQUN0QmtJLEVBQU8sTUFDVDNLLEVBQU0ySyxXQUdPekwsSUFBYkksR0FBOEMsaUJBQWJBLFFBQzdCLElBQUlULFVBQVUsZ0NBRUUsaUJBQWJTLElBQTBCcEIsRUFBT3FCLFdBQVdELFNBQy9DLElBQUlULFVBQVUscUJBQXVCUyxPQUVyQixpQkFBUlUsSUFDaEJBLEdBQVksUUFJVmtELEVBQVEsR0FBSzNkLEtBQUtpRCxPQUFTMGEsR0FBUzNkLEtBQUtpRCxPQUFTMmEsUUFDOUMsSUFBSTdFLFdBQVcseUJBR25CNkUsR0FBT0QsU0FDRjNkLFNBUUw4WCxLQUxKNkYsS0FBa0IsRUFDbEJDLE9BQWNqRSxJQUFSaUUsRUFBb0I1ZCxLQUFLaUQsT0FBUzJhLElBQVEsRUFLN0IsaUJBSFRuRCxFQUFMQSxHQUFXLE9BSVQzQyxFQUFJNkYsRUFBTzdGLEVBQUk4RixJQUFPOUYsT0FDcEJBLEdBQUsyQyxNQUVQLEtBQ0RvSCxFQUFRbEosRUFBT3lCLFNBQVNLLEdBQ3hCQSxFQUNBUSxFQUFZLElBQUl0QyxFQUFPOEIsRUFBS1YsR0FBVWUsWUFDdENULEVBQU13SCxFQUFNNWUsV0FDWDZVLEVBQUksRUFBR0EsRUFBSThGLEVBQU1ELElBQVM3RixPQUN4QkEsRUFBSTZGLEdBQVNrRSxFQUFNL0osRUFBSXVDLFVBSXpCcmEsVUFNTHFsQixFQUFvQiw4QkFFZkMsRUFBYXRJLE9BRXBCQSxXQVVtQkEsVUFDZkEsRUFBSXVJLEtBQWF2SSxFQUFJdUksT0FDbEJ2SSxFQUFJcEssUUFBUSxhQUFjLElBWjNCNFMsQ0FBV3hJLEdBQUtwSyxRQUFReVMsRUFBbUIsS0FFekNwaUIsT0FBUyxFQUFHLE1BQU8sUUFFcEIrWixFQUFJL1osT0FBUyxHQUFNLEdBQ3hCK1osR0FBWSxXQUVQQSxXQVFBNEUsRUFBT3ZHLFVBQ1ZBLEVBQUksR0FBVyxJQUFNQSxFQUFFUCxTQUFTLElBQzdCTyxFQUFFUCxTQUFTLGFBR1hHLEVBQWFuQixFQUFRdUQsT0FFeEJrQixFQURKbEIsRUFBUUEsR0FBU29JLEVBQUFBLFVBRWJ4aUIsRUFBUzZXLEVBQU83VyxPQUNoQnlpQixFQUFnQixLQUNoQjdELEVBQVEsR0FFSC9KLEVBQUksRUFBR0EsRUFBSTdVLElBQVU2VSxFQUFHLElBSWYsT0FIaEJ5RyxFQUFZekUsRUFBT29ELFdBQVdwRixLQUdKeUcsRUFBWSxNQUFRLEtBRXZDbUgsRUFBZSxJQUVGLE1BQVpuSCxFQUFvQixFQUVGLEdBQWZsQixHQUFTLElBQVN3RSxFQUFNemUsS0FBSyxJQUFNLElBQU0sY0FFekMsR0FBSTBVLEVBQUksSUFBTTdVLEVBQVEsRUFFUCxHQUFmb2EsR0FBUyxJQUFTd0UsRUFBTXplLEtBQUssSUFBTSxJQUFNLGNBS2hEc2lCLEVBQWdCbkgsY0FNZEEsRUFBWSxNQUFRLEVBQ0YsR0FBZmxCLEdBQVMsSUFBU3dFLEVBQU16ZSxLQUFLLElBQU0sSUFBTSxLQUM5Q3NpQixFQUFnQm5ILFdBS2xCQSxFQUFrRSxPQUFyRG1ILEVBQWdCLE9BQVUsR0FBS25ILEVBQVksWUFDL0NtSCxJQUVXLEdBQWZySSxHQUFTLElBQVN3RSxFQUFNemUsS0FBSyxJQUFNLElBQU0sUUFHaERzaUIsRUFBZ0IsS0FHWm5ILEVBQVksSUFBTSxLQUNmbEIsR0FBUyxHQUFLLEVBQUcsTUFDdEJ3RSxFQUFNemUsS0FBS21iLFFBQ04sR0FBSUEsRUFBWSxLQUFPLEtBQ3ZCbEIsR0FBUyxHQUFLLEVBQUcsTUFDdEJ3RSxFQUFNemUsS0FDSm1iLEdBQWEsRUFBTSxJQUNQLEdBQVpBLEVBQW1CLFVBRWhCLEdBQUlBLEVBQVksTUFBUyxLQUN6QmxCLEdBQVMsR0FBSyxFQUFHLE1BQ3RCd0UsRUFBTXplLEtBQ0ptYixHQUFhLEdBQU0sSUFDbkJBLEdBQWEsRUFBTSxHQUFPLElBQ2QsR0FBWkEsRUFBbUIsU0FFaEIsQ0FBQSxLQUFJQSxFQUFZLGVBU2YsSUFBSXhjLE1BQU0sMEJBUlhzYixHQUFTLEdBQUssRUFBRyxNQUN0QndFLEVBQU16ZSxLQUNKbWIsR0FBYSxHQUFPLElBQ3BCQSxHQUFhLEdBQU0sR0FBTyxJQUMxQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixhQU9sQnNELFdBNEJBM0csRUFBZThCLFVBQ2Z4RSxFQUFPbU4sWUFBWUwsRUFBWXRJLGFBRy9CRCxFQUFZNkksRUFBS0MsRUFBS3JKLEVBQVF2WixPQUNoQyxJQUFJNlUsRUFBSSxFQUFHQSxFQUFJN1UsS0FDYjZVLEVBQUkwRSxHQUFVcUosRUFBSTVpQixRQUFZNlUsR0FBSzhOLEVBQUkzaUIsVUFEaEI2VSxFQUU1QitOLEVBQUkvTixFQUFJMEUsR0FBVW9KLEVBQUk5TixVQUVqQkEsS0FPb0JHLEtBQUtMLEVBQVNILEVBQW9CLGNBSS9DSSxPQUFRRCxRQUFTSCwrQkFFSWMsT0FBUUksWUFBNEJtTixHQUFBQSxHQUloRSxTQUFVbE8sUUFBUW1PLE1BQUt2TCxRQUUvQnVMLE1BQU9BLE9BQVFBLE1BQUtDLGVBQWUsV0FBYUQsTUFBSSxRQUFjQSxNQUNsRXZMLE9BQVNBLFFBQVVBLE9BQU93TCxlQUFlLFdBQWF4TCxPQUFNLFFBQWNBLFdBRXRFeUwsZUFBbUMsb0JBQVgzTixPQUF5QkEsWUFBMkIsSUFBWEMsT0FBeUJBLE9BQXlCLG9CQUFUMk4sS0FBdUJBLEtBQU8sWUFFbklDLHFCQUFxQkMsRUFBSXZPLFVBQ0F1TyxFQUExQnZPLEVBQVMsQ0FBRUQsUUFBUyxJQUFpQkMsRUFBT0QsU0FBVUMsRUFBT0QsaUJBRzVEeU8sMEJBQTJCaEwsVUFDNUJBLEdBQUtBLFdBQWFBLE1BR3RCcFosSUFBTWtrQixxQkFBcUIsU0FBVXRPLFdBRUwsSUFBdkJvTyxlQUFlSyxJQUN4QnpPLEVBQU9ELFFBQVVxTyxlQUFlSyxJQUNoQ3pPLEVBQU9ELFFBQVEwTyxJQUFNTCxlQUFlSyxRQUMvQixLQUVEQSxFQUFNLFNBQWE5TSxRQUNoQitNLE1BQVEsUUFDUkMsUUFBVSxPQUVWLElBQUkxTyxFQUFJLEVBQUdBLEVBQUkwQixFQUFNdlcsT0FBUTZVLE9BQ2hCLE1BQVowQixFQUFNMUIsUUFFTjJPLEVBQVFqTixFQUFNMUIsR0FDZDVWLEVBQU11a0IsRUFBTSxHQUNaemtCLEVBQVF5a0IsRUFBTSxRQUViRixNQUFNbmpCLEtBQUtsQixRQUlYc2tCLFFBQVF0a0IsR0FBTyxDQUNsQndrQixFQUFHMWtCLEVBQ0g4VixFQUFHOVgsS0FBS3VtQixNQUFNdGpCLE9BQVMsS0FLN0JxakIsRUFBSXZqQixVQUFVNGpCLE1BQVEsZ0JBQ2ZKLE1BQVEsUUFDUkMsUUFBVSxJQUdqQkYsRUFBSXZqQixpQkFBbUIsU0FBVWIsT0FDM0JGLEVBQVFoQyxLQUFLd21CLFFBQVF0a0IsVUFDWixNQUFURixXQUVHaEMsS0FBS3dtQixRQUFRdGtCLFFBRWZxa0IsTUFBTUssT0FBTzVrQixFQUFNOFYsRUFBRyxJQUVwQixJQUdUd08sRUFBSXZqQixVQUFVOGpCLFFBQVUsZUFDbEJYLEVBQU9sbUIsS0FDUDhtQixFQUFRLFFBQ0wsQ0FDTEMsS0FBTSxlQUNBN2tCLEVBQU1na0IsRUFBS0ssTUFBTU8sV0FDZCxDQUNMOWtCLFdBQWUyWCxJQUFSelgsRUFBb0IsQ0FBQ0EsRUFBS2drQixFQUFLTSxRQUFRdGtCLEdBQUt3a0IsUUFBSy9NLEVBQ3hEcU4sVUFBY3JOLElBQVJ6WCxNQU1kb2tCLEVBQUl2akIsVUFBVWtrQixRQUFVLFNBQVVDLEVBQVVoQixHQUMxQ0EsRUFBT0EsR0FBUWxtQixTQUVWLElBQUk4WCxFQUFJLEVBQUdBLEVBQUk5WCxLQUFLdW1CLE1BQU10akIsT0FBUTZVLElBQUssS0FDdEM1VixFQUFNbEMsS0FBS3VtQixNQUFNek8sR0FFckJvUCxFQUFTalAsS0FBS2lPLEVBQU1sbUIsS0FBS3dtQixRQUFRdGtCLEdBQUt3a0IsRUFBR3hrQixFQUFLZ2tCLEtBSWxESSxFQUFJdmpCLFVBQVVva0IsSUFBTSxTQUFVamxCLFVBQ3JCbEMsS0FBS3dtQixRQUFRdGtCLEdBQU9sQyxLQUFLd21CLFFBQVF0a0IsR0FBS3drQixPQUFJL00sR0FHbkQyTSxFQUFJdmpCLFVBQVVxa0IsSUFBTSxTQUFVbGxCLFVBQ0EsTUFBckJsQyxLQUFLd21CLFFBQVF0a0IsSUFHdEJva0IsRUFBSXZqQixVQUFVc2tCLEtBQU8sZUFDZm5CLEVBQU9sbUIsS0FDUDhtQixFQUFRLFFBQ0wsQ0FDTEMsS0FBTSxlQUNBN2tCLEVBQU1na0IsRUFBS0ssTUFBTU8sV0FDZCxDQUNMOWtCLFdBQWUyWCxJQUFSelgsRUFBb0JBLE9BQU15WCxFQUNqQ3FOLFVBQWNyTixJQUFSelgsTUFNZG9rQixFQUFJdmpCLFVBQVVvaUIsSUFBTSxTQUFVampCLEVBQUtGLFVBQzdCaEMsS0FBS3dtQixRQUFRdGtCLFFBQ1Zza0IsUUFBUXRrQixHQUFLd2tCLEVBQUkxa0IsUUFLbkJ1a0IsTUFBTW5qQixLQUFLbEIsUUFJWHNrQixRQUFRdGtCLEdBQU8sQ0FDbEJ3a0IsRUFBRzFrQixFQUNIOFYsRUFBRzlYLEtBQUt1bUIsTUFBTXRqQixPQUFTLElBVmhCakQsTUFlWHNtQixFQUFJdmpCLFVBQVV1a0IsT0FBUyxlQUNqQnBCLEVBQU9sbUIsS0FDUDhtQixFQUFRLFFBQ0wsQ0FDTEMsS0FBTSxlQUNBN2tCLEVBQU1na0IsRUFBS0ssTUFBTU8sV0FDZCxDQUNMOWtCLFdBQWUyWCxJQUFSelgsRUFBb0Jna0IsRUFBS00sUUFBUXRrQixHQUFLd2tCLE9BQUkvTSxFQUNqRHFOLFVBQWNyTixJQUFSelgsTUFPZFksT0FBTzBjLGVBQWU4RyxFQUFJdmpCLFVBQVcsT0FBUSxDQUMzQ3drQixZQUFZLEVBQ1pKLElBQUssa0JBQ0lubkIsS0FBS3VtQixNQUFNdGpCLFVBR3RCNFUsRUFBT0QsUUFBVTBPLEtBR2pCa0IsTUFBUXZsQixJQUFJcWtCLElBT2hCUCxNQUFLaGpCLFVBQVUwa0IsZUFBaUIsU0FBVUMsVUFDcENBLEdBQVdBLEVBQVFDLFFBQWdCM25CLEtBQUs0bkIsV0FDckMsQ0FDTEMsWUFBYTduQixLQUFLOGEsYUFRdEJpTCxNQUFLK0IsaUJBQW1CLFNBQVVDLEVBQUtMLE9BQ2pDTSxFQUFTakMsTUFBSzVMLFdBQVc0TixFQUFJRixvQkFDMUJILEdBQVdBLEVBQVFDLFFBQVVLLEVBQU9KLFdBQWFJLEdBRzFEbGxCLE9BQU8wYyxlQUFldUcsTUFBS2hqQixVQUFXLFlBQWEsQ0FDakRmLE1BQU8sYUFFTGltQixPQUFTbEMsZUFNSm1DLGdCQUFnQkMsRUFBVUMsUUFBcUJELGFBQW9CQyxTQUFzQixJQUFJOU8sVUFBVSw4Q0FFdkcrTyxrQkFBa0JwSCxFQUFRcUgsT0FBYyxJQUFJeFEsRUFBSSxFQUFHQSxFQUFJd1EsRUFBTXJsQixPQUFRNlUsSUFBSyxLQUFNeVEsRUFBYUQsRUFBTXhRLEdBQUl5USxFQUFXaEIsV0FBYWdCLEVBQVdoQixhQUFjLEVBQU9nQixFQUFXOUksY0FBZSxFQUFVLFVBQVc4SSxJQUFZQSxFQUFXQyxVQUFXLEdBQU0xbEIsT0FBTzBjLGVBQWV5QixFQUFRc0gsRUFBV3JtQixJQUFLcW1CLGFBRXBTRSxhQUFhTCxFQUFhTSxFQUFZQyxVQUFtQkQsR0FBWUwsa0JBQWtCRCxFQUFZcmxCLFVBQVcybEIsR0FBaUJDLEdBQWFOLGtCQUFrQkQsRUFBYU8sR0FBcUJQLE1BRXJNUSwyQkFTT0EsRUFBTzVtQixHQUNka21CLGdCQUFnQmxvQixLQUFNNG9CLFFBRWpCNW1CLE1BQVFBLFNBVWZ5bUIsYUFBYUcsRUFBUSxDQUFDLENBQ3BCMW1CLElBQUssVUFDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssU0FDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssaUJBQ0xGLE1BQU8sU0FBd0IwbEIsVUFDekJBLEdBQVdBLEVBQVFDLFNBQVdwRyxTQUFTdmhCLEtBQUtnQyxPQUFlaEMsS0FBS2dDLE1BQzdELENBQ0w2bUIsY0FBZTdvQixLQUFLZ0MsTUFBTThZLGVBTzVCLENBQUMsQ0FDSDVZLElBQUssbUJBQ0xGLE1BQU8sU0FBMEIrbEIsRUFBS0wsVUFDN0JBLEdBQVdBLEVBQVFDLFFBQVVtQixXQUFXZixFQUFJYyxlQUFpQixJQUFJRCxFQUFPRSxXQUFXZixFQUFJYyxvQkFJM0ZELEtBR1Q5bEIsT0FBTzBjLGVBQWVvSixPQUFPN2xCLFVBQVcsWUFBYSxDQUNuRGYsTUFBTyxlQUVMK21CLFNBQVdILGdCQUVOSSxVQUFRcm1CLFVBQWtGcW1CLFVBQXJELG1CQUFYMUosUUFBb0QsV0FBM0IySixRQUFPM0osT0FBTzRKLFVBQW1DLFNBQWlCdm1CLGtCQUFxQkEsSUFBMkIsU0FBaUJBLFVBQWNBLEdBQXlCLG1CQUFYMmMsUUFBeUIzYyxFQUFJQyxjQUFnQjBjLFFBQVUzYyxJQUFRMmMsT0FBT3ZjLFVBQVksaUJBQWtCSixLQUF5QkEsWUFFL1V3bUIsa0JBQWtCaEIsRUFBVUMsUUFBcUJELGFBQW9CQyxTQUFzQixJQUFJOU8sVUFBVSw4Q0FFekc4UCxvQkFBb0JuSSxFQUFRcUgsT0FBYyxJQUFJeFEsRUFBSSxFQUFHQSxFQUFJd1EsRUFBTXJsQixPQUFRNlUsSUFBSyxLQUFNeVEsRUFBYUQsRUFBTXhRLEdBQUl5USxFQUFXaEIsV0FBYWdCLEVBQVdoQixhQUFjLEVBQU9nQixFQUFXOUksY0FBZSxFQUFVLFVBQVc4SSxJQUFZQSxFQUFXQyxVQUFXLEdBQU0xbEIsT0FBTzBjLGVBQWV5QixFQUFRc0gsRUFBV3JtQixJQUFLcW1CLGFBRXRTYyxlQUFlakIsRUFBYU0sRUFBWUMsVUFBbUJELEdBQVlVLG9CQUFvQmhCLEVBQVlybEIsVUFBVzJsQixHQUFpQkMsR0FBYVMsb0JBQW9CaEIsRUFBYU8sR0FBcUJQLFdBRXRNa0IsMkJBQTJCcEQsRUFBTWpPLFVBQVlBLEdBQTJCLFdBQWxCK1EsVUFBUS9RLElBQXNDLG1CQUFUQSxFQUE4Q3NSLHVCQUF1QnJELEdBQXRDak8sV0FFMUhzUix1QkFBdUJyRCxXQUFxQixJQUFUQSxRQUF5QixJQUFJc0QsZUFBZSxvRUFBdUV0RCxXQUV0SnVELGdCQUFnQkMsVUFBS0QsZ0JBQWtCM21CLE9BQU82bUIsZUFBaUI3bUIsT0FBTzhtQixlQUFpQixTQUF5QkYsVUFBWUEsRUFBRXpRLFdBQWFuVyxPQUFPOG1CLGVBQWVGLEtBQThCQSxZQUUvTEcsVUFBVUMsRUFBVUMsTUFBd0MsbUJBQWZBLEdBQTRDLE9BQWZBLFFBQTZCLElBQUl6USxVQUFVLHNEQUF5RHdRLEVBQVMvbUIsVUFBWUQsT0FBT2tuQixPQUFPRCxHQUFjQSxFQUFXaG5CLFVBQVcsQ0FBRUgsWUFBYSxDQUFFWixNQUFPOG5CLEVBQVV0QixVQUFVLEVBQU0vSSxjQUFjLEtBQWVzSyxHQUFZRSxnQkFBZ0JILEVBQVVDLFlBRTFXRSxnQkFBZ0JQLEVBQUdRLFVBQUtELGdCQUFrQm5uQixPQUFPNm1CLGdCQUFrQixTQUF5QkQsRUFBR1EsVUFBS1IsRUFBRXpRLFVBQVlpUixFQUFVUixJQUE2QkEsRUFBR1EsT0FTaktDLDhCQUtPQSxFQUFVQyxFQUFLQyxPQUNsQkMsU0FFSm5CLGtCQUFrQm5wQixLQUFNbXFCLEdBR3RCRyxFQURFckMsT0FBT3NDLE9BQU9ILEdBQ1JkLDJCQUEyQnRwQixLQUFNeXBCLGdCQUFnQlUsR0FBV2xTLEtBQUtqWSxLQUFNb3FCLEVBQUlBLElBQUtBLEVBQUlDLE9BRXBGZiwyQkFBMkJ0cEIsS0FBTXlwQixnQkFBZ0JVLEdBQVdsUyxLQUFLalksS0FBTW9xQixFQUFLQyxJQUcvRWYsMkJBQTJCZ0IsVUFicENULFVBQVVNLEVBOEdWbEMsUUF2RkFvQixlQUFlYyxFQUFXLENBQUMsQ0FDekJqb0IsSUFBSyxTQUNMRixNQUFPLGlCQUNFLENBQ0x3b0IsV0FBWXhxQixLQUFLOGEsY0FXcEIsQ0FDRDVZLElBQUssaUJBS0xGLE1BQU8saUJBQ0UsQ0FDTHdvQixXQUFZLENBQ1ZDLEVBQUd6cUIsS0FBS3FxQixLQUNSdlMsRUFBRzlYLEtBQUtvcUIsU0FRWixDQUFDLENBQ0hsb0IsSUFBSyxVQUNMRixNQUFPLFNBQWlCQSxVQUNmLElBQUltb0IsRUFBVWxDLE9BQU95QyxRQUFRMW9CLE1BVXJDLENBQ0RFLElBQUssYUFDTEYsTUFBTyxTQUFvQkEsVUFDbEIsSUFBSW1vQixFQUFVbEMsT0FBTzBDLFdBQVczb0IsTUFXeEMsQ0FDREUsSUFBSyxXQUNMRixNQUFPLFNBQWtCNG9CLEVBQVNDLFVBQ3pCLElBQUlWLEVBQVVTLEVBQVNDLEtBVy9CLENBQ0Qzb0IsSUFBSyxhQUNMRixNQUFPLFNBQW9CZ2IsRUFBSzhOLFVBQ3ZCLElBQUlYLEVBQVVsQyxPQUFPOU4sV0FBVzZDLEVBQUs4TixNQUU3QyxDQUNENW9CLElBQUssbUJBQ0xGLE1BQU8sU0FBMEIrbEIsVUFDeEIsSUFBSW9DLEVBQVVwQyxFQUFJeUMsV0FBVzFTLEVBQUdpUSxFQUFJeUMsV0FBV0MsT0FJbkROLEtBR1RybkIsT0FBTzBjLGVBQWUySyxVQUFVcG5CLFVBQVcsWUFBYSxDQUN0RGYsTUFBTyxrQkFFTCtvQixVQUFZWixVQUVaYSxNQUFRLEdBRVJDLFFBQXVCbm9CLE9BQU9pRyxPQUFPLFNBQy9CaWlCLFFBR05FLFdBQWE3RSwwQkFBMEI0RSxrQkFVbENFLHlCQUF5Qi9FLFVBQ3pCQSxFQUFHdEwsV0FBV2xJLFFBQVEsWUFBYSx1QkFHbkN3WSxvQkFBb0J2USxXQUN2Qm1OLEVBQVMsSUFBSWhQLFdBQVc2QixHQUVuQi9DLEVBQUksRUFBR0EsRUFBSStDLElBQVEvQyxFQUMxQmtRLEVBQU9sUSxHQUFLaUcsS0FBS2lHLE1BQXNCLElBQWhCakcsS0FBS3NOLGlCQUd2QnJELE1BR0xzRCxZQUFjRix1QkFFSSxvQkFBWDlTLFFBQTBCQSxPQUFPaVQsUUFBVWpULE9BQU9pVCxPQUFPQyxnQkFDbEVGLFlBQWMsU0FBcUJ6USxVQUMxQnZDLE9BQU9pVCxPQUFPQyxnQkFBZ0IsSUFBSXhTLFdBQVc2QixTQUVqRCxLQUVIeVEsWUFBY0osV0FBV0ksWUFDekIsTUFBT2pULElBSVUsTUFBZmlULGNBQ0ZBLFlBQWNGLHlCQUlkSyxNQUFRLENBQ1ZOLHlCQUEwQkEseUJBQzFCRyxZQUFhQSxhQWdCSi9TLE9BQU9tVCxXQUlQblQsT0FBT29ULGlCQXNLZEMsWUFBY3JULE9BQU9xVCxhQUFlLEdBRXBDQyxlQUFpQkQsWUFBWUUsS0FBT0YsWUFBWUcsUUFBVUgsWUFBWUksT0FBU0osWUFBWUssTUFBUUwsWUFBWU0sV0FBYSxrQkFDdkgsSUFBSUMsTUFBT0MsV0FzRGhCQyxTQUdGQSxTQUQyQixtQkFBbEJ2cEIsT0FBT2tuQixPQUNMLFNBQWtCc0MsRUFBTUMsR0FFakNELEVBQUtFLE9BQVNELEVBQ2RELEVBQUt2cEIsVUFBWUQsT0FBT2tuQixPQUFPdUMsRUFBVXhwQixVQUFXLENBQ2xESCxZQUFhLENBQ1haLE1BQU9zcUIsRUFDUC9FLFlBQVksRUFDWmlCLFVBQVUsRUFDVi9JLGNBQWMsTUFLVCxTQUFrQjZNLEVBQU1DLEdBQ2pDRCxFQUFLRSxPQUFTRCxFQUVDLFNBQVhFLEtBRUpBLEVBQVMxcEIsVUFBWXdwQixFQUFVeHBCLFVBQy9CdXBCLEVBQUt2cEIsVUFBWSxJQUFJMHBCLEVBQ3JCSCxFQUFLdnBCLFVBQVVILFlBQWMwcEIsT0FJN0JJLFdBQWFMLGtCQUVSTSxZQUFVaHFCLFVBQWtGZ3FCLFlBQXJELG1CQUFYck4sUUFBb0QsV0FBM0IySixRQUFPM0osT0FBTzRKLFVBQXFDLFNBQWlCdm1CLGtCQUFxQkEsSUFBNkIsU0FBaUJBLFVBQWNBLEdBQXlCLG1CQUFYMmMsUUFBeUIzYyxFQUFJQyxjQUFnQjBjLFFBQVUzYyxJQUFRMmMsT0FBT3ZjLFVBQVksaUJBQWtCSixLQUEyQkEsT0FDNVZpcUIsYUFBZSxvQkFDVkMsT0FBT0MsT0FDVEMsU0FBU0QsR0FBSSxTQUNaRSxFQUFVLEdBRUxsVixFQUFJLEVBQUdBLEVBQUl5SSxVQUFVdGQsT0FBUTZVLElBQ3BDa1YsRUFBUTVwQixLQUFLeWQsUUFBUU4sVUFBVXpJLFlBRzFCa1YsRUFBUWhNLEtBQUssS0FHbEJsSixFQUFJLFVBQ0ptVixFQUFPMU0sVUFDUGxHLEVBQU00UyxFQUFLaHFCLE9BQ1grWixFQUFNbmEsT0FBT2lxQixHQUFHbGEsUUFBUWdhLGFBQWMsU0FBVTdNLE1BQ3hDLE9BQU5BLEVBQVksTUFBTyxPQUNkMUYsR0FBTHZDLEVBQVUsT0FBT2lJLFNBRWJBLE9BQ0QsWUFDSWxkLE9BQU9vcUIsRUFBS25WLFVBRWhCLFlBQ0l4TCxPQUFPMmdCLEVBQUtuVixVQUVoQixnQkFFTW9WLEtBQUtDLFVBQVVGLEVBQUtuVixNQUMzQixNQUFPc1YsU0FDQSw0QkFJRnJOLEtBSUpBLEVBQUlrTixFQUFLblYsR0FBSUEsRUFBSXVDLEVBQUswRixFQUFJa04sSUFBT25WLEdBQ3BDdVYsT0FBT3ROLEtBQU91TixTQUFTdk4sR0FDekIvQyxHQUFPLElBQU0rQyxFQUViL0MsR0FBTyxJQUFNNkQsUUFBUWQsVUFJbEIvQyxXQUtBdVEsVUFBVW5ILEVBQUlvSCxNQUVqQkMsWUFBWWxWLE9BQU9tVixnQkFDZCxrQkFDRUgsVUFBVW5ILEVBQUlvSCxHQUFLNU8sTUFBTTVlLEtBQU11Z0IsZ0JBSXRDb04sR0FBUywyQkFHTkEsSUFFREMsUUFBUUMsTUFBTUwsR0FHaEJHLEdBQVMsR0FHSnZILEVBQUd4SCxNQUFNNWUsS0FBTXVnQixnQkFLdEJ1TixPQUFTLEdBQ1RDLHNCQUNLQyxTQUFTN0ksTUFDWnNJLFlBQVlNLGdCQUFlQSxhQUF5QyxJQUN4RTVJLEVBQU1BLEVBQUk4SSxlQUVMSCxPQUFPM0ksTUFDTixJQUFJK0ksT0FBTyxNQUFRL0ksRUFBTSxNQUFPLEtBQUtnSixLQUFLSixjQUFlLENBRzNERCxPQUFPM0ksR0FBTyxlQUNScUksRUFBTVgsT0FBT2pPLE1BQU0sS0FBTTJCLFdBQzdCcU4sUUFBUUMsTUFBTSxZQUFhMUksRUFKbkIsRUFJNkJxSSxTQUd2Q00sT0FBTzNJLEdBQU8sb0JBSVgySSxPQUFPM0ksWUFZUHRFLFFBQVFsZSxFQUFLeXJCLE9BRWhCQyxFQUFNLENBQ1JDLEtBQU0sR0FDTkMsUUFBU0MsdUJBR2EsR0FBcEJqTyxVQUFVdGQsU0FBYW9yQixFQUFJSSxNQUFRbE8sVUFBVSxJQUN6QixHQUFwQkEsVUFBVXRkLFNBQWFvckIsRUFBSUssT0FBU25PLFVBQVUsSUFFOUNvTyxVQUFVUCxHQUVaQyxFQUFJTyxXQUFhUixFQUNSQSxHQUVUUyxRQUFRUixFQUFLRCxHQUlYWCxZQUFZWSxFQUFJTyxjQUFhUCxFQUFJTyxZQUFhLEdBQzlDbkIsWUFBWVksRUFBSUksU0FBUUosRUFBSUksTUFBUSxHQUNwQ2hCLFlBQVlZLEVBQUlLLFVBQVNMLEVBQUlLLFFBQVMsR0FDdENqQixZQUFZWSxFQUFJUyxpQkFBZ0JULEVBQUlTLGVBQWdCLEdBQ3BEVCxFQUFJSyxTQUFRTCxFQUFJRSxRQUFVUSxrQkFDdkJDLFlBQVlYLEVBQUsxckIsRUFBSzByQixFQUFJSSxnQkErQjFCTSxpQkFBaUIvUixFQUFLaVMsT0FDekJDLEVBQVFyTyxRQUFRc08sT0FBT0YsVUFFdkJDLEVBQ0ssS0FBVXJPLFFBQVE2TixPQUFPUSxHQUFPLEdBQUssSUFBTWxTLEVBQU0sS0FBVTZELFFBQVE2TixPQUFPUSxHQUFPLEdBQUssSUFFdEZsUyxXQUlGd1IsZUFBZXhSLEVBQUtpUyxVQUNwQmpTLFdBR0FvUyxZQUFZNVYsT0FDZjZWLEVBQU8sVUFDWDdWLEVBQU15TixRQUFRLFNBQVV4TSxFQUFLNlUsR0FDM0JELEVBQUs1VSxJQUFPLElBRVA0VSxXQUdBTCxZQUFZWCxFQUFLcnNCLEVBQU91dEIsTUFHM0JsQixFQUFJUyxlQUFpQjlzQixHQUFTd3RCLFdBQVd4dEIsRUFBTTZlLFVBQ25EN2UsRUFBTTZlLFVBQVlBLFdBQ2hCN2UsRUFBTVksYUFBZVosRUFBTVksWUFBWUcsWUFBY2YsR0FBUSxLQUN6RDBmLEVBQU0xZixFQUFNNmUsUUFBUTBPLEVBQWNsQixVQUVqQ3RCLFNBQVNyTCxLQUNaQSxFQUFNc04sWUFBWVgsRUFBSzNNLEVBQUs2TixJQUd2QjdOLE1BSUwrTixFQUFZQyxnQkFBZ0JyQixFQUFLcnNCLE1BRWpDeXRCLFNBQ0tBLE1BSUxwSSxFQUFPdmtCLE9BQU91a0IsS0FBS3JsQixHQUNuQjJ0QixFQUFjUCxZQUFZL0gsTUFFMUJnSCxFQUFJTyxhQUNOdkgsRUFBT3ZrQixPQUFPOHNCLG9CQUFvQjV0QixJQUtoQzZ0QixRQUFRN3RCLEtBQXNDLEdBQTNCcWxCLEVBQUsxTCxRQUFRLFlBQWtELEdBQS9CMEwsRUFBSzFMLFFBQVEsdUJBQzNEbVUsWUFBWTl0QixNQUlELElBQWhCcWxCLEVBQUtwa0IsT0FBYyxJQUNqQnVzQixXQUFXeHRCLEdBQVEsS0FDakJzQixFQUFPdEIsRUFBTXNCLEtBQU8sS0FBT3RCLEVBQU1zQixLQUFPLFVBQ3JDK3FCLEVBQUlFLFFBQVEsWUFBY2pyQixFQUFPLElBQUssY0FHM0N5c0IsU0FBUy90QixVQUNKcXNCLEVBQUlFLFFBQVFMLE9BQU9uckIsVUFBVStYLFNBQVM3QyxLQUFLalcsR0FBUSxhQUd4RGd1QixPQUFPaHVCLFVBQ0Zxc0IsRUFBSUUsUUFBUXBDLEtBQUtwcEIsVUFBVStYLFNBQVM3QyxLQUFLalcsR0FBUSxXQUd0RDZ0QixRQUFRN3RCLFVBQ0g4dEIsWUFBWTl0QixPQStDbkJpdUIsRUEzQ0FDLEVBQU8sR0FDUDFXLEdBQVEsRUFDUjJXLEVBQVMsQ0FBQyxJQUFLLEtBRWY5c0IsUUFBUXJCLEtBQ1Z3WCxHQUFRLEVBQ1IyVyxFQUFTLENBQUMsSUFBSyxNQUliWCxXQUFXeHRCLEtBRWJrdUIsRUFBTyxjQURDbHVCLEVBQU1zQixLQUFPLEtBQU90QixFQUFNc0IsS0FBTyxJQUNmLFlBSXhCeXNCLFNBQVMvdEIsS0FDWGt1QixFQUFPLElBQU1oQyxPQUFPbnJCLFVBQVUrWCxTQUFTN0MsS0FBS2pXLElBSTFDZ3VCLE9BQU9odUIsS0FDVGt1QixFQUFPLElBQU0vRCxLQUFLcHBCLFVBQVVxdEIsWUFBWW5ZLEtBQUtqVyxJQUkzQzZ0QixRQUFRN3RCLEtBQ1ZrdUIsRUFBTyxJQUFNSixZQUFZOXRCLElBR1AsSUFBaEJxbEIsRUFBS3BrQixRQUFrQnVXLEdBQXlCLEdBQWhCeFgsRUFBTWlCLE9BSXRDc3NCLEVBQWUsRUFDYlEsU0FBUy90QixHQUNKcXNCLEVBQUlFLFFBQVFMLE9BQU9uckIsVUFBVStYLFNBQVM3QyxLQUFLalcsR0FBUSxVQUVuRHFzQixFQUFJRSxRQUFRLFdBQVksWUFJbkNGLEVBQUlDLEtBQUtsckIsS0FBS3BCLEdBSVppdUIsRUFERXpXLEVBQ082VyxZQUFZaEMsRUFBS3JzQixFQUFPdXRCLEVBQWNJLEVBQWF0SSxHQUVuREEsRUFBS3BsQixJQUFJLFNBQVVDLFVBQ25Cb3VCLGVBQWVqQyxFQUFLcnNCLEVBQU91dEIsRUFBY0ksRUFBYXp0QixFQUFLc1gsS0FJdEU2VSxFQUFJQyxLQUFLaUMsTUFDRkMscUJBQXFCUCxFQUFRQyxFQUFNQyxJQXZCakNBLEVBQU8sR0FBS0QsRUFBT0MsRUFBTyxZQTBCNUJULGdCQUFnQnJCLEVBQUtyc0IsTUFDeEJ5ckIsWUFBWXpyQixHQUFRLE9BQU9xc0IsRUFBSUUsUUFBUSxZQUFhLGdCQUVwRHhCLFNBQVMvcUIsR0FBUSxLQUNmeXVCLEVBQVMsSUFBT3ZELEtBQUtDLFVBQVVuckIsR0FBTzRRLFFBQVEsU0FBVSxJQUFJQSxRQUFRLEtBQU0sT0FBT0EsUUFBUSxPQUFRLEtBQU8sV0FDckd5YixFQUFJRSxRQUFRa0MsRUFBUSxpQkFHekJDLFNBQVMxdUIsR0FBZXFzQixFQUFJRSxRQUFRLEdBQUt2c0IsRUFBTyxVQUNoRDJzQixVQUFVM3NCLEdBQWVxc0IsRUFBSUUsUUFBUSxHQUFLdnNCLEVBQU8sV0FFakRxckIsT0FBT3JyQixHQUFlcXNCLEVBQUlFLFFBQVEsT0FBUSx3QkFHdkN1QixZQUFZOXRCLFNBQ1osSUFBTUQsTUFBTWdCLFVBQVUrWCxTQUFTN0MsS0FBS2pXLEdBQVMsYUFHN0NxdUIsWUFBWWhDLEVBQUtyc0IsRUFBT3V0QixFQUFjSSxFQUFhdEksV0FDdEQ0SSxFQUFTLEdBRUpuWSxFQUFJLEVBQUdDLEVBQUkvVixFQUFNaUIsT0FBUTZVLEVBQUlDLElBQUtELEVBQ3JDa08sZUFBZWhrQixFQUFPYSxPQUFPaVYsSUFDL0JtWSxFQUFPN3NCLEtBQUtrdEIsZUFBZWpDLEVBQUtyc0IsRUFBT3V0QixFQUFjSSxFQUFhOXNCLE9BQU9pVixJQUFJLElBRTdFbVksRUFBTzdzQixLQUFLLFdBSWhCaWtCLEVBQUtKLFFBQVEsU0FBVS9rQixHQUNoQkEsRUFBSTZlLE1BQU0sVUFDYmtQLEVBQU83c0IsS0FBS2t0QixlQUFlakMsRUFBS3JzQixFQUFPdXRCLEVBQWNJLEVBQWF6dEIsR0FBSyxNQUdwRSt0QixXQUdBSyxlQUFlakMsRUFBS3JzQixFQUFPdXRCLEVBQWNJLEVBQWF6dEIsRUFBS3NYLE9BQzlEbFcsRUFBTTBaLEVBQUsyVCxNQUNmQSxFQUFPN3RCLE9BQU84dEIseUJBQXlCNXVCLEVBQU9FLElBQVEsQ0FDcERGLE1BQU9BLEVBQU1FLEtBR05pbEIsSUFFTG5LLEVBREUyVCxFQUFLeEwsSUFDRGtKLEVBQUlFLFFBQVEsa0JBQW1CLFdBRS9CRixFQUFJRSxRQUFRLFdBQVksV0FHNUJvQyxFQUFLeEwsTUFDUG5JLEVBQU1xUixFQUFJRSxRQUFRLFdBQVksWUFJN0J2SSxlQUFlMkosRUFBYXp0QixLQUMvQm9CLEVBQU8sSUFBTXBCLEVBQU0sS0FHaEI4YSxJQUNDcVIsRUFBSUMsS0FBSzNTLFFBQVFnVixFQUFLM3VCLE9BQVMsR0FPUixHQUx2QmdiLEVBREVxUSxPQUFPa0MsR0FDSFAsWUFBWVgsRUFBS3NDLEVBQUszdUIsTUFBTyxNQUU3Qmd0QixZQUFZWCxFQUFLc0MsRUFBSzN1QixNQUFPdXRCLEVBQWUsSUFHNUM1VCxRQUFRLFFBRVpxQixFQURFeEQsRUFDSXdELEVBQUk2VCxNQUFNLE1BQU01dUIsSUFBSSxTQUFVNnVCLFNBQzNCLEtBQU9BLElBQ2I5UCxLQUFLLE1BQU1uRSxPQUFPLEdBRWYsS0FBT0csRUFBSTZULE1BQU0sTUFBTTV1QixJQUFJLFNBQVU2dUIsU0FDbEMsTUFBUUEsSUFDZDlQLEtBQUssT0FJWmhFLEVBQU1xUixFQUFJRSxRQUFRLGFBQWMsWUFJaENkLFlBQVlucUIsR0FBTyxJQUNqQmtXLEdBQVN0WCxFQUFJNmUsTUFBTSxnQkFDZC9ELEVBT1AxWixHQUpGQSxFQUFPNHBCLEtBQUtDLFVBQVUsR0FBS2pyQixJQUVsQjZlLE1BQU0saUNBQ2J6ZCxFQUFPQSxFQUFLdVosT0FBTyxFQUFHdlosRUFBS0wsT0FBUyxHQUM3Qm9yQixFQUFJRSxRQUFRanJCLEVBQU0sVUFFekJBLEVBQU9BLEVBQUtzUCxRQUFRLEtBQU0sT0FBT0EsUUFBUSxPQUFRLEtBQUtBLFFBQVEsV0FBWSxLQUNuRXliLEVBQUlFLFFBQVFqckIsRUFBTSxrQkFJdEJBLEVBQU8sS0FBTzBaLFdBR2R3VCxxQkFBcUJQLEVBQVFDLEVBQU1DLFVBTTdCLEdBTEFGLEVBQU9jLE9BQU8sU0FBVUMsRUFBTUMsVUFDckNBLEVBQUl0VixRQUFRLE1BQ1RxVixFQUFPQyxFQUFJcmUsUUFBUSxrQkFBbUIsSUFBSTNQLE9BQVMsR0FDekQsR0FHTWt0QixFQUFPLElBQWUsS0FBVEQsRUFBYyxHQUFLQSxFQUFPLE9BQVMsSUFBTUQsRUFBT2pQLEtBQUssU0FBVyxJQUFNbVAsRUFBTyxHQUc1RkEsRUFBTyxHQUFLRCxFQUFPLElBQU1ELEVBQU9qUCxLQUFLLE1BQVEsSUFBTW1QLEVBQU8sWUFLMUQ5c0IsUUFBUTZ0QixVQUNSbHVCLE1BQU1LLFFBQVE2dEIsWUFFZHZDLFVBQVV6VixTQUNLLGtCQUFSQSxXQUVQbVUsT0FBT25VLFVBQ0MsT0FBUkEsV0FFQWlZLGtCQUFrQmpZLFVBQ1gsTUFBUEEsV0FFQXdYLFNBQVN4WCxTQUNNLGlCQUFSQSxXQUVQNlQsU0FBUzdULFNBQ00saUJBQVJBLFdBRVBrWSxTQUFTbFksU0FDVSxXQUFuQnlULFlBQVV6VCxZQUVWdVUsWUFBWXZVLGVBQ0osSUFBUkEsV0FFQTZXLFNBQVNzQixVQUNUL0QsU0FBUytELElBQThCLG9CQUF2QkMsZUFBZUQsWUFFL0IvRCxTQUFTcFUsU0FDVSxXQUFuQnlULFlBQVV6VCxJQUE2QixPQUFSQSxXQUUvQjhXLE9BQU91QixVQUNQakUsU0FBU2lFLElBQTRCLGtCQUF0QkQsZUFBZUMsWUFFOUIxQixRQUFReFgsVUFDUmlWLFNBQVNqVixLQUE2QixtQkFBdEJpWixlQUFlalosSUFBMkJBLGFBQWF0VyxnQkFFdkV5dEIsV0FBV3RXLFNBQ0ksbUJBQVJBLFdBRVBzWSxZQUFZdFksVUFDSixPQUFSQSxHQUErQixrQkFBUkEsR0FBb0MsaUJBQVJBLEdBQW1DLGlCQUFSQSxHQUF1QyxXQUFuQnlULFlBQVV6VCxTQUNwRyxJQUFSQSxXQUVBa0IsU0FBU3FYLFVBQ1Q5WSxPQUFPeUIsU0FBU3FYLFlBR2hCSCxlQUFlNUgsVUFDZjVtQixPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUt5UixZQUcvQmdJLElBQUlyVyxVQUNKQSxFQUFJLEdBQUssSUFBTUEsRUFBRVAsU0FBUyxJQUFNTyxFQUFFUCxTQUFTLElBNVVwRCtGLFFBQVE2TixPQUFTLE1BQ1AsQ0FBQyxFQUFHLFdBQ0YsQ0FBQyxFQUFHLGNBQ0QsQ0FBQyxFQUFHLFlBQ04sQ0FBQyxFQUFHLFVBQ04sQ0FBQyxHQUFJLFNBQ04sQ0FBQyxHQUFJLFVBQ0osQ0FBQyxHQUFJLFNBQ04sQ0FBQyxHQUFJLFNBQ0wsQ0FBQyxHQUFJLFVBQ0osQ0FBQyxHQUFJLFlBQ0gsQ0FBQyxHQUFJLFFBQ1QsQ0FBQyxHQUFJLFdBQ0YsQ0FBQyxHQUFJLEtBR2pCN04sUUFBUXNPLE9BQVMsU0FDSixjQUNELGlCQUNDLG1CQUNFLFlBQ0wsY0FDRSxhQUNGLGlCQUVFLFdBc1RSd0MsT0FBUyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxnQkFFbEZDLGtCQUNITCxFQUFJLElBQUlwRixLQUNSMEYsRUFBTyxDQUFDSCxJQUFJSCxFQUFFTyxZQUFhSixJQUFJSCxFQUFFUSxjQUFlTCxJQUFJSCxFQUFFUyxlQUFlaFIsS0FBSyxXQUN2RSxDQUFDdVEsRUFBRVUsVUFBV04sT0FBT0osRUFBRVcsWUFBYUwsR0FBTTdRLEtBQUssY0FJL0NtUixNQUNQdkUsUUFBUXVFLElBQUksVUFBV1AsY0FBZS9FLE9BQU9qTyxNQUFNLEtBQU0yQixxQkFFbERzTyxRQUFRdUQsRUFBUUMsT0FFbEJBLElBQVEvRSxTQUFTK0UsR0FBTSxPQUFPRCxVQUMvQi9LLEVBQU92a0IsT0FBT3VrQixLQUFLZ0wsR0FDbkJ2YSxFQUFJdVAsRUFBS3BrQixPQUVONlUsS0FDTHNhLEVBQU8vSyxFQUFLdlAsSUFBTXVhLEVBQUloTCxFQUFLdlAsV0FHdEJzYSxXQUdBcE0sZUFBZXJqQixFQUFLMnZCLFVBQ3BCeHZCLE9BQU9DLFVBQVVpakIsZUFBZS9OLEtBQUt0VixFQUFLMnZCLE9BRy9DQyxLQUFPLENBQ1RsRyxTQUFVSyxXQUNWbUMsUUFBU0EsUUFDVHNELElBQUtBLElBQ0wvWCxTQUFVQSxTQUNWb1gsWUFBYUEsWUFDYmhDLFdBQVlBLFdBQ1pLLFFBQVNBLFFBQ1RHLE9BQVFBLE9BQ1IxQyxTQUFVQSxTQUNWeUMsU0FBVUEsU0FDVnRDLFlBQWFBLFlBQ2IyRCxTQUFVQSxTQUNWckUsU0FBVUEsU0FDVjJELFNBQVVBLFNBQ1ZTLGtCQUFtQkEsa0JBQ25COUQsT0FBUUEsT0FDUnNCLFVBQVdBLFVBQ1h0ckIsUUFBU0EsUUFDVHdkLFFBQVNBLFFBQ1QwTSxVQUFXQSxVQUNYVixPQUFRQSxPQUNSbUIsU0FBVUEsVUFHUndFLE9BQXNCMXZCLE9BQU9pRyxPQUFPLENBQ3ZDOGpCLE9BQVFBLE9BQ1JVLFVBQVdBLFVBQ1hTLFNBQVVBLFNBQ1ZuTixRQUFTQSxRQUNUeGQsUUFBU0EsUUFDVHNyQixVQUFXQSxVQUNYdEIsT0FBUUEsT0FDUjhELGtCQUFtQkEsa0JBQ25CVCxTQUFVQSxTQUNWM0QsU0FBVUEsU0FDVnFFLFNBQVVBLFNBQ1YzRCxZQUFhQSxZQUNic0MsU0FBVUEsU0FDVnpDLFNBQVVBLFNBQ1YwQyxPQUFRQSxPQUNSSCxRQUFTQSxRQUNUTCxXQUFZQSxXQUNaZ0MsWUFBYUEsWUFDYnBYLFNBQVVBLFNBQ1YrWCxJQUFLQSxJQUNMOUYsU0FBVUssV0FDVm1DLFFBQVNBLGdCQUNBMEQsT0FHTkUsT0FBU3BNLDBCQUEwQm1NLGlCQUU5QkUsa0JBQWtCdkssRUFBVUMsUUFBcUJELGFBQW9CQyxTQUFzQixJQUFJOU8sVUFBVSw4Q0FFekdxWixvQkFBb0IxUixFQUFRcUgsT0FBYyxJQUFJeFEsRUFBSSxFQUFHQSxFQUFJd1EsRUFBTXJsQixPQUFRNlUsSUFBSyxLQUFNeVEsRUFBYUQsRUFBTXhRLEdBQUl5USxFQUFXaEIsV0FBYWdCLEVBQVdoQixhQUFjLEVBQU9nQixFQUFXOUksY0FBZSxFQUFVLFVBQVc4SSxJQUFZQSxFQUFXQyxVQUFXLEdBQU0xbEIsT0FBTzBjLGVBQWV5QixFQUFRc0gsRUFBV3JtQixJQUFLcW1CLGFBRXRTcUssZUFBZXhLLEVBQWFNLEVBQVlDLFVBQW1CRCxHQUFZaUssb0JBQW9CdkssRUFBWXJsQixVQUFXMmxCLEdBQWlCQyxHQUFhZ0ssb0JBQW9CdkssRUFBYU8sR0FBcUJQLE1BRTNNeUssU0FBV3JZLE9BQU83QixPQUNsQm1hLGNBQWdCckgsTUFBTUgsWUFDdEJ5SCxZQUFjTixPQUFPbEYsVUFFckJ5RixlQUFpQkYsY0FBYyxHQUUvQkcsa0JBQW9CLElBQUkvRSxPQUFPLHFCQUMvQmdGLGVBQWdCLE1BR2RMLFVBQVlBLFNBQVN6WixPQUFNOFosZUFBZ0IsR0FDL0MsTUFBT0MsR0FDUEQsZUFBZ0IsVUFJZEUsU0FBVyxHQUVOQyxHQUFLLEVBQUdBLEdBQUssSUFBS0EsS0FDekJELFNBQVNDLEtBQU9BLElBQU0sR0FBSyxJQUFNLElBQU1BLEdBQUd2WSxTQUFTLFlBSWpEd1ksYUFBZSxHQUNmeGIsRUFBSSxFQUVEQSxFQUFJLElBQ1R3YixhQUFhLEdBQU94YixHQUFLQSxTQUdwQkEsRUFBSSxJQUNUd2IsYUFBYSxHQUFZeGIsR0FBS3diLGFBQWEsR0FBWXhiLEdBQUtBLFFBRzFEeWIsUUFBVVYsa0JBRUxXLGFBQWEzUixVQUNiQSxFQUFNL0csU0FBUyxnQkFHZjJZLGtCQUFrQkMsRUFBZTVNLE9BQ3BDNk0sRUFBbUJELEVBQWM1TSxVQUM5QixJQUFJeE4sVUFBVSxvQkFBcUIyRyxPQUFPeVQsRUFBZSxrQ0FBb0N6VCxPQUFPMFQsRUFBa0IsMkJBQTRCMVQsT0FBT3lULEVBQWN4VyxXQUFXNEosR0FBUSwyRUFPL0w4TSw2QkFVT0EsRUFBU2pxQixNQUNoQitvQixrQkFBa0IxeUIsS0FBTTR6QixHQUdwQmpxQixhQUFjaXFCLEVBQVUsT0FBT2pxQixLQUV6QixNQUFOQSxHQUE0QixpQkFBUEEsY0FFbEJBLEdBQUtpcUIsRUFBU0MsU0FBU2xxQixRQUV4QmlxQixFQUFTRSxpQkFBZ0I5ekIsS0FBSyt6QixLQUFPL3pCLEtBQUs4YSxTQUFTLGFBTXJEa1osRUFBUUosRUFBU0ssUUFBUXRxQixPQUV4QnFxQixHQUFlLE1BQU5ycUIsUUFDTixJQUFJMlAsVUFBVSwyRkFDZixHQUFJMGEsR0FBdUIsaUJBQVBycUIsR0FBaUMsS0FBZEEsRUFBRzFHLFFBQWlCaXdCLHFCQUN6RCxJQUFJVSxFQUFTZixTQUFTelosS0FBS3pQLEVBQUksUUFDakMsR0FBSXFxQixHQUF1QixpQkFBUHJxQixHQUFpQyxLQUFkQSxFQUFHMUcsY0FDeEMyd0IsRUFBU00sb0JBQW9CdnFCLEdBQy9CLEdBQVUsTUFBTkEsR0FBNEIsS0FBZEEsRUFBRzFHLE9BR3JCLENBQUEsR0FBVSxNQUFOMEcsR0FBY0EsRUFBR3dxQixtQkFFbkJQLEVBQVNNLG9CQUFvQnZxQixFQUFHd3FCLHFCQUVqQyxJQUFJN2EsVUFBVSxnR0FMZjNQLEdBQUtBLEVBUVJpcUIsRUFBU0UsaUJBQWdCOXpCLEtBQUsrekIsS0FBTy96QixLQUFLOGEsU0FBUyxlQVV6RDhYLGVBQWVnQixFQUFVLENBQUMsQ0FDeEIxeEIsSUFBSyxjQUNMRixNQUFPLGNBQ0Q0eEIsRUFBU0UsZ0JBQWtCOXpCLEtBQUsrekIsS0FBTSxPQUFPL3pCLEtBQUsrekIsU0FDbERLLEVBQVksT0FFWHAwQixLQUFLMkosS0FBTzNKLEtBQUsySixHQUFHMUcsYUFDakIsSUFBSXFXLFVBQVUsOEVBQWdGNFQsS0FBS0MsVUFBVW50QixLQUFLMkosSUFBTSxRQUc1SDNKLEtBQUsySixjQUFjNHBCLGVBQ3JCYSxFQUFZWixhQUFheHpCLEtBQUsySixJQUMxQmlxQixFQUFTRSxpQkFBZ0I5ekIsS0FBSyt6QixLQUFPSyxHQUNsQ0EsTUFHSixJQUFJQyxFQUFNLEVBQUdBLEVBQU1yMEIsS0FBSzJKLEdBQUcxRyxPQUFRb3hCLElBQU8sS0FDekNDLEVBQVVsQixTQUFTcHpCLEtBQUsySixHQUFHdVQsV0FBV21YLE9BRW5CLGlCQUFaQyxRQUNIYixrQkFBa0J6ekIsS0FBSzJKLEdBQUkwcUIsR0FHbkNELEdBQWFFLFNBR1hWLEVBQVNFLGlCQUFnQjl6QixLQUFLK3pCLEtBQU9LLEdBQ2xDQSxJQVVSLENBQ0RseUIsSUFBSyxXQVNMRixNQUFPLFNBQWtCNnFCLFVBRW5CN3NCLEtBQUsySixJQUFNM0osS0FBSzJKLEdBQUc0USxLQUNkdmEsS0FBSzJKLEdBQUdtUixTQUEyQixpQkFBWCtSLEVBQXNCQSxFQUFTLE9BR3pEN3NCLEtBQUttMEIsZ0JBU2IsQ0FDRGp5QixJQUFLLFNBQ0xGLE1BQU8sa0JBQ0VoQyxLQUFLbTBCLGdCQVViLENBQ0RqeUIsSUFBSyxTQUNMRixNQUFPLFNBQWdCdXlCLFVBQ2pCQSxhQUFtQlgsRUFDZDV6QixLQUFLOGEsYUFBZXlaLEVBQVF6WixXQUdkLGlCQUFaeVosR0FBd0JYLEVBQVNLLFFBQVFNLElBQStCLEtBQW5CQSxFQUFRdHhCLFFBQWlCakQsS0FBSzJKLGNBQWM0cEIsUUFDbkdnQixJQUFZdjBCLEtBQUsySixHQUFHbVIsU0FBUyxVQUdmLGlCQUFaeVosR0FBd0JYLEVBQVNLLFFBQVFNLElBQStCLEtBQW5CQSxFQUFRdHhCLE9BQy9Ec3hCLEVBQVE5aEIsZ0JBQWtCelMsS0FBS20wQixjQUdqQixpQkFBWkksR0FBd0JYLEVBQVNLLFFBQVFNLElBQStCLEtBQW5CQSxFQUFRdHhCLE9BQy9Ec3hCLElBQVl2MEIsS0FBSzJKLEtBR1gsTUFBWDRxQixLQUFvQkEsYUFBbUJYLEdBQVlXLEVBQVFKLGVBQ3RESSxFQUFRSixnQkFBa0JuMEIsS0FBS20wQixnQkFZekMsQ0FDRGp5QixJQUFLLGVBQ0xGLE1BQU8sZUFDRCtvQixFQUFZLElBQUlvQixLQUNoQjBGLEVBQU83eEIsS0FBSzJKLEdBQUdxWixhQUFhLFVBQ2hDK0gsRUFBVXlKLFFBQTJCLElBQW5CelcsS0FBS2lHLE1BQU02TixJQUN0QjlHLElBTVIsQ0FDRDdvQixJQUFLLGlCQUtMRixNQUFPLGtCQUNEaEMsS0FBS20wQixZQUFvQixDQUMzQk0sS0FBTXowQixLQUFLbTBCLGVBRU4sQ0FDTE0sS0FBTXowQixLQUFLOGEsU0FBUyxXQU90QixDQUFDLENBQ0g1WSxJQUFLLFNBQ0xGLE1BQU8sa0JBQ0U0eEIsRUFBUzlNLE9BQVM4TSxFQUFTOU0sTUFBUSxHQUFLLFdBVWhELENBQ0Q1a0IsSUFBSyxXQUNMRixNQUFPLFNBQWtCNnZCLEdBQ25CLGlCQUFvQkEsSUFDdEJBLEtBQVUxRixLQUFLTCxNQUFRLFVBR3JCNEksRUFBTWQsRUFBU2UsU0FDZkMsRUFBWS9CLFNBQVM5VCxNQUFNLFdBRS9CNlYsRUFBVSxHQUFZLElBQVAvQyxFQUNmK0MsRUFBVSxHQUFLL0MsR0FBUSxFQUFJLElBQzNCK0MsRUFBVSxHQUFLL0MsR0FBUSxHQUFLLElBQzVCK0MsRUFBVSxHQUFLL0MsR0FBUSxHQUFLLElBRTVCK0MsRUFBVSxHQUFLNUIsZUFBZSxHQUM5QjRCLEVBQVUsR0FBSzVCLGVBQWUsR0FDOUI0QixFQUFVLEdBQUs1QixlQUFlLEdBQzlCNEIsRUFBVSxHQUFLNUIsZUFBZSxHQUM5QjRCLEVBQVUsR0FBSzVCLGVBQWUsR0FFOUI0QixFQUFVLElBQVksSUFBTkYsRUFDaEJFLEVBQVUsSUFBTUYsR0FBTyxFQUFJLElBQzNCRSxFQUFVLEdBQUtGLEdBQU8sR0FBSyxJQUNwQkUsSUFFUixDQUNEMXlCLElBQUssV0FDTEYsTUFBTyxrQkFDRSxJQUFJNHhCLElBVVosQ0FDRDF4QixJQUFLLGlCQUNMRixNQUFPLFNBQXdCNnZCLE9BQ3pCK0MsRUFBWS9CLFNBQVN6WixLQUFLLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLFdBRWhFd2IsRUFBVSxHQUFZLElBQVAvQyxFQUNmK0MsRUFBVSxHQUFLL0MsR0FBUSxFQUFJLElBQzNCK0MsRUFBVSxHQUFLL0MsR0FBUSxHQUFLLElBQzVCK0MsRUFBVSxHQUFLL0MsR0FBUSxHQUFLLElBRXJCLElBQUkrQixFQUFTZ0IsS0FVckIsQ0FDRDF5QixJQUFLLHNCQUNMRixNQUFPLFNBQTZCOFgsV0FFWixJQUFYQSxHQUFvQyxNQUFWQSxHQUFvQyxLQUFsQkEsRUFBTzdXLGFBQ3RELElBQUlxVyxVQUFVLDhGQUlsQjRaLGNBQWUsT0FBTyxJQUFJVSxFQUFTZixTQUFTelosS0FBS1UsRUFBUSxnQkFFekROLEVBQVEsSUFBSStaLFFBQVEsSUFDcEJsWSxFQUFJLEVBQ0p2RCxFQUFJLEVBRURBLEVBQUksSUFDVDBCLEVBQU02QixLQUFPaVksYUFBYXhaLEVBQU9vRCxXQUFXcEYsT0FBUyxFQUFJd2IsYUFBYXhaLEVBQU9vRCxXQUFXcEYsYUFHbkYsSUFBSThiLEVBQVNwYSxLQVNyQixDQUNEdFgsSUFBSyxVQUNMRixNQUFPLFNBQWlCMkgsVUFDWixNQUFOQSxJQUVjLGlCQUFQQSxJQUlPLGlCQUFQQSxFQUNZLEtBQWRBLEVBQUcxRyxRQUErQixLQUFkMEcsRUFBRzFHLFFBQWlCZ3dCLGtCQUFrQjlFLEtBQUt4a0IsR0FHcEVBLGFBQWNpcUIsSUFJZGpxQixhQUFjNHBCLFNBQXlCLEtBQWQ1cEIsRUFBRzFHLFVBSzVCMEcsRUFBR3dxQixjQUNtQixLQUFqQnhxQixFQUFHQSxHQUFHMUcsUUFBa0MsS0FBakIwRyxFQUFHQSxHQUFHMUcsUUFBaUJnd0Isa0JBQWtCOUUsS0FBS3hrQixFQUFHQSxVQUtsRixDQUNEekgsSUFBSyxtQkFDTEYsTUFBTyxTQUEwQitsQixVQUN4QixJQUFJNkwsRUFBUzdMLEVBQUkwTSxVQUlyQmIsS0FJVEEsU0FBU2lCLFFBQVU5QixZQUFZLGtCQUN0QmEsU0FBU2UsVUFDZixxREFDSGYsU0FBUzd3QixVQUFVOHhCLFFBQVU5QixZQUFZLGtCQUNoQ2EsU0FBU2UsVUFDZixxREFDSGYsU0FBUzd3QixVQUFVNHhCLE9BQVM1QixZQUFZLGtCQUMvQmEsU0FBU2UsVUFDZixxREFDSGYsU0FBUzd3QixVQUFVOHdCLFNBQVdkLFlBQVksU0FBVWxCLFVBQzNDK0IsU0FBU0MsU0FBU2hDLElBQ3hCLDJEQUtIL3VCLE9BQU8wYyxlQUFlb1UsU0FBUzd3QixVQUFXLGlCQUFrQixDQUMxRHdrQixZQUFZLEVBQ1pKLElBQUssa0JBQ0lubkIsS0FBSzJKLEdBQUcsR0FBSzNKLEtBQUsySixHQUFHLElBQU0sRUFBSTNKLEtBQUsySixHQUFHLElBQU0sR0FBSzNKLEtBQUsySixHQUFHLElBQU0sSUFFekV3YixJQUFLLFNBQWFuakIsUUFFWDJILEdBQUcsR0FBYSxJQUFSM0gsT0FDUjJILEdBQUcsR0FBSzNILEdBQVMsRUFBSSxTQUNyQjJILEdBQUcsR0FBSzNILEdBQVMsR0FBSyxTQUN0QjJILEdBQUcsR0FBSzNILEdBQVMsR0FBSyxPQVUvQjR4QixTQUFTN3dCLFVBQVUwdkIsT0FBTzVSLFFBQVFpVSxRQUFVLFdBQWFsQixTQUFTN3dCLFVBQVUrWCxTQUs1RThZLFNBQVM5TSxTQUEyQixTQUFoQi9JLEtBQUtzTixVQUl6QnZvQixPQUFPMGMsZUFBZW9VLFNBQVM3d0IsVUFBVyxZQUFhLENBQ3JEZixNQUFPLGlCQUVMK3lCLFNBQVduQixrQkFFTm9CLGtCQUFrQjdNLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHMmIsb0JBQW9CaFUsRUFBUXFILE9BQWMsSUFBSXhRLEVBQUksRUFBR0EsRUFBSXdRLEVBQU1ybEIsT0FBUTZVLElBQUssS0FBTXlRLEVBQWFELEVBQU14USxHQUFJeVEsRUFBV2hCLFdBQWFnQixFQUFXaEIsYUFBYyxFQUFPZ0IsRUFBVzlJLGNBQWUsRUFBVSxVQUFXOEksSUFBWUEsRUFBV0MsVUFBVyxHQUFNMWxCLE9BQU8wYyxlQUFleUIsRUFBUXNILEVBQVdybUIsSUFBS3FtQixhQUV0UzJNLGVBQWU5TSxFQUFhTSxFQUFZQyxVQUFtQkQsR0FBWXVNLG9CQUFvQjdNLEVBQVlybEIsVUFBVzJsQixHQUFpQkMsR0FBYXNNLG9CQUFvQjdNLEVBQWFPLEdBQXFCUCxXQUV0TStNLFlBQVluWSxVQUNaQSxFQUFJNlQsTUFBTSxJQUFJdUUsT0FBT3BVLEtBQUssUUFPL0JxVSwrQkFTT0EsRUFBV0MsRUFBUzVOLEdBQzNCc04sa0JBQWtCaDFCLEtBQU1xMUIsUUFHbkJDLFFBQVVBLEdBQVcsUUFDckI1TixRQUFVQSxFQUFVeU4sWUFBWXpOLEdBQVcsT0FFM0MsSUFBSTVQLEVBQUksRUFBR0EsRUFBSTlYLEtBQUswbkIsUUFBUXprQixPQUFRNlUsT0FDYixNQUFwQjlYLEtBQUswbkIsUUFBUTVQLElBQWtDLE1BQXBCOVgsS0FBSzBuQixRQUFRNVAsSUFBa0MsTUFBcEI5WCxLQUFLMG5CLFFBQVE1UCxJQUFrQyxNQUFwQjlYLEtBQUswbkIsUUFBUTVQLElBQWtDLE1BQXBCOVgsS0FBSzBuQixRQUFRNVAsSUFBa0MsTUFBcEI5WCxLQUFLMG5CLFFBQVE1UCxTQUNsSixJQUFJL1YsTUFBTSxrQ0FBa0NrZSxPQUFPamdCLEtBQUswbkIsUUFBUTVQLEdBQUksOEJBU2hGb2QsZUFBZUcsRUFBWSxDQUFDLENBQzFCbnpCLElBQUssaUJBQ0xGLE1BQU8saUJBQ0UsQ0FDTHV6QixtQkFBb0IsQ0FDbEJELFFBQVN0MUIsS0FBS3MxQixRQUNkNU4sUUFBUzFuQixLQUFLMG5CLGFBUWxCLENBQUMsQ0FDSHhsQixJQUFLLG1CQUNMRixNQUFPLFNBQTBCK2xCLFVBQ3hCLElBQUlzTixFQUFXdE4sRUFBSXdOLG1CQUFtQkQsUUFBU3ZOLEVBQUl3TixtQkFBbUI3TixRQUFRbUosTUFBTSxJQUFJdUUsT0FBT3BVLEtBQUssU0FJeEdxVSxLQUdUdnlCLE9BQU8wYyxlQUFlNlYsV0FBV3R5QixVQUFXLFlBQWEsQ0FDdkRmLE1BQU8sbUJBRUx3ekIsT0FBU0gsb0JBTUpJLGtCQUFrQnROLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHb2Msb0JBQW9CelUsRUFBUXFILE9BQWMsSUFBSXhRLEVBQUksRUFBR0EsRUFBSXdRLEVBQU1ybEIsT0FBUTZVLElBQUssS0FBTXlRLEVBQWFELEVBQU14USxHQUFJeVEsRUFBV2hCLFdBQWFnQixFQUFXaEIsYUFBYyxFQUFPZ0IsRUFBVzlJLGNBQWUsRUFBVSxVQUFXOEksSUFBWUEsRUFBV0MsVUFBVyxHQUFNMWxCLE9BQU8wYyxlQUFleUIsRUFBUXNILEVBQVdybUIsSUFBS3FtQixhQUV0U29OLGVBQWV2TixFQUFhTSxFQUFZQyxVQUFtQkQsR0FBWWdOLG9CQUFvQnROLEVBQVlybEIsVUFBVzJsQixHQUFpQkMsR0FBYStNLG9CQUFvQnROLEVBQWFPLEdBQXFCUCxNQUUzTXdOLCtCQVFPQSxFQUFXNXpCLEdBQ2xCeXpCLGtCQUFrQnoxQixLQUFNNDFCLFFBRW5CNXpCLE1BQVFBLFNBVWYyekIsZUFBZUMsRUFBWSxDQUFDLENBQzFCMXpCLElBQUssVUFDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssV0FDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssVUFDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssU0FDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssaUJBQ0xGLE1BQU8saUJBQ0UsQ0FDTDZ6QixRQUFTNzFCLEtBQUtnQyxVQU9oQixDQUFDLENBQ0hFLElBQUssbUJBQ0xGLE1BQU8sU0FBMEIrbEIsVUFDeEIsSUFBSTZOLEVBQVc3TixFQUFJOE4sYUFJdkJELEtBR1Q5eUIsT0FBTzBjLGVBQWVvVyxXQUFXN3lCLFVBQVcsWUFBYSxDQUN2RGYsTUFBTyxlQUVMOHpCLE9BQVNGLG9CQU1KRyxrQkFBa0I1TixFQUFVQyxRQUFxQkQsYUFBb0JDLFNBQXNCLElBQUk5TyxVQUFVLDhDQUV6RzBjLG9CQUFvQi9VLEVBQVFxSCxPQUFjLElBQUl4USxFQUFJLEVBQUdBLEVBQUl3USxFQUFNcmxCLE9BQVE2VSxJQUFLLEtBQU15USxFQUFhRCxFQUFNeFEsR0FBSXlRLEVBQVdoQixXQUFhZ0IsRUFBV2hCLGFBQWMsRUFBT2dCLEVBQVc5SSxjQUFlLEVBQVUsVUFBVzhJLElBQVlBLEVBQVdDLFVBQVcsR0FBTTFsQixPQUFPMGMsZUFBZXlCLEVBQVFzSCxFQUFXcm1CLElBQUtxbUIsYUFFdFMwTixlQUFlN04sRUFBYU0sRUFBWUMsVUFBbUJELEdBQVlzTixvQkFBb0I1TixFQUFZcmxCLFVBQVcybEIsR0FBaUJDLEdBQWFxTixvQkFBb0I1TixFQUFhTyxHQUFxQlAsTUFFM004TiwwQkFTT0EsRUFBTWwwQixHQUNiK3pCLGtCQUFrQi8xQixLQUFNazJCLFFBRW5CbDBCLE1BQVFBLFNBVWZpMEIsZUFBZUMsRUFBTyxDQUFDLENBQ3JCaDBCLElBQUssVUFDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssU0FDTEYsTUFBTyxrQkFDRWhDLEtBQUtnQyxRQU1iLENBQ0RFLElBQUssaUJBQ0xGLE1BQU8sU0FBd0IwbEIsVUFDekJBLEdBQVdBLEVBQVFDLFFBQWdCM25CLEtBQUtnQyxNQUNyQyxDQUNMbTBCLFdBQVluMkIsS0FBS2dDLE1BQU04WSxlQU96QixDQUFDLENBQ0g1WSxJQUFLLG1CQUNMRixNQUFPLFNBQTBCK2xCLEVBQUtMLFVBQzdCQSxHQUFXQSxFQUFRQyxRQUFVL0ssU0FBU21MLEVBQUlvTyxXQUFZLElBQU0sSUFBSUQsRUFBTW5PLEVBQUlvTyxnQkFJOUVELEtBR1RwekIsT0FBTzBjLGVBQWUwVyxNQUFNbnpCLFVBQVcsWUFBYSxDQUNsRGYsTUFBTyxjQUVMbzBCLE9BQVNGLGVBTUpHLGtCQUFrQmxPLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHZ2Qsb0JBQW9CclYsRUFBUXFILE9BQWMsSUFBSXhRLEVBQUksRUFBR0EsRUFBSXdRLEVBQU1ybEIsT0FBUTZVLElBQUssS0FBTXlRLEVBQWFELEVBQU14USxHQUFJeVEsRUFBV2hCLFdBQWFnQixFQUFXaEIsYUFBYyxFQUFPZ0IsRUFBVzlJLGNBQWUsRUFBVSxVQUFXOEksSUFBWUEsRUFBV0MsVUFBVyxHQUFNMWxCLE9BQU8wYyxlQUFleUIsRUFBUXNILEVBQVdybUIsSUFBS3FtQixhQUV0U2dPLGVBQWVuTyxFQUFhTSxFQUFZQyxVQUFtQkQsR0FBWTROLG9CQUFvQmxPLEVBQVlybEIsVUFBVzJsQixHQUFpQkMsR0FBYTJOLG9CQUFvQmxPLEVBQWFPLEdBQXFCUCxNQUUzTW9PLHlCQVVPQSxFQUFLcFIsRUFBTXFSLEdBQ2xCSixrQkFBa0JyMkIsS0FBTXcyQixRQUVuQnBSLEtBQU9BLE9BQ1BxUixNQUFRQSxTQU9mRixlQUFlQyxFQUFNLENBQUMsQ0FDcEJ0MEIsSUFBSyxTQUNMRixNQUFPLGlCQUNFLENBQ0x5MEIsTUFBT3oyQixLQUFLeTJCLE1BQ1pyUixLQUFNcGxCLEtBQUtvbEIsUUFPZCxDQUNEbGpCLElBQUssaUJBQ0xGLE1BQU8sa0JBQ0RoQyxLQUFLeTJCLE1BQ0EsQ0FDTEMsTUFBTzEyQixLQUFLb2xCLEtBQ1p1UixPQUFRMzJCLEtBQUt5MkIsT0FJVixDQUNMQyxNQUFPMTJCLEtBQUtvbEIsU0FPZCxDQUFDLENBQ0hsakIsSUFBSyxtQkFDTEYsTUFBTyxTQUEwQitsQixVQUN4QixJQUFJeU8sRUFBS3pPLEVBQUkyTyxNQUFPM08sRUFBSTRPLFlBSTVCSCxLQUdUMXpCLE9BQU8wYyxlQUFlZ1gsS0FBS3p6QixVQUFXLFlBQWEsQ0FDakRmLE1BQU8sYUFFTG9qQixLQUFPb1IsS0FFUEksU0FBV3BjLE9BQU83QixPQUNsQmtlLG9CQUFzQixnREFDdEJDLGlCQUFtQiwyQkFDbkJDLGlCQUFtQixnQkFDbkJDLGFBQWUsS0FDZkMsY0FBZ0IsS0FDaEJDLGNBQWdCLEtBQ2hCQyxXQUFhLEdBRWJDLFdBQWEsQ0FBQyxJQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxHQUFNQyxVQUU5R0Msb0JBQXNCLENBQUMsSUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sR0FBTUQsVUFDdkhFLG9CQUFzQixDQUFDLElBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEVBQU0sRUFBTSxFQUFNLEdBQU1GLFVBQ3ZIRyxlQUFpQiwyQkFFWkMsUUFBUXoxQixVQUNQeVosTUFBTW1CLFNBQVM1YSxFQUFPLGNBSXZCMDFCLFdBQVcxMUIsT0FDZDIxQixFQUFVMVAsT0FBTzBDLFdBQVcsS0FFNUJpTixFQUFPM1AsT0FBTzBDLFdBQVcsUUFFeEIzb0IsRUFBTTYxQixNQUFNLElBQU83MUIsRUFBTTYxQixNQUFNLElBQU83MUIsRUFBTTYxQixNQUFNLElBQU83MUIsRUFBTTYxQixNQUFNLFVBQ2pFLENBQ0xDLFNBQVU5MUIsRUFDVisxQixJQUFLSCxPQUlKLElBQUk5ZixFQUFJLEVBQUdBLEdBQUssRUFBR0EsSUFJdEI4ZixHQUZBQSxFQUFPQSxFQUFLSSxVQUFVLEtBRVYzRixJQUFJLElBQUlwSyxPQUFPam1CLEVBQU02MUIsTUFBTS9mLEdBQUksSUFDM0M5VixFQUFNNjFCLE1BQU0vZixHQUFLOGYsRUFBS0ssSUFBSU4sR0FBU3ZOLElBQ25Dd04sRUFBT0EsRUFBS00sT0FBT1AsU0FHZCxDQUNMRyxTQUFVOTFCLEVBQ1YrMUIsSUFBS0gsWUFLQU8sYUFBYUMsRUFBTUMsT0FDckJELElBQVNDLFFBQ0wsQ0FDTGhPLEtBQU1wQyxPQUFPMEMsV0FBVyxHQUN4QlAsSUFBS25DLE9BQU8wQyxXQUFXLFFBSXZCMk4sRUFBV0YsRUFBS0csbUJBQW1CLElBQ25DQyxFQUFVLElBQUl2USxPQUFPbVEsRUFBS0ssYUFBYyxHQUN4Q0MsRUFBWUwsRUFBTUUsbUJBQW1CLElBQ3JDSSxFQUFXLElBQUkxUSxPQUFPb1EsRUFBTUksYUFBYyxHQUMxQ0csRUFBY04sRUFBU08sU0FBU0gsR0FDaENJLEVBQWFSLEVBQVNPLFNBQVNGLEdBQy9CSSxFQUFjUCxFQUFRSyxTQUFTSCxHQUMvQk0sRUFBYVIsRUFBUUssU0FBU0YsVUFDbENDLEVBQWNBLEVBQVl2RyxJQUFJeUcsRUFBV1AsbUJBQW1CLEtBQzVETyxFQUFhLElBQUk3USxPQUFPNlEsRUFBV0wsYUFBYyxHQUFHcEcsSUFBSTBHLEdBQWExRyxJQUFJMkcsRUFBV1QsbUJBQW1CLEtBSWhHLENBQ0xsTyxLQUpGdU8sRUFBY0EsRUFBWXZHLElBQUl5RyxFQUFXUCxtQkFBbUIsS0FLMURuTyxJQUpGNE8sRUFBYUYsRUFBV2QsVUFBVSxJQUFJM0YsSUFBSSxJQUFJcEssT0FBTytRLEVBQVdQLGFBQWMsY0FRdkVRLFNBQVNiLEVBQU1DLE9BRWxCYSxFQUFTZCxFQUFLL04sT0FBUyxFQUN2QjhPLEVBQVVkLEVBQU1oTyxPQUFTLFNBRXpCNk8sRUFBU0MsR0FFRkQsR0FBV0MsR0FDUGYsRUFBS2hPLE1BQVEsRUFDWmlPLEVBQU1qTyxNQUFRLFdBT3ZCZ1AsV0FBV3RmLEVBQVF1ZixTQUNwQixJQUFJL2YsVUFBVSxJQUFLMkcsT0FBT25HLEVBQVEseUNBQTBDbUcsT0FBT29aLGFBV2xGQyxXQUFXelgsUUFDYkEsTUFBUUEsRUFXZnlYLFdBQVduZixXQUFhLFNBQVVMLE9Ba0M1QnlmLEVBaENBQyxHQUFhLEVBQ2JDLEdBQVcsRUFDWEMsR0FBZSxFQUVmQyxFQUFvQixFQUVwQkMsRUFBYyxFQUVkQyxFQUFVLEVBRVZDLEVBQWdCLEVBRWhCQyxFQUFlLEVBRWZDLEVBQVMsQ0FBQyxHQUVWQyxFQUFnQixFQUVoQkMsRUFBZSxFQUVmQyxFQUFhLEVBRWJDLEVBQVksRUFFWkMsRUFBVyxFQUVYdmlCLEVBQUksRUFFSndpQixFQUFrQixDQUFDLEVBQUcsR0FFdEJDLEVBQWlCLENBQUMsRUFBRyxHQUlyQnpULEVBQVEsS0FJUyxLQUFqQmhOLEVBQU83VyxhQUNILElBQUlxVyxVQUFlUSxFQUFTLHNDQUloQzBnQixFQUFjMWdCLEVBQU9pSCxNQUFNOFYscUJBQzNCNEQsRUFBVzNnQixFQUFPaUgsTUFBTStWLGtCQUN4QjRELEVBQVc1Z0IsRUFBT2lILE1BQU1nVyxzQkFFdkJ5RCxJQUFnQkMsSUFBYUMsR0FBOEIsSUFBbEI1Z0IsRUFBTzdXLGFBQzdDLElBQUlxVyxVQUFlUSxFQUFTLHFDQUdoQzBnQixFQUFhLEtBR1hHLEVBQWlCSCxFQUFZLEdBRzdCbmlCLEVBQUltaUIsRUFBWSxHQUNoQkksRUFBVUosRUFBWSxHQUN0QkssRUFBWUwsRUFBWSxHQUV4Qm5pQixRQUFtQnNCLElBQWRraEIsR0FBeUJ6QixXQUFXdGYsRUFBUSwwQkFFakR6QixRQUF3QnNCLElBQW5CZ2hCLEdBQThCdkIsV0FBV3RmLEVBQVEsOEJBRWhESCxJQUFOdEIsSUFBb0J1aUIsR0FBV0MsSUFDakN6QixXQUFXdGYsRUFBUSxnQ0FLRCxNQUFsQkEsRUFBT2dOLElBQW9DLE1BQWxCaE4sRUFBT2dOLEtBQ2xDMFMsRUFBaUMsTUFBcEIxZixFQUFPZ04sT0FJakIyUSxRQUFRM2QsRUFBT2dOLEtBQTZCLE1BQWxCaE4sRUFBT2dOLEdBQWdCLElBQzlCLE1BQWxCaE4sRUFBT2dOLElBQW9DLE1BQWxCaE4sRUFBT2dOLFVBQzNCLElBQUl3UyxXQUFXMUMsU0FBU3hkLEtBQUtvZ0IsRUFBYWxDLG9CQUFzQkMsc0JBQ2xFLEdBQXNCLE1BQWxCemQsRUFBT2dOLFVBQ1QsSUFBSXdTLFdBQVcxQyxTQUFTeGQsS0FBS2dlLGtCQUtqQ0ssUUFBUTNkLEVBQU9nTixLQUE2QixNQUFsQmhOLEVBQU9nTixJQUNoQixNQUFsQmhOLEVBQU9nTixJQU9QbVQsRUFBZ0IsS0FDSSxNQUFsQm5nQixFQUFPZ04sS0FBa0I0UyxJQUN0QkEsSUFDSEssRUFBZUgsR0FHakJGLEdBQWUsRUFFZk0sRUFBT0UsS0FBa0J0ZCxTQUFTOUMsRUFBT2dOLEdBQVEsSUFDakRtVCxHQUFnQyxJQUloQ1AsSUFBY0csR0FBb0IsR0FDbENKLElBQVVLLEdBQWdDLEdBQzlDRixHQUE0QixJQXJCdEJILEdBQVVMLFdBQVd0ZixFQUFRLDZCQUNqQzJmLEdBQVcsR0FxQmIzUyxHQUFnQixLQUdkMlMsSUFBYUcsRUFBYSxNQUFNLElBQUl0Z0IsVUFBZVEsRUFBUyxxQ0FFMUMsTUFBbEJBLEVBQU9nTixJQUFvQyxNQUFsQmhOLEVBQU9nTixHQUFnQixLQUU5Qy9GLEVBQVFqSCxFQUFPK0MsU0FBU2lLLEdBQU8vRixNQUFNeVcsb0JBRXBDelcsSUFBVUEsRUFBTSxHQUFJLE9BQU8sSUFBSXVZLFdBQVcxQyxTQUFTeGQsS0FBS2dlLGFBRTdEaUQsRUFBV3pkLFNBQVNtRSxFQUFNLEdBQUksSUFFOUIrRixHQUFnQi9GLEVBQU0sR0FBRzlkLFVBSXZCNlcsRUFBT2dOLEdBQVEsT0FBTyxJQUFJd1MsV0FBVzFDLFNBQVN4ZCxLQUFLZ2UsZ0JBR3ZEK0MsRUFBYSxFQUVSRixNQVFIRyxFQUFZSCxFQUFnQixFQUdGLEtBRjFCTixFQUFvQkUsUUFHc0MsTUFBakQvZixFQUFPaWdCLEVBQWVKLEVBQW9CLElBQy9DQSxHQUF3QyxPQVI1Q00sRUFEQUosRUFBVSxFQUVWRixFQUhBSyxFQURBSSxFQURBRCxFQUFhLEdBRUQsTUFtQlZFLEdBQVlQLEdBQTRDLE1BQTNCQSxFQUFnQk8sRUFDL0NBLEVBQVdwRCxhQUVYb0QsR0FBc0JQLEVBSU45QyxhQUFYcUQsR0FBeUIsSUFJRGxELFlBRjdCaUQsR0FBd0IsR0FFUkQsRUFBeUIsSUFFcEJILEVBQU9oWixLQUFLLElBRWRELE1BQU0sUUFBUyxDQUM5QnNaLEVBQVdyRCxtQkFJYm9DLFdBQVd0ZixFQUFRLFlBR3JCdWdCLEdBQXNCLE9BR2pCQSxFQUFXcEQsY0FBZ0JnRCxFQUFnQkosR0FBUyxJQUV2QyxJQUFkTyxHQUFtQlQsRUFBb0JNLEVBQWUsQ0FDeERJLEVBQVdwRCxhQUNYMEMsRUFBb0IsV0FJbEJNLEVBQWdCSixFQUVsQkEsR0FBb0IsRUFHcEJPLEdBQXdCLEVBR3RCQyxFQUFXckQsYUFDYnFELEdBQXNCLE1BQ2pCLElBRWVMLEVBQU9oWixLQUFLLElBRWRELE1BQU0sUUFBUyxDQUMvQnNaLEVBQVdyRCxtQkFJYm9DLFdBQVd0ZixFQUFRLGdCQU1uQnNnQixFQUFZRCxFQUFhLEVBQUlSLEVBQW1CLEtBQzlDbUIsRUFBY2xCLEVBSWRILElBQ0ZNLEdBQThCLEVBQzlCZSxHQUE0QixHQUkxQnRCLElBQ0ZPLEdBQThCLEVBQzlCZSxHQUE0QixPQUcxQkMsRUFBYW5lLFNBQVM5QyxFQUFPaWdCLEVBQWVLLEVBQVksR0FBSSxJQUM1RFksRUFBVyxLQUVHLEdBQWRELElBQ0ZDLEVBQVcsRUFFUSxJQUFmRCxPQUNGQyxFQUFXaEIsRUFBT0ksR0FBYSxHQUFNLEVBRWhDdGlCLEVBQUlpaUIsRUFBZUssRUFBWSxFQUFHdGlCLEVBQUlnakIsRUFBYWhqQixPQUNsRDhFLFNBQVM5QyxFQUFPaEMsR0FBSSxJQUFLLENBQzNCa2pCLEVBQVcsV0FPZkEsVUFDRUMsRUFBT2IsRUFFSSxHQUFSYSxFQUFXQSxPQUNLLElBQWZqQixFQUFPaUIsS0FDWGpCLEVBQU9pQixHQUFRLEtBRVhBLEVBQVksTUFDVlosRUFBV3JELHFCQUlOLElBQUlzQyxXQUFXMUMsU0FBU3hkLEtBQUtvZ0IsRUFBYWxDLG9CQUFzQkMsc0JBSHZFOEMsR0FBc0IsRUFDdEJMLEVBQU9pQixHQUFRLE1BWTNCWCxFQUFrQnJTLE9BQU8wQyxXQUFXLEdBRXBDNFAsRUFBaUJ0UyxPQUFPMEMsV0FBVyxHQUVULElBQXRCZ1AsRUFDRlcsRUFBa0JyUyxPQUFPMEMsV0FBVyxHQUNwQzRQLEVBQWlCdFMsT0FBTzBDLFdBQVcsUUFDOUIsR0FBSXlQLEVBQVlELEVBQWEsR0FBSSxLQUNsQ2UsRUFBUWYsTUFDWkksRUFBaUJ0UyxPQUFPMEMsV0FBV3FQLEVBQU9rQixNQUMxQ1osRUFBa0IsSUFBSXJTLE9BQU8sRUFBRyxHQUV6QmlULEdBQVNkLEVBQVdjLElBRXpCWCxHQURBQSxFQUFpQkEsRUFBZTFCLFNBQVM1USxPQUFPMEMsV0FBVyxNQUMzQjBILElBQUlwSyxPQUFPMEMsV0FBV3FQLEVBQU9rQixTQUUxRCxLQUNEQyxFQUFTaEIsTUFDYkcsRUFBa0JyUyxPQUFPMEMsV0FBV3FQLEVBQU9tQixNQUVwQ0EsR0FBVWYsRUFBWSxHQUFJZSxJQUUvQmIsR0FEQUEsRUFBa0JBLEVBQWdCekIsU0FBUzVRLE9BQU8wQyxXQUFXLE1BQzNCMEgsSUFBSXBLLE9BQU8wQyxXQUFXcVAsRUFBT21CLFNBR2pFWixFQUFpQnRTLE9BQU8wQyxXQUFXcVAsRUFBT21CLE1BRW5DQSxHQUFVZixFQUFXZSxJQUUxQlosR0FEQUEsRUFBaUJBLEVBQWUxQixTQUFTNVEsT0FBTzBDLFdBQVcsTUFDM0IwSCxJQUFJcEssT0FBTzBDLFdBQVdxUCxFQUFPbUIsU0FJN0RDLEVBQWNqRCxhQUFhbUMsRUFBaUJyUyxPQUFPOU4sV0FBVyx1QkFDbEVpaEIsRUFBWWhSLElBQU1nUixFQUFZaFIsSUFBSWlJLElBQUlrSSxHQUVsQ3RCLFNBQVNtQyxFQUFZaFIsSUFBS21RLEtBQzVCYSxFQUFZL1EsS0FBTytRLEVBQVkvUSxLQUFLZ0ksSUFBSXBLLE9BQU8wQyxXQUFXLEtBSTVENE8sRUFBaUJjLEVBQVduRCxrQkFDeEJtRSxFQUFNLENBQ1JqUixJQUFLbkMsT0FBTzBDLFdBQVcsR0FDdkJOLEtBQU1wQyxPQUFPMEMsV0FBVyxJQUd0QnlRLEVBQVkvUSxLQUFLa08sbUJBQW1CLElBQUkrQyxJQUFJclQsT0FBTzBDLFdBQVcsSUFBSS9KLE9BQU9xSCxPQUFPMEMsV0FBVyxLQUU3RjBRLEVBQUloUixLQUFPZ1IsRUFBSWhSLEtBQUtrUixHQUFHdFQsT0FBTzBDLFdBQVcsR0FBS3FOLFVBQVUsS0FDeERxRCxFQUFJaFIsS0FBT2dSLEVBQUloUixLQUFLa1IsR0FBR3RULE9BQU8wQyxXQUFXNE8sR0FBZ0IrQixJQUFJclQsT0FBTzBDLFdBQVcsT0FBUXFOLFVBQVUsTUFDakdxRCxFQUFJaFIsS0FBT2dSLEVBQUloUixLQUFLa1IsR0FBR0gsRUFBWS9RLEtBQUtpUixJQUFJclQsT0FBTzBDLFdBQVcsb0JBRTlEMFEsRUFBSWhSLEtBQU9nUixFQUFJaFIsS0FBS2tSLEdBQUd0VCxPQUFPMEMsV0FBNEIsTUFBakI0TyxHQUF5QnZCLFVBQVUsS0FDNUVxRCxFQUFJaFIsS0FBT2dSLEVBQUloUixLQUFLa1IsR0FBR0gsRUFBWS9RLEtBQUtpUixJQUFJclQsT0FBTzBDLFdBQVcsb0JBR2hFMFEsRUFBSWpSLElBQU1nUixFQUFZaFIsSUFFbEJvUCxJQUNGNkIsRUFBSWhSLEtBQU9nUixFQUFJaFIsS0FBS2tSLEdBQUd0VCxPQUFPOU4sV0FBVyw2QkFJdkN5YSxFQUFZZ0MsU0FBUzdYLE1BQU0sV0FDL0IrSCxFQUFRLEVBR1I4TixFQUFVOU4sS0FBeUIsSUFBZHVVLEVBQUlqUixJQUFJQSxJQUM3QndLLEVBQVU5TixLQUFXdVUsRUFBSWpSLElBQUlBLEtBQU8sRUFBSSxJQUN4Q3dLLEVBQVU5TixLQUFXdVUsRUFBSWpSLElBQUlBLEtBQU8sR0FBSyxJQUN6Q3dLLEVBQVU5TixLQUFXdVUsRUFBSWpSLElBQUlBLEtBQU8sR0FBSyxJQUV6Q3dLLEVBQVU5TixLQUEwQixJQUFmdVUsRUFBSWpSLElBQUlDLEtBQzdCdUssRUFBVTlOLEtBQVd1VSxFQUFJalIsSUFBSUMsTUFBUSxFQUFJLElBQ3pDdUssRUFBVTlOLEtBQVd1VSxFQUFJalIsSUFBSUMsTUFBUSxHQUFLLElBQzFDdUssRUFBVTlOLEtBQVd1VSxFQUFJalIsSUFBSUMsTUFBUSxHQUFLLElBRzFDdUssRUFBVTlOLEtBQTBCLElBQWZ1VSxFQUFJaFIsS0FBS0QsSUFDOUJ3SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLRCxLQUFPLEVBQUksSUFDekN3SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLRCxLQUFPLEdBQUssSUFDMUN3SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLRCxLQUFPLEdBQUssSUFFMUN3SyxFQUFVOU4sS0FBMkIsSUFBaEJ1VSxFQUFJaFIsS0FBS0EsS0FDOUJ1SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLQSxNQUFRLEVBQUksSUFDMUN1SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLQSxNQUFRLEdBQUssSUFDM0N1SyxFQUFVOU4sS0FBV3VVLEVBQUloUixLQUFLQSxNQUFRLEdBQUssSUFFcEMsSUFBSWlQLFdBQVcxRSxRQUlwQjRHLGlCQUFtQixHQUVuQkMsY0FBZ0IsTUFFaEJDLHFCQUF1QixHQUV2QkMsZ0JBQWtCLEdBUXRCckMsV0FBV3YyQixVQUFVK1gsU0FBVyxtQkFJMUJ1UCxFQUVBdVIsRUFFQUMsRUFFQXpSLEVBRUEwUixFQUVBQyxFQUVBQyxFQUFxQixFQUVyQlosRUFBYyxJQUFJcDRCLE1BQU0sSUFFbkI4VSxFQUFJLEVBQUdBLEVBQUlzakIsRUFBWW40QixPQUFRNlUsSUFDdENzakIsRUFBWXRqQixHQUFLLE1BTWZ1aUIsRUFFQTRCLEVBSUFDLEVBTUE1ZixFQUFHNmYsRUFkSHJWLEVBQVEsRUFNUnNWLEdBQVUsRUFJVkMsRUFBaUIsQ0FDbkJ4RSxNQUFPLElBQUk3MEIsTUFBTSxJQUtmOFcsRUFBUyxHQUViZ04sRUFBUSxNQUVKOE4sRUFBWTUwQixLQUFLNmhCLFNBRXJCdUksRUFBTXdLLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxHQUN0RytVLEVBQU9qSCxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksR0FFdkc4VSxFQUFPaEgsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLEdBQ3ZHdUQsRUFBT3VLLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxHQUV2R0EsRUFBUSxFQUVFLENBQ1JzRCxJQUFLLElBQUluQyxPQUFPbUMsRUFBS3lSLEdBQ3JCeFIsS0FBTSxJQUFJcEMsT0FBTzJULEVBQU12UixJQUdqQkEsS0FBSzRPLFNBQVNoUixPQUFPcVUsT0FDM0J4aUIsRUFBTzFXLEtBQUssTUFJZDA0QixFQUFjelIsR0FBUSxHQUFLbVIsbUJBRVIsR0FBTSxFQUFHLElBRXRCTSxJQUFnQkosNEJBQ1g1aEIsRUFBT2tILEtBQUssSUFBTSxXQUNwQixHQUFJOGEsSUFBZ0JILHNCQUNsQixNQUVQSSxFQUFrQjFSLEdBQVEsR0FBS29SLGNBQy9CUyxFQUFrQixHQUFRN1IsR0FBUSxHQUFLLFFBR3pDNlIsRUFBa0I3UixHQUFRLEdBQUssRUFDL0IwUixFQUFrQjFSLEdBQVEsR0FBS29SLGlCQUdqQ3BCLEVBQVcwQixFQUFrQjdFLGNBSzdCbUYsRUFBZXhFLE1BQU0sSUFBYSxNQUFQeE4sS0FBcUMsR0FBbEI2UixJQUEwQixJQUN4RUcsRUFBZXhFLE1BQU0sR0FBSytELEVBQzFCUyxFQUFleEUsTUFBTSxHQUFLZ0UsRUFDMUJRLEVBQWV4RSxNQUFNLEdBQUt6TixFQUVNLElBQTVCaVMsRUFBZXhFLE1BQU0sSUFBd0MsSUFBNUJ3RSxFQUFleEUsTUFBTSxJQUF3QyxJQUE1QndFLEVBQWV4RSxNQUFNLElBQXdDLElBQTVCd0UsRUFBZXhFLE1BQU0sR0FDMUh1RSxHQUFVLFdBRUxELEVBQUksRUFBUSxHQUFMQSxFQUFRQSxJQUFLLEtBQ25CSSxFQUFlLEVBRWZ2VSxFQUFTMFAsV0FBVzJFLE1BQ3hCQSxFQUFpQnJVLEVBQU84UCxTQUN4QnlFLEVBQWV2VSxFQUFPK1AsSUFBSTNOLFFBS3JCOU4sRUFBSSxFQUFRLEdBQUxBLEVBQVFBLElBRWxCOGUsRUFBZ0IsRUFBSmUsRUFBUTdmLEdBQUtpZ0IsRUFBZSxHQUV4Q0EsRUFBZXhlLEtBQUtpRyxNQUFNdVksRUFBZSxPQVEzQ0gsRUFDRkosRUFBcUIsRUFDckJaLEVBQVl0VSxHQUFTLFdBRXJCa1YsRUFBcUIsSUFFYlosRUFBWXRVLElBQ2xCa1YsR0FBMEMsRUFDMUNsVixHQUFnQixLQVlPLEtBUjNCbVYsRUFBc0JELEVBQXFCLEVBQUkzQixJQVFkNEIsSUFBd0IsR0FBZ0IsRUFBWDVCLEVBQWMsSUFLakQsR0FBckIyQixTQUNGbGlCLEVBQU8xVyxLQUFLLEdBQ0csRUFBWGkzQixFQUFjdmdCLEVBQU8xVyxLQUFLLEtBQU9pM0IsR0FBbUJBLEVBQVcsR0FBR3ZnQixFQUFPMVcsS0FBSyxJQUFNaTNCLEdBQ2pGdmdCLEVBQU9rSCxLQUFLLElBR3JCbEgsRUFBTzFXLEtBQUtnNEIsRUFBWXRVLE9BQ3hCa1YsR0FBMEMsSUFHeENsaUIsRUFBTzFXLEtBQUssU0FHVCxJQUFJaXdCLEVBQUssRUFBR0EsRUFBSzJJLEVBQW9CM0ksSUFDeEN2WixFQUFPMVcsS0FBS2c0QixFQUFZdFUsTUFJMUJoTixFQUFPMVcsS0FBSyxLQUVjLEVBQXRCNjRCLEVBQ0ZuaUIsRUFBTzFXLEtBQUssSUFBTTY0QixHQUVsQm5pQixFQUFPMVcsS0FBSzY0QixXQUlFLEdBQVo1QixNQUNHLElBQUloRyxFQUFNLEVBQUdBLEVBQU0ySCxFQUFvQjNILElBQzFDdmEsRUFBTzFXLEtBQUtnNEIsRUFBWXRVLFVBRXJCLEtBQ0QwVixFQUFpQlIsRUFBcUIzQixLQUVyQixFQUFqQm1DLE1BQ0csSUFBSUMsRUFBTSxFQUFHQSxFQUFNRCxFQUFnQkMsSUFDdEMzaUIsRUFBTzFXLEtBQUtnNEIsRUFBWXRVLFdBRzFCaE4sRUFBTzFXLEtBQUssU0FHZDBXLEVBQU8xVyxLQUFLLEtBRUxvNUIsSUFBbUIsR0FDeEIxaUIsRUFBTzFXLEtBQUssU0FHVCxJQUFJczVCLEVBQU0sRUFBR0EsRUFBTVYsRUFBcUJqZSxLQUFLK0MsSUFBSTBiLEVBQWlCLEVBQUcsR0FBSUUsSUFDNUU1aUIsRUFBTzFXLEtBQUtnNEIsRUFBWXRVLGFBS3ZCaE4sRUFBT2tILEtBQUssS0FHckJzWSxXQUFXdjJCLFVBQVV5ZSxPQUFTLGlCQUNyQixDQUNMbWIsZUFBZ0IzOEIsS0FBSzhhLGFBUXpCd2UsV0FBV3YyQixVQUFVMGtCLGVBQWlCLGlCQUM3QixDQUNMa1YsZUFBZ0IzOEIsS0FBSzhhLGFBUXpCd2UsV0FBV3hSLGlCQUFtQixTQUFVQyxVQUMvQnVSLFdBQVduZixXQUFXNE4sRUFBSTRVLGlCQUduQzc1QixPQUFPMGMsZUFBZThaLFdBQVd2MkIsVUFBVyxZQUFhLENBQ3ZEZixNQUFPLG1CQUVMNDZCLFdBQWF0RCxvQkFNUnVELGtCQUFrQjFVLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHd2pCLG9CQUFvQjdiLEVBQVFxSCxPQUFjLElBQUl4USxFQUFJLEVBQUdBLEVBQUl3USxFQUFNcmxCLE9BQVE2VSxJQUFLLEtBQU15USxFQUFhRCxFQUFNeFEsR0FBSXlRLEVBQVdoQixXQUFhZ0IsRUFBV2hCLGFBQWMsRUFBT2dCLEVBQVc5SSxjQUFlLEVBQVUsVUFBVzhJLElBQVlBLEVBQVdDLFVBQVcsR0FBTTFsQixPQUFPMGMsZUFBZXlCLEVBQVFzSCxFQUFXcm1CLElBQUtxbUIsYUFFdFN3VSxlQUFlM1UsRUFBYU0sRUFBWUMsVUFBbUJELEdBQVlvVSxvQkFBb0IxVSxFQUFZcmxCLFVBQVcybEIsR0FBaUJDLEdBQWFtVSxvQkFBb0IxVSxFQUFhTyxHQUFxQlAsTUFFM000VSwyQkFRT0EsSUFDUEgsa0JBQWtCNzhCLEtBQU1nOUIsVUFPMUJELGVBQWVDLEVBQVEsQ0FBQyxDQUN0Qjk2QixJQUFLLGlCQUNMRixNQUFPLGlCQUNFLENBQ0xpN0IsUUFBUyxNQU9YLENBQUMsQ0FDSC82QixJQUFLLG1CQUNMRixNQUFPLGtCQUNFLElBQUlnN0IsTUFJUkEsS0FHVGw2QixPQUFPMGMsZUFBZXdkLE9BQU9qNkIsVUFBVyxZQUFhLENBQ25EZixNQUFPLGVBRUxrN0IsUUFBVUYsZ0JBTUxHLGtCQUFrQmhWLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHOGpCLG9CQUFvQm5jLEVBQVFxSCxPQUFjLElBQUl4USxFQUFJLEVBQUdBLEVBQUl3USxFQUFNcmxCLE9BQVE2VSxJQUFLLEtBQU15USxFQUFhRCxFQUFNeFEsR0FBSXlRLEVBQVdoQixXQUFhZ0IsRUFBV2hCLGFBQWMsRUFBT2dCLEVBQVc5SSxjQUFlLEVBQVUsVUFBVzhJLElBQVlBLEVBQVdDLFVBQVcsR0FBTTFsQixPQUFPMGMsZUFBZXlCLEVBQVFzSCxFQUFXcm1CLElBQUtxbUIsYUFFdFM4VSxlQUFlalYsRUFBYU0sRUFBWUMsVUFBbUJELEdBQVkwVSxvQkFBb0JoVixFQUFZcmxCLFVBQVcybEIsR0FBaUJDLEdBQWF5VSxvQkFBb0JoVixFQUFhTyxHQUFxQlAsTUFFM01rViwyQkFRT0EsSUFDUEgsa0JBQWtCbjlCLEtBQU1zOUIsVUFPMUJELGVBQWVDLEVBQVEsQ0FBQyxDQUN0QnA3QixJQUFLLGlCQUNMRixNQUFPLGlCQUNFLENBQ0x1N0IsUUFBUyxNQU9YLENBQUMsQ0FDSHI3QixJQUFLLG1CQUNMRixNQUFPLGtCQUNFLElBQUlzN0IsTUFJUkEsS0FHVHg2QixPQUFPMGMsZUFBZThkLE9BQU92NkIsVUFBVyxZQUFhLENBQ25EZixNQUFPLGVBRUx3N0IsUUFBVUYsZ0JBTUxHLGtCQUFrQnRWLEVBQVVDLFFBQXFCRCxhQUFvQkMsU0FBc0IsSUFBSTlPLFVBQVUsOENBRXpHb2tCLG9CQUFvQnpjLEVBQVFxSCxPQUFjLElBQUl4USxFQUFJLEVBQUdBLEVBQUl3USxFQUFNcmxCLE9BQVE2VSxJQUFLLEtBQU15USxFQUFhRCxFQUFNeFEsR0FBSXlRLEVBQVdoQixXQUFhZ0IsRUFBV2hCLGFBQWMsRUFBT2dCLEVBQVc5SSxjQUFlLEVBQVUsVUFBVzhJLElBQVlBLEVBQVdDLFVBQVcsR0FBTTFsQixPQUFPMGMsZUFBZXlCLEVBQVFzSCxFQUFXcm1CLElBQUtxbUIsYUFFdFNvVixlQUFldlYsRUFBYU0sRUFBWUMsVUFBbUJELEdBQVlnVixvQkFBb0J0VixFQUFZcmxCLFVBQVcybEIsR0FBaUJDLEdBQWErVSxvQkFBb0J0VixFQUFhTyxHQUFxQlAsTUFFM013ViwwQkFXT0EsRUFBTUMsRUFBWUMsRUFBS0MsRUFBSUMsR0FDbENQLGtCQUFrQno5QixLQUFNNDlCLE9BR3BCL0YsRUFBUWdHLEVBQVdoTixNQUFNLEtBRVIsSUFBakJnSCxFQUFNNTBCLFNBQ1I4NkIsRUFBS2xHLEVBQU1vRyxRQUNYSixFQUFhaEcsRUFBTW9HLGNBR2hCSixXQUFhQSxPQUNiQyxJQUFNQSxPQUNOQyxHQUFLQSxPQUNMQyxPQUFTQSxHQUFVLFVBUTFCTCxlQUFlQyxFQUFPLENBQUMsQ0FDckIxN0IsSUFBSyxTQUNMRixNQUFPLGVBQ0QwbkIsRUFBSTVtQixPQUFPbzdCLE9BQU8sQ0FDcEJDLEtBQU1uK0IsS0FBSzY5QixXQUNYTyxJQUFLcCtCLEtBQUs4OUIsS0FDVDk5QixLQUFLZytCLGVBQ08sTUFBWGgrQixLQUFLKzlCLEtBQVlyVSxFQUFFMlUsSUFBTXIrQixLQUFLKzlCLElBQzNCclUsSUFNUixDQUNEeG5CLElBQUssaUJBQ0xGLE1BQU8sZUFDRDBuQixFQUFJLENBQ055VSxLQUFNbitCLEtBQUs2OUIsV0FDWE8sSUFBS3ArQixLQUFLODlCLFlBRVI5OUIsS0FBSys5QixLQUFJclUsRUFBRTJVLElBQU1yK0IsS0FBSys5QixJQUMxQnJVLEVBQUk1bUIsT0FBT283QixPQUFPeFUsRUFBRzFwQixLQUFLZytCLFdBTzFCLENBQUMsQ0FDSDk3QixJQUFLLG1CQUNMRixNQUFPLFNBQTBCK2xCLE9BQzNCeE4sRUFBT3pYLE9BQU9vN0IsT0FBTyxHQUFJblcsVUFDNUIsT0FBUSxNQUFPLE9BQU9kLFFBQVEsU0FBVWtWLGlCQUN6QjVoQixFQUFLNGhCLEtBRWQsSUFBSXlCLEVBQU03VixFQUFJb1csS0FBTXBXLEVBQUlxVyxJQUFLclcsRUFBSXNXLElBQUs5akIsT0FJMUNxakIsS0FHVDk2QixPQUFPMGMsZUFBZW9lLE1BQU03NkIsVUFBVyxZQUFhLENBQ2xEZixNQUFPLFVBSVRjLE9BQU8wYyxlQUFlb2UsTUFBTTc2QixVQUFXLFlBQWEsQ0FDbERva0IsSUFBSyxrQkFDSW5uQixLQUFLNjlCLFlBRWQxWSxJQUFLLFNBQWExSyxRQUNYb2pCLFdBQWFwakIsR0FFcEJnRixjQUFjLFFBRVo2ZSxPQUFTVixlQUVKVyxrQkFBa0JwVyxFQUFVQyxRQUFxQkQsYUFBb0JDLFNBQXNCLElBQUk5TyxVQUFVLDhDQUV6R2tsQixvQkFBb0J2ZCxFQUFRcUgsT0FBYyxJQUFJeFEsRUFBSSxFQUFHQSxFQUFJd1EsRUFBTXJsQixPQUFRNlUsSUFBSyxLQUFNeVEsRUFBYUQsRUFBTXhRLEdBQUl5USxFQUFXaEIsV0FBYWdCLEVBQVdoQixhQUFjLEVBQU9nQixFQUFXOUksY0FBZSxFQUFVLFVBQVc4SSxJQUFZQSxFQUFXQyxVQUFXLEdBQU0xbEIsT0FBTzBjLGVBQWV5QixFQUFRc0gsRUFBV3JtQixJQUFLcW1CLGFBRXRTa1csZUFBZXJXLEVBQWFNLEVBQVlDLFVBQW1CRCxHQUFZOFYsb0JBQW9CcFcsRUFBWXJsQixVQUFXMmxCLEdBQWlCQyxHQUFhNlYsb0JBQW9CcFcsRUFBYU8sR0FBcUJQLE1BRTNNc1csU0FBV2xrQixPQUFPN0IsT0FLbEJnbUIsMkJBa0JPQSxFQUFPL0osRUFBV2dLLE1BQ3pCTCxrQkFBa0J2K0IsS0FBTTIrQixLQUVQLE1BQWIvSixHQUE0QyxpQkFBZEEsR0FBNEI4SixTQUFTdGtCLFNBQVN3YSxJQUFnQkEsYUFBcUI1YixZQUFnQmhXLE1BQU1LLFFBQVF1eEIsVUFDM0ksSUFBSXRiLFVBQVUsNkRBR2pCdWxCLFNBQXNCLE1BQVhELEVBQWtCRSw0QkFBOEJGLE9BQzNERyxTQUFXLEVBRUMsTUFBYm5LLEdBQXVCQSxhQUFxQnRvQixZQWlCdEIsSUFBYm95QixjQUNKbGtCLE9BQVNra0IsU0FBUzNmLE1BQU00ZixFQUFPSyxhQUNMLG9CQUFmaG1CLGdCQUNYd0IsT0FBUyxJQUFJeEIsV0FBVyxJQUFJTyxZQUFZb2xCLEVBQU9LLG1CQUUvQ3hrQixPQUFTLElBQUl4WCxNQUFNMjdCLEVBQU9LLGlCQXRCc0IsSUFFOUIsaUJBQWRwSyxVQUVlLElBQWI4SixjQUNKbGtCLE9BQVNra0IsU0FBU3RsQixLQUFLd2IsT0FDdkIsQ0FBQSxHQUEwQixvQkFBZjViLGFBQThCaFcsTUFBTUssUUFBUXV4QixTQUd0RCxJQUFJdGIsVUFBVSwwREFGZmtCLE9BQVN5a0IsbUJBQW1CckssYUFLOUJwYSxPQUFTb2EsT0FHWG1LLFNBQVduSyxFQUFVM3hCLGVBbUI5Qnc3QixlQUFlRSxFQUFRLENBQUMsQ0FDdEJ6OEIsSUFBSyxNQUNMRixNQUFPLFNBQWFrOUIsTUFFVSxNQUF4QkEsRUFBVSxRQUE0QyxpQkFBZkEsR0FBaUQsSUFBdEJBLEVBQVdqOEIsT0FBYyxNQUFNLElBQUlxVyxVQUFVLGdFQUN6RixpQkFBZjRsQixHQUEyQkEsRUFBYSxHQUFrQixJQUFiQSxFQUFrQixNQUFNLElBQUk1bEIsVUFBVSxnRUFFMUY2bEIsRUFBZSxRQUdqQkEsRUFEd0IsaUJBQWZELEVBQ01BLEVBQVdoaUIsV0FBVyxHQUNKLE1BQXhCZ2lCLEVBQVUsT0FDSkEsRUFBVyxHQUVYQSxFQUdibC9CLEtBQUt3YSxPQUFPdlgsT0FBU2pELEtBQUsrK0IsY0FDdkJ2a0IsT0FBT3hhLEtBQUsrK0IsWUFBY0ksZUFFUCxJQUFiVCxVQUE0QkEsU0FBU3RrQixTQUFTcGEsS0FBS3dhLFFBQVMsS0FFakVvYSxFQUFZOEosU0FBUzNmLE1BQU00ZixFQUFPSyxZQUFjaC9CLEtBQUt3YSxPQUFPdlgsYUFFM0R1WCxPQUFPRCxLQUFLcWEsRUFBVyxFQUFHLEVBQUc1MEIsS0FBS3dhLE9BQU92WCxhQUN6Q3VYLE9BQVNvYSxPQUNUcGEsT0FBT3hhLEtBQUsrK0IsWUFBY0ksTUFDMUIsS0FDREMsRUFBVSxLQUdaQSxFQURFQyxhQUFhci9CLEtBQUt3YSxRQUNWLElBQUl4QixXQUFXLElBQUlPLFlBQVlvbEIsRUFBT0ssWUFBY2gvQixLQUFLd2EsT0FBT3ZYLFNBRWhFLElBQUlELE1BQU0yN0IsRUFBT0ssWUFBY2gvQixLQUFLd2EsT0FBT3ZYLFlBSWxELElBQUk2VSxFQUFJLEVBQUdBLEVBQUk5WCxLQUFLd2EsT0FBT3ZYLE9BQVE2VSxJQUN0Q3NuQixFQUFRdG5CLEdBQUs5WCxLQUFLd2EsT0FBTzFDLFFBSXRCMEMsT0FBUzRrQixPQUVUNWtCLE9BQU94YSxLQUFLKytCLFlBQWNJLEtBYXBDLENBQ0RqOUIsSUFBSyxRQUNMRixNQUFPLFNBQWU4WCxFQUFRMEMsTUFDNUJBLEVBQTJCLGlCQUFYQSxFQUFzQkEsRUFBU3hjLEtBQUsrK0IsU0FFaEQvK0IsS0FBS3dhLE9BQU92WCxPQUFTdVosRUFBUzFDLEVBQU83VyxPQUFRLEtBQzNDMnhCLEVBQVksYUFFUSxJQUFiOEosVUFBNEJBLFNBQVN0a0IsU0FBU3BhLEtBQUt3YSxRQUM1RG9hLEVBQVk4SixTQUFTM2YsTUFBTS9lLEtBQUt3YSxPQUFPdlgsT0FBUzZXLEVBQU83VyxhQUNsRHVYLE9BQU9ELEtBQUtxYSxFQUFXLEVBQUcsRUFBRzUwQixLQUFLd2EsT0FBT3ZYLGFBQ3pDLEdBQUlvOEIsYUFBYXIvQixLQUFLd2EsUUFBUyxDQUVwQ29hLEVBQVksSUFBSTViLFdBQVcsSUFBSU8sWUFBWXZaLEtBQUt3YSxPQUFPdlgsT0FBUzZXLEVBQU83VyxhQUVsRSxJQUFJNlUsRUFBSSxFQUFHQSxFQUFJOVgsS0FBSysrQixTQUFVam5CLElBQ2pDOGMsRUFBVTljLEdBQUs5WCxLQUFLd2EsT0FBTzFDLFFBSzFCMEMsT0FBU29hLFVBR1EsSUFBYjhKLFVBQTRCQSxTQUFTdGtCLFNBQVNOLElBQVc0a0IsU0FBU3RrQixTQUFTcGEsS0FBS3dhLFFBQ3pGVixFQUFPUyxLQUFLdmEsS0FBS3dhLE9BQVFnQyxFQUFRLEVBQUcxQyxFQUFPN1csYUFDdEM4N0IsU0FBV3ZpQixFQUFTMUMsRUFBTzdXLE9BQVNqRCxLQUFLKytCLFNBQVd2aUIsRUFBUzFDLEVBQU83VyxPQUFTakQsS0FBSysrQixjQUNsRixRQUF3QixJQUFiTCxVQUE4QyxpQkFBWDVrQixHQUF1QjRrQixTQUFTdGtCLFNBQVNwYSxLQUFLd2EsYUFDNUZBLE9BQU9OLE1BQU1KLEVBQVEwQyxFQUFRLGVBQzdCdWlCLFNBQVd2aUIsRUFBUzFDLEVBQU83VyxPQUFTakQsS0FBSysrQixTQUFXdmlCLEVBQVMxQyxFQUFPN1csT0FBU2pELEtBQUsrK0IsY0FDbEYsR0FBSU0sYUFBYXZsQixJQUFXOVcsTUFBTUssUUFBUXlXLElBQTZCLGlCQUFYQSxFQUFxQixLQUNqRixJQUFJdVosRUFBSyxFQUFHQSxFQUFLdlosRUFBTzdXLE9BQVFvd0IsU0FDOUI3WSxPQUFPZ0MsS0FBWTFDLEVBQU91WixRQUc1QjBMLFNBQVd2aUIsRUFBU3hjLEtBQUsrK0IsU0FBV3ZpQixFQUFTeGMsS0FBSysrQixjQUNsRCxHQUFzQixpQkFBWGpsQixFQUFxQixLQUNoQyxJQUFJdWEsRUFBTSxFQUFHQSxFQUFNdmEsRUFBTzdXLE9BQVFveEIsU0FDaEM3WixPQUFPZ0MsS0FBWTFDLEVBQU9vRCxXQUFXbVgsUUFHdkMwSyxTQUFXdmlCLEVBQVN4YyxLQUFLKytCLFNBQVd2aUIsRUFBU3hjLEtBQUsrK0IsWUFZMUQsQ0FDRDc4QixJQUFLLE9BQ0xGLE1BQU8sU0FBYys4QixFQUFVOTdCLE1BQzdCQSxFQUFTQSxHQUFtQixFQUFUQSxFQUFhQSxFQUFTakQsS0FBSysrQixTQUUxQy8rQixLQUFLd2EsT0FBTCxhQUNLeGEsS0FBS3dhLE9BQU8xUSxNQUFNaTFCLEVBQVVBLEVBQVc5N0IsV0FJNUMyeEIsRUFBa0Msb0JBQWY1YixXQUE2QixJQUFJQSxXQUFXLElBQUlPLFlBQVl0VyxJQUFXLElBQUlELE1BQU1DLEdBRS9GNlUsRUFBSSxFQUFHQSxFQUFJN1UsRUFBUTZVLElBQzFCOGMsRUFBVTljLEdBQUs5WCxLQUFLd2EsT0FBT3VrQixZQUl0Qm5LLElBU1IsQ0FDRDF5QixJQUFLLFFBQ0xGLE1BQU8sU0FBZXM5QixPQUNwQkEsRUFBaUIsTUFBVEEsR0FBd0JBLFNBRUMsSUFBYlosVUFBNEJBLFNBQVN0a0IsU0FBU3BhLEtBQUt3YSxTQUFXeGEsS0FBS3dhLE9BQU92WCxTQUFXakQsS0FBSysrQixTQUFVLE9BQU8vK0IsS0FBS3dhLGVBRTVHLElBQWJra0IsVUFBNEJBLFNBQVN0a0IsU0FBU3BhLEtBQUt3YSxlQUNyRDhrQixFQUFRdC9CLEtBQUt3YSxPQUFPMVEsTUFBTSxFQUFHOUosS0FBSysrQixVQUFZLytCLEtBQUt3YSxPQUFPTSxTQUFTLFNBQVUsRUFBRzlhLEtBQUsrK0IsYUFFeEZPLEVBQU8sSUFFbUIsTUFBeEJ0L0IsS0FBS3dhLE9BQUwsYUFDS3hhLEtBQUt3YSxPQUFPMVEsTUFBTSxFQUFHOUosS0FBSysrQixrQkFHN0JRLEVBQVlGLGFBQWFyL0IsS0FBS3dhLFFBQVUsSUFBSXhCLFdBQVcsSUFBSU8sWUFBWXZaLEtBQUsrK0IsV0FBYSxJQUFJLzdCLE1BQU1oRCxLQUFLKytCLFVBRW5Ham5CLEVBQUksRUFBR0EsRUFBSTlYLEtBQUsrK0IsU0FBVWpuQixJQUNqQ3luQixFQUFVem5CLEdBQUs5WCxLQUFLd2EsT0FBTzFDLFVBSXRCeW5CLFNBR0ZDLCtCQUErQngvQixLQUFLd2EsT0FBUSxFQUFHeGEsS0FBSysrQixZQVdoRSxDQUNENzhCLElBQUssU0FDTEYsTUFBTyxrQkFDRWhDLEtBQUsrK0IsV0FNYixDQUNENzhCLElBQUssU0FDTEYsTUFBTyxrQkFDaUIsTUFBZmhDLEtBQUt3YSxPQUFpQnhhLEtBQUt3YSxPQUFPTSxTQUFTLFVBQVksS0FNL0QsQ0FDRDVZLElBQUssV0FDTEYsTUFBTyxTQUFrQjZxQixVQUNELE1BQWY3c0IsS0FBS3dhLE9BQWlCeGEsS0FBS3dhLE9BQU8xUSxNQUFNLEVBQUc5SixLQUFLKytCLFVBQVVqa0IsU0FBUytSLEdBQVUsS0FNckYsQ0FDRDNxQixJQUFLLGlCQUNMRixNQUFPLGVBQ0R5OUIsRUFBZWYsU0FBU3RrQixTQUFTcGEsS0FBS3dhLFFBQVV4YSxLQUFLd2EsT0FBT00sU0FBUyxVQUFZNGpCLFNBQVN0bEIsS0FBS3BaLEtBQUt3YSxRQUFRTSxTQUFTLFVBQ3JIOGpCLEVBQVV0eUIsT0FBT3RNLEtBQUs2K0IsVUFBVS9qQixTQUFTLFVBQ3RDLENBQ0w0a0IsUUFBUyxDQUNQbG5CLE9BQVFpbkIsRUFDUmIsUUFBNEIsSUFBbkJBLEVBQVEzN0IsT0FBZSxJQUFNMjdCLEVBQVVBLE9BUXBELENBQUMsQ0FDSDE4QixJQUFLLG1CQUNMRixNQUFPLFNBQTBCK2xCLE9BQzNCcmUsRUFBT3FlLEVBQUkyWCxRQUFRZCxRQUFVaGlCLFNBQVNtTCxFQUFJMlgsUUFBUWQsUUFBUyxJQUFNLFNBRTlELElBQUlELEVBREFELFNBQVN0bEIsS0FBSzJPLEVBQUkyWCxRQUFRbG5CLE9BQVEsVUFDckI5TyxPQUlyQmkxQixLQVFMRyw0QkFBOEIsV0FFekJPLGFBQWExOEIsU0FDMkIsd0JBQXhDRyxPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUt0VixZQU8vQnM4QixtQkFBbUJwMUIsV0FFdEIrcUIsRUFBa0Msb0JBQWY1YixXQUE2QixJQUFJQSxXQUFXLElBQUlPLFlBQVkxUCxFQUFLNUcsU0FBVyxJQUFJRCxNQUFNNkcsRUFBSzVHLFFBRXpHNlUsRUFBSSxFQUFHQSxFQUFJak8sRUFBSzVHLE9BQVE2VSxJQUMvQjhjLEVBQVU5YyxHQUFLak8sRUFBS3FULFdBQVdwRixVQUkxQjhjLFdBU0E0SywrQkFBK0J2aUIsRUFBVzBpQixFQUFZQyxXQUN6RDVYLEVBQVMsR0FFSmxRLEVBQUk2bkIsRUFBWTduQixFQUFJOG5CLEVBQVU5bkIsSUFDckNrUSxHQUFrQm5sQixPQUFPOGIsYUFBYTFCLEVBQVVuRixXQUczQ2tRLEVBR1QyVyxPQUFPSyxZQUFjLElBT3JCTCxPQUFPa0IsZ0JBQWtCLEVBT3pCbEIsT0FBT21CLGlCQUFtQixFQU8xQm5CLE9BQU9vQixtQkFBcUIsRUFPNUJwQixPQUFPcUIsaUJBQW1CLEVBTzFCckIsT0FBT3NCLGFBQWUsRUFPdEJ0QixPQUFPdUIsWUFBYyxFQU9yQnZCLE9BQU93QixxQkFBdUIsSUFDOUJyOUIsT0FBTzBjLGVBQWVtZixPQUFPNTdCLFVBQVcsWUFBYSxDQUNuRGYsTUFBTyxlQUVMbytCLE9BQVN6QixPQUVUMEIsVUFBWSxDQUVkQyxlQUFnQixXQUNoQkMsZ0JBQWlCLFdBQ2pCQyxlQUFnQnppQixLQUFLbUYsSUFBSSxFQUFHLElBQU0sRUFDbEN1ZCxnQkFBaUIxaUIsS0FBS21GLElBQUksRUFBRyxJQUU3QndkLFdBQVksaUJBRVpDLFlBQWEsaUJBUWJDLGlCQUFrQixFQU9sQkMsaUJBQWtCLEVBT2xCQyxpQkFBa0IsRUFPbEJDLGdCQUFpQixFQU9qQkMsaUJBQWtCLEVBT2xCQyxvQkFBcUIsRUFPckJDLGNBQWUsRUFPZkMsa0JBQW1CLEVBT25CQyxlQUFnQixFQU9oQkMsZUFBZ0IsR0FPaEJDLGlCQUFrQixHQU9sQkMsb0JBQXFCLEdBT3JCQyxlQUFnQixHQU9oQkMsaUJBQWtCLEdBT2xCQyx1QkFBd0IsR0FPeEJDLGNBQWUsR0FPZkMsb0JBQXFCLEdBT3JCQyxlQUFnQixHQU9oQkMscUJBQXNCLEdBT3RCQyxrQkFBbUIsSUFPbkJDLGtCQUFtQixJQU9uQmxELDRCQUE2QixFQU83Qm1ELDZCQUE4QixFQU85QkMsK0JBQWdDLEVBT2hDQyx5QkFBMEIsRUFPMUJDLHdCQUF5QixFQU96QkMsaUNBQWtDLGNBRzNCQyxVQUFVMy9CLFVBQWtGMi9CLFVBQXJELG1CQUFYaGpCLFFBQW9ELFdBQTNCMkosUUFBTzNKLE9BQU80SixVQUFxQyxTQUFpQnZtQixrQkFBcUJBLElBQTZCLFNBQWlCQSxVQUFjQSxHQUF5QixtQkFBWDJjLFFBQXlCM2MsRUFBSUMsY0FBZ0IwYyxRQUFVM2MsSUFBUTJjLE9BQU92YyxVQUFZLGlCQUFrQkosS0FBMkJBLE9BVTVWNC9CLGFBQWUsQ0FDakI5TixLQUFNTSxTQUNOMkssUUFBU1UsT0FDVHZLLFFBQVNDLE9BQ1RLLFdBQVlDLE9BQ1p1RyxlQUFnQkMsV0FDaEIvVCxjQUFlRSxTQUNmbEIsWUFBYUksT0FDYmdWLFFBQVNDLFFBQ1RLLFFBQVNDLFFBQ1RqSSxtQkFBb0JDLE9BQ3BCaEwsV0FBWU8sb0JBR0x5WCxpQkFBaUJ0YyxFQUFNaGtCLEVBQUtGLEVBQU8wbEIsTUFDckIsaUJBQVYxbEIsRUFBb0IsSUFDekIwbEIsRUFBUUMsZUFDSDNsQixLQUtMK2IsS0FBS2lHLE1BQU1oaUIsS0FBV0EsRUFBTyxJQUNsQnUrQixnQkFBVHYrQixHQUEyQkEsR0FBU3MrQixlQUFnQixPQUFPLElBQUlsSyxPQUFPcDBCLE1BQzdEeStCLGdCQUFUeitCLEdBQTJCQSxHQUFTdytCLGVBQWdCLE9BQU8sSUFBSXZZLE9BQU8wQyxXQUFXM29CLFVBSWhGLElBQUkrbUIsU0FBUy9tQixNQUlULE1BQVRBLEdBQXNDLFdBQXJCc2dDLFVBQVV0Z0MsR0FBcUIsT0FBT0EsS0FFdkRBLEVBQU15Z0MsV0FBWSxPQUFPLGFBQ3pCcGIsRUFBT3ZrQixPQUFPdWtCLEtBQUtybEIsR0FBTzBnQyxPQUFPLFNBQVV2RyxVQUN0Q0EsRUFBRXdHLFdBQVcsTUFBb0IsTUFBWjNnQyxFQUFNbTZCLEtBRzNCcmtCLEVBQUksRUFBR0EsRUFBSXVQLEVBQUtwa0IsT0FBUTZVLElBQUssS0FDaEN3RixFQUFJaWxCLGFBQWFsYixFQUFLdlAsT0FDdEJ3RixFQUFHLE9BQU9BLEVBQUV3SyxpQkFBaUI5bEIsRUFBTzBsQixNQUd2QixNQUFmMWxCLEVBQU00Z0MsTUFBZSxLQUNuQnJSLEVBQUl2dkIsRUFBTTRnQyxNQUNWQyxFQUFPLElBQUkxVyxXQUNFLGlCQUFOb0YsRUFBZ0JzUixFQUFLck8sUUFBUXJJLEtBQUsyVyxNQUFNdlIsSUFBYXRKLE9BQU9zQyxPQUFPZ0gsR0FBSXNSLEVBQUtyTyxRQUFRakQsRUFBRTNKLFlBQWtDLGlCQUFOMkosR0FBa0I3SixFQUFRQyxTQUFTa2IsRUFBS3JPLFFBQVFqRCxHQUN0S3NSLEtBR1UsTUFBZjdnQyxFQUFNMDBCLE1BQWUsS0FDbkJuYyxFQUFPelgsT0FBT283QixPQUFPLEdBQUlsOEIsVUFFekJBLEVBQU0yMEIsU0FDUnBjLEVBQUtvYyxPQUFTNkwsaUJBQWlCdGMsRUFBTSxLQUFNbGtCLEVBQU0yMEIsU0FHNUN2UixLQUFLMEMsaUJBQWlCOWxCLE1BR2IsTUFBZEEsRUFBTW04QixNQUFvQyxNQUFwQm44QixFQUFNK2dDLFdBQW9CLEtBQzlDcmMsRUFBSTFrQixFQUFNbThCLEtBQU9uOEIsRUFBUUEsRUFBTStnQyxjQUcvQnJjLGFBQWE0WCxPQUFRLE9BQU81WCxNQUM1QnNjLEVBQWFsZ0MsT0FBT3VrQixLQUFLWCxHQUFHZ2MsT0FBTyxTQUFVdkcsVUFDeENBLEVBQUV3RyxXQUFXLE9BRWxCM08sR0FBUSxLQUNaZ1AsRUFBVy9iLFFBQVEsU0FBVWtWLElBQ2dCLElBQXZDLENBQUMsT0FBUSxNQUFPLE9BQU94Z0IsUUFBUXdnQixLQUFXbkksR0FBUSxLQUdwREEsRUFBTyxPQUFPc0ssT0FBT3hXLGlCQUFpQnBCLFVBR3JDMWtCLFdBd0JBOGdDLE1BQU14M0IsRUFBTW9jLE9BQ2Y0QyxFQUFRdHFCLFdBTW1CLGtCQUovQjBuQixFQUFVNWtCLE9BQU9vN0IsT0FBTyxHQUFJLENBQzFCdlcsU0FBUyxHQUNSRCxJQUVnQkMsVUFBdUJELEVBQVF1YixRQUFVdmIsRUFBUUMsU0FDdEMsa0JBQW5CRCxFQUFRdWIsU0FBc0J2YixFQUFRQyxTQUFXRCxFQUFRdWIsUUFDN0QvVixLQUFLNFYsTUFBTXgzQixFQUFNLFNBQVVwSixFQUFLRixVQUM5QndnQyxpQkFBaUJsWSxFQUFPcG9CLEVBQUtGLEVBQU8wbEIsU0FRM0M0WSxlQUFpQixXQUNqQkMsZ0JBQWtCLFdBQ2xCQyxlQUFpQixtQkFDakJDLGdCQUFrQiw0QkEwQmJ0VCxVQUFVbnJCLEVBQU9raEMsRUFBVUMsRUFBT3piLEdBQzVCLE1BQVR5YixHQUFzQyxXQUFyQmIsVUFBVWEsS0FDN0J6YixFQUFVeWIsRUFDVkEsRUFBUSxHQUdNLE1BQVpELEdBQTRDLFdBQXhCWixVQUFVWSxJQUEyQmxnQyxNQUFNSyxRQUFRNi9CLEtBQ3pFeGIsRUFBVXdiLEVBQ1ZBLEVBQVcsS0FDWEMsRUFBUSxHQUdWemIsRUFBVTVrQixPQUFPbzdCLE9BQU8sR0FBSSxDQUMxQnZXLFNBQVMsR0FDUkQsT0FDQ0ssRUFBTS9rQixNQUFNSyxRQUFRckIsR0FBU29oQyxlQUFlcGhDLEVBQU8wbEIsR0FBVzJiLGtCQUFrQnJoQyxFQUFPMGxCLFVBQ3BGd0YsS0FBS0MsVUFBVXBGLEVBQUttYixFQUFVQyxZQVk5QkcsVUFBVUMsRUFBTTdiLFVBQ3ZCQSxFQUFVQSxHQUFXLEdBQ2R3RixLQUFLNFYsTUFBTTNWLFVBQVVvVyxFQUFNN2IsYUFZM0I4YixZQUFZQyxFQUFPL2IsVUFDMUJBLEVBQVVBLEdBQVcsR0FDZG9iLE1BQU01VixLQUFLQyxVQUFVc1csR0FBUS9iLFlBRzdCMGIsZUFBZTVwQixFQUFPa08sVUFDdEJsTyxFQUFNdlgsSUFBSSxTQUFVeWtCLFVBQ2xCZ2QsZUFBZWhkLEVBQUdnQixjQUlwQmljLGFBQWFkLE9BQ2hCZSxFQUFTZixFQUFLZ0IscUJBRW1CLElBQTlCaEIsRUFBS2lCLHFCQUE2QkYsRUFBU0EsRUFBTzk1QixNQUFNLEdBQUksR0FBSyxhQUdqRTQ1QixlQUFlMWhDLEVBQU8wbEIsTUFDekIxa0IsTUFBTUssUUFBUXJCLEdBQVEsT0FBT29oQyxlQUFlcGhDLEVBQU8wbEIsV0FDekMvTixJQUFWM1gsRUFBcUIsT0FBTyxRQUU1QkEsYUFBaUJtcUIsS0FBTSxLQUNyQjRYLEVBQVUvaEMsRUFBTW9xQixVQUVwQjRYLEdBQXFCLEVBQVhELEdBQWdCQSxFQUFVLG9CQUM3QnJjLEVBQVFDLFNBQVdxYyxFQUFVLENBQ2xDcEIsTUFBT2UsYUFBYTNoQyxJQUNsQixDQUNGNGdDLE1BQU8sQ0FDTC9hLFlBQWE3bEIsRUFBTW9xQixVQUFVdFIsZ0JBS2QsaUJBQVY5WSxJQUF1QjBsQixFQUFRQyxRQUFTLElBRTdDNUosS0FBS2lHLE1BQU1oaUIsS0FBV0EsRUFBTyxLQUUzQmlpQyxFQUFzQnhELGdCQUFUeitCLEdBQTJCQSxHQUFTdytCLGtCQUQzQkQsZ0JBQVR2K0IsR0FBMkJBLEdBQVNzK0IsZUFHckMsTUFBTyxDQUNyQm5LLFdBQVluMEIsRUFBTThZLGVBRWhCbXBCLEVBQVksTUFBTyxDQUNyQnBjLFlBQWE3bEIsRUFBTThZLGtCQUloQixDQUNMK04sY0FBZTdtQixFQUFNOFksZUFJckI5WSxhQUFpQmtzQixPQUFRLEtBQ3ZCZ1csRUFBUWxpQyxFQUFNa2lDLGtCQUVKdnFCLElBQVZ1cUIsSUFDRkEsRUFBUWxpQyxFQUFNOFksV0FBV2lHLE1BQU0sYUFBYSxJQUdyQyxJQUFJeVUsT0FBT3h6QixFQUFNbWlDLE9BQVFELEdBQ3hCemMsd0JBR0MsTUFBVHpsQixHQUFzQyxXQUFyQnNnQyxVQUFVdGdDLEdBQTRCcWhDLGtCQUFrQnJoQyxFQUFPMGxCLEdBQzdFMWxCLE1BR0xvaUMsbUJBQXFCLENBQ3ZCekYsT0FBUSxTQUFnQmpWLFVBQ2YsSUFBSTBXLE9BQU8xVyxFQUFFMW5CLFFBQVMwbkIsRUFBRTJhLFVBRWpDN04sS0FBTSxTQUFjOU0sVUFDWCxJQUFJdEUsS0FBS3NFLEVBQUV0RSxLQUFNc0UsRUFBRStNLFFBRTVCbUgsTUFBTyxTQUFlbFUsVUFDYixJQUFJNFUsT0FBTzVVLEVBQUVtVSxZQUFjblUsRUFBRTRhLFVBQVc1YSxFQUFFb1UsSUFBS3BVLEVBQUVxVSxHQUFJclUsRUFBRXNVLFNBR2hFMUUsV0FBWSxTQUFvQjVQLFVBQ3ZCLElBQUlrVCxXQUFXbFQsRUFBRTdILFFBRTFCK0csT0FBUSxTQUFnQmMsVUFDZixJQUFJWCxTQUFTVyxFQUFFMW5CLFFBRXhCazBCLE1BQU8sU0FBZXhNLFVBQ2IsSUFBSTBNLE9BQU8xTSxFQUFFMW5CLFFBRXRCdWlDLEtBQU0sU0FBYzdhLFVBQ1h6QixPQUFPdWMsU0FDTCxNQUFUOWEsRUFBRVUsSUFBY1YsRUFBRVUsSUFBTVYsRUFBRSthLEtBQWUsTUFBVC9hLEVBQUVVLElBQWNWLEVBQUVXLEtBQU9YLEVBQUVnYixNQUFnQixNQUFUaGIsRUFBRVUsSUFBY1YsRUFBRWliLFNBQVdqYixFQUFFa2IsWUFFbkd0SCxPQUFRLGtCQUNDLElBQUlFLFNBRWJSLE9BQVEsa0JBQ0MsSUFBSUUsU0FFYjJILFNBQVUsU0FBa0JuYixVQUNuQixJQUFJcUwsU0FBU3JMLElBRXRCa0ssU0FBVSxTQUFrQmxLLFVBQ25CLElBQUlxTCxTQUFTckwsSUFHdEIyTCxXQUFZLFNBQW9CM0wsVUFDdkIsSUFBSThMLE9BQU85TCxFQUFFNEwsUUFBUzVMLEVBQUVoQyxVQUVqQ3BJLE9BQVEsU0FBZ0JvSyxVQUNmLElBQUlvTSxPQUFPcE0sRUFBRTFuQixRQUV0Qm1vQixVQUFXLFNBQW1CVCxVQUNyQnFCLFVBQVV5WixTQUFTOWEsRUFBRVUsSUFBS1YsRUFBRVcsaUJBSTlCZ1osa0JBQWtCdGIsRUFBS0wsTUFDbkIsTUFBUEssR0FBa0MsV0FBbkJ1YSxVQUFVdmEsR0FBbUIsTUFBTSxJQUFJaG1CLE1BQU0sOEJBQzVEK2lDLEVBQVcvYyxFQUFJZ2Qsa0JBRUssSUFBYkQsRUFBMEIsS0FFL0JFLEVBQU8sT0FFTixJQUFJMWhDLEtBQVF5a0IsRUFDZmlkLEVBQUsxaEMsR0FBUW9nQyxlQUFlM2IsRUFBSXprQixHQUFPb2tCLFVBR2xDc2QsRUFDRixHQUF3QixpQkFBYkYsUUEyQlYsSUFBSS9pQyxNQUFNLHdDQUEwQ3VnQyxVQUFVd0MsUUF6QmhFRyxFQUFRbGQsS0FFd0IsbUJBQXpCa2QsRUFBTXhkLGVBQStCLEtBSzFDeWQsRUFBU2QsbUJBQW1CVSxPQUUzQkksUUFDRyxJQUFJNXJCLFVBQVUsc0NBQXdDd3JCLEdBRzlERyxFQUFRQyxFQUFPRCxTQUlBLFNBQWJILEdBQXVCRyxFQUFNeE8sTUFDL0J3TyxFQUFRLElBQUk3ZixLQUFLNmYsRUFBTTdmLEtBQU1zZSxlQUFldUIsRUFBTXhPLE1BQU8vTyxJQUNuQyxVQUFib2QsR0FBd0JHLEVBQU1uSCxNQUN2Q21ILEVBQVEsSUFBSTNHLE9BQU8yRyxFQUFNcEgsV0FBWTZGLGVBQWV1QixFQUFNbkgsSUFBS3BXLEdBQVV1ZCxFQUFNbEgsR0FBSWtILEVBQU1qSCxTQUdwRmlILEVBQU14ZCxlQUFlQyxPQU01QnlkLGNBQWdCLENBQ2xCckMsTUFBT0EsTUFDUFUsWUFBYUEsWUFDYkYsVUFBV0EsVUFDWG5XLFVBQVdBLFdBR1RpWSxVQUFZLElBQ1pDLGVBQWlCLElBQ2pCQyxpQkFBbUIsSUFDbkJDLGdCQUFrQixJQUNsQkMsZ0JBQWtCLElBQ2xCQyxhQUFlLElBQ2ZDLGVBQWlCLElBQ2pCQyxjQUFnQixJQUNoQkMsZ0JBQWtCLGFBU2JDLGFBQWFoa0IsRUFBT2xFLEVBQU9DLFdBQzlCa29CLEVBQWUsRUFFVmh1QixFQUFJNkYsRUFBTzdGLEVBQUk4RixFQUFLOUYsR0FBSyxFQUFHLEtBQy9CaXVCLEVBQU9sa0IsRUFBTS9KLE1BRWJndUIsRUFBYyxLQUNYQyxFQUFPVixrQkFBb0JPLHVCQUN2QixFQUdURSxHQUFnQixPQUNYLEdBQUlDLEVBQU9YLGNBQ1hXLEVBQU9ULG9CQUFzQkcsYUFDaENLLEVBQWUsT0FDVixJQUFLQyxFQUFPUixtQkFBcUJHLGVBQ3RDSSxFQUFlLE1BQ1YsQ0FBQSxJQUFLQyxFQUFPUCxtQkFBcUJHLHFCQUcvQixFQUZQRyxFQUFlLFVBT2JBLE1BR05FLGVBQWlCSCxhQUNqQkksY0FBZ0IsQ0FDbEJKLGFBQWNHLGdCQUdaRSxTQUFXMXJCLE9BQU83QixPQUNsQnd0QixlQUFpQkYsY0FBY0osYUFFL0JPLGdCQUFrQm5lLE9BQU8wQyxXQUFXMFYsVUFBVUssWUFDOUMyRixnQkFBa0JwZSxPQUFPMEMsV0FBVzBWLFVBQVVNLFlBQzlDMkYsY0FBZ0IsWUFFWEMsY0FBYzNSLEVBQVdsTixFQUFTcmtCLE9BRXJDeWpCLEdBREpZLEVBQXFCLE1BQVhBLEVBQWtCLEdBQUtBLElBQ1ZBLEVBQVFaLE1BQVFZLEVBQVFaLE1BQVEsRUFFbkRqTSxFQUFPK1osRUFBVTlOLEdBQVM4TixFQUFVOU4sRUFBUSxJQUFNLEVBQUk4TixFQUFVOU4sRUFBUSxJQUFNLEdBQUs4TixFQUFVOU4sRUFBUSxJQUFNLE1BRTNHak0sRUFBTyxRQUNILElBQUk5WSxNQUFNLDhCQUE4QmtlLE9BQU9wRixPQUduRDZNLEVBQVE4ZSxrQ0FBb0M1UixFQUFVM3hCLE9BQVM0WCxRQUMzRCxJQUFJOVksTUFBTSxpQkFBaUJrZSxPQUFPMlUsRUFBVTN4QixPQUFRLDBCQUEwQmdkLE9BQU9wRixRQUd4RjZNLEVBQVE4ZSxrQ0FBb0M1UixFQUFVM3hCLFNBQVc0WCxRQUM5RCxJQUFJOVksTUFBTSxpQkFBaUJrZSxPQUFPMlUsRUFBVTN4QixPQUFRLHdCQUF3QmdkLE9BQU9wRixPQUd2RkEsRUFBT2lNLEVBQVE4TixFQUFVM3hCLGFBQ3JCLElBQUlsQixNQUFNLGNBQWNrZSxPQUFPcEYsRUFBTSxxQkFBcUJvRixPQUFPNkcsRUFBTyw4QkFBOEI3RyxPQUFPaW1CLFNBQVN4c0IsV0FBV2tiLEdBQVksU0FJakgsSUFBaENBLEVBQVU5TixFQUFRak0sRUFBTyxTQUNyQixJQUFJOVksTUFBTSxzRkFJWDBrQyxrQkFBa0I3UixFQUFXOU4sRUFBT1ksRUFBU3JrQixZQUc3Q29qQyxrQkFBa0I3UixFQUFXOU4sRUFBT1ksRUFBU3JrQixPQUNoRHFqQyxFQUE0QyxNQUE1QmhmLEVBQU8sZUFBb0NBLEVBQU8sY0FDbEVpZixFQUE4QyxNQUE3QmpmLEVBQU8sZ0JBQXFDQSxFQUFPLGVBQ3BFa2YsRUFBd0QsTUFBbENsZixFQUFPLHFCQUEwQ0EsRUFBTyx3QkFDN0VrZixFQUFxQixJQUFJQyxFQUFRLFNBQ2xDQyxFQUF3QyxNQUExQnBmLEVBQU8sWUFBMEIsS0FBT0EsRUFBTyxZQUU3RHFmLEVBQXdCLE1BQWxCcmYsRUFBTyxLQUEwQkEsRUFBTyxJQUU5Q3NmLEVBQThDLGtCQUExQnRmLEVBQU8sWUFBK0JBLEVBQU8sV0FFakV1ZixFQUE4QyxNQUE3QnZmLEVBQU8sZ0JBQXFDQSxFQUFPLGVBQ3BFd2YsRUFBMEMsTUFBM0J4ZixFQUFPLGNBQWtDQSxFQUFPLGFBQy9EeWYsRUFBNEMsTUFBNUJ6ZixFQUFPLGVBQW1DQSxFQUFPLGNBRWpFaVksRUFBYTdZLEtBRWI4TixFQUFVM3hCLE9BQVMsRUFBRyxNQUFNLElBQUlsQixNQUFNLDJDQUV0QzhZLEVBQU8rWixFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksTUFFdkdqTSxFQUFPLEdBQUtBLEVBQU8rWixFQUFVM3hCLE9BQVEsTUFBTSxJQUFJbEIsTUFBTSxnQ0FFckRxbEMsRUFBUy9qQyxFQUFVLEdBQUssR0FFeEJna0MsRUFBYSxJQUdILEtBRVJDLEVBQWMxUyxFQUFVOU4sUUFFUixJQUFoQndnQixFQUFtQixjQUVuQnh2QixFQUFJZ1AsRUFFZ0IsSUFBakI4TixFQUFVOWMsSUFBZUEsRUFBSThjLEVBQVUzeEIsUUFDNUM2VSxPQUlFQSxHQUFLb3VCLFNBQVN4c0IsV0FBV2tiLEdBQVksTUFBTSxJQUFJN3lCLE1BQU0sMENBQ3JEdUIsRUFBT0QsRUFBVWdrQyxJQUFlelMsRUFBVTlaLFNBQVMsT0FBUWdNLEVBQU9oUCxNQUN0RWdQLEVBQVFoUCxFQUFJLEVBRVJ3dkIsSUFBZ0JqSCxVQUFVUSxpQkFBa0IsS0FDMUMwRyxFQUFhM1MsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLE1BQzdHeWdCLEdBQWMsR0FBS0EsRUFBYTNTLEVBQVUzeEIsT0FBUzZqQixHQUErQyxJQUF0QzhOLEVBQVU5TixFQUFReWdCLEVBQWEsR0FBVSxNQUFNLElBQUl4bEMsTUFBTSxpQ0FFcEhva0MsZUFBZXZSLEVBQVc5TixFQUFPQSxFQUFReWdCLEVBQWEsU0FDbkQsSUFBSXhsQyxNQUFNLDZDQUdkeWxDLEVBQUk1UyxFQUFVOVosU0FBUyxPQUFRZ00sRUFBT0EsRUFBUXlnQixFQUFhLEdBQy9ESCxFQUFPOWpDLEdBQVFra0MsRUFDZjFnQixHQUFnQnlnQixPQUNYLEdBQUlELElBQWdCakgsVUFBVWEsY0FBZSxLQUM5Q3BELEVBQU1vSSxTQUFTbm5CLE1BQU0sSUFDekI2VixFQUFVcmEsS0FBS3VqQixFQUFLLEVBQUdoWCxFQUFPQSxFQUFRLElBQ3RDc2dCLEVBQU85akMsR0FBUSxJQUFJeXhCLFNBQVMrSSxHQUM1QmhYLEdBQWdCLFFBQ1gsR0FBSXdnQixJQUFnQmpILFVBQVVzQixnQkFBbUMsSUFBbEJ3RixFQUNwREMsRUFBTzlqQyxHQUFRLElBQUk4eUIsT0FBT3hCLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxTQUNySCxHQUFJd2dCLElBQWdCakgsVUFBVXNCLGNBQ25DeUYsRUFBTzlqQyxHQUFRc3hCLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxRQUMxRyxHQUFJd2dCLElBQWdCakgsVUFBVU8sbUJBQXNDLElBQWxCdUcsRUFDdkRDLEVBQU85akMsR0FBUSxJQUFJeWxCLFNBQVM2TCxFQUFValIsYUFBYW1ELElBQ25EQSxHQUFnQixPQUNYLEdBQUl3Z0IsSUFBZ0JqSCxVQUFVTyxpQkFDbkN3RyxFQUFPOWpDLEdBQVFzeEIsRUFBVWpSLGFBQWFtRCxHQUN0Q0EsR0FBZ0IsT0FDWCxHQUFJd2dCLElBQWdCakgsVUFBVWUsZUFBZ0IsS0FDL0N4VyxFQUFVZ0ssRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLEdBQzFHK0QsRUFBVytKLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxHQUMvR3NnQixFQUFPOWpDLEdBQVEsSUFBSTZvQixLQUFLLElBQUlsRSxPQUFPMkMsRUFBU0MsR0FBVWpELGlCQUNqRCxHQUFJMGYsSUFBZ0JqSCxVQUFVYyxrQkFBbUIsSUFDN0IsSUFBckJ2TSxFQUFVOU4sSUFBcUMsSUFBckI4TixFQUFVOU4sR0FBYyxNQUFNLElBQUkva0IsTUFBTSw4QkFDdEVxbEMsRUFBTzlqQyxHQUErQixJQUF2QnN4QixFQUFVOU4sVUFDcEIsR0FBSXdnQixJQUFnQmpILFVBQVVTLGlCQUFrQixLQUNqRDJHLEVBQVMzZ0IsRUFDVDRnQixFQUFhOVMsRUFBVTlOLEdBQVM4TixFQUFVOU4sRUFBUSxJQUFNLEVBQUk4TixFQUFVOU4sRUFBUSxJQUFNLEdBQUs4TixFQUFVOU4sRUFBUSxJQUFNLE1BQ2pINGdCLEdBQWMsR0FBS0EsRUFBYTlTLEVBQVUzeEIsT0FBUzZqQixFQUFPLE1BQU0sSUFBSS9rQixNQUFNLHdDQUc1RXFsQyxFQUFPOWpDLEdBREx5akMsRUFDYW5TLEVBQVU5cUIsTUFBTWdkLEVBQU9BLEVBQVE0Z0IsR0FFL0JqQixrQkFBa0I3UixFQUFXNlMsRUFBUS9mLEdBQVMsR0FHL0RaLEdBQWdCNGdCLE9BQ1gsR0FBSUosSUFBZ0JqSCxVQUFVVSxnQkFBaUIsS0FDaEQ0RyxFQUFVN2dCLEVBRVY4Z0IsRUFBY2hULEVBQVU5TixHQUFTOE4sRUFBVTlOLEVBQVEsSUFBTSxFQUFJOE4sRUFBVTlOLEVBQVEsSUFBTSxHQUFLOE4sRUFBVTlOLEVBQVEsSUFBTSxHQUVsSCtnQixFQUFlbmdCLEVBRWZvZ0IsRUFBWWhoQixFQUFROGdCLEtBRXBCZCxHQUFlQSxFQUFZeGpDLEdBQU8sS0FHL0IsSUFBSStYLEtBRlR3c0IsRUFBZSxHQUVEbmdCLEVBQ1ptZ0IsRUFBYXhzQixHQUFLcU0sRUFBUXJNLEdBRzVCd3NCLEVBQVksS0FBVSxLQUd4QlQsRUFBTzlqQyxHQUFRbWpDLGtCQUFrQjdSLEVBQVcrUyxFQUFTRSxHQUFjLEdBRXRDLElBQXpCalQsR0FESjlOLEdBQWdCOGdCLEdBQ00sR0FBVSxNQUFNLElBQUk3bEMsTUFBTSxvQ0FDNUMra0IsSUFBVWdoQixFQUFXLE1BQU0sSUFBSS9sQyxNQUFNLDZCQUNwQyxHQUFJdWxDLElBQWdCakgsVUFBVVksb0JBQ25DbUcsRUFBTzlqQyxRQUFRcVcsT0FDVixHQUFJMnRCLElBQWdCakgsVUFBVWdCLGVBQ25DK0YsRUFBTzlqQyxHQUFRLFVBQ1YsR0FBSWdrQyxJQUFnQmpILFVBQVV3QixlQUFnQixLQUUvQ2tHLEVBQVduVCxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksR0FFM0draEIsRUFBWXBULEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxHQUU1R21oQixFQUFVLElBQUloZ0IsT0FBTzhmLEVBQVVDLEdBR2pDWixFQUFPOWpDLEdBREw0akMsSUFBa0MsSUFBbEJDLEdBQ0hjLEVBQVFDLGdCQUFnQjlCLGtCQUFvQjZCLEVBQVFFLG1CQUFtQjlCLGlCQUFtQjRCLEVBQVFyZ0IsV0FFbEdxZ0IsT0FFWixHQUFJWCxJQUFnQmpILFVBQVV5QixxQkFBc0IsS0FFckRqZ0IsRUFBUXFrQixTQUFTbm5CLE1BQU0sSUFFM0I2VixFQUFVcmEsS0FBS3NILEVBQU8sRUFBR2lGLEVBQU9BLEVBQVEsSUFFeENBLEdBQWdCLE9BRVpzaEIsRUFBZ0IsSUFBSXhMLFdBQVcvYSxHQUVuQ3VsQixFQUFPOWpDLEdBQVE4a0MsRUFBY0MsU0FBV0QsRUFBY0MsV0FBYUQsT0FDOUQsR0FBSWQsSUFBZ0JqSCxVQUFVVyxpQkFBa0IsS0FDakRzSCxFQUFhMVQsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLEdBQzdHeWhCLEVBQWtCRCxFQUNsQjFKLEVBQVVoSyxFQUFVOU4sUUFFcEJ3aEIsRUFBYSxFQUFHLE1BQU0sSUFBSXZtQyxNQUFNLDhDQUVoQ3VtQyxFQUFhcEMsU0FBU3hzQixXQUFXa2IsR0FBWSxNQUFNLElBQUk3eUIsTUFBTSxpREFFdkMsTUFBdEI2eUIsRUFBUyxNQUFtQixJQUUxQmdLLElBQVl3QixPQUFPTCxtQkFBb0IsS0FDekN1SSxFQUFhMVQsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLElBQzVGLEVBQUcsTUFBTSxJQUFJL2tCLE1BQU0sK0RBQ25Cd21DLEVBQWtCLEVBQS9CRCxFQUFrQyxNQUFNLElBQUl2bUMsTUFBTSxpRUFDbER1bUMsRUFBYUMsRUFBa0IsRUFBRyxNQUFNLElBQUl4bUMsTUFBTSwrREFJdERxbEMsRUFBTzlqQyxHQURMMmpDLEdBQWtCRSxFQUNMdlMsRUFBVTlxQixNQUFNZ2QsRUFBT0EsRUFBUXdoQixHQUUvQixJQUFJbEksT0FBT3hMLEVBQVU5cUIsTUFBTWdkLEVBQU9BLEVBQVF3aEIsR0FBYTFKLE9BRW5FLEtBQ0RRLEVBQWdDLG9CQUFmcG1CLFdBQTZCLElBQUlBLFdBQVcsSUFBSU8sWUFBWSt1QixJQUFlLElBQUl0bEMsTUFBTXNsQyxNQUd0RzFKLElBQVl3QixPQUFPTCxtQkFBb0IsS0FDekN1SSxFQUFhMVQsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLElBQzVGLEVBQUcsTUFBTSxJQUFJL2tCLE1BQU0sK0RBQ25Cd21DLEVBQWtCLEVBQS9CRCxFQUFrQyxNQUFNLElBQUl2bUMsTUFBTSxpRUFDbER1bUMsRUFBYUMsRUFBa0IsRUFBRyxNQUFNLElBQUl4bUMsTUFBTSxtRUFJbkQrVixFQUFJLEVBQUdBLEVBQUl3d0IsRUFBWXh3QixJQUMxQnNuQixFQUFRdG5CLEdBQUs4YyxFQUFVOU4sRUFBUWhQLEdBSS9Cc3ZCLEVBQU85akMsR0FETDJqQyxHQUFrQkUsRUFDTC9ILEVBRUEsSUFBSWdCLE9BQU9oQixFQUFTUixHQUt2QzlYLEdBQWdCd2hCLE9BQ1gsR0FBSWhCLElBQWdCakgsVUFBVWlCLG1CQUFtQyxJQUFmMEYsRUFBc0IsS0FFN0VsdkIsRUFBSWdQLEVBRW9CLElBQWpCOE4sRUFBVTljLElBQWVBLEVBQUk4YyxFQUFVM3hCLFFBQzVDNlUsT0FJRUEsR0FBSzhjLEVBQVUzeEIsT0FBUSxNQUFNLElBQUlsQixNQUFNLDBDQUV2Q29pQyxFQUFTdlAsRUFBVTlaLFNBQVMsT0FBUWdNLEVBQU9oUCxPQUkvQ0EsRUFGQWdQLEVBQVFoUCxFQUFJLEVBSVksSUFBakI4YyxFQUFVOWMsSUFBZUEsRUFBSThjLEVBQVUzeEIsUUFDNUM2VSxPQUlFQSxHQUFLOGMsRUFBVTN4QixPQUFRLE1BQU0sSUFBSWxCLE1BQU0sMENBRXZDeW1DLEVBQWdCNVQsRUFBVTlaLFNBQVMsT0FBUWdNLEVBQU9oUCxHQUN0RGdQLEVBQVFoUCxFQUFJLE1BRVIyd0IsRUFBZSxJQUFJemxDLE1BQU13bEMsRUFBY3ZsQyxZQUV0QzZVLEVBQUksRUFBR0EsRUFBSTB3QixFQUFjdmxDLE9BQVE2VSxXQUM1QjB3QixFQUFjMXdCLFFBQ2YsSUFDSDJ3QixFQUFhM3dCLEdBQUssY0FHZixJQUNIMndCLEVBQWEzd0IsR0FBSyxjQUdmLElBQ0gyd0IsRUFBYTN3QixHQUFLLElBS3hCc3ZCLEVBQU85akMsR0FBUSxJQUFJNHFCLE9BQU9pVyxFQUFRc0UsRUFBYXpuQixLQUFLLFVBQy9DLEdBQUlzbUIsSUFBZ0JqSCxVQUFVaUIsbUJBQW1DLElBQWYwRixFQUFxQixLQUU1RWx2QixFQUFJZ1AsRUFFb0IsSUFBakI4TixFQUFVOWMsSUFBZUEsRUFBSThjLEVBQVUzeEIsUUFDNUM2VSxPQUlFQSxHQUFLOGMsRUFBVTN4QixPQUFRLE1BQU0sSUFBSWxCLE1BQU0sMENBRXZDMm1DLEVBQVU5VCxFQUFVOVosU0FBUyxPQUFRZ00sRUFBT2hQLE9BSWhEQSxFQUZBZ1AsRUFBUWhQLEVBQUksRUFJWSxJQUFqQjhjLEVBQVU5YyxJQUFlQSxFQUFJOGMsRUFBVTN4QixRQUM1QzZVLE9BSUVBLEdBQUs4YyxFQUFVM3hCLE9BQVEsTUFBTSxJQUFJbEIsTUFBTSwwQ0FFdkM0bUMsRUFBaUIvVCxFQUFVOVosU0FBUyxPQUFRZ00sRUFBT2hQLEdBRXZEZ1AsRUFBUWhQLEVBQUksRUFFWnN2QixFQUFPOWpDLEdBQVEsSUFBSWt5QixPQUFPa1QsRUFBU0MsUUFDOUIsR0FBSXJCLElBQWdCakgsVUFBVW9CLGlCQUFrQixLQUNqRG1ILEVBQWNoVSxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksTUFFOUc4aEIsR0FBZSxHQUFLQSxFQUFjaFUsRUFBVTN4QixPQUFTNmpCLEdBQWdELElBQXZDOE4sRUFBVTlOLEVBQVE4aEIsRUFBYyxHQUFVLE1BQU0sSUFBSTdtQyxNQUFNLDZCQUU1SHFsQyxFQUFPOWpDLEdBQVFzeEIsRUFBVTlaLFNBQVMsT0FBUWdNLEVBQU9BLEVBQVE4aEIsRUFBYyxHQUN2RTloQixHQUFnQjhoQixPQUNYLEdBQUl0QixJQUFnQmpILFVBQVV1QixvQkFBcUIsS0FDcERpSCxFQUFZalUsRUFBVTlOLEtBQVc4TixFQUFVOU4sTUFBWSxFQUFJOE4sRUFBVTlOLE1BQVksR0FBSzhOLEVBQVU5TixNQUFZLEdBRTVHZ2lCLEVBQWFsVSxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksR0FFakhzZ0IsRUFBTzlqQyxHQUFRLElBQUl5bkIsVUFBVThkLEVBQVdDLFFBQ25DLEdBQUl4QixJQUFnQmpILFVBQVUwQixrQkFDbkNxRixFQUFPOWpDLEdBQVEsSUFBSTQ1QixhQUNkLEdBQUlvSyxJQUFnQmpILFVBQVUyQixrQkFDbkNvRixFQUFPOWpDLEdBQVEsSUFBSWs2QixhQUNkLEdBQUk4SixJQUFnQmpILFVBQVVtQixlQUFnQixLQUMvQ3VILEVBQWVuVSxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksTUFFL0dpaUIsR0FBZ0IsR0FBS0EsRUFBZW5VLEVBQVUzeEIsT0FBUzZqQixHQUFpRCxJQUF4QzhOLEVBQVU5TixFQUFRaWlCLEVBQWUsR0FBVSxNQUFNLElBQUlobkMsTUFBTSxpQ0FDM0hpbkMsRUFBaUJwVSxFQUFVOVosU0FBUyxPQUFRZ00sRUFBT0EsRUFBUWlpQixFQUFlLE1BRTFFckMsS0FFRUMsRUFBZ0IsS0FDZHRYLEVBQU91WCxFQUFzQkMsRUFBTW1DLEdBQWtCQSxFQUV6RDVCLEVBQU85akMsR0FBUTJsQyxvQkFBb0IzQyxjQUFlalgsRUFBTTJaLEVBQWdCNUIsUUFFeEVBLEVBQU85akMsR0FBUTRsQyxZQUFZRixRQUc3QjVCLEVBQU85akMsR0FBUSxJQUFJOGhCLEtBQUs0akIsR0FJMUJsaUIsR0FBZ0JpaUIsT0FDWCxHQUFJekIsSUFBZ0JqSCxVQUFVcUIsdUJBQXdCLEtBQ3ZEeUgsRUFBWXZVLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxNQUU1R3FpQixFQUFZLFNBQ1IsSUFBSXBuQyxNQUFNLCtEQUlkcW5DLEdBQWV4VSxFQUFVOU4sS0FBVzhOLEVBQVU5TixNQUFZLEVBQUk4TixFQUFVOU4sTUFBWSxHQUFLOE4sRUFBVTlOLE1BQVksTUFHL0dzaUIsSUFBZ0IsR0FBS0EsR0FBZXhVLEVBQVUzeEIsT0FBUzZqQixHQUFpRCxJQUF4QzhOLEVBQVU5TixFQUFRc2lCLEdBQWUsR0FBVSxNQUFNLElBQUlybkMsTUFBTSxpQ0FFM0hzbkMsR0FBa0J6VSxFQUFVOVosU0FBUyxPQUFRZ00sRUFBT0EsRUFBUXNpQixHQUFlLEdBSzNFRSxHQUZKeGlCLEdBQWdCc2lCLEdBSVpHLEdBQWUzVSxFQUFVOU4sR0FBUzhOLEVBQVU5TixFQUFRLElBQU0sRUFBSThOLEVBQVU5TixFQUFRLElBQU0sR0FBSzhOLEVBQVU5TixFQUFRLElBQU0sR0FHbkgwaUIsR0FBYy9DLGtCQUFrQjdSLEVBQVcwVSxHQUFTNWhCLEdBQVMsTUFFakVaLEdBQWdCeWlCLEdBRVpKLEVBQVksRUFBUUksR0FBZUgsU0FDL0IsSUFBSXJuQyxNQUFNLDREQUlGLEVBQVF3bkMsR0FBZUgsR0FBbkNELFFBQ0ksSUFBSXBuQyxNQUFNLCtEQUlkMmtDLEVBQWUsSUFFYkMsRUFBZ0IsS0FDZDhDLEdBQVE3QyxFQUFzQkMsRUFBTXdDLElBQW1CQSxHQUczRGpDLEVBQU85akMsR0FBUTJsQyxvQkFBb0IzQyxjQUFlbUQsR0FBT0osR0FBaUJqQyxRQUUxRUEsRUFBTzlqQyxHQUFRNGxDLFlBQVlHLElBRzdCakMsRUFBTzlqQyxHQUFNbXpCLE1BQVErUyxRQUVyQnBDLEVBQU85akMsR0FBUSxJQUFJOGhCLEtBQUtpa0IsR0FBaUJHLFFBRXRDLENBQUEsR0FBSWxDLElBQWdCakgsVUFBVWtCLDBCQXlCN0IsSUFBSXgvQixNQUFNLDhCQUFnQ3VsQyxFQUFZeHNCLFNBQVMsSUFBTSxtQkFBcUJ4WCxFQUFPLGdEQXZCbkdvbUMsR0FBZTlVLEVBQVU5TixLQUFXOE4sRUFBVTlOLE1BQVksRUFBSThOLEVBQVU5TixNQUFZLEdBQUs4TixFQUFVOU4sTUFBWSxNQUcvRzRpQixJQUFnQixHQUFLQSxHQUFlOVUsRUFBVTN4QixPQUFTNmpCLEdBQWlELElBQXhDOE4sRUFBVTlOLEVBQVE0aUIsR0FBZSxHQUFVLE1BQU0sSUFBSTNuQyxNQUFNLGlDQUUxSG9rQyxlQUFldlIsRUFBVzlOLEVBQU9BLEVBQVE0aUIsR0FBZSxTQUNyRCxJQUFJM25DLE1BQU0sNkNBR2R1aUMsR0FBWTFQLEVBQVU5WixTQUFTLE9BQVFnTSxFQUFPQSxFQUFRNGlCLEdBQWUsR0FFekU1aUIsR0FBZ0I0aUIsT0FFWkMsR0FBWXpELFNBQVNubkIsTUFBTSxJQUMvQjZWLEVBQVVyYSxLQUFLb3ZCLEdBQVcsRUFBRzdpQixFQUFPQSxFQUFRLFFBRXhDOGlCLEdBQU8sSUFBSTdVLFNBQVM0VSxJQUd4QjdpQixHQUFnQixHQUVoQnNnQixFQUFPOWpDLEdBQVEsSUFBSWc3QixPQUFPZ0csR0FBV3NGLFFBT3JDL3VCLEdBQVNpTSxFQUFRNlksRUFBWSxJQUMzQnQ4QixFQUFTLE1BQU0sSUFBSXRCLE1BQU0sNEJBQ3ZCLElBQUlBLE1BQU0sMkJBSWRpaEMsR0FBYWxnQyxPQUFPdWtCLEtBQUsrZixHQUFRMUUsT0FBTyxTQUFVdkcsVUFDN0NBLEVBQUV3RyxXQUFXLE9BRWxCM08sSUFBUSxLQUNaZ1AsR0FBVy9iLFFBQVEsU0FBVWtWLElBQ2dCLElBQXZDLENBQUMsT0FBUSxNQUFPLE9BQU94Z0IsUUFBUXdnQixLQUFXbkksSUFBUSxNQUduREEsR0FBTyxPQUFPb1QsS0FFRSxNQUFqQkEsRUFBTSxLQUFxQyxNQUFsQkEsRUFBTSxZQVE1QkEsTUFQRDdzQixHQUFPelgsT0FBT283QixPQUFPLEdBQUlrSixpQkFDdEI3c0IsR0FBSzRqQixZQUNMNWpCLEdBQUs2akIsV0FDTDdqQixHQUFLOGpCLElBQ0wsSUFBSUMsT0FBTzhJLEVBQU9qSixLQUFNaUosRUFBT2hKLElBQUtnSixFQUFPL0ksS0FBTyxLQUFNOWpCLGFBYTFEMHVCLG9CQUFvQjNDLGNBQWVqWCxLQUFNMlosZUFBZ0I1QixZQUU1RHBsQyxNQUFRLFlBRWUsTUFBdkJza0MsY0FBY2pYLFFBQ2hCalgsS0FBSyxXQUFhNHdCLGdCQUNsQjFDLGNBQWNqWCxNQUFRcnRCLE9BSWpCc2tDLGNBQWNqWCxNQUFNd2EsS0FBS3pDLGlCQVV6QjhCLFlBQVlGLG9CQUVmaG5DLE1BQVEsWUFFWm9XLEtBQUssV0FBYTR3QixnQkFDWGhuQyxVQUdMOG5DLGFBQWV2RCx1QkFpQ1Z3RCxZQUFZblYsRUFBV3BZLEVBQVF3dEIsRUFBUUMsRUFBTUMsT0FDaEQ3eEIsRUFDQWlELEVBQ0E2dUIsRUFBaUIsUUFBWEgsRUFDTkksRUFBZ0IsRUFBVEYsRUFBYUQsRUFBTyxFQUMzQkksR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCRSxHQUFTLEVBQ1R6eUIsRUFBSXF5QixFQUFNLEVBQUlELEVBQVMsRUFDdkIzWSxFQUFJNFksRUFBTSxHQUFLLEVBQ2YzQyxFQUFJNVMsRUFBVXBZLEVBQVMxRSxPQUMzQkEsR0FBS3laLEVBQ0xsWixFQUFJbXZCLEdBQUssSUFBTStDLEdBQVMsRUFDeEIvQyxLQUFPK0MsRUFDUEEsR0FBU0gsRUFFTSxFQUFSRyxFQUFXbHlCLEVBQVEsSUFBSkEsRUFBVXVjLEVBQVVwWSxFQUFTMUUsR0FBSUEsR0FBS3laLEVBQUdnWixHQUFTLE9BR3hFanZCLEVBQUlqRCxHQUFLLElBQU1reUIsR0FBUyxFQUN4Qmx5QixLQUFPa3lCLEVBQ1BBLEdBQVNOLEVBRU0sRUFBUk0sRUFBV2p2QixFQUFRLElBQUpBLEVBQVVzWixFQUFVcFksRUFBUzFFLEdBQUlBLEdBQUt5WixFQUFHZ1osR0FBUyxNQUc5RCxJQUFObHlCLEVBQ0ZBLEVBQUksRUFBSWl5QixNQUNILENBQUEsR0FBSWp5QixJQUFNZ3lCLFNBQ1IvdUIsRUFBSWt2QixJQUFxQi9rQixFQUFBQSxHQUFkK2hCLEdBQUssRUFBSSxHQUUzQmxzQixHQUFReUMsS0FBS21GLElBQUksRUFBRyttQixHQUNwQjV4QixHQUFRaXlCLFNBR0Y5QyxHQUFLLEVBQUksR0FBS2xzQixFQUFJeUMsS0FBS21GLElBQUksRUFBRzdLLEVBQUk0eEIsWUFHbkNRLGFBQWE3VixFQUFXNXlCLEVBQU93YSxFQUFRd3RCLEVBQVFDLEVBQU1DLE9BQ3hEN3hCLEVBQ0FpRCxFQUNBZ0MsRUFDQTZzQixFQUFpQixRQUFYSCxFQUNOSSxFQUFnQixFQUFURixFQUFhRCxFQUFPLEVBQzNCSSxHQUFRLEdBQUtELEdBQVEsRUFDckJFLEVBQVFELEdBQVEsRUFDaEJLLEVBQWMsS0FBVFQsRUFBY2xzQixLQUFLbUYsSUFBSSxHQUFJLElBQU1uRixLQUFLbUYsSUFBSSxHQUFJLElBQU0sRUFDekRwTCxFQUFJcXlCLEVBQU1ELEVBQVMsRUFBSSxFQUN2QjNZLEVBQUk0WSxHQUFPLEVBQUksRUFDZjNDLEVBQUl4bEMsRUFBUSxHQUFlLElBQVZBLEdBQWUsRUFBSUEsRUFBUSxFQUFJLEVBQUksTUFDeERBLEVBQVErYixLQUFLNHNCLElBQUkzb0MsR0FFYnlaLE1BQU16WixJQUFVQSxJQUFVeWpCLEVBQUFBLEdBQzVCbkssRUFBSUcsTUFBTXpaLEdBQVMsRUFBSSxFQUN2QnFXLEVBQUlneUIsSUFFSmh5QixFQUFJMEYsS0FBS2lHLE1BQU1qRyxLQUFLb1UsSUFBSW53QixHQUFTK2IsS0FBSzZzQixLQUVsQzVvQyxHQUFTc2IsRUFBSVMsS0FBS21GLElBQUksR0FBSTdLLElBQU0sSUFDbENBLElBQ0FpRixHQUFLLEdBU1UsSUFMZnRiLEdBRGUsR0FBYnFXLEVBQUlpeUIsRUFDR0ksRUFBS3B0QixFQUVMb3RCLEVBQUszc0IsS0FBS21GLElBQUksRUFBRyxFQUFJb25CLElBR3BCaHRCLElBQ1ZqRixJQUNBaUYsR0FBSyxHQUdVK3NCLEdBQWJoeUIsRUFBSWl5QixHQUNOaHZCLEVBQUksRUFDSmpELEVBQUlneUIsR0FDa0IsR0FBYmh5QixFQUFJaXlCLEdBQ2JodkIsR0FBS3RaLEVBQVFzYixFQUFJLEdBQUtTLEtBQUttRixJQUFJLEVBQUcrbUIsR0FDbEM1eEIsR0FBUWl5QixJQUVSaHZCLEVBQUl0WixFQUFRK2IsS0FBS21GLElBQUksRUFBR29uQixFQUFRLEdBQUt2c0IsS0FBS21GLElBQUksRUFBRyttQixHQUNqRDV4QixFQUFJLElBSUpvRCxNQUFNelosS0FBUXNaLEVBQUksR0FFUCxHQUFSMnVCLEdBQ0xyVixFQUFVcFksRUFBUzFFLEdBQVMsSUFBSndELEVBQ3hCeEQsR0FBS3laLEVBQ0xqVyxHQUFLLElBQ0wydUIsR0FBUSxNQUdWNXhCLEVBQUlBLEdBQUs0eEIsRUFBTzN1QixFQUNaRyxNQUFNelosS0FBUXFXLEdBQUssR0FDdkIreEIsR0FBUUgsRUFFTSxFQUFQRyxHQUNMeFYsRUFBVXBZLEVBQVMxRSxHQUFTLElBQUpPLEVBQ3hCUCxHQUFLeVosRUFDTGxaLEdBQUssSUFDTCt4QixHQUFRLEVBR1Z4VixFQUFVcFksRUFBUzFFLEVBQUl5WixJQUFVLElBQUppVyxNQUczQnFELGFBQWUsQ0FDakJkLFlBQWFBLFlBQ2JVLGFBQWNBLHVCQUdQSyxVQUFVbm9DLFVBQWtGbW9DLFVBQXJELG1CQUFYeHJCLFFBQW9ELFdBQTNCMkosUUFBTzNKLE9BQU80SixVQUFxQyxTQUFpQnZtQixrQkFBcUJBLElBQTZCLFNBQWlCQSxVQUFjQSxHQUF5QixtQkFBWDJjLFFBQXlCM2MsRUFBSUMsY0FBZ0IwYyxRQUFVM2MsSUFBUTJjLE9BQU92YyxVQUFZLGlCQUFrQkosS0FBMkJBLE9BRTVWb29DLFNBQVd2d0IsT0FBTzdCLE9BQ2xCcXlCLGVBQWlCSCxhQUFhSixhQUM5QlEsMkJBQTZCeGYsTUFBTU4seUJBQ25DK2YsU0FBVyxPQUVYQyxXQUFhLElBQUlDLElBQUksQ0FBQyxNQUFPLE9BQVEsTUFBTyxpQkFFNUNDLFNBQVcsU0FBZ0I5WixTQUNMLFdBQWpCdVosVUFBVXZaLElBQXlELGtCQUF0Q3p1QixPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUtzWixJQUdqRStaLFdBQWEsU0FBa0IvWixTQUNZLG9CQUF0Q3p1QixPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUtzWixhQUcvQmdhLGdCQUFnQjNXLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPempCLEdBRXJEdXhCLEVBQVU5TixLQUFXdVosVUFBVVEscUJBRTNCMkssRUFBd0Jub0MsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEdBREE5TixFQUFRQSxFQUFRMGtCLEVBQXVCLEdBQ3JCLEdBQUssTUFFbkIzd0IsRUFBTytaLEVBQVUxYSxNQUFNbFksRUFBTzhrQixFQUFRLEVBQUcsZUFFN0M4TixFQUFVOU4sRUFBUSxHQUFLak0sRUFBTyxHQUFLLEdBQUssSUFDeEMrWixFQUFVOU4sRUFBUSxHQUFLak0sRUFBTyxHQUFLLEdBQUssSUFDeEMrWixFQUFVOU4sRUFBUSxHQUFLak0sRUFBTyxHQUFLLEVBQUksSUFDdkMrWixFQUFVOU4sR0FBU2pNLEVBQU8sRUFBSSxJQUU5QmlNLEVBQVFBLEVBQVEsRUFBSWpNLEVBRXBCK1osRUFBVTlOLEtBQVcsRUFDZEEsV0FHQTJrQixnQkFBZ0I3VyxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixNQUVqRDBhLEtBQUtpRyxNQUFNaGlCLEtBQVdBLEdBQVNBLEdBQVNxK0IsVUFBVU0sWUFBYzMrQixHQUFTcStCLFVBQVVLLGNBR2pGMStCLEdBQVNxK0IsVUFBVUUsZ0JBQWtCditCLEdBQVNxK0IsVUFBVUMsZUFFMUQxTCxFQUFVOU4sS0FBV3VaLFVBQVVzQixjQUkvQjdhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxFQUVyQjhOLEVBQVU5TixLQUFtQixJQUFSOWtCLEVBQ3JCNHlCLEVBQVU5TixLQUFXOWtCLEdBQVMsRUFBSSxJQUNsQzR5QixFQUFVOU4sS0FBVzlrQixHQUFTLEdBQUssSUFDbkM0eUIsRUFBVTlOLEtBQVc5a0IsR0FBUyxHQUFLLFNBQzlCLEdBQUlBLEdBQVNxK0IsVUFBVU0sWUFBYzMrQixHQUFTcStCLFVBQVVLLFdBQVksQ0FFekU5TCxFQUFVOU4sS0FBV3VaLFVBQVVPLGlCQUsvQjlaLEdBSDZCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFJbkU4TixFQUFVOU4sS0FBVyxFQUVyQmtrQixlQUFlcFcsRUFBVzV5QixFQUFPOGtCLEVBQU8sU0FBVSxHQUFJLEdBRXREQSxHQUFnQixNQUNYLENBRUw4TixFQUFVOU4sS0FBV3VaLFVBQVV3QixlQUsvQi9hLEdBSDhCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFJcEU4TixFQUFVOU4sS0FBVyxNQUNqQjRrQixFQUFVempCLE9BQU8wQyxXQUFXM29CLEdBQzVCNG9CLEVBQVU4Z0IsRUFBUWpULGFBQ2xCNU4sRUFBVzZnQixFQUFRQyxjQUV2Qi9XLEVBQVU5TixLQUFxQixJQUFWOEQsRUFDckJnSyxFQUFVOU4sS0FBVzhELEdBQVcsRUFBSSxJQUNwQ2dLLEVBQVU5TixLQUFXOEQsR0FBVyxHQUFLLElBQ3JDZ0ssRUFBVTlOLEtBQVc4RCxHQUFXLEdBQUssSUFFckNnSyxFQUFVOU4sS0FBc0IsSUFBWCtELEVBQ3JCK0osRUFBVTlOLEtBQVcrRCxHQUFZLEVBQUksSUFDckMrSixFQUFVOU4sS0FBVytELEdBQVksR0FBSyxJQUN0QytKLEVBQVU5TixLQUFXK0QsR0FBWSxHQUFLLFNBSXhDK0osRUFBVTlOLEtBQVd1WixVQUFVTyxpQkFLL0I5WixHQUg4QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBSXBFOE4sRUFBVTlOLEtBQVcsRUFFckJra0IsZUFBZXBXLEVBQVc1eUIsRUFBTzhrQixFQUFPLFNBQVUsR0FBSSxHQUV0REEsR0FBZ0IsU0FHWEEsV0FHQThrQixjQUFjaFgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU96akIsVUFFbkR1eEIsRUFBVTlOLEtBQVd1WixVQUFVZ0IsZUFJL0J2YSxHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsRUFDZEEsV0FHQStrQixpQkFBaUJqWCxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixVQUV0RHV4QixFQUFVOU4sS0FBV3VaLFVBQVVjLGtCQUkvQnJhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxFQUVyQjhOLEVBQVU5TixLQUFXOWtCLEVBQVEsRUFBSSxFQUMxQjhrQixXQUdBZ2xCLGNBQWNsWCxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixHQUVuRHV4QixFQUFVOU4sS0FBV3VaLFVBQVVlLGVBSS9CdGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLE1BRWpCaWxCLEVBQWM5akIsT0FBTzBDLFdBQVczb0IsRUFBTW9xQixXQUN0Q3hCLEVBQVVtaEIsRUFBWXRULGFBQ3RCNU4sRUFBV2toQixFQUFZSixxQkFFM0IvVyxFQUFVOU4sS0FBcUIsSUFBVjhELEVBQ3JCZ0ssRUFBVTlOLEtBQVc4RCxHQUFXLEVBQUksSUFDcENnSyxFQUFVOU4sS0FBVzhELEdBQVcsR0FBSyxJQUNyQ2dLLEVBQVU5TixLQUFXOEQsR0FBVyxHQUFLLElBRXJDZ0ssRUFBVTlOLEtBQXNCLElBQVgrRCxFQUNyQitKLEVBQVU5TixLQUFXK0QsR0FBWSxFQUFJLElBQ3JDK0osRUFBVTlOLEtBQVcrRCxHQUFZLEdBQUssSUFDdEMrSixFQUFVOU4sS0FBVytELEdBQVksR0FBSyxJQUMvQi9ELFdBR0FrbEIsZ0JBQWdCcFgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU96akIsTUFFckR1eEIsRUFBVTlOLEtBQVd1WixVQUFVaUIsaUJBSS9CeGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLEVBRWpCOWtCLEVBQU1taUMsUUFBMEMsTUFBaENuaUMsRUFBTW1pQyxPQUFPcGpCLE1BQU1tcUIsZ0JBQy9CbnBDLE1BQU0sU0FBV0MsRUFBTW1pQyxPQUFTLHVDQUl4Q3JkLEdBQWdCOE4sRUFBVTFhLE1BQU1sWSxFQUFNbWlDLE9BQVFyZCxFQUFPLFFBRXJEOE4sRUFBVTlOLEtBQVcsRUFFakI5a0IsRUFBTWlxQyxhQUFZclgsRUFBVTlOLEtBQVcsS0FFdkM5a0IsRUFBTXVXLFNBQVFxYyxFQUFVOU4sS0FBVyxLQUVuQzlrQixFQUFNa3FDLFlBQVd0WCxFQUFVOU4sS0FBVyxLQUcxQzhOLEVBQVU5TixLQUFXLEVBQ2RBLFdBR0FxbEIsb0JBQW9CdlgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU96akIsTUFFekR1eEIsRUFBVTlOLEtBQVd1WixVQUFVaUIsaUJBSS9CeGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLEVBRWdCLE1BQWpDOWtCLEVBQU1zekIsUUFBUXZVLE1BQU1tcUIsZ0JBR2hCbnBDLE1BQU0sV0FBYUMsRUFBTXN6QixRQUFVLHVDQUkzQ3hPLEdBQWdCOE4sRUFBVTFhLE1BQU1sWSxFQUFNc3pCLFFBQVN4TyxFQUFPLFFBRXREOE4sRUFBVTlOLEtBQVcsRUFFckJBLEdBQWdCOE4sRUFBVTFhLE1BQU1sWSxFQUFNMGxCLFFBQVFtSixNQUFNLElBQUl1RSxPQUFPcFUsS0FBSyxJQUFLOEYsRUFBTyxRQUVoRjhOLEVBQVU5TixLQUFXLEVBQ2RBLFdBR0FzbEIsZ0JBQWdCeFgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU96akIsVUFFdkMsT0FBVnJCLEVBQ0Y0eUIsRUFBVTlOLEtBQVd1WixVQUFVZ0IsZUFDRixXQUFwQnIvQixFQUFNK2lDLFVBQ2ZuUSxFQUFVOU4sS0FBV3VaLFVBQVUwQixrQkFFL0JuTixFQUFVOU4sS0FBV3VaLFVBQVUyQixrQkFNakNsYixHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsRUFDZEEsV0FHQXVsQixrQkFBa0J6WCxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixNQUV2RHV4QixFQUFVOU4sS0FBV3VaLFVBQVVhLGNBSS9CcGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLEVBRUcsaUJBQWI5a0IsRUFBTTJILEdBQ2ZpckIsRUFBVTFhLE1BQU1sWSxFQUFNMkgsR0FBSW1kLEVBQU8sY0FDNUIsQ0FBQSxJQUFJOWtCLEVBQU0ySCxLQUFNM0gsRUFBTTJILEdBQUc0USxXQUd4QixJQUFJakIsVUFBVSxXQUFhNFQsS0FBS0MsVUFBVW5yQixHQUFTLDZCQUZ6REEsRUFBTTJILEdBQUc0USxLQUFLcWEsRUFBVzlOLEVBQU8sRUFBRyxXQU05QkEsRUFBUSxZQUdSd2xCLGdCQUFnQjFYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPempCLEdBRXJEdXhCLEVBQVU5TixLQUFXdVosVUFBVVcsaUJBSS9CbGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLE1BRWpCak0sRUFBTzdZLEVBQU1pQixjQUVqQjJ4QixFQUFVOU4sS0FBa0IsSUFBUGpNLEVBQ3JCK1osRUFBVTlOLEtBQVdqTSxHQUFRLEVBQUksSUFDakMrWixFQUFVOU4sS0FBV2pNLEdBQVEsR0FBSyxJQUNsQytaLEVBQVU5TixLQUFXak0sR0FBUSxHQUFLLElBRWxDK1osRUFBVTlOLEtBQVd1WixVQUFVdkIsNEJBRS9COThCLEVBQU11WSxLQUFLcWEsRUFBVzlOLEVBQU8sRUFBR2pNLEdBRWhDaU0sR0FBZ0JqTSxXQUlUMHhCLGdCQUFnQjNYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPMGxCLEVBQVcvZCxFQUFPZ2UsRUFBb0JDLEVBQWlCcnBDLEVBQVNzcEMsT0FDaEgsSUFBSTcwQixFQUFJLEVBQUdBLEVBQUk2MEIsRUFBSzFwQyxPQUFRNlUsT0FDM0I2MEIsRUFBSzcwQixLQUFPOVYsRUFBTyxNQUFNLElBQUlELE1BQU0sOEJBSXpDNHFDLEVBQUt2cEMsS0FBS3BCLEdBRVY0eUIsRUFBVTlOLEtBQVc5akIsTUFBTUssUUFBUXJCLEdBQVNxK0IsVUFBVVUsZ0JBQWtCVixVQUFVUyxpQkFJbEZoYSxHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsTUFDakI4WSxFQUFXZ04sY0FBY2hZLEVBQVc1eUIsRUFBT3dxQyxFQUFXMWxCLEVBQU8ySCxFQUFRLEVBQUdnZSxFQUFvQkMsRUFBaUJDLFVBRWpIQSxFQUFLcGMsTUFDRXFQLFdBR0FpTixvQkFBb0JqWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixVQUN6RHV4QixFQUFVOU4sS0FBV3VaLFVBQVV5QixxQkFJL0JoYixHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsRUFFckI5a0IsRUFBTTZmLE1BQU10SCxLQUFLcWEsRUFBVzlOLEVBQU8sRUFBRyxJQUMvQkEsRUFBUSxZQUdSZ21CLGNBQWNsWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixHQUVuRHV4QixFQUFVOU4sS0FBK0IsU0FBcEI5a0IsRUFBTStpQyxVQUF1QjFFLFVBQVV3QixlQUFpQnhCLFVBQVV1QixvQkFJdkY5YSxHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsTUFFakI4RCxFQUFVNW9CLEVBQU15MkIsYUFDaEI1TixFQUFXN29CLEVBQU0ycEMscUJBRXJCL1csRUFBVTlOLEtBQXFCLElBQVY4RCxFQUNyQmdLLEVBQVU5TixLQUFXOEQsR0FBVyxFQUFJLElBQ3BDZ0ssRUFBVTlOLEtBQVc4RCxHQUFXLEdBQUssSUFDckNnSyxFQUFVOU4sS0FBVzhELEdBQVcsR0FBSyxJQUVyQ2dLLEVBQVU5TixLQUFzQixJQUFYK0QsRUFDckIrSixFQUFVOU4sS0FBVytELEdBQVksRUFBSSxJQUNyQytKLEVBQVU5TixLQUFXK0QsR0FBWSxHQUFLLElBQ3RDK0osRUFBVTlOLEtBQVcrRCxHQUFZLEdBQUssSUFDL0IvRCxXQUdBaW1CLGVBQWVuWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixVQUVwRHV4QixFQUFVOU4sS0FBV3VaLFVBQVVzQixjQUkvQjdhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxFQUVyQjhOLEVBQVU5TixLQUFtQixJQUFSOWtCLEVBQ3JCNHlCLEVBQVU5TixLQUFXOWtCLEdBQVMsRUFBSSxJQUNsQzR5QixFQUFVOU4sS0FBVzlrQixHQUFTLEdBQUssSUFDbkM0eUIsRUFBVTlOLEtBQVc5a0IsR0FBUyxHQUFLLElBQzVCOGtCLFdBR0FrbUIsZ0JBQWdCcFksRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU96akIsVUFFckR1eEIsRUFBVTlOLEtBQVd1WixVQUFVTyxpQkFJL0I5WixHQUY0QnpqQixFQUFnRHV4QixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxTQUFsRThOLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFFBR2xFOE4sRUFBVTlOLEtBQVcsRUFFckJra0IsZUFBZXBXLEVBQVc1eUIsRUFBTUEsTUFBTzhrQixFQUFPLFNBQVUsR0FBSSxHQUU1REEsR0FBZ0IsV0FJVG1tQixrQkFBa0JyWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBTzBsQixFQUFXL2QsRUFBT3ByQixHQUN6RXV4QixFQUFVOU4sS0FBV3VaLFVBQVVtQixlQUkvQjFhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxNQUVqQmtpQixFQUFpQmlDLDJCQUEyQmpwQyxHQUU1QzZZLEVBQU8rWixFQUFVMWEsTUFBTTh1QixFQUFnQmxpQixFQUFRLEVBQUcsUUFBVSxTQUVoRThOLEVBQVU5TixHQUFnQixJQUFQak0sRUFDbkIrWixFQUFVOU4sRUFBUSxHQUFLak0sR0FBUSxFQUFJLElBQ25DK1osRUFBVTlOLEVBQVEsR0FBS2pNLEdBQVEsR0FBSyxJQUNwQytaLEVBQVU5TixFQUFRLEdBQUtqTSxHQUFRLEdBQUssSUFFcENpTSxFQUFRQSxFQUFRLEVBQUlqTSxFQUFPLEVBRTNCK1osRUFBVTlOLEtBQVcsRUFDZEEsV0FHQW9tQixjQUFjdFksRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU8wbEIsRUFBVy9kLEVBQU9nZSxFQUFvQkMsRUFBaUJycEMsTUFDdEdyQixFQUFNeTBCLE9BQW9DLFdBQTNCcVUsVUFBVTlvQyxFQUFNeTBCLE9BQXFCLENBRXREN0IsRUFBVTlOLEtBQVd1WixVQUFVcUIsdUJBSS9CNWEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLE1BRWpCNlksRUFBYTdZLEVBR2JraUIsRUFBdUMsaUJBQWZobkMsRUFBTW9qQixLQUFvQnBqQixFQUFNb2pCLEtBQU9wakIsRUFBTW9qQixLQUFLdEssV0FFOUVnTSxHQUFnQixNQUVacW1CLEVBQVd2WSxFQUFVMWEsTUFBTTh1QixFQUFnQmxpQixFQUFRLEVBQUcsUUFBVSxFQUVwRThOLEVBQVU5TixHQUFvQixJQUFYcW1CLEVBQ25CdlksRUFBVTlOLEVBQVEsR0FBS3FtQixHQUFZLEVBQUksSUFDdkN2WSxFQUFVOU4sRUFBUSxHQUFLcW1CLEdBQVksR0FBSyxJQUN4Q3ZZLEVBQVU5TixFQUFRLEdBQUtxbUIsR0FBWSxHQUFLLElBRXhDdlksRUFBVTlOLEVBQVEsRUFBSXFtQixFQUFXLEdBQUssRUFFdENybUIsRUFBUUEsRUFBUXFtQixFQUFXLE1BR3ZCdk4sRUFBV2dOLGNBQWNoWSxFQUFXNXlCLEVBQU15MEIsTUFBTytWLEVBQVcxbEIsRUFBTzJILEVBQVEsRUFBR2dlLEVBQW9CQyxHQUN0RzVsQixFQUFROFksRUFBVyxNQUVmdUosRUFBWXZKLEVBQVdELEVBRTNCL0ssRUFBVStLLEtBQTRCLElBQVp3SixFQUMxQnZVLEVBQVUrSyxLQUFnQndKLEdBQWEsRUFBSSxJQUMzQ3ZVLEVBQVUrSyxLQUFnQndKLEdBQWEsR0FBSyxJQUM1Q3ZVLEVBQVUrSyxLQUFnQndKLEdBQWEsR0FBSyxJQUU1Q3ZVLEVBQVU5TixLQUFXLE1BQ2hCLENBQ0w4TixFQUFVOU4sS0FBV3VaLFVBQVVtQixlQUsvQjFhLEdBSDhCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFJcEU4TixFQUFVOU4sS0FBVyxNQUVqQnVpQixFQUFrQnJuQyxFQUFNb2pCLEtBQUt0SyxXQUc3QkQsRUFBTytaLEVBQVUxYSxNQUFNbXZCLEVBQWlCdmlCLEVBQVEsRUFBRyxRQUFVLEVBRWpFOE4sRUFBVTlOLEdBQWdCLElBQVBqTSxFQUNuQitaLEVBQVU5TixFQUFRLEdBQUtqTSxHQUFRLEVBQUksSUFDbkMrWixFQUFVOU4sRUFBUSxHQUFLak0sR0FBUSxHQUFLLElBQ3BDK1osRUFBVTlOLEVBQVEsR0FBS2pNLEdBQVEsR0FBSyxJQUVwQ2lNLEVBQVFBLEVBQVEsRUFBSWpNLEVBQU8sRUFFM0IrWixFQUFVOU4sS0FBVyxTQUdoQkEsV0FHQXNtQixnQkFBZ0J4WSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsRUFBT3pqQixHQUVyRHV4QixFQUFVOU4sS0FBV3VaLFVBQVVXLGlCQUkvQmxhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxNQUVqQmpkLEVBQU83SCxFQUFNQSxPQUFNLEdBRW5CNlksRUFBTzdZLEVBQU0rOEIsZ0JBRWIvOEIsRUFBTTY4QixXQUFhdUIsT0FBT0wscUJBQW9CbGxCLEdBQWMsR0FFaEUrWixFQUFVOU4sS0FBa0IsSUFBUGpNLEVBQ3JCK1osRUFBVTlOLEtBQVdqTSxHQUFRLEVBQUksSUFDakMrWixFQUFVOU4sS0FBV2pNLEdBQVEsR0FBSyxJQUNsQytaLEVBQVU5TixLQUFXak0sR0FBUSxHQUFLLElBRWxDK1osRUFBVTlOLEtBQVc5a0IsRUFBTTY4QixTQUV2Qjc4QixFQUFNNjhCLFdBQWF1QixPQUFPTCxxQkFDNUJsbEIsR0FBYyxFQUNkK1osRUFBVTlOLEtBQWtCLElBQVBqTSxFQUNyQitaLEVBQVU5TixLQUFXak0sR0FBUSxFQUFJLElBQ2pDK1osRUFBVTlOLEtBQVdqTSxHQUFRLEdBQUssSUFDbEMrWixFQUFVOU4sS0FBV2pNLEdBQVEsR0FBSyxLQUlwQ2hSLEVBQUswUSxLQUFLcWEsRUFBVzlOLEVBQU8sRUFBRzlrQixFQUFNKzhCLFVBRXJDalksR0FBZ0I5a0IsRUFBTSs4QixrQkFJZnNPLGdCQUFnQnpZLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPempCLEdBRXJEdXhCLEVBQVU5TixLQUFXdVosVUFBVW9CLGlCQUkvQjNhLEdBRjRCempCLEVBQWdEdXhCLEVBQVUxYSxNQUFNaFksRUFBSzRrQixFQUFPLFNBQWxFOE4sRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sUUFHbEU4TixFQUFVOU4sS0FBVyxNQUVqQmpNLEVBQU8rWixFQUFVMWEsTUFBTWxZLEVBQU1BLE1BQU84a0IsRUFBUSxFQUFHLFFBQVUsU0FFN0Q4TixFQUFVOU4sR0FBZ0IsSUFBUGpNLEVBQ25CK1osRUFBVTlOLEVBQVEsR0FBS2pNLEdBQVEsRUFBSSxJQUNuQytaLEVBQVU5TixFQUFRLEdBQUtqTSxHQUFRLEdBQUssSUFDcEMrWixFQUFVOU4sRUFBUSxHQUFLak0sR0FBUSxHQUFLLElBRXBDaU0sRUFBUUEsRUFBUSxFQUFJak0sRUFBTyxFQUUzQitaLEVBQVU5TixLQUFXLEVBQ2RBLFdBR0F3bUIsZUFBZTFZLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPMkgsRUFBT2dlLEVBQW9CcHBDLEdBRS9FdXhCLEVBQVU5TixLQUFXdVosVUFBVVMsaUJBSS9CaGEsR0FGNEJ6akIsRUFBZ0R1eEIsRUFBVTFhLE1BQU1oWSxFQUFLNGtCLEVBQU8sU0FBbEU4TixFQUFVMWEsTUFBTWhZLEVBQUs0a0IsRUFBTyxRQUdsRThOLEVBQVU5TixLQUFXLE1BRWpCOFksRUFEQUQsRUFBYTdZLEVBRWJtSixFQUFTLENBQ1hrTyxLQUFNbjhCLEVBQU02N0IsWUFBYzc3QixFQUFNc2lDLFVBRWhDbEcsSUFBS3A4QixFQUFNODdCLEtBRUcsTUFBWjk3QixFQUFNKzdCLEtBQVk5TixFQUFPb08sSUFBTXI4QixFQUFNKzdCLFFBSXJDbGpCLEdBRkora0IsRUFBV2dOLGNBQWNoWSxFQUR6QjNFLEVBQVNudEIsT0FBT283QixPQUFPak8sRUFBUWp1QixFQUFNZzhCLFNBQ08sRUFBT2xYLEVBQU8ySCxFQUFRLEVBQUdnZSxJQUUvQzlNLFNBRXRCL0ssRUFBVStLLEtBQXVCLElBQVA5a0IsRUFDMUIrWixFQUFVK0ssS0FBZ0I5a0IsR0FBUSxFQUFJLElBQ3RDK1osRUFBVStLLEtBQWdCOWtCLEdBQVEsR0FBSyxJQUN2QytaLEVBQVUrSyxLQUFnQjlrQixHQUFRLEdBQUssSUFFaEMra0IsV0FHQWdOLGNBQWNoWSxFQUFXd1MsRUFBUW9GLEVBQVdlLEVBQWU5ZSxFQUFPZ2UsRUFBb0JDLEVBQWlCQyxHQUM5R1ksRUFBZ0JBLEdBQWlCLEdBQ2pDWixFQUFPQSxHQUFRLElBRVZ2cEMsS0FBS2drQyxPQUVOdGdCLEVBQVF5bUIsRUFBZ0IsS0FFeEJ2cUMsTUFBTUssUUFBUStqQyxPQUVYLElBQUl0dkIsRUFBSSxFQUFHQSxFQUFJc3ZCLEVBQU9ua0MsT0FBUTZVLElBQUssS0FDbEM1VixFQUFNLEdBQUs0VixFQUNYOVYsRUFBUW9sQyxFQUFPdHZCLE1BRWY5VixHQUFTQSxFQUFNd3JDLE9BQVEsSUFDRyxtQkFBakJ4ckMsRUFBTXdyQyxPQUF1QixNQUFNLElBQUlsMEIsVUFBVSw0QkFDNUR0WCxFQUFRQSxFQUFNd3JDLGFBR1o5akMsRUFBT29oQyxVQUFVOW9DLE1BRVIsV0FBVDBILEVBQ0ZvZCxFQUFReWtCLGdCQUFnQjNXLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ2pELEdBQWEsV0FBVHBkLEVBQ1RvZCxFQUFRMmtCLGdCQUFnQjdXLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ2pELEdBQWEsWUFBVHBkLEVBQ1RvZCxFQUFRK2tCLGlCQUFpQmpYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ2xELEdBQUk5a0IsYUFBaUJtcUIsTUFBUWtmLFNBQVNycEMsR0FDM0M4a0IsRUFBUWdsQixjQUFjbFgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEdBQU8sUUFDL0MsUUFBY25OLElBQVYzWCxFQUNUOGtCLEVBQVE4a0IsY0FBY2hYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQy9DLEdBQWMsT0FBVjlrQixFQUNUOGtCLEVBQVE4a0IsY0FBY2hYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQy9DLEdBQTJCLGFBQXZCOWtCLEVBQUssV0FBdUQsYUFBdkJBLEVBQUssVUFDbkQ4a0IsRUFBUXVsQixrQkFBa0J6WCxFQUFXMXlCLEVBQUtGLEVBQU84a0IsR0FBTyxRQUNuRCxHQUFJaWtCLFNBQVMzd0IsU0FBU3BZLEdBQzNCOGtCLEVBQVF3bEIsZ0JBQWdCMVgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEdBQU8sUUFDakQsR0FBSTlrQixhQUFpQmtzQixRQUFVb2QsV0FBV3RwQyxHQUMvQzhrQixFQUFRa2xCLGdCQUFnQnBYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ2pELEdBQWEsV0FBVHBkLEdBQTJDLE1BQXRCMUgsRUFBSyxVQUNuQzhrQixFQUFReWxCLGdCQUFnQjNYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPMGxCLEVBQVcvZCxFQUFPZ2UsRUFBb0JDLEdBQWlCLEVBQU1DLFFBQzlHLEdBQWEsV0FBVGpqQyxHQUE0QyxlQUF2QjFILEVBQUssVUFDbkM4a0IsRUFBUStsQixvQkFBb0JqWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsR0FBTyxRQUNyRCxHQUEyQixTQUF2QjlrQixFQUFLLFdBQW1ELGNBQXZCQSxFQUFLLFVBQy9DOGtCLEVBQVFnbUIsY0FBY2xZLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQy9DLEdBQTJCLFdBQXZCOWtCLEVBQUssVUFDZDhrQixFQUFRa21CLGdCQUFnQnBZLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ2pELEdBQXFCLG1CQUFWOWtCLEdBQXdCeXFDLEVBQ3hDM2xCLEVBQVFtbUIsa0JBQWtCclksRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU8wbEIsRUFBVy9kLEVBQU9nZSxRQUNyRSxHQUEyQixTQUF2QnpxQyxFQUFLLFVBQ2Q4a0IsRUFBUW9tQixjQUFjdFksRUFBVzF5QixFQUFLRixFQUFPOGtCLEVBQU8wbEIsRUFBVy9kLEVBQU9nZSxFQUFvQkMsR0FBaUIsUUFDdEcsR0FBMkIsV0FBdkIxcUMsRUFBSyxVQUNkOGtCLEVBQVFzbUIsZ0JBQWdCeFksRUFBVzF5QixFQUFLRixFQUFPOGtCLEdBQU8sUUFDakQsR0FBMkIsV0FBdkI5a0IsRUFBSyxVQUNkOGtCLEVBQVF1bUIsZ0JBQWdCelksRUFBVzF5QixFQUFLRixFQUFPOGtCLEdBQU8sUUFDakQsR0FBMkIsVUFBdkI5a0IsRUFBSyxVQUNkOGtCLEVBQVF3bUIsZUFBZTFZLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixFQUFPMkgsRUFBT2dlLEdBQW9CLFFBQzNFLEdBQTJCLGVBQXZCenFDLEVBQUssVUFDZDhrQixFQUFRcWxCLG9CQUFvQnZYLEVBQVcxeUIsRUFBS0YsRUFBTzhrQixHQUFPLFFBQ3JELEdBQTJCLFVBQXZCOWtCLEVBQUssVUFDZDhrQixFQUFRaW1CLGVBQWVuWSxFQUFXMXlCLEVBQUtGLEVBQU84a0IsR0FBTyxRQUNoRCxHQUEyQixXQUF2QjlrQixFQUFLLFdBQXFELFdBQXZCQSxFQUFLLFVBQ2pEOGtCLEVBQVFzbEIsZ0JBQWdCeFgsRUFBVzF5QixFQUFLRixFQUFPOGtCLEdBQU8sUUFDakQsUUFBa0MsSUFBdkI5a0IsRUFBSyxnQkFDZixJQUFJc1gsVUFBVSxzQ0FBd0N0WCxFQUFLLGdCQUdoRSxHQUFJb2xDLGFBQWtCbmxDLFlBQ3ZCaW5CLEVBQVdrZSxFQUFPdmdCLFVBQ2xCRyxHQUFPLEdBRUhBLEdBQU0sS0FFUlAsRUFBUXlDLEVBQVNuQyxZQUNyQkMsRUFBT1AsRUFBTU8sV0FJVHltQixFQUFPaG5CLEVBQU16a0IsTUFBTSxHQUNuQjByQyxFQUFTam5CLEVBQU16a0IsTUFBTSxHQUVyQjJyQyxFQUFRN0MsVUFBVTRDLE1BR0YsaUJBQVRELElBQXNCdEMsV0FBVy9qQixJQUFJcW1CLEdBQU8sSUFDekIsTUFBeEJBLEVBQUsxc0IsTUFBTW1xQixnQkFHUG5wQyxNQUFNLE9BQVMwckMsRUFBTyxtQ0FHMUJqQixFQUFXLElBQ1QsTUFBUWlCLEVBQUssU0FDVDFyQyxNQUFNLE9BQVMwckMsRUFBTyw0QkFDdkIsSUFBS0EsRUFBSzl4QixRQUFRLFdBQ2pCNVosTUFBTSxPQUFTMHJDLEVBQU8sNkJBS3BCLFdBQVZFLEVBQ0Y3bUIsRUFBUXlrQixnQkFBZ0IzVyxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUM1QyxHQUFjLFdBQVY2bUIsRUFDVDdtQixFQUFRMmtCLGdCQUFnQjdXLEVBQVc2WSxFQUFNQyxFQUFRNW1CLFFBQzVDLEdBQWMsWUFBVjZtQixFQUNUN21CLEVBQVEra0IsaUJBQWlCalgsRUFBVzZZLEVBQU1DLEVBQVE1bUIsUUFDN0MsR0FBSTRtQixhQUFrQnZoQixNQUFRa2YsU0FBU3FDLEdBQzVDNW1CLEVBQVFnbEIsY0FBY2xYLEVBQVc2WSxFQUFNQyxFQUFRNW1CLFFBQzFDLEdBQWUsT0FBWDRtQixRQUE4Qi96QixJQUFYK3pCLElBQTRDLElBQXBCaEIsRUFDcEQ1bEIsRUFBUThrQixjQUFjaFgsRUFBVzZZLEVBQU1DLEVBQVE1bUIsUUFDMUMsR0FBNEIsYUFBeEI0bUIsRUFBTSxXQUF3RCxhQUF4QkEsRUFBTSxVQUNyRDVtQixFQUFRdWxCLGtCQUFrQnpYLEVBQVc2WSxFQUFNQyxFQUFRNW1CLFFBQzlDLEdBQUlpa0IsU0FBUzN3QixTQUFTc3pCLEdBQzNCNW1CLEVBQVF3bEIsZ0JBQWdCMVgsRUFBVzZZLEVBQU1DLEVBQVE1bUIsUUFDNUMsR0FBSTRtQixhQUFrQnhmLFFBQVVvZCxXQUFXb0MsR0FDaEQ1bUIsRUFBUWtsQixnQkFBZ0JwWCxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUM1QyxHQUFjLFdBQVY2bUIsR0FBNkMsTUFBdkJELEVBQU0sVUFDckM1bUIsRUFBUXlsQixnQkFBZ0IzWCxFQUFXNlksRUFBTUMsRUFBUTVtQixFQUFPMGxCLEVBQVcvZCxFQUFPZ2UsRUFBb0JDLEdBQWlCLEVBQU9DLFFBQ2pILEdBQWMsV0FBVmdCLEdBQThDLGVBQXhCRCxFQUFNLFVBQ3JDNW1CLEVBQVErbEIsb0JBQW9CalksRUFBVzZZLEVBQU1DLEVBQVE1bUIsUUFDaEQsR0FBNEIsU0FBeEI0bUIsRUFBTSxXQUFvRCxjQUF4QkEsRUFBTSxVQUNqRDVtQixFQUFRZ21CLGNBQWNsWSxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUMxQyxHQUE0QixXQUF4QjRtQixFQUFNLFVBQ2Y1bUIsRUFBUWttQixnQkFBZ0JwWSxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUM1QyxHQUE0QixTQUF4QjRtQixFQUFNLFVBQ2Y1bUIsRUFBUW9tQixjQUFjdFksRUFBVzZZLEVBQU1DLEVBQVE1bUIsRUFBTzBsQixFQUFXL2QsRUFBT2dlLEVBQW9CQyxRQUN2RixHQUFzQixtQkFBWGdCLEdBQXlCakIsRUFDekMzbEIsRUFBUW1tQixrQkFBa0JyWSxFQUFXNlksRUFBTUMsRUFBUTVtQixFQUFPMGxCLEVBQVcvZCxFQUFPZ2UsUUFDdkUsR0FBNEIsV0FBeEJpQixFQUFNLFVBQ2Y1bUIsRUFBUXNtQixnQkFBZ0J4WSxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUM1QyxHQUE0QixXQUF4QjRtQixFQUFNLFVBQ2Y1bUIsRUFBUXVtQixnQkFBZ0J6WSxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUM1QyxHQUE0QixVQUF4QjRtQixFQUFNLFVBQ2Y1bUIsRUFBUXdtQixlQUFlMVksRUFBVzZZLEVBQU1DLEVBQVE1bUIsRUFBTzJILEVBQU9nZSxRQUN6RCxHQUE0QixlQUF4QmlCLEVBQU0sVUFDZjVtQixFQUFRcWxCLG9CQUFvQnZYLEVBQVc2WSxFQUFNQyxFQUFRNW1CLFFBQ2hELEdBQTRCLFVBQXhCNG1CLEVBQU0sVUFDZjVtQixFQUFRaW1CLGVBQWVuWSxFQUFXNlksRUFBTUMsRUFBUTVtQixRQUMzQyxHQUE0QixXQUF4QjRtQixFQUFNLFdBQXNELFdBQXhCQSxFQUFNLFVBQ25ENW1CLEVBQVFzbEIsZ0JBQWdCeFgsRUFBVzZZLEVBQU1DLEVBQVE1bUIsUUFDNUMsUUFBbUMsSUFBeEI0bUIsRUFBTSxnQkFDaEIsSUFBSXAwQixVQUFVLHNDQUF3Q28wQixFQUFNLGdCQUdqRSxJQUVEdEcsRUFBT29HLE9BQVEsSUFDWSxtQkFBbEJwRyxFQUFPb0csT0FBdUIsTUFBTSxJQUFJbDBCLFVBQVUsK0JBRS9DLE9BRGQ4dEIsRUFBU0EsRUFBT29HLFdBQzRCLFdBQXRCMUMsVUFBVTFELEdBQXNCLE1BQU0sSUFBSTl0QixVQUFVLGdEQUl2RSxJQUFJczBCLEtBQVN4RyxFQUFRLEtBQ3BCeUcsRUFBVXpHLEVBQU93RyxNQUVqQkMsR0FBV0EsRUFBUUwsT0FBUSxJQUNDLG1CQUFuQkssRUFBUUwsT0FBdUIsTUFBTSxJQUFJbDBCLFVBQVUsNEJBQzlEdTBCLEVBQVVBLEVBQVFMLGFBSWhCTSxFQUFTaEQsVUFBVStDLE1BR0YsaUJBQVZELElBQXVCekMsV0FBVy9qQixJQUFJd21CLEdBQVEsSUFDMUIsTUFBekJBLEVBQU03c0IsTUFBTW1xQixnQkFHUm5wQyxNQUFNLE9BQVM2ckMsRUFBUSxtQ0FHM0JwQixFQUFXLElBQ1QsTUFBUW9CLEVBQU0sU0FDVjdyQyxNQUFNLE9BQVM2ckMsRUFBUSw0QkFDeEIsSUFBS0EsRUFBTWp5QixRQUFRLFdBQ2xCNVosTUFBTSxPQUFTNnJDLEVBQVEsNkJBS3BCLFdBQVhFLEVBQ0ZobkIsRUFBUXlrQixnQkFBZ0IzVyxFQUFXZ1osRUFBT0MsRUFBUy9tQixRQUM5QyxHQUFlLFdBQVhnbkIsRUFDVGhuQixFQUFRMmtCLGdCQUFnQjdXLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzlDLEdBQWUsWUFBWGduQixFQUNUaG5CLEVBQVEra0IsaUJBQWlCalgsRUFBV2daLEVBQU9DLEVBQVMvbUIsUUFDL0MsR0FBSSttQixhQUFtQjFoQixNQUFRa2YsU0FBU3dDLEdBQzdDL21CLEVBQVFnbEIsY0FBY2xYLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzVDLFFBQWdCbk4sSUFBWmswQixHQUNlLElBQXBCbkIsSUFBMkI1bEIsRUFBUThrQixjQUFjaFgsRUFBV2daLEVBQU9DLEVBQVMvbUIsU0FDM0UsR0FBZ0IsT0FBWittQixFQUNUL21CLEVBQVE4a0IsY0FBY2hYLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzVDLEdBQTZCLGFBQXpCK21CLEVBQU8sV0FBeUQsYUFBekJBLEVBQU8sVUFDdkQvbUIsRUFBUXVsQixrQkFBa0J6WCxFQUFXZ1osRUFBT0MsRUFBUy9tQixRQUNoRCxHQUFJaWtCLFNBQVMzd0IsU0FBU3l6QixHQUMzQi9tQixFQUFRd2xCLGdCQUFnQjFYLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzlDLEdBQUkrbUIsYUFBbUIzZixRQUFVb2QsV0FBV3VDLEdBQ2pEL21CLEVBQVFrbEIsZ0JBQWdCcFgsRUFBV2daLEVBQU9DLEVBQVMvbUIsUUFDOUMsR0FBZSxXQUFYZ25CLEdBQStDLE1BQXhCRCxFQUFPLFVBQ3ZDL21CLEVBQVF5bEIsZ0JBQWdCM1gsRUFBV2daLEVBQU9DLEVBQVMvbUIsRUFBTzBsQixFQUFXL2QsRUFBT2dlLEVBQW9CQyxHQUFpQixFQUFPQyxRQUNuSCxHQUFlLFdBQVhtQixHQUFnRCxlQUF6QkQsRUFBTyxVQUN2Qy9tQixFQUFRK2xCLG9CQUFvQmpZLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQ2xELEdBQTZCLFNBQXpCK21CLEVBQU8sV0FBcUQsY0FBekJBLEVBQU8sVUFDbkQvbUIsRUFBUWdtQixjQUFjbFksRUFBV2daLEVBQU9DLEVBQVMvbUIsUUFDNUMsR0FBNkIsV0FBekIrbUIsRUFBTyxVQUNoQi9tQixFQUFRa21CLGdCQUFnQnBZLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzlDLEdBQTZCLFNBQXpCK21CLEVBQU8sVUFDaEIvbUIsRUFBUW9tQixjQUFjdFksRUFBV2daLEVBQU9DLEVBQVMvbUIsRUFBTzBsQixFQUFXL2QsRUFBT2dlLEVBQW9CQyxRQUN6RixHQUF1QixtQkFBWm1CLEdBQTBCcEIsRUFDMUMzbEIsRUFBUW1tQixrQkFBa0JyWSxFQUFXZ1osRUFBT0MsRUFBUy9tQixFQUFPMGxCLEVBQVcvZCxFQUFPZ2UsUUFDekUsR0FBNkIsV0FBekJvQixFQUFPLFVBQ2hCL21CLEVBQVFzbUIsZ0JBQWdCeFksRUFBV2daLEVBQU9DLEVBQVMvbUIsUUFDOUMsR0FBNkIsV0FBekIrbUIsRUFBTyxVQUNoQi9tQixFQUFRdW1CLGdCQUFnQnpZLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzlDLEdBQTZCLFVBQXpCK21CLEVBQU8sVUFDaEIvbUIsRUFBUXdtQixlQUFlMVksRUFBV2daLEVBQU9DLEVBQVMvbUIsRUFBTzJILEVBQU9nZSxRQUMzRCxHQUE2QixlQUF6Qm9CLEVBQU8sVUFDaEIvbUIsRUFBUXFsQixvQkFBb0J2WCxFQUFXZ1osRUFBT0MsRUFBUy9tQixRQUNsRCxHQUE2QixVQUF6QittQixFQUFPLFVBQ2hCL21CLEVBQVFpbUIsZUFBZW5ZLEVBQVdnWixFQUFPQyxFQUFTL21CLFFBQzdDLEdBQTZCLFdBQXpCK21CLEVBQU8sV0FBdUQsV0FBekJBLEVBQU8sVUFDckQvbUIsRUFBUXNsQixnQkFBZ0J4WCxFQUFXZ1osRUFBT0MsRUFBUy9tQixRQUM5QyxRQUFvQyxJQUF6QittQixFQUFPLGdCQUNqQixJQUFJdjBCLFVBQVUsc0NBQXdDdTBCLEVBQU8sWUFNekVsQixFQUFLcGMsTUFFTHFFLEVBQVU5TixLQUFXLE1BRWpCak0sRUFBT2lNLEVBQVF5bUIsU0FFbkIzWSxFQUFVMlksS0FBMEIsSUFBUDF5QixFQUM3QitaLEVBQVUyWSxLQUFtQjF5QixHQUFRLEVBQUksSUFDekMrWixFQUFVMlksS0FBbUIxeUIsR0FBUSxHQUFLLElBQzFDK1osRUFBVTJZLEtBQW1CMXlCLEdBQVEsR0FBSyxJQUNuQ2lNLE1BR0xpbkIsV0FBYW5CLHVCQUVSb0IsVUFBVXJyQyxVQUFrRnFyQyxVQUFyRCxtQkFBWDF1QixRQUFvRCxXQUEzQjJKLFFBQU8zSixPQUFPNEosVUFBcUMsU0FBaUJ2bUIsa0JBQXFCQSxJQUE2QixTQUFpQkEsVUFBY0EsR0FBeUIsbUJBQVgyYyxRQUF5QjNjLEVBQUlDLGNBQWdCMGMsUUFBVTNjLElBQVEyYyxPQUFPdmMsVUFBWSxpQkFBa0JKLEtBQTJCQSxPQUU1VnNyQyxTQUFXenpCLE9BQU83QixPQUNsQnUxQiwyQkFBNkJ6aUIsTUFBTU4sa0NBRTlCZ2pCLFNBQVM1YyxTQUNRLFdBQWpCeWMsVUFBVXpjLElBQXlELGtCQUF0Q3p1QixPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUtzWixZQUc1RDZjLG9CQUFvQmhILEVBQVFxRixFQUFvQkMsT0FDbkQyQixFQUFjLEtBRWRyckMsTUFBTUssUUFBUStqQyxPQUNYLElBQUl0dkIsRUFBSSxFQUFHQSxFQUFJc3ZCLEVBQU9ua0MsT0FBUTZVLElBQ2pDdTJCLEdBQWVDLGlCQUFpQngyQixFQUFFZ0QsV0FBWXNzQixFQUFPdHZCLEdBQUkyMEIsR0FBb0IsRUFBTUMsWUFTaEYsSUFBSXhxQyxLQUxMa2xDLEVBQU9vRyxTQUNUcEcsRUFBU0EsRUFBT29HLFVBSUZwRyxFQUNkaUgsR0FBZUMsaUJBQWlCcHNDLEVBQUtrbEMsRUFBT2xsQyxHQUFNdXFDLEdBQW9CLEVBQU9DLFVBSTFFMkIsV0FRQUMsaUJBQWlCaHJDLEVBQU10QixFQUFPeXFDLEVBQW9CcHBDLEVBQVNxcEMsVUFFOUQxcUMsR0FBU0EsRUFBTXdyQyxTQUNqQnhyQyxFQUFRQSxFQUFNd3JDLFVBR1JRLFVBQVVoc0MsUUFDWCxnQkFDSSxFQUFJaXNDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLEVBQUkycUMsU0FBU3YwQixXQUFXMVgsRUFBTyxRQUFVLE1BRXpGLGdCQUNDK2IsS0FBS2lHLE1BQU1oaUIsS0FBV0EsR0FBU0EsR0FBU3ErQixVQUFVTSxZQUFjMytCLEdBQVNxK0IsVUFBVUssWUFDakYxK0IsR0FBU3ErQixVQUFVRSxnQkFBa0J2K0IsR0FBU3ErQixVQUFVQyxnQkFFMUMsTUFBUmg5QixFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLE1BTWpELE1BQVJBLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksU0FHOUQsbUJBQ0NELElBQVlxcEMsR0FBaUMsTUFBUnBwQyxFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLEdBQUssRUFDOUYsTUFFSixpQkFDYSxNQUFSQSxFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLFNBRTVELFlBQ1UsTUFBVHRCLEdBQXdDLFdBQXZCQSxFQUFLLFdBQXFELFdBQXZCQSxFQUFLLGlCQUMzQyxNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLLEVBQy9ELEdBQTJCLGFBQXZCdEIsRUFBSyxXQUF1RCxhQUF2QkEsRUFBSyxpQkFDbkMsTUFBUnNCLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksTUFDMUQsR0FBSXRCLGFBQWlCbXFCLE1BQVFnaUIsU0FBU25zQyxVQUMzQixNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxLQUMxRCxRQUF3QixJQUFiMnFDLFVBQTRCQSxTQUFTN3pCLFNBQVNwWSxVQUM5QyxNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxLQUFtQnRCLEVBQU1pQixPQUNuRixHQUEyQixTQUF2QmpCLEVBQUssV0FBbUQsV0FBdkJBLEVBQUssV0FBcUQsY0FBdkJBLEVBQUssaUJBQ2xFLE1BQVJzQixFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLEtBQzFELEdBQTJCLGVBQXZCdEIsRUFBSyxpQkFDRSxNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxNQUMxRCxHQUEyQixTQUF2QnRCLEVBQUssaUJBRUssTUFBZkEsRUFBTXkwQixPQUFtRCxFQUFsQzN6QixPQUFPdWtCLEtBQUtybEIsRUFBTXkwQixPQUFPeHpCLFFBQ2xDLE1BQVJLLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksR0FBSyxFQUFJLEVBQUksRUFBSTJxQyxTQUFTdjBCLFdBQVcxWCxFQUFNb2pCLEtBQUt0SyxXQUFZLFFBQVUsRUFBSXN6QixvQkFBb0Jwc0MsRUFBTXkwQixNQUFPZ1csRUFBb0JDLElBRTlLLE1BQVJwcEMsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLLEVBQUksRUFBSTJxQyxTQUFTdjBCLFdBQVcxWCxFQUFNb2pCLEtBQUt0SyxXQUFZLFFBQVUsRUFFOUgsR0FBMkIsV0FBdkI5WSxFQUFLLGlCQUVWQSxFQUFNNjhCLFdBQWF1QixPQUFPTCxvQkFDWixNQUFSejhCLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksSUFBTXRCLEVBQU0rOEIsU0FBVyxFQUFJLEVBQUksRUFBSSxJQUVsRixNQUFSejdCLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksSUFBTXRCLEVBQU0rOEIsU0FBVyxFQUFJLEVBQUksR0FFM0YsR0FBMkIsV0FBdkIvOEIsRUFBSyxpQkFDRSxNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLMnFDLFNBQVN2MEIsV0FBVzFYLEVBQU1BLE1BQU8sUUFBVSxFQUFJLEVBQUksRUFDbEgsR0FBMkIsVUFBdkJBLEVBQUssVUFZVCxPQUFJQSxhQUFpQmtzQixRQUFvRCxvQkFBMUNwckIsT0FBT0MsVUFBVStYLFNBQVM3QyxLQUFLalcsSUFDbkQsTUFBUnNCLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksR0FBSyxFQUFJMnFDLFNBQVN2MEIsV0FBVzFYLEVBQU1taUMsT0FBUSxRQUFVLEdBQUtuaUMsRUFBTXVXLE9BQVMsRUFBSSxJQUFNdlcsRUFBTWlxQyxXQUFhLEVBQUksSUFBTWpxQyxFQUFNa3FDLFVBQVksRUFBSSxHQUFLLEVBQzFLLGVBQXZCbHFDLEVBQUssV0FDRSxNQUFSc0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLLEVBQUkycUMsU0FBU3YwQixXQUFXMVgsRUFBTXN6QixRQUFTLFFBQVUsRUFBSTJZLFNBQVN2MEIsV0FBVzFYLEVBQU0wbEIsUUFBUyxRQUFVLEdBRXRKLE1BQVJwa0IsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLOHFDLG9CQUFvQnBzQyxFQUFPeXFDLEVBQW9CQyxHQUFtQixNQWZsSTZCLEVBQWlCenJDLE9BQU9vN0IsT0FBTyxDQUNqQ0MsS0FBTW44QixFQUFNNjdCLFdBQ1pPLElBQUtwOEIsRUFBTTg3QixLQUNWOTdCLEVBQU1nOEIsZUFFTyxNQUFaaDhCLEVBQU0rN0IsS0FDUndRLEVBQWMsSUFBVXZzQyxFQUFNKzdCLEtBR2hCLE1BQVJ6NkIsRUFBZTJxQyxTQUFTdjBCLFdBQVdwVyxFQUFNLFFBQVUsRUFBSSxHQUFLLEVBQUk4cUMsb0JBQW9CRyxFQUFnQjlCLEVBQW9CQyxPQVMvSCxjQUVDMXFDLGFBQWlCa3NCLFFBQW9ELG9CQUExQ3ByQixPQUFPQyxVQUFVK1gsU0FBUzdDLEtBQUtqVyxJQUF1RCxvQkFBdkJhLE9BQU9vVixLQUFLalcsVUFDeEYsTUFBUnNCLEVBQWUycUMsU0FBU3YwQixXQUFXcFcsRUFBTSxRQUFVLEVBQUksR0FBSyxFQUFJMnFDLFNBQVN2MEIsV0FBVzFYLEVBQU1taUMsT0FBUSxRQUFVLEdBQUtuaUMsRUFBTXVXLE9BQVMsRUFBSSxJQUFNdlcsRUFBTWlxQyxXQUFhLEVBQUksSUFBTWpxQyxFQUFNa3FDLFVBQVksRUFBSSxHQUFLLEtBRXRNTyxHQUFxQyxNQUFmenFDLEVBQU15MEIsT0FBbUQsRUFBbEMzekIsT0FBT3VrQixLQUFLcmxCLEVBQU15MEIsT0FBT3h6QixjQUN4RCxNQUFSSyxFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLEdBQUssRUFBSSxFQUFJLEVBQUkycUMsU0FBU3YwQixXQUFXdzBCLDJCQUEyQmxzQyxHQUFRLFFBQVUsRUFBSW9zQyxvQkFBb0Jwc0MsRUFBTXkwQixNQUFPZ1csRUFBb0JDLEdBQ3JNLEdBQUlELFNBQ08sTUFBUm5wQyxFQUFlMnFDLFNBQVN2MEIsV0FBV3BXLEVBQU0sUUFBVSxFQUFJLEdBQUssRUFBSSxFQUFJMnFDLFNBQVN2MEIsV0FBV3cwQiwyQkFBMkJsc0MsR0FBUSxRQUFVLFNBTTlJLE1BR0x3c0MsZUFBaUJKLG9CQUVqQkssU0FBV2owQixPQUFPN0IsT0FVbEIrMUIsY0FBZ0IsU0FBc0JDLE1BQ3BDQSxhQUEyQkYsZ0JBQ3RCRSxLQUdMQSxhQUEyQjMxQixrQkFDdEJ5MUIsU0FBU3IxQixLQUFLdTFCLEVBQWdCbjBCLGNBR2pDLElBQUlsQixVQUFVLHlDQUdsQnMxQixTQUFXcDBCLE9BQU83QixPQU9sQmsyQixRQUFVLFNBRVZDLFNBQVdGLFNBQVM3dkIsTUFBTTh2QixrQkFRckJFLHNCQUFzQmwwQixHQUV6QmkwQixTQUFTN3JDLE9BQVM0WCxJQUNwQmkwQixTQUFXRixTQUFTN3ZCLE1BQU1sRSxhQWNyQm0wQixZQUFZNUgsRUFBUTFmLE9BR3ZCOGtCLEVBQXlDLGtCQUY3QzlrQixFQUFVQSxHQUFXLElBRVU4a0IsV0FBMEI5a0IsRUFBUThrQixVQUM3REMsRUFBMkQsa0JBQS9CL2tCLEVBQVEra0Isb0JBQW1DL2tCLEVBQVEra0IsbUJBQy9FQyxFQUFxRCxrQkFBNUJobEIsRUFBUWdsQixpQkFBZ0NobEIsRUFBUWdsQixnQkFDekV1QyxFQUFpRSxpQkFBbEN2bkIsRUFBUXVuQixzQkFBcUN2bkIsRUFBUXVuQixzQkFBd0JKLFFBRTVHQyxTQUFTN3JDLE9BQVNnc0MsSUFDcEJILFNBQVdGLFNBQVM3dkIsTUFBTWt3QixRQUl4QkMsRUFBcUJuQixXQUFXZSxTQUFVMUgsRUFBUW9GLEVBQVcsRUFBRyxFQUFHQyxFQUFvQkMsRUFBaUIsSUFFeEd5QyxFQUFpQlAsU0FBUzd2QixNQUFNbXdCLFVBRXBDSixTQUFTdjBCLEtBQUs0MEIsRUFBZ0IsRUFBRyxFQUFHQSxFQUFlbHNDLFFBRTVDa3NDLFdBZUFDLDRCQUE0QmhJLEVBQVFpSSxFQUFhM25CLE9BR3BEOGtCLEVBQXlDLGtCQUY3QzlrQixFQUFVQSxHQUFXLElBRVU4a0IsV0FBMEI5a0IsRUFBUThrQixVQUM3REMsRUFBMkQsa0JBQS9CL2tCLEVBQVEra0Isb0JBQW1DL2tCLEVBQVEra0IsbUJBQy9FQyxFQUFxRCxrQkFBNUJobEIsRUFBUWdsQixpQkFBZ0NobEIsRUFBUWdsQixnQkFDekUvTSxFQUFzQyxpQkFBbEJqWSxFQUFRWixNQUFxQlksRUFBUVosTUFBUSxFQUVqRW9vQixFQUFxQm5CLFdBQVdlLFNBQVUxSCxFQUFRb0YsRUFBVyxFQUFHLEVBQUdDLEVBQW9CQyxVQUMzRm9DLFNBQVN2MEIsS0FBSzgwQixFQUFhMVAsRUFBWSxFQUFHdVAsR0FFbkN2UCxFQUFhdVAsRUFBcUIsV0FtQmxDSSxjQUFjMWEsRUFBV2xOLFVBQ2hDa04sRUFBWThaLGNBQWM5WixHQUNuQmtWLGFBQWFsVixFQUFXbE4sWUFZeEI2bkIsc0JBQXNCbkksRUFBUTFmLE9BRWpDK2tCLEVBQTJELGtCQUQvRC9rQixFQUFVQSxHQUFXLElBQ21CK2tCLG9CQUFtQy9rQixFQUFRK2tCLG1CQUMvRUMsRUFBcUQsa0JBQTVCaGxCLEVBQVFnbEIsaUJBQWdDaGxCLEVBQVFnbEIsdUJBQ3RFOEIsZUFBZXBILEVBQVFxRixFQUFvQkMsWUF1QjNDOEMsa0JBQWtCM2xDLEVBQU04MUIsRUFBWThQLEVBQW1CQyxFQUFXQyxFQUFlam9CLEdBQ3hGQSxFQUFVNWtCLE9BQU9vN0IsT0FBTyxDQUN0QnNJLGtDQUFrQyxHQUNqQzllLEdBQ0g3ZCxFQUFPNmtDLGNBQWM3a0MsV0FDakJpZCxFQUFRNlksRUFFSDduQixFQUFJLEVBQUdBLEVBQUkyM0IsRUFBbUIzM0IsSUFBSyxLQUV0QytDLEVBQU9oUixFQUFLaWQsR0FBU2pkLEVBQUtpZCxFQUFRLElBQU0sRUFBSWpkLEVBQUtpZCxFQUFRLElBQU0sR0FBS2pkLEVBQUtpZCxFQUFRLElBQU0sR0FFM0ZZLEVBQVFaLE1BQVFBLEVBRWhCNG9CLEVBQVVDLEVBQWdCNzNCLEdBQUtneUIsYUFBYWpnQyxFQUFNNmQsR0FFbERaLEdBQWdCak0sU0FJWGlNLE1BR0x5YyxLQUFPLENBR1RqRCxlQUFnQkQsVUFBVUMsZUFDMUJDLGVBQWdCRixVQUFVRSxlQUMxQkMsZUFBZ0JILFVBQVVHLGVBQzFCQyxlQUFnQkosVUFBVUksZUFDMUJDLFdBQVlMLFVBQVVLLFdBQ3RCQyxXQUFZTixVQUFVTSxXQUN0QkMsaUJBQWtCUCxVQUFVTyxpQkFDNUJDLGlCQUFrQlIsVUFBVVEsaUJBQzVCQyxpQkFBa0JULFVBQVVTLGlCQUM1QkMsZ0JBQWlCVixVQUFVVSxnQkFDM0JDLGlCQUFrQlgsVUFBVVcsaUJBQzVCQyxvQkFBcUJaLFVBQVVZLG9CQUMvQkMsY0FBZWIsVUFBVWEsY0FDekJDLGtCQUFtQmQsVUFBVWMsa0JBQzdCQyxlQUFnQmYsVUFBVWUsZUFDMUJDLGVBQWdCaEIsVUFBVWdCLGVBQzFCQyxpQkFBa0JqQixVQUFVaUIsaUJBQzVCQyxvQkFBcUJsQixVQUFVa0Isb0JBQy9CQyxlQUFnQm5CLFVBQVVtQixlQUMxQkMsaUJBQWtCcEIsVUFBVW9CLGlCQUM1QkMsdUJBQXdCckIsVUFBVXFCLHVCQUNsQ0MsY0FBZXRCLFVBQVVzQixjQUN6QkMsb0JBQXFCdkIsVUFBVXVCLG9CQUMvQkMsZUFBZ0J4QixVQUFVd0IsZUFDMUJDLHFCQUFzQnpCLFVBQVV5QixxQkFDaENDLGtCQUFtQjFCLFVBQVUwQixrQkFDN0JDLGtCQUFtQjNCLFVBQVUyQixrQkFDN0JsRCw0QkFBNkJ1QixVQUFVdkIsNEJBQ3ZDbUQsNkJBQThCNUIsVUFBVTRCLDZCQUN4Q0MsK0JBQWdDN0IsVUFBVTZCLCtCQUMxQ0MseUJBQTBCOUIsVUFBVThCLHlCQUNwQ0Msd0JBQXlCL0IsVUFBVStCLHdCQUNuQ0MsaUNBQWtDaEMsVUFBVWdDLGlDQUU1QzdMLEtBQU1wUixLQUNOa0IsSUFBS3JrQixJQUNMMnpCLFdBQVlFLE9BQ1o4SCxNQUFPVSxPQUNQSyxPQUFReUIsT0FDUnhNLFNBQVVtQixTQUNWd1AsS0FBTXRjLE9BQ05rQyxVQUFXWSxVQUNYbkMsT0FBUUcsU0FDUm1OLE1BQU9FLE9BQ1A0RyxPQUFRRSxRQUNSSSxPQUFRRSxRQUNSbkksV0FBWUcsT0FDWjhELFdBQVlzRCxXQUVaMEcsVUFBVzBMLFlBQ1hJLDRCQUE2QkEsNEJBQzdCNUwsWUFBYThMLGNBQ2JsQixvQkFBcUJtQixzQkFDckJDLGtCQUFtQkEsa0JBQ25CVCxzQkFBdUJBLHNCQUV2QmxLLFNBQVU5UCxTQUVWNmEsTUFBT3pLLGVBRUwwSyxPQUFTdE0sS0FBS2pELGVBQ2R3UCxPQUFTdk0sS0FBS2hELGVBQ2R3UCxPQUFTeE0sS0FBSy9DLGVBQ2R3UCxPQUFTek0sS0FBSzlDLGVBQ2R3UCxPQUFTMU0sS0FBSzdDLFdBQ2R3UCxPQUFTM00sS0FBSzVDLFdBQ2R3UCxPQUFTNU0sS0FBSzNDLGlCQUNkd1AsT0FBUzdNLEtBQUsxQyxpQkFDZHdQLE9BQVM5TSxLQUFLekMsaUJBQ2R3UCxRQUFVL00sS0FBS3hDLGdCQUNmd1AsUUFBVWhOLEtBQUt2QyxpQkFDZndQLFFBQVVqTixLQUFLdEMsb0JBQ2Z3UCxRQUFVbE4sS0FBS3JDLGNBQ2Z3UCxRQUFVbk4sS0FBS3BDLGtCQUNmd1AsUUFBVXBOLEtBQUtuQyxlQUNmd1AsUUFBVXJOLEtBQUtsQyxlQUNmd1AsUUFBVXROLEtBQUtqQyxpQkFDZndQLFFBQVV2TixLQUFLaEMsb0JBQ2Z3UCxRQUFVeE4sS0FBSy9CLGVBQ2Z3UCxRQUFVek4sS0FBSzlCLGlCQUNmd1AsUUFBVTFOLEtBQUs3Qix1QkFDZndQLFFBQVUzTixLQUFLNUIsY0FDZndQLFFBQVU1TixLQUFLM0Isb0JBQ2Z3UCxRQUFVN04sS0FBSzFCLGVBQ2Z3UCxRQUFVOU4sS0FBS3pCLHFCQUNmd1AsUUFBVS9OLEtBQUt4QixrQkFDZndQLFFBQVVoTyxLQUFLdkIsa0JBQ2Z3UCxRQUFVak8sS0FBS3pFLDRCQUNmMlMsUUFBVWxPLEtBQUt0Qiw2QkFDZnlQLFFBQVVuTyxLQUFLckIsK0JBQ2Z5UCxRQUFVcE8sS0FBS3BCLHlCQUNmeVAsUUFBVXJPLEtBQUtuQix3QkFDZnlQLFFBQVV0TyxLQUFLbEIsaUNBQ2Z5UCxRQUFVdk8sS0FBSy9NLEtBQ2Z1YixRQUFVeE8sS0FBSzNOLFdBQ2ZvYyxRQUFVek8sS0FBSzNGLE1BQ2ZxVSxRQUFVMU8sS0FBSzVFLE9BQ2Z1VCxRQUFVM08sS0FBSzNQLFNBQ2Z1ZSxRQUFVNU8sS0FBS2dCLEtBQ2Y2TixRQUFVN08sS0FBS3BaLFVBQ2Zrb0IsUUFBVTlPLEtBQUszYSxPQUNmMHBCLFFBQVUvTyxLQUFLck4sTUFDZnFjLFFBQVVoUCxLQUFLdkcsT0FDZndWLFFBQVVqUCxLQUFLakcsT0FDZm1WLFFBQVVsUCxLQUFLbE8sV0FDZnFkLFFBQVVuUCxLQUFLakssV0FDZnFaLFFBQVVwUCxLQUFLRCxVQUNmc1AsUUFBVXJQLEtBQUs2TCw0QkFDZnlELFFBQVV0UCxLQUFLQyxZQUNmc1AsUUFBVXZQLEtBQUs2SyxvQkFDZjJFLFFBQVV4UCxLQUFLaU0sa0JBQ2Z3RCxRQUFVelAsS0FBS3dMLHNCQUNma0UsUUFBVTFQLEtBQUtzQixTQUNmcU8sUUFBVTNQLEtBQUtxTSxNQUVuQmg0QixnQkFBa0IyckIsS0FDbEIzckIsUUFBUTBvQixlQUFpQnVQLE9BQ3pCajRCLFFBQVEyb0IsZUFBaUJ1UCxPQUN6Qmw0QixRQUFRNG9CLGVBQWlCdVAsT0FDekJuNEIsUUFBUTZvQixlQUFpQnVQLE9BQ3pCcDRCLFFBQVE4b0IsV0FBYXVQLE9BQ3JCcjRCLFFBQVErb0IsV0FBYXVQLE9BQ3JCdDRCLFFBQVFncEIsaUJBQW1CdVAsT0FDM0J2NEIsUUFBUWlwQixpQkFBbUJ1UCxPQUMzQng0QixRQUFRa3BCLGlCQUFtQnVQLE9BQzNCejRCLFFBQVFtcEIsZ0JBQWtCdVAsUUFDMUIxNEIsUUFBUW9wQixpQkFBbUJ1UCxRQUMzQjM0QixRQUFRcXBCLG9CQUFzQnVQLFFBQzlCNTRCLFFBQVFzcEIsY0FBZ0J1UCxRQUN4Qjc0QixRQUFRdXBCLGtCQUFvQnVQLFFBQzVCOTRCLFFBQVF3cEIsZUFBaUJ1UCxRQUN6Qi80QixRQUFReXBCLGVBQWlCdVAsUUFDekJoNUIsUUFBUTBwQixpQkFBbUJ1UCxRQUMzQmo1QixRQUFRMnBCLG9CQUFzQnVQLFFBQzlCbDVCLFFBQVE0cEIsZUFBaUJ1UCxRQUN6Qm41QixRQUFRNnBCLGlCQUFtQnVQLFFBQzNCcDVCLFFBQVE4cEIsdUJBQXlCdVAsUUFDakNyNUIsUUFBUStwQixjQUFnQnVQLFFBQ3hCdDVCLFFBQVFncUIsb0JBQXNCdVAsUUFDOUJ2NUIsUUFBUWlxQixlQUFpQnVQLFFBQ3pCeDVCLFFBQVFrcUIscUJBQXVCdVAsUUFDL0J6NUIsUUFBUW1xQixrQkFBb0J1UCxRQUM1QjE1QixRQUFRb3FCLGtCQUFvQnVQLFFBQzVCMzVCLFFBQVFrbkIsNEJBQThCMFMsUUFDdEM1NUIsUUFBUXFxQiw2QkFBK0J3UCxRQUN2Qzc1QixRQUFRc3FCLCtCQUFpQ3dQLFFBQ3pDOTVCLFFBQVF1cUIseUJBQTJCd1AsUUFDbkMvNUIsUUFBUXdxQix3QkFBMEJ3UCxRQUNsQ2g2QixRQUFReXFCLGlDQUFtQ3dQLFFBQzNDajZCLFFBQVE0ZSxLQUFPc2IsUUFDZmw2QixRQUFRZ2UsV0FBYW1jLFFBQ3JCbjZCLFFBQVFnbUIsTUFBUW9VLFFBQ2hCcDZCLFFBQVErbUIsT0FBU3NULFFBQ2pCcjZCLFFBQVFnYyxTQUFXc2UsUUFDbkJ0NkIsUUFBUTJzQixLQUFPNE4sUUFDZnY2QixRQUFRdVMsVUFBWWlvQixRQUNwQng2QixRQUFRZ1IsT0FBU3lwQixRQUNqQno2QixRQUFRc2UsTUFBUW9jLFFBQ2hCMTZCLFFBQVFvbEIsT0FBU3VWLFFBQ2pCMzZCLFFBQVEwbEIsT0FBU2tWLFFBQ2pCNTZCLFFBQVF5ZCxXQUFhb2QsUUFDckI3NkIsUUFBUTBoQixXQUFhb1osUUFDckI5NkIsUUFBUTByQixVQUFZcVAsUUFDcEIvNkIsUUFBUXczQiw0QkFBOEJ3RCxRQUN0Q2g3QixRQUFRNHJCLFlBQWNxUCxRQUN0Qmo3QixRQUFRdzJCLG9CQUFzQjBFLFFBQzlCbDdCLFFBQVE0M0Isa0JBQW9CdUQsUUFDNUJuN0IsUUFBUW0zQixzQkFBd0JpRSxRQUNoQ3A3QixRQUFRaXRCLFNBQVdvTyxRQUNuQnI3QixRQUFRZzRCLE1BQVFzRCxRQUVoQnB3QyxPQUFPMGMsZUFBZTVILFFBQVMsYUFBYyxDQUFFNVYsT0FBTyxLQXZ2TDlDOGpCLEdBQVFsTyxRQUFTSCxvQkFBb0IsR0FBSUEsb0JBQW9CLE1BMnZMekNRLEtBQUtMLFFBQVNILG9CQUFvQixHQUFJQSxvQkFBb0IsR0FBR2tCLGtCQUkxRWQsRUFBUUQsRUFBU0gsR0FLakNHLEVBQVE4QixvQkF1Q2F5NUIsT0FDZkMsRUFBT0MsRUFBUUYsR0FDZkcsRUFBV0YsRUFBSyxHQUNoQkcsRUFBa0JILEVBQUssVUFDWSxHQUE5QkUsRUFBV0MsR0FBdUIsRUFBS0EsR0ExQ2xEMzdCLEVBQVErTixxQkFpRGN3dEIsT0FDaEJLLEVBY0ExN0IsRUFiQXM3QixFQUFPQyxFQUFRRixHQUNmRyxFQUFXRixFQUFLLEdBQ2hCRyxFQUFrQkgsRUFBSyxHQUV2QnYzQixFQUFNLElBQUk0M0IsV0FWTU4sRUFBS0csRUFBVUMsVUFDSSxHQUE5QkQsRUFBV0MsR0FBdUIsRUFBS0EsRUFTOUJHLENBQVlQLEVBQUtHLEVBQVVDLElBRXpDSSxFQUFVLEVBR1Z0NUIsRUFBd0IsRUFBbEJrNUIsRUFDTkQsRUFBVyxFQUNYQSxNQUdDeDdCLEVBQUksRUFBR0EsRUFBSXVDLEVBQUt2QyxHQUFLLEVBQ3hCMDdCLEVBQ0dJLEVBQVVULEVBQUlqMkIsV0FBV3BGLEtBQU8sR0FDaEM4N0IsRUFBVVQsRUFBSWoyQixXQUFXcEYsRUFBSSxLQUFPLEdBQ3BDODdCLEVBQVVULEVBQUlqMkIsV0FBV3BGLEVBQUksS0FBTyxFQUNyQzg3QixFQUFVVCxFQUFJajJCLFdBQVdwRixFQUFJLElBQy9CK0QsRUFBSTgzQixLQUFjSCxHQUFPLEdBQU0sSUFDL0IzM0IsRUFBSTgzQixLQUFjSCxHQUFPLEVBQUssSUFDOUIzM0IsRUFBSTgzQixLQUFtQixJQUFOSCxFQUdLLElBQXBCRCxJQUNGQyxFQUNHSSxFQUFVVCxFQUFJajJCLFdBQVdwRixLQUFPLEVBQ2hDODdCLEVBQVVULEVBQUlqMkIsV0FBV3BGLEVBQUksS0FBTyxFQUN2QytELEVBQUk4M0IsS0FBbUIsSUFBTkgsR0FHSyxJQUFwQkQsSUFDRkMsRUFDR0ksRUFBVVQsRUFBSWoyQixXQUFXcEYsS0FBTyxHQUNoQzg3QixFQUFVVCxFQUFJajJCLFdBQVdwRixFQUFJLEtBQU8sRUFDcEM4N0IsRUFBVVQsRUFBSWoyQixXQUFXcEYsRUFBSSxLQUFPLEVBQ3ZDK0QsRUFBSTgzQixLQUFjSCxHQUFPLEVBQUssSUFDOUIzM0IsRUFBSTgzQixLQUFtQixJQUFOSCxVQUdaMzNCLEdBM0ZUakUsRUFBUWlHLHVCQWtIZ0JnMkIsV0FDbEJMLEVBQ0FuNUIsRUFBTXc1QixFQUFNNXdDLE9BQ1o2d0MsRUFBYXo1QixFQUFNLEVBQ25Cd2QsRUFBUSxHQUlIL2YsRUFBSSxFQUFHaThCLEVBQU8xNUIsRUFBTXk1QixFQUFZaDhCLEVBQUlpOEIsRUFBTWo4QixHQUg5QixNQUluQitmLEVBQU16MEIsS0FBSzR3QyxFQUNUSCxFQUFPLzdCLEVBQTBCaThCLEVBQXRCajhCLEVBTE0sTUFLdUJpOEIsRUFBUWo4QixFQUwvQixRQVVGLEdBQWZnOEIsR0FDRk4sRUFBTUssRUFBTXg1QixFQUFNLEdBQ2xCd2QsRUFBTXowQixLQUNKNndDLEVBQU9ULEdBQU8sR0FDZFMsRUFBUVQsR0FBTyxFQUFLLElBQ3BCLE9BRXNCLEdBQWZNLElBQ1ROLEdBQU9LLEVBQU14NUIsRUFBTSxJQUFNLEdBQUt3NUIsRUFBTXg1QixFQUFNLEdBQzFDd2QsRUFBTXowQixLQUNKNndDLEVBQU9ULEdBQU8sSUFDZFMsRUFBUVQsR0FBTyxFQUFLLElBQ3BCUyxFQUFRVCxHQUFPLEVBQUssSUFDcEIsYUFJRzNiLEVBQU03VyxLQUFLLGFBaEpoQml6QixFQUFTLEdBQ1RMLEVBQVksR0FDWkgsRUFBNEIsb0JBQWZ6NkIsV0FBNkJBLFdBQWFoVyxNQUV2RG9pQixFQUFPLG1FQUNGdE4sRUFBSSxFQUFHdUMsRUFBTStLLEVBQUtuaUIsT0FBUTZVLEVBQUl1QyxJQUFPdkMsRUFDNUNtOEIsRUFBT244QixHQUFLc04sRUFBS3ROLEdBQ2pCODdCLEVBQVV4dUIsRUFBS2xJLFdBQVdwRixJQUFNQSxXQVF6QnU3QixFQUFTRixPQUNaOTRCLEVBQU04NEIsRUFBSWx3QyxVQUVBLEVBQVZvWCxFQUFNLFFBQ0YsSUFBSXRZLE1BQU0sc0RBS2R1eEMsRUFBV0gsRUFBSXgzQixRQUFRLFlBQ1QsSUFBZDIzQixJQUFpQkEsRUFBV2o1QixHQU16QixDQUFDaTVCLEVBSmNBLElBQWFqNUIsRUFDL0IsRUFDQSxFQUFLaTVCLEVBQVcsWUFzRWJVLEVBQWFILEVBQU9sMkIsRUFBT0MsV0FDOUI0MUIsRUFSb0JVLEVBU3BCamtCLEVBQVMsR0FDSm5ZLEVBQUk2RixFQUFPN0YsRUFBSThGLEVBQUs5RixHQUFLLEVBQ2hDMDdCLEdBQ0lLLEVBQU0vN0IsSUFBTSxHQUFNLFdBQ2xCKzdCLEVBQU0vN0IsRUFBSSxJQUFNLEVBQUssUUFDUCxJQUFmKzdCLEVBQU0vN0IsRUFBSSxJQUNibVksRUFBTzdzQixLQWRGNndDLEdBRGlCQyxFQWVNVixJQWRULEdBQUssSUFDeEJTLEVBQU9DLEdBQU8sR0FBSyxJQUNuQkQsRUFBT0MsR0FBTyxFQUFJLElBQ2xCRCxFQUFhLEdBQU5DLFdBYUZqa0IsRUFBT2pQLEtBQUssSUFqR3JCNHlCLEVBQVUsSUFBSTEyQixXQUFXLElBQU0sR0FDL0IwMkIsRUFBVSxJQUFJMTJCLFdBQVcsSUFBTSxhQXlJZnJGLEVBQVFELEdBRXhCQSxFQUFRcUUsS0FBTyxTQUFVekIsRUFBUWdDLEVBQVEyM0IsRUFBTWxLLEVBQU1DLE9BQy9DN3hCLEVBQUdpRCxFQUNIOHVCLEVBQWlCLEVBQVRGLEVBQWNELEVBQU8sRUFDN0JJLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsR0FBUyxFQUNUenlCLEVBQUlxOEIsRUFBUWpLLEVBQVMsRUFBSyxFQUMxQjNZLEVBQUk0aUIsR0FBUSxFQUFJLEVBQ2hCM00sRUFBSWh0QixFQUFPZ0MsRUFBUzFFLE9BRXhCQSxHQUFLeVosRUFFTGxaLEVBQUltdkIsR0FBTSxJQUFPK0MsR0FBVSxFQUMzQi9DLEtBQVErQyxFQUNSQSxHQUFTSCxFQUNNLEVBQVJHLEVBQVdseUIsRUFBUyxJQUFKQSxFQUFXbUMsRUFBT2dDLEVBQVMxRSxHQUFJQSxHQUFLeVosRUFBR2daLEdBQVMsT0FFdkVqdkIsRUFBSWpELEdBQU0sSUFBT2t5QixHQUFVLEVBQzNCbHlCLEtBQVFreUIsRUFDUkEsR0FBU04sRUFDTSxFQUFSTSxFQUFXanZCLEVBQVMsSUFBSkEsRUFBV2QsRUFBT2dDLEVBQVMxRSxHQUFJQSxHQUFLeVosRUFBR2daLEdBQVMsTUFFN0QsSUFBTmx5QixFQUNGQSxFQUFJLEVBQUlpeUIsTUFDSCxDQUFBLEdBQUlqeUIsSUFBTWd5QixTQUNSL3VCLEVBQUlrdkIsSUFBc0Iva0IsRUFBQUEsR0FBZCtoQixHQUFLLEVBQUksR0FFNUJsc0IsR0FBUXlDLEtBQUttRixJQUFJLEVBQUcrbUIsR0FDcEI1eEIsR0FBUWl5QixTQUVGOUMsR0FBSyxFQUFJLEdBQUtsc0IsRUFBSXlDLEtBQUttRixJQUFJLEVBQUc3SyxFQUFJNHhCLElBRzVDcnlCLEVBQVFzQyxNQUFRLFNBQVVNLEVBQVF4WSxFQUFPd2EsRUFBUTIzQixFQUFNbEssRUFBTUMsT0FDdkQ3eEIsRUFBR2lELEVBQUdnQyxFQUNOOHNCLEVBQWlCLEVBQVRGLEVBQWNELEVBQU8sRUFDN0JJLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkssRUFBZSxLQUFUVCxFQUFjbHNCLEtBQUttRixJQUFJLEdBQUksSUFBTW5GLEtBQUttRixJQUFJLEdBQUksSUFBTSxFQUMxRHBMLEVBQUlxOEIsRUFBTyxFQUFLakssRUFBUyxFQUN6QjNZLEVBQUk0aUIsRUFBTyxHQUFLLEVBQ2hCM00sRUFBSXhsQyxFQUFRLEdBQWdCLElBQVZBLEdBQWUsRUFBSUEsRUFBUSxFQUFLLEVBQUksTUFFMURBLEVBQVErYixLQUFLNHNCLElBQUkzb0MsR0FFYnlaLE1BQU16WixJQUFVQSxJQUFVeWpCLEVBQUFBLEdBQzVCbkssRUFBSUcsTUFBTXpaLEdBQVMsRUFBSSxFQUN2QnFXLEVBQUlneUIsSUFFSmh5QixFQUFJMEYsS0FBS2lHLE1BQU1qRyxLQUFLb1UsSUFBSW53QixHQUFTK2IsS0FBSzZzQixLQUNsQzVvQyxHQUFTc2IsRUFBSVMsS0FBS21GLElBQUksR0FBSTdLLElBQU0sSUFDbENBLElBQ0FpRixHQUFLLEdBT1UsSUFKZnRiLEdBRGUsR0FBYnFXLEVBQUlpeUIsRUFDR0ksRUFBS3B0QixFQUVMb3RCLEVBQUszc0IsS0FBS21GLElBQUksRUFBRyxFQUFJb25CLElBRXBCaHRCLElBQ1ZqRixJQUNBaUYsR0FBSyxHQUdVK3NCLEdBQWJoeUIsRUFBSWl5QixHQUNOaHZCLEVBQUksRUFDSmpELEVBQUlneUIsR0FDa0IsR0FBYmh5QixFQUFJaXlCLEdBQ2JodkIsR0FBTXRaLEVBQVFzYixFQUFLLEdBQUtTLEtBQUttRixJQUFJLEVBQUcrbUIsR0FDcEM1eEIsR0FBUWl5QixJQUVSaHZCLEVBQUl0WixFQUFRK2IsS0FBS21GLElBQUksRUFBR29uQixFQUFRLEdBQUt2c0IsS0FBS21GLElBQUksRUFBRyttQixHQUNqRDV4QixFQUFJLElBSU8sR0FBUjR4QixFQUFXenZCLEVBQU9nQyxFQUFTMUUsR0FBUyxJQUFKd0QsRUFBVXhELEdBQUt5WixFQUFHalcsR0FBSyxJQUFLMnVCLEdBQVEsT0FFM0U1eEIsRUFBS0EsR0FBSzR4QixFQUFRM3VCLEVBQ2xCOHVCLEdBQVFILEVBQ00sRUFBUEcsRUFBVTV2QixFQUFPZ0MsRUFBUzFFLEdBQVMsSUFBSk8sRUFBVVAsR0FBS3laLEVBQUdsWixHQUFLLElBQUsreEIsR0FBUSxHQUUxRTV2QixFQUFPZ0MsRUFBUzFFLEVBQUl5WixJQUFVLElBQUppVyxhQU1aM3ZCLEVBQVFELE9BRXBCa0QsRUFBVyxHQUFHQSxTQUVsQmpELEVBQU9ELFFBQVU1VSxNQUFNSyxTQUFXLFNBQVV3WSxTQUNiLGtCQUF0QmYsRUFBUzdDLEtBQUs0RCxjQU1QaEUsRUFBUUQsR0FFeEJDLEVBQU9ELFFBQVUyc0IsTUFLYjZQLEVBQU8sU0FHVEEsRUFBTyxJQUFJQyxZQUFZQyxTQUFTLElBQUlELFlBQVlFLE9BQU8sSUFBSXY3QixXQUFXLENBQ3BFLEVBQUcsR0FBSSxJQUFLLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLElBQUssSUFBSyxJQUFLLEVBQUcsSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxJQUFLLElBQUssSUFBSyxFQUFHLEVBQUcsRUFBRyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssRUFBRyxFQUFHLEVBQUcsSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLEVBQUcsRUFBRyxFQUFHLElBQUssSUFBSyxJQUFLLEdBQUksSUFBSyxFQUFHLEVBQUcsRUFBRyxJQUFLLElBQUssSUFBSyxHQUFJLElBQUssRUFBRyxFQUFHLEVBQUcsSUFBSyxJQUFLLElBQUssR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLEVBQUcsRUFBRyxHQUFJLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxJQUFLLEdBQUksRUFBRyxHQUFJLEdBQUksSUFBSyxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLElBQUssR0FBSSxHQUFJLElBQUssSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxJQUFLLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksR0FBSSxFQUFHLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsSUFBSyxHQUFJLEdBQUksSUFBSyxJQUFLLEdBQUksRUFBRyxJQUFLLEdB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
